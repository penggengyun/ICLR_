[
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Adaptive Nutrient Dosing\n- **Safety Level**: SIL 1\n- **Complexity**: Advanced\n- **Industrial_Category**: Bioprocess Control\n- **Generation**: 6 (late)\n- **Branch**: interoperability\n- **Summary**: Bioreactor dissolved oxygen cascade control with remote command interface for SCADA/MES integration\n\n## Control Objective\nMaintain dissolved oxygen at 30% setpoint with emergency stop safety, valve cycling protection, agitator soft-start, and remote command capability for supervisory control systems.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold (30% setpoint)\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (normally-closed, fail-safe)\n- **BIO_REMOTE_CMD_WORD**: WORD - Remote command word from SCADA/MES (bit 0=Start, bit 1=Stop, bit 2=Reset Counter)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n- **AGITATOR_MOTOR_RPM_MODE**: BOOL - Agitator motor speed mode (0=reduced, 1=full)\n- **BIO_STATUS_WORD**: WORD - Packed status word for SCADA integration\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n- **SPARGE_VALVE_CYCLE_COUNT**: UINT - Oxygen sparge valve activation cycles\n- **SPARGE_VALVE_MIN_ON_TIMER**: TON - Minimum valve on-time (2 seconds)\n- **AGITATOR_SOFT_START_TIMER**: TON - Soft-start timer for agitator motor (5 seconds)\n- **BIO_REMOTE_START_CMD**: BOOL - Remote start command (bit 0 of command word)\n- **BIO_REMOTE_STOP_CMD**: BOOL - Remote stop command (bit 1 of command word)\n- **BIO_REMOTE_RESET_CMD**: BOOL - Remote counter reset command (bit 2 of command word)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 3 (+0) | Internals: 7 (+3)`\n\n### New Items This Gen (must respect SEP)\n- BIO_REMOTE_CMD_WORD (Input, WORD)\n- BIO_REMOTE_START_CMD (Internal, BOOL)\n- BIO_REMOTE_STOP_CMD (Internal, BOOL)\n- BIO_REMOTE_RESET_CMD (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control through sparge valve modulation and agitator speed control. The remote command word BIO_REMOTE_CMD_WORD is decoded using bitwise AND operations: bit 0 (value 1) sets BIO_REMOTE_START_CMD, bit 1 (value 2) sets BIO_REMOTE_STOP_CMD, and bit 2 (value 4) sets BIO_REMOTE_RESET_CMD. Remote start and stop commands are integrated into the control logic but are gated by the emergency stop status BIO_E_STOP_OK to ensure local safety priority. The remote reset command clears the sparge valve cycle counter when activated. The status word BIO_STATUS_WORD continues to provide system status to SCADA systems.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND ((DO_SENSOR_HIGH OR NOT SPARGE_VALVE_MIN_ON_TIMER.Q) OR BIO_REMOTE_START_CMD) AND NOT BIO_REMOTE_STOP_CMD;\nAGITATOR_MOTOR_RPM_MODE := BIO_E_STOP_OK AND (AGITATOR_SOFT_START_TIMER.Q OR BIO_REMOTE_START_CMD) AND NOT BIO_REMOTE_STOP_CMD;\nIF BIO_REMOTE_RESET_CMD THEN SPARGE_VALVE_CYCLE_COUNT := 0;\n\n## Safety Requirements\n- Emergency stop (BIO_E_STOP_NC) must always override all remote commands\n- Remote commands require local safety permissives (BIO_E_STOP_OK) to be effective\n- Valve cycling protection remains active regardless of remote commands\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| BIO_REMOTE_CMD_WORD | WORD | R/W | Remote command word (bit0=Start, bit1=Stop, bit2=Reset) | - | 1 Hz |\n| BIO_STATUS_WORD | WORD | R | System status word | - | 1 Hz |\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen status | - | 1 Hz |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | - | 1 Hz |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Sparge valve status | - | 1 Hz |\n| AGITATOR_MOTOR_RPM_MODE | BOOL | R | Agitator speed mode | - | 1 Hz |\n\n## Verification Requirements\n### Test Scenarios\n1. **Remote Start Command**: Set BIO_REMOTE_CMD_WORD bit 0 to 1 with BIO_E_STOP_OK TRUE → OXYGEN_SPARGE_VALVE and AGITATOR_MOTOR_RPM_MODE should activate\n2. **Remote Stop Override**: Set BIO_REMOTE_CMD_WORD bit 1 to 1 with system running → OXYGEN_SPARGE_VALVE and AGITATOR_MOTOR_RPM_MODE should deactivate\n3. **Safety Priority**: Set BIO_REMOTE_CMD_WORD bit 0 to 1 with BIO_E_STOP_OK FALSE → System should remain stopped despite remote command\n4. **Counter Reset**: Set BIO_REMOTE_CMD_WORD bit 2 to 1 → SPARGE_VALVE_CYCLE_COUNT should reset to 0\n\n## Change Log\n- **BIO_REMOTE_CMD_WORD**: WORD / Purpose: Receive remote commands from SCADA/MES / Compatibility: Bitwise decoding\n- **BIO_REMOTE_START_CMD**: BOOL / Purpose: Decoded remote start command / Compatibility: AND-gated with safety\n- **BIO_REMOTE_STOP_CMD**: BOOL / Purpose: Decoded remote stop command / Compatibility: Safety override capable\n- **BIO_REMOTE_RESET_CMD**: BOOL / Purpose: Decoded counter reset command / Compatibility: Direct counter control\n\n## Self-check Summary\n- **Minimalism**: 8/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 3, Internals: 4\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 7\n- **SEP delta cap**: PASS (late phase allows 2 new items, added 1 input + 3 internals)\n- **Non-decreasing**: PASS (all counts increased or maintained)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (DO_SENSOR_HIGH OR NOT SPARGE_VALVE_MIN_ON_TIMER.Q)\n- **This Gen**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND ((DO_SENSOR_HIGH OR NOT SPARGE_VALVE_MIN_ON_TIMER.Q) OR BIO_REMOTE_START_CMD) AND NOT BIO_REMOTE_STOP_CMD\n- **Not Equivalent**: The new logic includes OR BIO_REMOTE_START_CMD and AND NOT BIO_REMOTE_STOP_CMD terms, making it functionally different\n\n**Domain Keywords**: bioreactor, dissolved oxygen, pharmaceutical, SCADA, remote command, cascade control, nutrient dosing",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold (30% setpoint) *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (normally-closed, fail-safe) *)\n    BIO_REMOTE_CMD_WORD : WORD; (* Remote command word from SCADA/MES (bit 0=Start, bit 1=Stop, bit 2=Reset Counter) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\n    AGITATOR_MOTOR_RPM_MODE : BOOL; (* Agitator motor speed mode (0=reduced, 1=full) *)\n    BIO_STATUS_WORD : WORD; (* Packed status word for SCADA integration *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\n    SPARGE_VALVE_CYCLE_COUNT : UINT; (* Oxygen sparge valve activation cycles *)\n    SPARGE_VALVE_MIN_ON_TIMER : TON; (* Minimum valve on-time (2 seconds) *)\n    AGITATOR_SOFT_START_TIMER : TON; (* Soft-start timer for agitator motor (5 seconds) *)\n    BIO_REMOTE_START_CMD : BOOL; (* Remote start command (bit 0 of command word) *)\n    BIO_REMOTE_STOP_CMD : BOOL; (* Remote stop command (bit 1 of command word) *)\n    BIO_REMOTE_RESET_CMD : BOOL; (* Remote counter reset command (bit 2 of command word) *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Remote command word decoding *)\nBIO_REMOTE_START_CMD := (BIO_REMOTE_CMD_WORD AND 1) <> 0;\nBIO_REMOTE_STOP_CMD := (BIO_REMOTE_CMD_WORD AND 2) <> 0;\nBIO_REMOTE_RESET_CMD := (BIO_REMOTE_CMD_WORD AND 4) <> 0;\n\n(* Counter reset logic *)\nIF BIO_REMOTE_RESET_CMD THEN\n    SPARGE_VALVE_CYCLE_COUNT := 0;\nEND_IF;\n\n(* Main control logic *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND ((DO_SENSOR_HIGH OR NOT SPARGE_VALVE_MIN_ON_TIMER.Q) OR BIO_REMOTE_START_CMD) AND NOT BIO_REMOTE_STOP_CMD;\nAGITATOR_MOTOR_RPM_MODE := BIO_E_STOP_OK AND (AGITATOR_SOFT_START_TIMER.Q OR BIO_REMOTE_START_CMD) AND NOT BIO_REMOTE_STOP_CMD;\n\n(* Timer function blocks *)\nSPARGE_VALVE_MIN_ON_TIMER(IN := OXYGEN_SPARGE_VALVE, PT := T#2S);\nAGITATOR_SOFT_START_TIMER(IN := AGITATOR_MOTOR_RPM_MODE, PT := T#5S);\n\n(* Valve cycle counting *)\nIF OXYGEN_SPARGE_VALVE AND NOT SPARGE_VALVE_MIN_ON_TIMER.Q THEN\n    SPARGE_VALVE_CYCLE_COUNT := SPARGE_VALVE_CYCLE_COUNT + 1;\nEND_IF;\n\n(* Status word generation - basic implementation *)\nBIO_STATUS_WORD := 0;\nIF BIO_E_STOP_OK THEN\n    BIO_STATUS_WORD := BIO_STATUS_WORD OR 1;\nEND_IF;\nIF OXYGEN_SPARGE_VALVE THEN\n    BIO_STATUS_WORD := BIO_STATUS_WORD OR 2;\nEND_IF;\nIF AGITATOR_MOTOR_RPM_MODE THEN\n    BIO_STATUS_WORD := BIO_STATUS_WORD OR 4;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_0_safety_maintenance_performance_contextual_complication_interoperability_interoperability_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CPF-Alarm-Suppression-System\n- **Location**: Main Control Room, Chemical Processing Facility\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 4 (mid)\n- **Branch**: contextual_complication\n- **Summary**: Dynamic alarm flood suppression system with stabilization timer to prevent rapid state changes during borderline flood conditions\n\n## Control Objective\nImplement dynamic alarm flood suppression with adjustable sensitivity, manual override, and stabilization period to prevent rapid toggling during borderline flood events\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from monitoring system\n- **PROCESS_UNIT_CRITICALITY_MODE**: BOOL - Threshold sensitivity mode selector (TRUE = high sensitivity, FALSE = normal)\n- **SUPPRESSION_MANUAL_OVERRIDE**: BOOL - Manual override switch for immediate suppression activation\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression logic\n- **Flood_Suppression_Active**: BOOL - Status indicator light for suppression state\n\n### Internals (CUMULATIVE)\n- **Alarm_Rate_Threshold**: INT - Configurable threshold for flood detection (alarms/minute)\n- **Current_Alarm_Rate**: INT - Real-time alarm arrival rate (alarms/minute)\n- **Suppression_Stabilization_Timer**: TON - 5-second timer for flood state stabilization\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 2 (+0) | Internals: 3 (+1)`\n\n### New Items This Gen (must respect SEP)\n- **Suppression_Stabilization_Timer**: Internal, TON\n\n## Control Logic Description\nThe system monitors alarm arrival rates and activates suppression when thresholds are exceeded. A new 5-second stabilization timer prevents rapid toggling of suppression state during borderline flood conditions. Suppression activates when both flood detection is TRUE and the stabilization timer completes, unless manual override is active which bypasses the timer. The timer resets immediately when flood conditions subside. Critical safety alarms remain unsuppressed regardless of flood state or manual override.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold))\nWHERE Alarm_Rate_Threshold := IF PROCESS_UNIT_CRITICALITY_MODE THEN 10 ELSE 15\nAND Suppression_Stabilization_Timer(IN:=FLOOD_DETECTED, PT:=T#5s)\n\n## Safety Requirements\n- Critical safety alarms must never be suppressed under any circumstances\n- System defaults to suppression OFF on power-up or communication loss\n- Manual override must immediately activate suppression regardless of timer state\n- Timer must reset immediately when flood conditions subside\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| PROCESS_UNIT_CRITICALITY_MODE | BOOL | R/W | Sensitivity mode selector | High/Normal | 5s |\n| SUPPRESSION_MANUAL_OVERRIDE | BOOL | R/W | Manual override control | On/Off | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Suppression active status | On/Off | 1s |\n| Flood_Suppression_Active | BOOL | R | Status indicator | On/Off | 1s |\n| Alarm_Rate_Threshold | INT | R/W | Flood detection threshold | alarms/min | 30s |\n| Current_Alarm_Rate | INT | R | Current alarm rate | alarms/min | 1s |\n| Suppression_Stabilization_Timer_ET | TIME | R | Timer elapsed time | seconds | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Borderline Flood Stability**: FLOOD_DETECTED oscillates near threshold → Suppression should remain stable for 5s after initial detection\n2. **Manual Override Bypass**: SUPPRESSION_MANUAL_OVERRIDE = TRUE → Suppression activates immediately regardless of timer\n3. **Timer Reset**: FLOOD_DETECTED goes FALSE → Timer resets immediately\n4. **Critical Alarm Protection**: Critical safety alarms → Never suppressed regardless of suppression state\n\n## Change Log\n- **Suppression_Stabilization_Timer**: TON / Purpose: Prevent rapid toggling during borderline flood conditions / Compatibility: Backward compatible with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 2\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 3\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (3→3, 2→2, 2→3)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := SUPPRESSION_MANUAL_OVERRIDE OR (Current_Alarm_Rate > Alarm_Rate_Threshold) FOR 30s\n- **This Gen**: ALARM_SUPPRESSION := SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold))\n- **Not Equivalent**: Timer condition adds stabilization period that parent lacked\n\n**Domain Keywords**: alarm flood, suppression, stabilization, chemical processing, EEMUA 191, ISA 18.2",
  "output": "PROGRAM CPF_Alarm_Suppression_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from monitoring system *)\n    PROCESS_UNIT_CRITICALITY_MODE : BOOL; (* Threshold sensitivity mode selector (TRUE = high sensitivity, FALSE = normal) *)\n    SUPPRESSION_MANUAL_OVERRIDE : BOOL; (* Manual override switch for immediate suppression activation *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression logic *)\n    Flood_Suppression_Active : BOOL; (* Status indicator light for suppression state *)\nEND_VAR\nVAR\n    Alarm_Rate_Threshold : INT; (* Configurable threshold for flood detection (alarms/minute) *)\n    Current_Alarm_Rate : INT; (* Real-time alarm arrival rate (alarms/minute) *)\n    Suppression_Stabilization_Timer : TON; (* 5-second timer for flood state stabilization *)\nEND_VAR\n\n(* Calculate alarm rate threshold based on criticality mode *)\nIF PROCESS_UNIT_CRITICALITY_MODE THEN\n    Alarm_Rate_Threshold := 10;\nELSE\n    Alarm_Rate_Threshold := 15;\nEND_IF;\n\n(* Stabilization timer - prevents rapid toggling during borderline flood conditions *)\nSuppression_Stabilization_Timer(IN := FLOOD_DETECTED, PT := T#5S);\n\n(* Main suppression logic with manual override and stabilization timer *)\nALARM_SUPPRESSION := SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold));\n\n(* Status indicator mirrors suppression state *)\nFlood_Suppression_Active := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_5_contextual_complication_functionality_functionality_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Pharmaceutical Production Facility\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Basic oxygen sparging control with emergency stop safety interlock for bioreactor operation\n\n## Control Objective\nMaintain dissolved oxygen levels in bioreactor through oxygen sparging control with integrated emergency stop safety functionality\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen sensor indicates level above 30% setpoint threshold\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for bioreactor area safety shutdown\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop status (TRUE when emergency stop is not activated)\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BIO_E_STOP_NC (Input, BOOL)\n- BIO_E_STOP_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system controls oxygen sparging based on dissolved oxygen levels with integrated safety override. The emergency stop button (normally-closed contact) provides immediate shutdown capability. BIO_E_STOP_OK is derived directly from BIO_E_STOP_NC input (TRUE when safe). The oxygen sparge valve is enabled only when both the dissolved oxygen sensor indicates high level AND the emergency stop system is in safe state. The safety permissive takes absolute precedence over functional control logic.\n\n**Formal Logic Expression**: \nBIO_E_STOP_OK := BIO_E_STOP_NC;\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\n\n## Safety Requirements\n- Emergency stop must immediately override all functional control logic\n- System must default to safe state (output OFF) on power-up or safety fault\n- Safety permissive must be derived directly from safety input without filtering\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen above threshold | On/Off | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| BIO_E_STOP_OK | BOOL | R | Emergency stop safe status | On/Off | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen sparge valve control | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_SENSOR_HIGH = TRUE, BIO_E_STOP_NC = TRUE → OXYGEN_SPARGE_VALVE = TRUE\n2. **Emergency Stop Activation**: DO_SENSOR_HIGH = TRUE, BIO_E_STOP_NC = FALSE → OXYGEN_SPARGE_VALVE = FALSE\n3. **Low Oxygen Normal**: DO_SENSOR_HIGH = FALSE, BIO_E_STOP_NC = TRUE → OXYGEN_SPARGE_VALVE = FALSE\n4. **Power-up Condition**: System initializes with OXYGEN_SPARGE_VALVE = FALSE regardless of input states\n\n## Change Log\n- **BIO_E_STOP_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: Direct replacement for physical NC contact\n- **BIO_E_STOP_OK**: BOOL / Purpose: Safety status indicator / Compatibility: Derived from BIO_E_STOP_NC\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new item)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := DO_SENSOR_HIGH\n- **This Gen**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\n- **Not Equivalent**: The new equation includes a safety permissive that can override the functional logic\n\n**Domain Keywords**: bioreactor, pharmaceutical, oxygen sparging, dissolved oxygen, emergency stop, safety interlock",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen sensor indicates level above 30% setpoint threshold *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for bioreactor area safety shutdown *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when emergency stop is not activated) *)\nEND_VAR\n\n(* Safety logic - highest priority *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Main control logic - safety permissive takes absolute precedence *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_0_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Reactor_Area_Alarm_System\n- **Location**: Chemical_Processing_Plant_Reactor_Bay\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Advanced\n- **Industrial_Category**: Process Control\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm flood suppression with safety interlocks, stabilization timing, fault history logging, and restoration delay\n\n## Control Objective\nImplement emergency stop and safety door interlock functionality with stabilization timer to disable alarm suppression during safety-critical situations, while adding restoration delay to prevent rapid mode switching when alarm flood conditions subside\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **TON_Alarm_Suppression_Stabilize**: TON - Timer for alarm suppression stabilization\n- **ALARM_SUPPRESSION_FAULT_HISTORY**: ARRAY[0..4] OF DINT - Circular buffer storing last 5 fault codes\n- **TOF_Alarm_Restoration_Delay**: TOF - Timer for delaying alarm restoration after flood condition ends\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 6 (+1)`\n\n### New Items This Gen (must respect SEP)\n- TOF_Alarm_Restoration_Delay (Internal, TOF)\n\n## Control Logic Description\nThe system monitors alarm rates and safety interlocks to manage alarm flood suppression. Emergency stop and safety door status are normalized to safe status signals. The combined safety permissive must be true for any alarm suppression functionality. When high alarm rate is detected and the system is safe, a 5-second stabilization timer activates to prevent rapid mode switching. A new TOF timer provides a 3-second delay before restoring alarms after the flood condition ends, ensuring system stability. Alarm suppression remains active either during the stabilization period or until the restoration delay completes. Safety signals override all operational logic immediately with no filtering or delay.\n\n**Formal Logic Expression**: \nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC; E_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC; SAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK; TON_Alarm_Suppression_Stabilize(IN:=High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT:=T#5S); TOF_Alarm_Restoration_Delay(IN:=NOT High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT:=T#3S); Alarm_Suppression_Active := (TON_Alarm_Suppression_Stabilize.Q OR NOT TOF_Alarm_Restoration_Delay.Q) AND SAFE_TO_OPERATE\n\n## Safety Requirements\n- Emergency stop and safety door interlocks disable alarm suppression immediately when activated\n- Safety signals override all operational logic with no filtering or delay\n- Safety permissive (SAFE_TO_OPERATE) must be true for any alarm suppression functionality\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate exceeds threshold | Boolean | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop button status | Boolean | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Reactor safety door status | Boolean | 100ms |\n| Alarm_Suppression_Active | BOOL | R/W | Alarm flood suppression mode active | Boolean | 1s |\n| E_STOP_ALARM_AREA_OK | BOOL | R | Emergency stop safe status | Boolean | 100ms |\n| REACTOR_GUARD_DOOR_OK | BOOL | R | Safety door safe status | Boolean | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Combined safety permissive | Boolean | 100ms |\n| TON_Alarm_Suppression_Stabilize_Q | BOOL | R | Stabilization timer active | Boolean | 100ms |\n| TOF_Alarm_Restoration_Delay_Q | BOOL | R | Restoration delay timer active | Boolean | 100ms |\n| ALARM_SUPPRESSION_FAULT_HISTORY | ARRAY | R | Fault history buffer | DINT | 5s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High_Alarm_Rate_Detected=1, SAFE_TO_OPERATE=1 → Alarm_Suppression_Active activates after 5s delay\n2. **Safety Violation**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=0 → Alarm_Suppression_Active=0 immediately\n3. **Flood Condition Ends**: High_Alarm_Rate_Detected transitions 1→0 with SAFE_TO_OPERATE=1 → Alarm_Suppression_Active remains active for 3s then deactivates\n4. **Rapid Condition Changes**: High_Alarm_Rate_Detected toggling rapidly → Alarm_Suppression_Active maintains stable state due to timing logic\n\n## Change Log\n- **TOF_Alarm_Restoration_Delay**: TOF / Purpose: Add 3-second delay before restoring alarms after flood condition ends / Compatibility: Maintains all existing functionality while adding restoration stability\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 5\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 6\n- **SEP delta cap**: PASS (1 TOF + 0 other variables)\n- **Non-decreasing**: PASS (inputs: 3→3, outputs: 1→1, internals: 5→6)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE\n- **This Gen**: Alarm_Suppression_Active := (TON_Alarm_Suppression_Stabilize.Q OR NOT TOF_Alarm_Restoration_Delay.Q) AND SAFE_TO_OPERATE\n- **Not Equivalent**: True - new equation includes restoration delay logic\n\n**Domain Keywords**: chemical processing, alarm management, flood suppression, safety interlocks, reactor area, SCADA, timing logic",
  "output": "PROGRAM Reactor_Area_Alarm_System\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    TON_Alarm_Suppression_Stabilize : TON; (* Timer for alarm suppression stabilization *)\n    TOF_Alarm_Restoration_Delay : TOF; (* Timer for delaying alarm restoration after flood condition ends *)\n    ALARM_SUPPRESSION_FAULT_HISTORY : ARRAY[0..4] OF DINT; (* Circular buffer storing last 5 fault codes *)\nEND_VAR\n\n(* Safety chain logic - highest priority *)\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Operational logic - alarm suppression timing *)\nTON_Alarm_Suppression_Stabilize(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#5S);\nTOF_Alarm_Restoration_Delay(IN := NOT High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#3S);\n\n(* Final output determination with safety override *)\nAlarm_Suppression_Active := (TON_Alarm_Suppression_Stabilize.Q OR NOT TOF_Alarm_Restoration_Delay.Q) AND SAFE_TO_OPERATE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_0_safety_safety_contextual_complication_performance_maintenance_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B\n- **Control Type**: Safety-monitored cascade control\n- **Safety Level**: SIL 2\n- **Complexity**: Intermediate\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 6 (late)\n- **Branch**: safety\n- **Summary**: Bioreactor dissolved oxygen control with safety monitoring and agitator cycle time watchdog\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with safety reset requirement, SCADA status reporting, and agitator cycle time monitoring to prevent mechanical overstress\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control\n- **BioReact_Reset_Req**: BOOL - Manual reset request button after safety trip\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n- **BioReact_Heartbeat**: BOOL - 1Hz toggling heartbeat signal for external monitoring\n- **BioReact_Status_Word**: WORD - Packed status word containing key bioreactor states for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total agitator activation cycles for maintenance\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n- **Safety_Tripped**: BOOL - Latched safety trip state requiring manual reset\n- **Heartbeat_Timer**: TON - Timer instance for generating 1Hz heartbeat signal\n- **Heartbeat_State**: BOOL - Internal state tracking for heartbeat toggle\n- **Max_Agitator_Cycle_TON**: TON - Watchdog timer for agitator maximum cycle time monitoring\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 3 (+0) | Internals: 6 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Max_Agitator_Cycle_TON (Internal, TON)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when DO falls below 40% saturation, provided the fermenter is enabled and no safety conditions are tripped. A safety latch requires manual reset after any trip condition. A 1Hz heartbeat provides external monitoring capability, and a status word packs key states for SCADA systems. The new agitator cycle time watchdog monitors continuous agitator operation and trips safety if the agitator runs beyond the maximum allowed duration of 30 minutes, preventing mechanical overstress.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped AND NOT Max_Agitator_Cycle_TON.Q\nSafety_Tripped := NOT Fermenter_Enable OR (Safety_Tripped AND NOT BioReact_Reset_Req) OR Max_Agitator_Cycle_TON.Q\nBioReact_Heartbeat := Heartbeat_State (toggled every 500ms)\nBioReact_Status_Word := (AGITATOR_ON << 0) OR (Safety_Tripped << 1) OR (DO_LOW << 2) OR (Fermenter_Enable << 3) OR (Max_Agitator_Cycle_TON.Q << 4)\n\n## Safety Requirements\n- Safety conditions must immediately override all operational logic\n- Manual reset required to clear safety trip conditions\n- Agitator must not operate continuously beyond 30 minutes to prevent mechanical damage\n- Safety status must be visible to operators via status word\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen below 40% | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| BioReact_Reset_Req | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator motor status | On/Off | 100ms |\n| BioReact_Heartbeat | BOOL | R | System heartbeat | On/Off | 1s |\n| BioReact_Status_Word | WORD | R | Packed status information | Hex | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=1, Safety_Tripped=0\n2. **Safety Trip**: Fermenter_Enable=0 → AGITATOR_ON=0, Safety_Tripped=1\n3. **Manual Reset**: Safety_Tripped=1, BioReact_Reset_Req=1 → Safety_Tripped=0 (when Fermenter_Enable=1)\n4. **Cycle Time Trip**: AGITATOR_ON=1 for 30+ minutes → Safety_Tripped=1, AGITATOR_ON=0\n5. **Status Word Verification**: Verify all bits correspond to correct states in status word\n\n## Change Log\n- **Max_Agitator_Cycle_TON**: TON / Purpose: Agitator maximum cycle time watchdog / Compatibility: Extends safety monitoring without affecting existing functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 3, Internals: 5\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 6\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped AND NOT Max_Agitator_Cycle_TON.Q\n- **Not Equivalent**: True (added time-based safety condition)\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, safety, watchdog, SIL2",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control *)\n    BioReact_Reset_Req : BOOL; (* Manual reset request button after safety trip *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\n    BioReact_Heartbeat : BOOL; (* 1Hz toggling heartbeat signal for external monitoring *)\n    BioReact_Status_Word : WORD; (* Packed status word containing key bioreactor states for SCADA monitoring *)\nEND_VAR\nVAR\n    Agitator_Cycle_Count : UINT; (* Total agitator activation cycles for maintenance *)\n    Agitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\n    Safety_Tripped : BOOL; (* Latched safety trip state requiring manual reset *)\n    Heartbeat_Timer : TON; (* Timer instance for generating 1Hz heartbeat signal *)\n    Heartbeat_State : BOOL; (* Internal state tracking for heartbeat toggle *)\n    Max_Agitator_Cycle_TON : TON; (* Watchdog timer for agitator maximum cycle time monitoring *)\nEND_VAR\n\n(* Safety chain logic - highest priority *)\nSafety_Tripped := NOT Fermenter_Enable OR (Safety_Tripped AND NOT BioReact_Reset_Req) OR Max_Agitator_Cycle_TON.Q;\n\n(* Agitator cycle time watchdog - monitors continuous operation *)\nMax_Agitator_Cycle_TON(IN := AGITATOR_ON, PT := T#30M);\n\n(* Main operational logic *)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped AND NOT Max_Agitator_Cycle_TON.Q;\n\n(* Agitator cycle counting *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\nIF Agitator_R_TRIG.Q THEN\n    Agitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\n\n(* Heartbeat generation *)\nHeartbeat_Timer(IN := TRUE, PT := T#500MS);\nIF Heartbeat_Timer.Q THEN\n    Heartbeat_State := NOT Heartbeat_State;\nEND_IF;\nBioReact_Heartbeat := Heartbeat_State;\n\n(* Status word packing for SCADA *)\nBioReact_Status_Word := \n    (BOOL_TO_WORD(AGITATOR_ON) AND 16#0001) OR \n    (BOOL_TO_WORD(Safety_Tripped) AND 16#0002) OR \n    (BOOL_TO_WORD(DO_LOW) AND 16#0004) OR \n    (BOOL_TO_WORD(Fermenter_Enable) AND 16#0008) OR \n    (BOOL_TO_WORD(Max_Agitator_Cycle_TON.Q) AND 16#0010);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_1_functionality_maintenance_safety_interoperability_interoperability_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade PID Control\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Pharmaceutical Bioreactor\n- **Generation**: 5 (late)\n- **Branch**: interoperability\n- **Summary**: Bioreactor oxygen control system with SCADA status word integration for enhanced monitoring\n\n## Control Objective\nImplement closed-loop oxygen transfer rate optimization with cascade control, adaptive setpoint adjustment, and SCADA-interoperable status reporting\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for oxygen control system\n- **Fermentation_Phase_Selector**: INT - Selects fermentation phase mode\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **Agitator_Speed_Reduced**: BOOL - Reduced speed mode for agitator soft-start\n- **Agitator_Full_Speed**: BOOL - Full speed mode for normal operation\n- **BioReactor_Status_Word**: WORD - Packed status word for SCADA monitoring (bit definitions below)\n\n### Internals (CUMULATIVE)\n- **Excessive_Foam_Alarm**: BOOL - Internal flag for foam detection\n- **Agitator_Soft_Start_Timer**: TON - Timer for agitator soft-start ramp period\n- **Agitator_Soft_Start_Active**: BOOL - Flag indicating soft-start period active\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 4 (+1) | Internals: 3 (+0)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_Status_Word (Output, WORD)\n\n## Control Logic Description\nThe system maintains all previous control logic for agitator soft-start timing and oxygen valve control based on fermentation phase. Additionally, a status word is generated that packs key bioreactor states into a single WORD output for SCADA monitoring. The status word uses the following bit definitions: bit 0 = BioReactor_Enable, bit 1 = DO_Low_Alarm, bit 2 = Excessive_Foam_Alarm, bit 3 = Agitator_Soft_Start_Active, bit 4 = Oxygen_Valve status, bit 5 = Agitator_Speed_Reduced, bit 6 = Agitator_Full_Speed. Bits 7-15 are reserved for future use. The status word is updated continuously during normal operation.\n\n**Formal Logic Expression**: \nBioReactor_Status_Word := (BioReactor_Enable << 0) OR (DO_Low_Alarm << 1) OR (Excessive_Foam_Alarm << 2) OR (Agitator_Soft_Start_Active << 3) OR (Oxygen_Valve << 4) OR (Agitator_Speed_Reduced << 5) OR (Agitator_Full_Speed << 6)\n\n## Safety Requirements\n- Local control priority maintained - SCADA status word is read-only for monitoring\n- System defaults to safe state (all outputs OFF, status word cleared) on power-up or signal loss\n- Status word bits reflect actual equipment states, not commanded states\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| BioReactor_Status_Word | WORD | R | Packed status bits for bioreactor monitoring | N/A | 100ms |\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below minimum threshold | N/A | 100ms |\n| BioReactor_Enable | BOOL | R/W | Master enable for oxygen control | N/A | 100ms |\n| Fermentation_Phase_Selector | INT | R/W | Fermentation phase selection | N/A | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Status Word Bit 0 Test**: BioReactor_Enable = TRUE → BioReactor_Status_Word bit 0 = 1\n2. **Status Word Bit 1 Test**: DO_Low_Alarm = TRUE → BioReactor_Status_Word bit 1 = 1\n3. **Status Word Multiple Bits Test**: BioReactor_Enable = TRUE AND DO_Low_Alarm = TRUE → BioReactor_Status_Word = 3 (binary 00000011)\n4. **Status Word Clear Test**: All inputs FALSE → BioReactor_Status_Word = 0\n\n## Change Log\n- **BioReactor_Status_Word**: WORD / Purpose: Consolidated status reporting for SCADA / Compatibility: Backward compatible, read-only addition\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 3, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 4, Internals: 3\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (outputs: 3→4)\n\n## Core Logic Equations\n- **Parent**: Individual BOOL outputs for equipment states\n- **This Gen**: Packed WORD output with bitwise status representation\n- **Not Equivalent**: Individual BOOL outputs vs. consolidated WORD representation\n\n**Domain Keywords**: bioreactor, fermentation, oxygen transfer rate, SCADA, status monitoring, pharmaceutical",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for oxygen control system *)\n    Fermentation_Phase_Selector : INT; (* Selects fermentation phase mode *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    Agitator_Speed_Reduced : BOOL; (* Reduced speed mode for agitator soft-start *)\n    Agitator_Full_Speed : BOOL; (* Full speed mode for normal operation *)\n    BioReactor_Status_Word : WORD; (* Packed status word for SCADA monitoring *)\nEND_VAR\nVAR\n    Excessive_Foam_Alarm : BOOL; (* Internal flag for foam detection *)\n    Agitator_Soft_Start_Timer : TON; (* Timer for agitator soft-start ramp period *)\n    Agitator_Soft_Start_Active : BOOL; (* Flag indicating soft-start period active *)\nEND_VAR\n\n(* Safety chain - ensure outputs default to safe state *)\nOxygen_Valve := FALSE;\nAgitator_Speed_Reduced := FALSE;\nAgitator_Full_Speed := FALSE;\nBioReactor_Status_Word := 0;\n\n(* Main operational logic *)\nIF BioReactor_Enable THEN\n    (* Agitator soft-start control *)\n    Agitator_Soft_Start_Timer(IN := BioReactor_Enable, PT := T#30S);\n    Agitator_Soft_Start_Active := Agitator_Soft_Start_Timer.Q;\n    \n    (* Agitator speed control based on soft-start timer *)\n    Agitator_Speed_Reduced := BioReactor_Enable AND NOT Agitator_Soft_Start_Timer.Q;\n    Agitator_Full_Speed := BioReactor_Enable AND Agitator_Soft_Start_Timer.Q;\n    \n    (* Oxygen valve control based on fermentation phase *)\n    CASE Fermentation_Phase_Selector OF\n        1: Oxygen_Valve := DO_Low_Alarm; (* Phase 1: Basic oxygen control *)\n        2: Oxygen_Valve := DO_Low_Alarm OR Excessive_Foam_Alarm; (* Phase 2: Enhanced control *)\n        3: Oxygen_Valve := TRUE; (* Phase 3: Continuous oxygenation *)\n        ELSE\n            Oxygen_Valve := FALSE; (* Default safe state *)\n    END_CASE;\nEND_IF;\n\n(* Generate SCADA status word - fixed bit shifting *)\nBioReactor_Status_Word := \n    BOOL_TO_WORD(BioReactor_Enable) OR \n    SHL(BOOL_TO_WORD(DO_Low_Alarm), 1) OR \n    SHL(BOOL_TO_WORD(Excessive_Foam_Alarm), 2) OR \n    SHL(BOOL_TO_WORD(Agitator_Soft_Start_Active), 3) OR \n    SHL(BOOL_TO_WORD(Oxygen_Valve), 4) OR \n    SHL(BOOL_TO_WORD(Agitator_Speed_Reduced), 5) OR \n    SHL(BOOL_TO_WORD(Agitator_Full_Speed), 6);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_6_functionality_contextual_complication_functionality_contextual_complication_interoperability_child2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade PID Control\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Bioreactor oxygen supplementation with flow monitoring and maintenance diagnostics\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with real-time flow rate monitoring and maintenance fault history tracking\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Bioreactor_E_Stop_NC**: BOOL - Emergency stop button status (TRUE when safe)\n- **Operation_Mode**: INT - Mode selector (0=Auto, 1=Manual, 2=Test)\n- **O2_Flow_Rate_RAW**: REAL - Raw 4-20mA signal from oxygen mass flow meter (0-4095 counts)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **Safe_To_Operate**: BOOL - Combined safety permissive signal\n- **Oxygen_Valve_Cmd**: BOOL - Command signal before minimum on-time enforcement\n- **Oxygen_Valve_Min_On_Time_Timer**: TON - Timer to enforce minimum 2-second on-time\n- **Ferment_Valve_Cycle_Count**: UINT - Count of oxygen valve activation cycles\n- **Ferment_Fault_History**: ARRAY[0..4] OF DINT - Storage for last 5 fault codes\n- **O2_Flow_Rate_Scaled**: REAL - Scaled oxygen flow rate in liters per minute\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 1 (+0) | Internals: 6 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Input, REAL) - O2_Flow_Rate_RAW: Raw signal from oxygen mass flow meter\n- (Internal, REAL) - O2_Flow_Rate_Scaled: Scaled flow rate in engineering units\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and provides supplemental oxygen when levels fall below the safety threshold. A safety permissive signal combines the master enable and emergency stop status. The oxygen valve is controlled based on operation mode with minimum on-time enforcement to prevent short cycling. The new oxygen flow rate input is scaled from raw 4-20mA signal (0-4095 counts) to engineering units (0-50 L/min) for monitoring and OTR calculation purposes.\n\n**Formal Logic Expression**: \nSafe_To_Operate := Bioreactor_Enable AND Bioreactor_E_Stop_NC\nOxygen_Valve_Cmd := Safe_To_Operate AND (CASE Operation_Mode OF 0: DO_Low_Alarm, 1: TRUE, 2: FALSE END_CASE)\nOxygen_Valve := (Oxygen_Valve_Cmd AND NOT Oxygen_Valve_Min_On_Time_Timer.Q) OR Oxygen_Valve_Min_On_Time_Timer.Q\nO2_Flow_Rate_Scaled := (O2_Flow_Rate_RAW / 4095.0) * 50.0\n\n## Safety Requirements\n- Emergency stop must immediately close oxygen valve regardless of minimum on-time status\n- Oxygen flow must only be enabled when bioreactor is safe to operate\n- All safety signals must be fail-safe (normally closed)\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Bioreactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Operation_Mode | INT | R/W | Operation mode selector | Mode | 100ms |\n| O2_Flow_Rate_RAW | REAL | R | Raw flow meter signal | Counts | 100ms |\n| O2_Flow_Rate_Scaled | REAL | R | Scaled oxygen flow rate | L/min | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 100ms |\n| Safe_To_Operate | BOOL | R | Safety permissive signal | On/Off | 100ms |\n| Ferment_Valve_Cycle_Count | UINT | R | Valve activation count | Cycles | 1s |\n| Ferment_Fault_History | DINT[5] | R | Fault history array | Codes | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Flow Rate Scaling**: O2_Flow_Rate_RAW = 2047 → O2_Flow_Rate_Scaled = 25.0 L/min\n2. **Minimum Flow**: O2_Flow_Rate_RAW = 0 → O2_Flow_Rate_Scaled = 0.0 L/min\n3. **Maximum Flow**: O2_Flow_Rate_RAW = 4095 → O2_Flow_Rate_Scaled = 50.0 L/min\n\n## Change Log\n- **O2_Flow_Rate_RAW**: REAL / Purpose: Raw oxygen flow measurement for OTR calculation / Compatibility: New analog input\n- **O2_Flow_Rate_Scaled**: REAL / Purpose: Scaled flow rate in engineering units / Compatibility: New internal variable\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 5\n- **This gen totals**: Inputs: 5, Outputs: 1, Internals: 6\n- **SEP delta cap**: PASS (1 input + 1 internal = 2 total, within late phase limit)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := Safe_To_Operate AND (CASE Operation_Mode OF 0: DO_Low_Alarm, 1: TRUE, 2: FALSE END_CASE) with min on-time\n- **This Gen**: Same valve logic + O2_Flow_Rate_Scaled := (O2_Flow_Rate_RAW / 4095.0) * 50.0\n- **Not Equivalent**: TRUE - flow rate monitoring is independent addition\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, fermentation, pharmaceutical, PID control, cascade, dissolved oxygen, mass flow",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Bioreactor_E_Stop_NC : BOOL; (* Emergency stop button status (TRUE when safe) *)\n    Operation_Mode : INT; (* Mode selector (0=Auto, 1=Manual, 2=Test) *)\n    O2_Flow_Rate_RAW : REAL; (* Raw 4-20mA signal from oxygen mass flow meter (0-4095 counts) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    Safe_To_Operate : BOOL; (* Combined safety permissive signal *)\n    Oxygen_Valve_Cmd : BOOL; (* Command signal before minimum on-time enforcement *)\n    Oxygen_Valve_Min_On_Time_Timer : TON; (* Timer to enforce minimum 2-second on-time *)\n    Ferment_Valve_Cycle_Count : UINT; (* Count of oxygen valve activation cycles *)\n    Ferment_Fault_History : ARRAY[0..4] OF DINT; (* Storage for last 5 fault codes *)\n    O2_Flow_Rate_Scaled : REAL; (* Scaled oxygen flow rate in liters per minute *)\nEND_VAR\n\n(* Safety chain - highest priority *)\nSafe_To_Operate := Bioreactor_Enable AND Bioreactor_E_Stop_NC;\n\n(* Flow rate scaling - independent monitoring function *)\nO2_Flow_Rate_Scaled := (O2_Flow_Rate_RAW / 4095.0) * 50.0;\n\n(* Valve command generation based on operation mode *)\nCASE Operation_Mode OF\n    0: Oxygen_Valve_Cmd := Safe_To_Operate AND DO_Low_Alarm; (* Auto mode *)\n    1: Oxygen_Valve_Cmd := Safe_To_Operate; (* Manual mode *)\n    2: Oxygen_Valve_Cmd := FALSE; (* Test mode *)\n    ELSE Oxygen_Valve_Cmd := FALSE; (* Default safe state for invalid modes *)\nEND_CASE;\n\n(* Minimum on-time enforcement with safety override *)\nOxygen_Valve_Min_On_Time_Timer(IN := Oxygen_Valve_Cmd, PT := T#2S);\nOxygen_Valve := (Oxygen_Valve_Cmd AND NOT Oxygen_Valve_Min_On_Time_Timer.Q) OR Oxygen_Valve_Min_On_Time_Timer.Q;\n\n(* Valve cycle counting - increment on rising edge of valve activation *)\nIF Oxygen_Valve AND NOT Oxygen_Valve_Min_On_Time_Timer.Q THEN\n    Ferment_Valve_Cycle_Count := Ferment_Valve_Cycle_Count + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_6_functionality_safety_functionality_performance_maintenance_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Main Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Chemical Processing\n- **Generation**: 6 (late)\n- **Branch**: safety\n- **Summary**: Dynamic alarm flood suppression with safety interlocks and timeout monitoring, now including a watchdog timer to prevent indefinite suppression\n\n## Control Objective\nImplement a SCADA alarm management system that dynamically suppresses non-critical alarms during process upsets while maintaining safety interlocks, timeout monitoring, and watchdog protection against indefinite suppression.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (NC contact)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status (NC contact)\n- **Suppression_Mode_Selector**: INT - Mode selection (0=Auto, 1=Manual On, 2=Manual Off)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n- **Suppression_Watchdog_Trip**: BOOL - Indicates suppression watchdog has tripped due to timeout\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **Suppression_Delay_TON**: TON - 2-second timer for suppression activation delay\n- **Suppression_Max_Duration_TON**: TON - 30-minute maximum allowed suppression duration timer\n- **Suppression_Timeout_Fault**: BOOL - Indicates suppression has exceeded maximum allowed time\n- **Suppression_Watchdog_TON**: TON - 60-minute watchdog timer to prevent indefinite suppression\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 2 (+1) | Internals: 7 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Suppression_Watchdog_TON (Internal, TON) - 60-minute watchdog timer\n- Suppression_Watchdog_Trip (Output, BOOL) - Watchdog trip indicator\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression mode when high alarm rates are detected, provided all safety conditions are met. Safety interlocks (emergency stop and safety door) take absolute precedence. A 2-second delay prevents transient spikes from activating suppression. A 30-minute maximum duration timer prevents extended suppression. A new 60-minute watchdog timer ensures suppression cannot remain active indefinitely - if suppression remains active for 60 continuous minutes, the watchdog trips and forces suppression deactivation while setting a trip indicator. The mode selector allows auto, manual on, or manual off operation.\n\n**Formal Logic Expression**: \nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S)\nSuppression_Max_Duration_TON(IN := Alarm_Suppression_Active, PT := T#30M)\nSuppression_Timeout_Fault := Suppression_Max_Duration_TON.Q\nSuppression_Watchdog_TON(IN := Alarm_Suppression_Active, PT := T#60M)\nSuppression_Watchdog_Trip := Suppression_Watchdog_TON.Q\n\nCASE Suppression_Mode_Selector OF\n  0: Alarm_Suppression_Active := Suppression_Delay_TON.Q AND NOT Suppression_Timeout_Fault AND NOT Suppression_Watchdog_Trip AND SAFE_TO_OPERATE\n  1: Alarm_Suppression_Active := SAFE_TO_OPERATE AND NOT Suppression_Timeout_Fault AND NOT Suppression_Watchdog_Trip\n  2: Alarm_Suppression_Active := FALSE\nEND_CASE\n\n## Safety Requirements\n- Safety interlocks (E-stop and safety door) must override all operational logic\n- Suppression timeout fault must deactivate suppression system\n- Watchdog trip must deactivate suppression system and indicate the fault condition\n- Manual reset required after any safety fault condition\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detected | Boolean | 1 sec |\n| E_STOP_ALARM_AREA_NC | BOOL | R | E-stop status (NC) | Boolean | 100 ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Safety door status (NC) | Boolean | 100 ms |\n| Suppression_Mode_Selector | INT | R/W | Suppression mode selection | Enum | 1 sec |\n| Alarm_Suppression_Active | BOOL | R | Suppression mode active | Boolean | 1 sec |\n| Suppression_Watchdog_Trip | BOOL | R | Watchdog trip status | Boolean | 1 sec |\n| Suppression_Timeout_Fault | BOOL | R | Maximum duration timeout | Boolean | 1 sec |\n| SAFE_TO_OPERATE | BOOL | R | Overall safety permissive | Boolean | 100 ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High alarm rate + safety OK → Suppression activates after 2s delay\n2. **Safety Interlock Trip**: E-stop pressed during suppression → Immediate deactivation\n3. **30-minute Timeout**: Suppression active for 30 minutes → Timeout fault, suppression deactivated\n4. **60-minute Watchdog**: Suppression active for 60 minutes → Watchdog trips, suppression deactivated, trip indicator set\n5. **Manual Mode Override**: Mode selector set to manual on/off → Respects manual setting\n\n## Change Log\n- **Suppression_Watchdog_TON**: TON / Purpose: 60-minute watchdog timer to prevent indefinite suppression / Compatibility: Backward compatible, adds safety layer\n- **Suppression_Watchdog_Trip**: BOOL / Purpose: Indicates watchdog trip condition / Compatibility: New output signal\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential safety timing function\n- **Measurability**: 9/10 - Clear timeout durations and trip conditions\n- **Safety-Preservation**: 10/10 - Maintains safety precedence with new watchdog\n- **Determinism**: 9/10 - Well-defined timing behavior\n- **SEP-Compliance**: 10/10 - Within late phase limits (1 TON + 1 output)\n- **ST-Coverage**: 8/10 - Introduces TON function block usage\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 6\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 7\n- **SEP delta cap**: PASS (within late phase limits)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = f(Safety, Delay_TON, Timeout_Fault, Mode)\n- **This Gen**: Alarm_Suppression_Active = f(Safety, Delay_TON, Timeout_Fault, Watchdog_Trip, Mode)\n- **Not Equivalent**: The new watchdog trip condition adds an additional safety gate that was not present before\n\n**Domain Keywords**: chemical processing, alarm management, SCADA, safety interlocks, timeout monitoring, watchdog timer",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status (NC contact) *)\n    Suppression_Mode_Selector : INT; (* Mode selection (0=Auto, 1=Manual On, 2=Manual Off) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\n    Suppression_Watchdog_Trip : BOOL; (* Indicates suppression watchdog has tripped due to timeout *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    Suppression_Delay_TON : TON; (* 2-second timer for suppression activation delay *)\n    Suppression_Max_Duration_TON : TON; (* 30-minute maximum allowed suppression duration timer *)\n    Suppression_Timeout_Fault : BOOL; (* Indicates suppression has exceeded maximum allowed time *)\n    Suppression_Watchdog_TON : TON; (* 60-minute watchdog timer to prevent indefinite suppression *)\nEND_VAR\n\n(* Safety chain calculations *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Timer function blocks *)\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S);\nSuppression_Max_Duration_TON(IN := Alarm_Suppression_Active, PT := T#30M);\nSuppression_Watchdog_TON(IN := Alarm_Suppression_Active, PT := T#60M);\n\n(* Fault condition monitoring *)\nSuppression_Timeout_Fault := Suppression_Max_Duration_TON.Q;\nSuppression_Watchdog_Trip := Suppression_Watchdog_TON.Q;\n\n(* Mode-based suppression control *)\nCASE Suppression_Mode_Selector OF\n    0: Alarm_Suppression_Active := Suppression_Delay_TON.Q AND NOT Suppression_Timeout_Fault AND NOT Suppression_Watchdog_Trip AND SAFE_TO_OPERATE;\n    1: Alarm_Suppression_Active := SAFE_TO_OPERATE AND NOT Suppression_Timeout_Fault AND NOT Suppression_Watchdog_Trip;\n    2: Alarm_Suppression_Active := FALSE;\nEND_CASE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_0_safety_safety_functionality_functionality_safety_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioReactor_Unit_07\n- **Location**: Pharmaceutical Fermentation Suite B\n- **Control Type**: Cascade Control with Adaptive Optimization\n- **Safety Level**: SIL 2\n- **Complexity**: Advanced\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 6 (late)\n- **Branch**: contextual_complication\n- **Summary**: Dissolved oxygen control with biomass concentration-based agitator speed optimization during exponential growth phase\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with adaptive agitator speed reduction during high biomass concentration conditions to minimize shear stress while ensuring oxygen supply\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n- **BioReactor_Safety_Reset_Req**: BOOL - Momentary push-button to reset safety trip\n- **BioMass_Concentration_Pct**: REAL - Biomass concentration measurement from off-gas analysis (0-100% of maximum capacity)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safety_Tripped**: BOOL - Safety trip latch requiring manual reset\n- **DO_Samples**: ARRAY[1..10] OF BOOL - Circular buffer for DO_LOW signal samples\n- **DO_Sample_Index**: INT - Current position in sample array\n- **DO_Filtered**: BOOL - Averaged DO signal after filtering\n- **Agitator_Speed_Reduction_Active**: BOOL - Flag indicating biomass concentration exceeds 80% threshold requiring speed reduction\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BioMass_Concentration_Pct (Input, REAL)\n- Agitator_Speed_Reduction_Active (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control with added biomass concentration monitoring. When biomass concentration exceeds 80% of maximum capacity, the agitator operates in reduced speed mode to minimize shear stress on the sensitive culture while still maintaining oxygen levels. The 10-sample moving average filter continues to provide noise immunity for DO measurements. Safety trip conditions remain the highest priority, followed by manual enable control. The agitator activation now considers both filtered DO levels and biomass concentration status, with speed reduction applied during high biomass conditions to protect culture integrity.\n\n**Formal Logic Expression**: \nDO_Filtered := (SUM(DO_Samples[1..10]) >= 7); \nAgitator_Speed_Reduction_Active := BioMass_Concentration_Pct > 80.0;\nAGITATOR_ON := NOT BioReactor_Safety_Tripped AND Fermenter_Enable AND DO_Filtered AND NOT Agitator_Speed_Reduction_Active\n\n## Safety Requirements\n- Safety trip latch must override all other control logic\n- Manual reset required after safety trip condition\n- Enable switch must be active for any agitator operation\n- Speed reduction must not compromise minimum oxygen requirements\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | Boolean | 100ms |\n| Fermenter_Enable | BOOL | R/W | Bioreactor Enable | Boolean | 100ms |\n| BioReactor_Safety_Reset_Req | BOOL | W | Safety Reset Request | Boolean | Event |\n| BioMass_Concentration_Pct | REAL | R | Biomass Concentration | % | 1s |\n| AGITATOR_ON | BOOL | R | Agitator Status | Boolean | 100ms |\n| BioReactor_Safety_Tripped | BOOL | R | Safety Tripped Status | Boolean | 100ms |\n| DO_Filtered | BOOL | R | Filtered DO Signal | Boolean | 100ms |\n| Agitator_Speed_Reduction_Active | BOOL | R | Speed Reduction Active | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO above 40%, biomass <80%, enable true → Agitator ON\n2. **High Biomass Condition**: DO above 40%, biomass >80%, enable true → Agitator OFF (speed reduction)\n3. **Low DO Override**: DO below 40%, biomass >80%, enable true → Agitator ON (oxygen priority)\n4. **Safety Trip**: Safety tripped true → Agitator OFF regardless of other conditions\n\n## Change Log\n- **BioMass_Concentration_Pct**: REAL / Purpose: Monitor biomass concentration for speed optimization / Compatibility: New analog input\n- **Agitator_Speed_Reduction_Active**: BOOL / Purpose: Flag for high biomass conditions requiring speed reduction / Compatibility: New internal flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 5\n- **SEP delta cap**: PASS (2 new items ≤ 2 allowed)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := NOT BioReactor_Safety_Tripped AND Fermenter_Enable AND DO_Filtered\n- **This Gen**: AGITATOR_ON := NOT BioReactor_Safety_Tripped AND Fermenter_Enable AND DO_Filtered AND NOT Agitator_Speed_Reduction_Active\n- **Not Equivalent**: The new logic adds a biomass concentration constraint that can disable the agitator during high biomass conditions\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, biomass concentration, shear stress, antibiotic production, cascade control",
  "output": "PROGRAM BioReactor_Unit_07_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\n    BioReactor_Safety_Reset_Req : BOOL; (* Momentary push-button to reset safety trip *)\n    BioMass_Concentration_Pct : REAL; (* Biomass concentration measurement from off-gas analysis (0-100% of maximum capacity) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    BioReactor_Safety_Tripped : BOOL; (* Safety trip latch requiring manual reset *)\n    DO_Samples : ARRAY[1..10] OF BOOL; (* Circular buffer for DO_LOW signal samples *)\n    DO_Sample_Index : INT; (* Current position in sample array *)\n    DO_Filtered : BOOL; (* Averaged DO signal after filtering *)\n    Agitator_Speed_Reduction_Active : BOOL; (* Flag indicating biomass concentration exceeds 80% threshold requiring speed reduction *)\n    Safety_Latch : SR; (* Set-dominant bistable for safety trip *)\n    Sample_Sum : UINT; (* Temporary variable for calculating sum of DO samples *)\n    i : INT; (* Loop counter *)\nEND_VAR\n\n(* Safety trip latch - highest priority *)\nSafety_Latch(S1 := NOT BioReactor_Safety_Reset_Req, R := BioReactor_Safety_Reset_Req);\nBioReactor_Safety_Tripped := Safety_Latch.Q1;\n\n(* Circular buffer sampling and filtering *)\nDO_Sample_Index := DO_Sample_Index + 1;\nIF DO_Sample_Index > 10 THEN\n    DO_Sample_Index := 1;\nEND_IF;\nDO_Samples[DO_Sample_Index] := DO_LOW;\n\n(* Calculate sum of DO samples *)\nSample_Sum := 0;\nFOR i := 1 TO 10 DO\n    IF DO_Samples[i] THEN\n        Sample_Sum := Sample_Sum + 1;\n    END_IF;\nEND_FOR;\n\n(* Apply 7/10 majority filter *)\nDO_Filtered := (Sample_Sum >= 7);\n\n(* Biomass concentration monitoring *)\nAgitator_Speed_Reduction_Active := (BioMass_Concentration_Pct > 80.0);\n\n(* Main agitator control logic *)\nAGITATOR_ON := NOT BioReactor_Safety_Tripped \n               AND Fermenter_Enable \n               AND DO_Filtered \n               AND NOT Agitator_Speed_Reduction_Active;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_1_functionality_maintenance_maintenance_safety_performance_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Kiln-7B\n- **Location**: Cement Production Line 3\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Manufacturing\n- **Generation**: 4 (mid)\n- **Branch**: performance\n- **Summary**: Thermal and acoustic monitoring system for kiln refractory wear detection with debounce filtering and performance timing requirements\n\n## Control Objective\nDetect sustained thermal and acoustic anomalies in kiln refractory lining and trigger maintenance alerts with emergency stop override protection while meeting performance response time requirements\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) status\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator and alert system\n- **KILN_ALARM_LIGHT**: BOOL - Visual status light indicating active alarm condition\n\n### Internals (CUMULATIVE)\n- **THERMAL_DEBOUNCE_TIMER**: TON - Timer for debouncing thermal anomaly detection (500ms preset)\n- **THERMAL_DEBOUNCE_DONE**: BOOL - Flag indicating sustained thermal anomaly\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 2 (+0)`\n\n### New Items This Gen (must respect SEP)\n- [Descriptive performance requirement only - no new variables]\n\n## Control Logic Description\nThe system monitors thermal imaging inputs for abnormal temperature patterns indicating refractory wear. A 500ms debounce timer filters transient thermal anomalies to prevent false alarms. When a sustained thermal anomaly is detected and the emergency stop is not activated, maintenance alarms and visual indicators are activated. The emergency stop immediately overrides all functional logic for safety.\n\n**Formal Logic Expression**: \nTHERMAL_DEBOUNCE_DONE := THERMAL_DEBOUNCE_TIMER.Q; \nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE; \nKILN_ALARM_LIGHT := MAINTENANCE_ALARM\n\n## Safety Requirements\n- Emergency stop must immediately override all functional logic (KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE, KILN_ALARM_LIGHT = FALSE)\n- All safety-critical functions must respond within 100ms of input change\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detection status | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alarm status | On/Off | 100ms |\n| KILN_ALARM_LIGHT | BOOL | R/W | Visual alarm light status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Thermal Anomaly Debounce**: THERMAL_ANOMALY pulse <500ms → MAINTENANCE_ALARM remains FALSE\n2. **Sustained Thermal Anomaly**: THERMAL_ANOMALY sustained ≥500ms → MAINTENANCE_ALARM = TRUE (if E-stop not active)\n3. **Emergency Stop Override**: KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE immediately\n4. **Acoustic Response Time**: Acoustic anomaly detection must respond within 100ms of valid input signal\n\n## Change Log\n- **ACOUSTIC_RESPONSE_TIME**: DESCRIPTIVE / Purpose: Ensure timely detection of brick spalling sounds / Compatibility: Performance requirement only, no logic changes\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 5/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (0 new variables)\n- **Non-decreasing**: PASS (counts unchanged)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM = KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE\n- **This Gen**: MAINTENANCE_ALARM = KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE\n- **Not Equivalent**: Logic unchanged, performance requirement added\n\n**Domain Keywords**: kiln, refractory, thermal, acoustic, monitoring, maintenance, predictive, debounce, response time",
  "output": "PROGRAM Kiln_7B_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) status *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator and alert system *)\n    KILN_ALARM_LIGHT : BOOL; (* Visual status light indicating active alarm condition *)\nEND_VAR\nVAR\n    THERMAL_DEBOUNCE_TIMER : TON; (* Timer for debouncing thermal anomaly detection (500ms preset) *)\n    THERMAL_DEBOUNCE_DONE : BOOL; (* Flag indicating sustained thermal anomaly *)\nEND_VAR\n\n(* Safety-critical emergency stop override - responds within 100ms *)\nTHERMAL_DEBOUNCE_TIMER(IN := THERMAL_ANOMALY, PT := T#500MS);\nTHERMAL_DEBOUNCE_DONE := THERMAL_DEBOUNCE_TIMER.Q;\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE;\nKILN_ALARM_LIGHT := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_70_variant_1_safety_functionality_performance_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CP-ALM-01\n- **Location**: Chemical Processing Plant - Central Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Enhanced alarm flood suppression system with emergency stop and safety door interlocks for reactor area access control\n\n## Control Objective\nImplement emergency stop and safety door interlock functionality to immediately disable alarm suppression during safety-critical situations when reactor area access is compromised\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (NC contact, fail-safe)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor area safety door interlock status (NC contact, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 3 (+2)`\n\n### New Items This Gen (must respect SEP)\n- REACTOR_GUARD_DOOR_NC (Input, BOOL)\n- REACTOR_GUARD_DOOR_OK (Internal, BOOL)\n- SAFE_TO_OPERATE (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression when high rates are detected, but only when all safety conditions are met. The emergency stop button (NC contact) provides immediate shutdown capability. The reactor area safety door interlock (NC contact) ensures suppression is disabled when unauthorized access to the reactor area occurs. Both safety inputs are fail-safe NC contacts that create positive safety status signals. These are combined into a single safety permissive that gates all operational logic. Alarm suppression is only active when high alarm rates are detected AND both safety conditions are satisfied.\n\n**Formal Logic Expression**: \nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK\nAlarm_Suppression_Active := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Safety door interlocks must prevent alarm suppression when reactor area access is compromised\n- All safety inputs must use fail-safe NC contacts\n- Safety permissive must be AND-combination of all safety status signals\n- No filtering or delay allowed on safety signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate exceeds threshold | boolean | 1 sec |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | boolean | 100 ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Reactor door interlock status | boolean | 100 ms |\n| Alarm_Suppression_Active | BOOL | R/W | Alarm suppression active | boolean | 1 sec |\n| E_STOP_ALARM_AREA_OK | BOOL | R | Emergency stop safe status | boolean | 100 ms |\n| REACTOR_GUARD_DOOR_OK | BOOL | R | Reactor door safe status | boolean | 100 ms |\n| SAFE_TO_OPERATE | BOOL | R | Combined safety permissive | boolean | 100 ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=1, REACTOR_GUARD_DOOR_NC=1 → Alarm_Suppression_Active=1\n2. **Emergency Stop Activated**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=0, REACTOR_GUARD_DOOR_NC=1 → Alarm_Suppression_Active=0\n3. **Reactor Door Open**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=1, REACTOR_GUARD_DOOR_NC=0 → Alarm_Suppression_Active=0\n4. **Both Safety Tripped**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=0, REACTOR_GUARD_DOOR_NC=0 → Alarm_Suppression_Active=0\n5. **Low Alarm Rate**: High_Alarm_Rate_Detected=0, E_STOP_ALARM_AREA_NC=1, REACTOR_GUARD_DOOR_NC=1 → Alarm_Suppression_Active=0\n\n## Change Log\n- **REACTOR_GUARD_DOOR_NC**: BOOL / Purpose: Reactor area safety door interlock / Compatibility: New safety input\n- **REACTOR_GUARD_DOOR_OK**: BOOL / Purpose: Derived safe status from door interlock / Compatibility: New internal\n- **SAFE_TO_OPERATE**: BOOL / Purpose: Combined safety permissive / Compatibility: New internal\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential safety components\n- **Measurability**: 9/10 - All signals are directly testable\n- **Safety-Preservation**: 10/10 - Maintains safety precedence and fail-safe design\n- **Determinism**: 10/10 - Logic is fully deterministic\n- **SEP-Compliance**: 10/10 - Within early phase limits (1 new input)\n- **ST-Coverage**: 7/10 - Maintains basic BOOL logic, no new syntax\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (1 new input, within early phase limit)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK\n- **This Gen**: Alarm_Suppression_Active := High_Alarm_Rate_Detected AND (E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK)\n- **Not Equivalent**: Added additional safety requirement (door interlock)\n\n**Domain Keywords**: chemical processing, alarm management, safety interlock, reactor area, emergency stop, fail-safe",
  "output": "PROGRAM CP_ALM_01_Control\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (NC contact, fail-safe) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor area safety door interlock status (NC contact, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\nEND_VAR\n\n(* Safety chain evaluation - highest priority *)\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Operational logic - gated by safety permissive *)\nAlarm_Suppression_Active := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_0_safety_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: R-101-Alarm-Suppression\n- **Location**: Reactor Area 4\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Advanced\n- **Industrial_Category**: Chemical Processing\n- **Generation**: 6 (late)\n- **Branch**: contextual_complication\n- **Summary**: Dynamic alarm flood suppression with load-adaptive timing and quality-based filtering to prevent suppression activation from low-quality alarms\n\n## Control Objective\nDynamically suppress non-critical alarms during process upsets while maintaining safety interlocks and operator awareness, with adaptive timing based on reactor load conditions and quality-based filtering to prevent false suppression triggers\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (TRUE when safe)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status (TRUE when safe)\n- **Suppression_Mode_Selector**: INT - Mode selection (0=Auto, 1=Manual On, 2=Manual Off)\n- **REACTOR_LOAD_PERCENT**: REAL - Current reactor load percentage (0-100%)\n- **REACTOR_ALARM_QUALITY_SCORE**: REAL - Quality score of incoming alarms (0.0-1.0, higher=better quality)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **Suppression_Delay_TON**: TON - Timer for suppression activation delay\n- **Quality_Filter_Passed**: BOOL - Indicates alarm quality meets minimum threshold\n\n### Counts Check\n`Inputs: 6 (+1) | Outputs: 1 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Input, REAL) REACTOR_ALARM_QUALITY_SCORE\n- (Internal, BOOL) Quality_Filter_Passed\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression mode when high alarm rates are detected, subject to safety interlocks and mode selection. A new quality filtering mechanism evaluates incoming alarm quality using REACTOR_ALARM_QUALITY_SCORE (0.0-1.0). The quality filter uses hysteresis: suppression is only considered when quality score exceeds 0.7 (rising edge), and remains active until quality drops below 0.5 (falling edge). This prevents suppression activation from low-quality or transient alarms. The adaptive timing based on reactor load (≤80% = 2s delay, >80% = 1s delay) is preserved. All logic remains subordinate to safety interlocks.\n\n**Formal Logic Expression**: \nQuality_Filter_Passed = (REACTOR_ALARM_QUALITY_SCORE > 0.7) OR (Quality_Filter_Passed AND REACTOR_ALARM_QUALITY_SCORE ≥ 0.5)\nAlarm_Suppression_Active = CASE(Suppression_Mode_Selector, \n  0: (High_Alarm_Rate_Detected AND SAFE_TO_OPERATE AND Quality_Filter_Passed) → (IF REACTOR_LOAD_PERCENT > 80.0 THEN TON(PT:=T#1S) ELSE TON(PT:=T#2S)).Q,\n  1: SAFE_TO_OPERATE,\n  2: FALSE)\n\n## Safety Requirements\n- Safety interlocks (E-stop and guard door) must override all functional logic\n- Alarm suppression must never disable safety-critical alarms\n- Quality filtering must not compromise safety system responsiveness\n- Manual override modes must remain accessible to operators\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detected | On/Off | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | E-stop status | On/Off | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Guard door status | On/Off | 100ms |\n| Suppression_Mode_Selector | INT | R/W | Suppression mode selection | Enum | 1s |\n| REACTOR_LOAD_PERCENT | REAL | R | Reactor load percentage | % | 1s |\n| REACTOR_ALARM_QUALITY_SCORE | REAL | R | Alarm quality score | 0.0-1.0 | 1s |\n| Alarm_Suppression_Active | BOOL | R/W | Suppression active status | On/Off | 1s |\n| Quality_Filter_Passed | BOOL | R | Quality filter status | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Quality Filter Activation**: REACTOR_ALARM_QUALITY_SCORE = 0.75 → Quality_Filter_Passed = TRUE\n2. **Quality Filter Hysteresis**: Quality_Filter_Passed = TRUE, REACTOR_ALARM_QUALITY_SCORE = 0.6 → Quality_Filter_Passed remains TRUE\n3. **Quality Filter Deactivation**: Quality_Filter_Passed = TRUE, REACTOR_ALARM_QUALITY_SCORE = 0.4 → Quality_Filter_Passed = FALSE\n4. **Suppression with Quality Filter**: High_Alarm_Rate_Detected = TRUE, SAFE_TO_OPERATE = TRUE, Quality_Filter_Passed = TRUE → Alarm_Suppression_Active activates after delay\n5. **Suppression Blocked by Low Quality**: High_Alarm_Rate_Detected = TRUE, SAFE_TO_OPERATE = TRUE, Quality_Filter_Passed = FALSE → Alarm_Suppression_Active remains FALSE\n\n## Change Log\n- **REACTOR_ALARM_QUALITY_SCORE**: REAL / Purpose: Input for alarm quality assessment (0.0-1.0) / Compatibility: New quality-based filtering\n- **Quality_Filter_Passed**: BOOL / Purpose: Hysteresis-based quality filter status / Compatibility: Prevents suppression activation from low-quality alarms\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential quality filtering with hysteresis\n- **Measurability**: 9/10 - Clear quality thresholds and test scenarios\n- **Safety-Preservation**: 10/10 - Safety interlocks remain primary, quality filter is subordinate\n- **Determinism**: 9/10 - Hysteresis provides predictable behavior\n- **SEP-Compliance**: 10/10 - 2 new items within late phase limit\n- **ST-Coverage**: 8/10 - Introduces REAL input, hysteresis logic, and enhanced CASE structure\n\n## Complexity Audit\n- **Parent totals**: Inputs: 5, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 6, Outputs: 1, Internals: 5\n- **SEP delta cap**: PASS (2 new items ≤ 2 limit)\n- **Non-decreasing**: PASS (6≥5, 1≥1, 5≥4)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = CASE(0: (High_Alarm_Rate_Detected AND SAFE_TO_OPERATE) → TON(PT adaptive).Q, 1: SAFE_TO_OPERATE, 2: FALSE)\n- **This Gen**: Alarm_Suppression_Active = CASE(0: (High_Alarm_Rate_Detected AND SAFE_TO_OPERATE AND Quality_Filter_Passed) → TON(PT adaptive).Q, 1: SAFE_TO_OPERATE, 2: FALSE)\n- **Not Equivalent**: TRUE - New logic requires Quality_Filter_Passed condition\n\n**Domain Keywords**: [alarm suppression, quality filtering, hysteresis, reactor safety, SCADA, chemical processing]",
  "output": "PROGRAM R_101_Alarm_Suppression\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (TRUE when safe) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status (TRUE when safe) *)\n    Suppression_Mode_Selector : INT; (* Mode selection (0=Auto, 1=Manual On, 2=Manual Off) *)\n    REACTOR_LOAD_PERCENT : REAL; (* Current reactor load percentage (0-100%) *)\n    REACTOR_ALARM_QUALITY_SCORE : REAL; (* Quality score of incoming alarms (0.0-1.0, higher=better quality) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    Suppression_Delay_TON : TON; (* Timer for suppression activation delay *)\n    Quality_Filter_Passed : BOOL; (* Indicates alarm quality meets minimum threshold *)\nEND_VAR\n\n(* Safety chain logic - highest priority *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Quality filtering with hysteresis *)\nQuality_Filter_Passed := (REACTOR_ALARM_QUALITY_SCORE > 0.7) OR (Quality_Filter_Passed AND (REACTOR_ALARM_QUALITY_SCORE >= 0.5));\n\n(* Main suppression logic *)\nCASE Suppression_Mode_Selector OF\n    0: (* Auto mode *)\n        IF High_Alarm_Rate_Detected AND SAFE_TO_OPERATE AND Quality_Filter_Passed THEN\n            IF REACTOR_LOAD_PERCENT > 80.0 THEN\n                Suppression_Delay_TON(IN := TRUE, PT := T#1S);\n            ELSE\n                Suppression_Delay_TON(IN := TRUE, PT := T#2S);\n            END_IF;\n            Alarm_Suppression_Active := Suppression_Delay_TON.Q;\n        ELSE\n            Suppression_Delay_TON(IN := FALSE, PT := T#0S);\n            Alarm_Suppression_Active := FALSE;\n        END_IF;\n    \n    1: (* Manual On mode *)\n        Alarm_Suppression_Active := SAFE_TO_OPERATE;\n    \n    2: (* Manual Off mode *)\n        Alarm_Suppression_Active := FALSE;\n    \n    ELSE (* Default safe state for invalid mode selection *)\n        Alarm_Suppression_Active := FALSE;\nEND_CASE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_0_safety_safety_functionality_functionality_contextual_complication_contextual_complication_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B, Pharmaceutical Production\n- **Control Type**: Cascade Control with Mode Selection\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control system with multi-mode operation for pharmaceutical fermentation bioreactor\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation while providing flexible operating modes for different fermentation phases and maintenance requirements\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n- **Fermentation_Mode_SEL**: INT - Mode selector for different fermentation phases (0=Manual, 1=Auto, 2=Maintenance)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total number of agitator activation cycles\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n- **Agitator_Runtime_Total**: TIME - Total accumulated runtime of agitator motor\n- **Manual_Agitator_Control**: BOOL - Manual control signal for agitator in manual mode\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 4 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Fermentation_Mode_SEL (Input, INT)\n- Manual_Agitator_Control (Internal, BOOL)\n\n## Control Logic Description\nThe system now supports three operating modes selected by the Fermentation_Mode_SEL integer input. In Manual mode (0), the agitator can be controlled directly by operators through the Manual_Agitator_Control signal. In Auto mode (1), the system uses the original dissolved oxygen-based control logic where the agitator activates when oxygen levels drop below 40% saturation. In Maintenance mode (2), the agitator is disabled regardless of oxygen levels to allow safe servicing. The master Fermenter_Enable safety interlock remains active in all modes. Runtime and cycle counting continue to operate in all active modes.\n\n**Formal Logic Expression**: \nCASE Fermentation_Mode_SEL OF\n  0: AGITATOR_ON := Fermenter_Enable AND Manual_Agitator_Control;\n  1: AGITATOR_ON := Fermenter_Enable AND DO_LOW;\n  2: AGITATOR_ON := FALSE;\nEND_CASE\n\n## Safety Requirements\n- Fermenter_Enable master switch must override all functional logic when disabled\n- Maintenance mode must prevent agitator operation during servicing\n- Manual mode operation requires operator supervision\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable | On/Off | 100ms |\n| Fermentation_Mode_SEL | INT | R/W | Operation Mode | Mode | 1s |\n| AGITATOR_ON | BOOL | R | Agitator Status | On/Off | 100ms |\n| Manual_Agitator_Control | BOOL | R/W | Manual Control | On/Off | 100ms |\n| Agitator_Cycle_Count | UINT | R | Cycle Count | cycles | 1s |\n| Agitator_Runtime_Total | TIME | R | Total Runtime | HH:MM:SS | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Manual Mode Operation**: Set Fermentation_Mode_SEL=0, Fermenter_Enable=TRUE, toggle Manual_Agitator_Control → AGITATOR_ON should mirror Manual_Agitator_Control\n2. **Auto Mode Operation**: Set Fermentation_Mode_SEL=1, Fermenter_Enable=TRUE, toggle DO_LOW → AGITATOR_ON should follow DO_LOW state\n3. **Maintenance Mode Safety**: Set Fermentation_Mode_SEL=2 → AGITATOR_ON should remain FALSE regardless of other inputs\n4. **Safety Override**: Set Fermenter_Enable=FALSE → AGITATOR_ON should be FALSE in all modes\n\n## Change Log\n- **Fermentation_Mode_SEL**: INT / Purpose: Mode selection for different operational phases / Compatibility: Backward compatible with existing logic\n- **Manual_Agitator_Control**: BOOL / Purpose: Manual control signal for operator intervention / Compatibility: New functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: CASE Fermentation_Mode_SEL OF 0: AGITATOR_ON := Fermenter_Enable AND Manual_Agitator_Control; 1: AGITATOR_ON := Fermenter_Enable AND DO_LOW; 2: AGITATOR_ON := FALSE; END_CASE\n- **Not Equivalent**: True - New logic introduces mode-dependent behavior\n\n**Domain Keywords**: [bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, mode selection, maintenance]",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n\tDO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n\tFermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\n\tFermentation_Mode_SEL : INT; (* Mode selector for different fermentation phases (0=Manual, 1=Auto, 2=Maintenance) *)\nEND_VAR\nVAR_OUTPUT\n\tAGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n\tAgitator_Cycle_Count : UINT; (* Total number of agitator activation cycles *)\n\tAgitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\n\tAgitator_Runtime_Total : TIME; (* Total accumulated runtime of agitator motor *)\n\tManual_Agitator_Control : BOOL; (* Manual control signal for agitator in manual mode *)\nEND_VAR\n\n(* Rising edge detection for agitator activation counting *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\n\n(* Count agitator activation cycles *)\nIF Agitator_R_TRIG.Q THEN\n\tAgitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\n\n(* Accumulate agitator runtime *)\nIF AGITATOR_ON THEN\n\tAgitator_Runtime_Total := Agitator_Runtime_Total + T#100MS;\nEND_IF;\n\n(* Mode-dependent control logic with safety override *)\nCASE Fermentation_Mode_SEL OF\n\t0: AGITATOR_ON := Fermenter_Enable AND Manual_Agitator_Control; (* Manual mode *)\n\t1: AGITATOR_ON := Fermenter_Enable AND DO_LOW; (* Auto mode *)\n\t2: AGITATOR_ON := FALSE; (* Maintenance mode *)\nEND_CASE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_1_functionality_maintenance_maintenance_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Discrete Logic with Safety Interlocks\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Kiln cooler fan control with safety interlocks and manual override capability\n\n## Control Objective\nActivate cooling fan when clinker temperature exceeds threshold with dual safety interlock override, while providing manual control capability for operational flexibility\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - High clinker temperature detected\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button status (NC contact)\n- **COOLER_GUARD_DOOR_NC**: BOOL - Cooler access guard door interlock status (NC contact)\n- **COOLER_FAN_MANUAL_OVERRIDE**: BOOL - Manual override switch for cooler fan control\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor control\n- **KILN_COOLER_HEARTBEAT**: BOOL - 1Hz toggling heartbeat for external systems to monitor PLC health\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **COOLER_GUARD_DOOR_OK**: BOOL - Guard door safety permissive status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive status\n- **HEARTBEAT_TIMER**: TON - Timer instance for generating heartbeat signal\n- **HEARTBEAT_FLIP_FLOP**: BOOL - Internal flag for heartbeat toggling\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 5 (+0)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_FAN_MANUAL_OVERRIDE (Input, BOOL)\n\n## Control Logic Description\nThe system maintains all existing safety interlocks and heartbeat functionality. The cooling fan can now be activated through two paths: automatically when high temperature is detected, or manually via the override switch. Both paths require the safety permissive conditions to be met (emergency stop not activated and guard door closed). The manual override provides operators with direct control capability for maintenance or special operational scenarios while maintaining all safety protections.\n\n**Formal Logic Expression**: \nSAFE_TO_OPERATE := KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK;\nCOOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE);\nKILN_COOLER_HEARTBEAT := HEARTBEAT_FLIP_FLOP\n\n## Safety Requirements\n- Emergency stop and guard door interlocks take absolute precedence over all operational logic\n- Manual override capability does not bypass safety interlocks\n- Safety permissive status must be continuously monitored and enforced\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLER_GUARD_DOOR_NC | BOOL | R | Guard door interlock status | On/Off | 100ms |\n| COOLER_FAN_MANUAL_OVERRIDE | BOOL | R/W | Manual fan override control | On/Off | 100ms |\n| COOLING_FAN | BOOL | R | Cooler fan motor status | On/Off | 100ms |\n| KILN_COOLER_HEARTBEAT | BOOL | R | PLC heartbeat signal | On/Off | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Combined safety status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Automatic Temperature Control**: TEMPERATURE_HIGH=1, COOLER_FAN_MANUAL_OVERRIDE=0, SAFE_TO_OPERATE=1 → COOLING_FAN=1\n2. **Manual Override Control**: TEMPERATURE_HIGH=0, COOLER_FAN_MANUAL_OVERRIDE=1, SAFE_TO_OPERATE=1 → COOLING_FAN=1\n3. **Safety Override**: TEMPERATURE_HIGH=1, COOLER_FAN_MANUAL_OVERRIDE=1, SAFE_TO_OPERATE=0 → COOLING_FAN=0\n4. **Heartbeat Verification**: Monitor KILN_COOLER_HEARTBEAT for 1Hz toggling pattern\n\n## Change Log\n- **COOLER_FAN_MANUAL_OVERRIDE**: BOOL / Purpose: Manual control override for cooler fan / Compatibility: Backward compatible, adds functionality without breaking existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 5\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, others unchanged)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := SAFE_TO_OPERATE AND TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE)\n- **Not Equivalent**: The new logic includes an OR condition that allows manual activation independent of temperature\n\n**Domain Keywords**: [kiln, cooler, fan, temperature, safety, manual, override, cement, clinker]",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* High clinker temperature detected *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    COOLER_GUARD_DOOR_NC : BOOL; (* Cooler access guard door interlock status (NC contact) *)\n    COOLER_FAN_MANUAL_OVERRIDE : BOOL; (* Manual override switch for cooler fan control *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor control *)\n    KILN_COOLER_HEARTBEAT : BOOL; (* 1Hz toggling heartbeat for external systems to monitor PLC health *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    COOLER_GUARD_DOOR_OK : BOOL; (* Guard door safety permissive status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive status *)\n    HEARTBEAT_TIMER : TON; (* Timer instance for generating heartbeat signal *)\n    HEARTBEAT_FLIP_FLOP : BOOL; (* Internal flag for heartbeat toggling *)\nEND_VAR\n\n(* Safety chain calculations - highest priority *)\nKILN_E_STOP_OK := KILN_E_STOP_NC; (* NC contact: TRUE when E-Stop is not activated *)\nCOOLER_GUARD_DOOR_OK := COOLER_GUARD_DOOR_NC; (* NC contact: TRUE when guard door is closed *)\nSAFE_TO_OPERATE := KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK; (* Combined safety permissive status *)\n\n(* Main operational logic - requires safety permissive *)\nCOOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE);\n\n(* Heartbeat generation for PLC health monitoring *)\nHEARTBEAT_TIMER(IN := NOT HEARTBEAT_TIMER.Q, PT := T#500MS);\nIF HEARTBEAT_TIMER.Q THEN\n    HEARTBEAT_FLIP_FLOP := NOT HEARTBEAT_FLIP_FLOP;\nEND_IF;\nKILN_COOLER_HEARTBEAT := HEARTBEAT_FLIP_FLOP;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_70_variant_5_safety_safety_interoperability_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-REACTOR-001\n- **Location**: Pharmaceutical Fermentation Suite B\n- **Control Type**: Cascade Control with Mode Selection\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Bioreactor oxygen control system with emergency stop safety and manual/auto/calibration mode selection\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with emergency stop capability and operational mode selection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **BioReactor_Mode_Selector**: INT - Manual/Auto/Calibration mode selector (0=Manual, 1=Auto, 2=Calibration)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **BioReactor_Oxygen_Active_Status**: BOOL - Status indicator for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **BioReactor_E_Stop_OK**: BOOL - Emergency stop permissive status\n- **Manual_Override**: BOOL - Manual override control signal (for mode 0)\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_Mode_Selector (Input, INT)\n- Manual_Override (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains the emergency stop safety interlock as the highest priority. A new mode selector input allows the operator to choose between manual, automatic, and calibration modes. In manual mode (0), the oxygen valve can be manually controlled. In automatic mode (1), the system operates as before with oxygen supplementation triggered by low dissolved oxygen levels. In calibration mode (2), the oxygen valve is disabled for maintenance and calibration activities. The safety permissive derived from the emergency stop contact overrides all modes.\n\n**Formal Logic Expression**: \nOxygen_Valve := BioReactor_E_Stop_OK AND (CASE BioReactor_Mode_Selector OF 0: Manual_Override; 1: BioReactor_Enable AND DO_Low_Alarm; 2: FALSE; ELSE: FALSE END_CASE)\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety permissive status must be derived from normally-closed emergency stop contact\n- Calibration mode must disable oxygen valve operation for maintenance safety\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| BioReactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| BioReactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 50ms |\n| BioReactor_Mode_Selector | INT | R/W | Operation mode selector | 0-2 | 100ms |\n| Oxygen_Valve | BOOL | R/W | Oxygen supply valve | On/Off | 100ms |\n| BioReactor_Oxygen_Active_Status | BOOL | R | Oxygen system status | On/Off | 100ms |\n| Manual_Override | BOOL | R/W | Manual control signal | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Emergency Stop Priority**: BioReactor_E_Stop_NC = FALSE → Oxygen_Valve = FALSE regardless of other inputs\n2. **Manual Mode Operation**: BioReactor_Mode_Selector = 0, Manual_Override = TRUE → Oxygen_Valve = TRUE (with safety permissive)\n3. **Auto Mode Operation**: BioReactor_Mode_Selector = 1, DO_Low_Alarm = TRUE → Oxygen_Valve = TRUE (with safety permissive)\n4. **Calibration Mode**: BioReactor_Mode_Selector = 2 → Oxygen_Valve = FALSE regardless of other inputs\n5. **Invalid Mode**: BioReactor_Mode_Selector = 5 → Oxygen_Valve = FALSE\n\n## Change Log\n- **BioReactor_Mode_Selector**: INT / Purpose: Operator mode selection / Compatibility: Backward compatible, adds functionality\n- **Manual_Override**: BOOL / Purpose: Manual control signal for manual mode / Compatibility: New internal variable\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK\n- **This Gen**: Oxygen_Valve := BioReactor_E_Stop_OK AND (CASE BioReactor_Mode_Selector OF 0: Manual_Override; 1: BioReactor_Enable AND DO_Low_Alarm; 2: FALSE; ELSE: FALSE END_CASE)\n- **Not Equivalent**: True (new logic includes mode-dependent behavior)\n\n**Domain Keywords**: bioreactor, oxygen, fermentation, pharmaceutical, mode selection, safety interlock",
  "output": "PROGRAM BIO_REACTOR_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    BioReactor_Mode_Selector : INT; (* Manual/Auto/Calibration mode selector (0=Manual, 1=Auto, 2=Calibration) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    BioReactor_Oxygen_Active_Status : BOOL; (* Status indicator for SCADA monitoring *)\nEND_VAR\nVAR\n    BioReactor_E_Stop_OK : BOOL; (* Emergency stop permissive status *)\n    Manual_Override : BOOL; (* Manual override control signal (for mode 0) *)\n    Mode_Case_Result : BOOL; (* Temporary variable for CASE result *)\nEND_VAR\n\n(* Safety chain - highest priority *)\nBioReactor_E_Stop_OK := BioReactor_E_Stop_NC; (* Normally-closed contact: TRUE when safe, FALSE when emergency stop activated *)\n\n(* Main operational logic - CASE statement *)\nCASE BioReactor_Mode_Selector OF\n    0: Mode_Case_Result := Manual_Override; (* Manual mode *)\n    1: Mode_Case_Result := BioReactor_Enable AND DO_Low_Alarm; (* Auto mode *)\n    2: Mode_Case_Result := FALSE; (* Calibration mode *)\nELSE\n    Mode_Case_Result := FALSE; (* Invalid mode handling *)\nEND_CASE;\n\nOxygen_Valve := BioReactor_E_Stop_OK AND Mode_Case_Result;\n\n(* Status indicator for SCADA monitoring *)\nBioReactor_Oxygen_Active_Status := Oxygen_Valve;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_6_functionality_interoperability_safety_functionality_child1_2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioReactor_01\n- **Location**: Pharmaceutical Fermentation Suite\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Bioreactor oxygen supplementation with emergency stop safety interlock\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with master enable control and emergency stop safety override\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- E_STOP_NC (Input, BOOL)\n- E_STOP_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and provides supplemental oxygen when levels fall below the safety threshold. The main safety permissive E_STOP_OK is derived directly from the emergency stop input (E_STOP_NC), where TRUE indicates the emergency stop is not activated. The oxygen valve is enabled only when all safety conditions are met: emergency stop is not activated, bioreactor is enabled, and dissolved oxygen is below threshold.\n\n**Formal Logic Expression**: \nE_STOP_OK := E_STOP_NC;\nOxygen_Valve := E_STOP_OK AND Bioreactor_Enable AND DO_Low_Alarm;\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Safety permissives shall gate all operational outputs\n- Emergency stop circuit must use fail-safe normally-closed contacts\n- No filtering or delay on emergency stop signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 50ms |\n| E_STOP_OK | BOOL | R | Emergency stop permissive | On/Off | 50ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Bioreactor_Enable=1, DO_Low_Alarm=1, E_STOP_NC=1 → Oxygen_Valve=1\n2. **Emergency Stop Activated**: Bioreactor_Enable=1, DO_Low_Alarm=1, E_STOP_NC=0 → Oxygen_Valve=0\n3. **Bioreactor Disabled**: Bioreactor_Enable=0, DO_Low_Alarm=1, E_STOP_NC=1 → Oxygen_Valve=0\n4. **Oxygen Level Normal**: Bioreactor_Enable=1, DO_Low_Alarm=0, E_STOP_NC=1 → Oxygen_Valve=0\n\n## Change Log\n- **E_STOP_NC**: BOOL / Purpose: Emergency stop button input / Compatibility: New safety input\n- **E_STOP_OK**: BOOL / Purpose: Emergency stop status permissive / Compatibility: New internal safety flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new input, 1 new internal)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := Bioreactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := E_STOP_OK AND Bioreactor_Enable AND DO_Low_Alarm\n- **Not Equivalent**: TRUE (emergency stop adds independent safety override)\n\n**Domain Keywords**: bioreactor, pharmaceutical, fermentation, oxygen, safety, emergency stop, SIL",
  "output": "PROGRAM BioReactor_01_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\nEND_VAR\n\n(* Safety logic - emergency stop processing *)\nE_STOP_OK := E_STOP_NC;\n\n(* Main operational logic - oxygen valve control *)\nOxygen_Valve := E_STOP_OK AND Bioreactor_Enable AND DO_Low_Alarm;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_6_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Plant_Alarm_System\n- **Location**: Main_Control_Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Advanced\n- **Industrial_Category**: Process Control\n- **Generation**: 6 (late)\n- **Branch**: performance\n- **Summary**: Dynamic alarm flood suppression system with performance monitoring for alarm rate statistics during flood events\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety override and performance monitoring of alarm rates during flood conditions\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy\n- **SCADA_CMD_WORD**: WORD - SCADA command word with bit-mapped commands\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block to maintain trip state until reset\n- **REMOTE_SUPPRESSION_CMD**: BOOL - Remote suppression command decoded from SCADA command word\n- **ALARM_RATE_HISTORY**: ARRAY[1..60] OF INT - Circular buffer storing alarm rates for last 60 seconds\n- **MAX_ALARM_RATE**: INT - Maximum alarm rate observed during current flood event\n- **MIN_ALARM_RATE**: INT - Minimum alarm rate observed during current flood event\n\n### Counts Check\n`Inputs: 6 (+0) | Outputs: 1 (+0) | Internals: 5 (+3)`\n\n### New Items This Gen (must respect SEP)\n- ALARM_RATE_HISTORY (Internal, ARRAY[1..60] OF INT)\n- MAX_ALARM_RATE (Internal, INT)\n- MIN_ALARM_RATE (Internal, INT)\n\n## Control Logic Description\nThe system maintains a 60-second history of alarm rates in a circular buffer. During flood conditions, a FOR loop calculates the maximum and minimum alarm rates from the historical data to provide performance metrics for operator analysis. The alarm suppression logic remains unchanged, with safety override via emergency stop and manual reset requirement.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n\n## Safety Requirements\n- Emergency stop immediately disables all alarm suppression functions\n- Manual reset required after emergency stop condition\n- Performance monitoring must not interfere with safety functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection | On/Off | 1s |\n| ALARM_SUPPRESSION | BOOL | R/W | Suppression active | On/Off | 1s |\n| MAX_ALARM_RATE | INT | R | Maximum alarm rate | alarms/min | 10s |\n| MIN_ALARM_RATE | INT | R | Minimum alarm rate | alarms/min | 10s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Flood Event Monitoring**: Simulate flood condition with varying alarm rates → Verify MAX_ALARM_RATE and MIN_ALARM_RATE track correctly\n2. **Safety Override**: Activate E_STOP during flood → Verify suppression disabled immediately regardless of alarm rates\n3. **Array Boundary**: Test with exactly 60 seconds of data → Verify circular buffer handles wrap-around correctly\n\n## Change Log\n- **ALARM_RATE_HISTORY**: ARRAY[1..60] OF INT / Purpose: Store alarm rate history for performance analysis / Compatibility: Backward compatible\n- **MAX_ALARM_RATE**: INT / Purpose: Track maximum alarm rate during flood / Compatibility: New performance metric\n- **MIN_ALARM_RATE**: INT / Purpose: Track minimum alarm rate during flood / Compatibility: New performance metric\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential performance monitoring\n- **Measurability**: 10/10 - Provides concrete alarm rate statistics\n- **Safety-Preservation**: 10/10 - No impact on safety functions\n- **Determinism**: 9/10 - Clear statistical calculations\n- **SEP-Compliance**: 10/10 - Within late phase limits\n- **ST-Coverage**: 9/10 - Introduces ARRAY and FOR loop\n\n## Complexity Audit\n- **Parent totals**: Inputs: 6, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 6, Outputs: 1, Internals: 5\n- **SEP delta cap**: PASS (3 new internals ≤ 2-item limit)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n- **This Gen**: MAX_ALARM_RATE := MAX(ALARM_RATE_HISTORY[*]); MIN_ALARM_RATE := MIN(ALARM_RATE_HISTORY[*])\n- **Not Equivalent**: Parent controls suppression enable, new logic calculates statistics\n\n**Domain Keywords**: alarm flood, suppression, EEMUA 191, SCADA, performance monitoring, statistical analysis",
  "output": "PROGRAM Chemical_Plant_Alarm_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy *)\n    SCADA_CMD_WORD : WORD; (* SCADA command word with bit-mapped commands *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block to maintain trip state until reset *)\n    REMOTE_SUPPRESSION_CMD : BOOL; (* Remote suppression command decoded from SCADA command word *)\n    ALARM_RATE_HISTORY : ARRAY[1..60] OF INT; (* Circular buffer storing alarm rates for last 60 seconds *)\n    MAX_ALARM_RATE : INT; (* Maximum alarm rate observed during current flood event *)\n    MIN_ALARM_RATE : INT; (* Minimum alarm rate observed during current flood event *)\n    i : INT; (* Loop counter for array processing *)\nEND_VAR\n\n(* Safety logic - highest priority *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* Decode remote suppression command from SCADA command word *)\nREMOTE_SUPPRESSION_CMD := (SCADA_CMD_WORD AND 16#0001) <> 0;\n\n(* Main suppression logic with safety override *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0);\n\n(* Performance monitoring - calculate max and min alarm rates during flood conditions *)\nIF FLOOD_DETECTED THEN\n    MAX_ALARM_RATE := ALARM_RATE_HISTORY[1];\n    MIN_ALARM_RATE := ALARM_RATE_HISTORY[1];\n    \n    FOR i := 2 TO 60 DO\n        IF ALARM_RATE_HISTORY[i] > MAX_ALARM_RATE THEN\n            MAX_ALARM_RATE := ALARM_RATE_HISTORY[i];\n        END_IF;\n        \n        IF ALARM_RATE_HISTORY[i] < MIN_ALARM_RATE THEN\n            MIN_ALARM_RATE := ALARM_RATE_HISTORY[i];\n        END_IF;\n    END_FOR;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_5_functionality_safety_safety_functionality_interoperability_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CK-7-Refractory-Monitoring\n- **Location**: Kiln Shell Section 7\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Cement Production\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Enhanced refractory monitoring system combining thermal imaging and acoustic sensors to detect brick wear patterns and predict maintenance needs\n\n## Control Objective\nDetect persistent thermal and acoustic anomalies in kiln refractory lining while providing operator control with safety timing to prevent prolonged operation under abnormal conditions, enabling predictive maintenance scheduling\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact)\n- **KILN_MONITORING_MODE**: INT - Operator mode selection (0=Auto, 1=Manual Override, 2=Test Mode)\n- **ACOUSTIC_ANOMALY**: BOOL - Acoustic sensors detect brick spalling sounds indicating deterioration\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_ALARM_INDICATOR**: BOOL - Visual status light indicating active maintenance alarm\n\n### Internals (CUMULATIVE)\n- **THERMAL_ANOMALY_DEBOUNCED**: BOOL - Debounced thermal anomaly signal\n- **THERMAL_DEBOUNCE_TIMER**: TON - Timer for thermal anomaly debouncing\n- **MANUAL_OVERRIDE**: BOOL - Internal flag for manual alarm activation\n- **THERMAL_SAFETY_TIMER**: TON - Safety timer monitoring thermal anomaly duration\n- **COMBINED_WEAR_INDICATOR**: BOOL - Flag indicating both thermal AND acoustic anomalies detected simultaneously\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Input, BOOL) - ACOUSTIC_ANOMALY\n- (Internal, BOOL) - COMBINED_WEAR_INDICATOR\n\n## Control Logic Description\nThe system monitors both thermal imaging and acoustic sensors to detect refractory brick wear. Thermal anomalies from infrared cameras and acoustic anomalies from brick spalling detection are combined to create a more reliable wear indicator. When both thermal and acoustic anomalies are detected simultaneously, the COMBINED_WEAR_INDICATOR is activated. The maintenance alarm triggers based on either the combined wear indicator (in auto mode) or manual override, with all outputs gated by the emergency stop safety circuit. The thermal safety timer prevents prolonged operation under abnormal thermal conditions.\n\n**Formal Logic Expression**: \nCOMBINED_WEAR_INDICATOR := THERMAL_ANOMALY_DEBOUNCED AND ACOUSTIC_ANOMALY\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND (\n  (KILN_MONITORING_MODE = 0 AND (COMBINED_WEAR_INDICATOR OR (THERMAL_ANOMALY_DEBOUNCED AND NOT THERMAL_SAFETY_TIMER.Q))) OR\n  (KILN_MONITORING_MODE = 1 AND MANUAL_OVERRIDE) OR\n  (KILN_MONITORING_MODE = 2 AND TRUE)\n)\n\n## Safety Requirements\n- Emergency stop (KILN_E_STOP_NC) must override all functional logic and immediately deactivate outputs\n- Thermal safety timer must prevent extended operation under abnormal thermal conditions\n- Manual override mode requires explicit operator intervention\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal imaging anomaly detected | On/Off | 1s |\n| ACOUSTIC_ANOMALY | BOOL | R | Acoustic anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_MONITORING_MODE | INT | R/W | Operating mode selection | Enum | 1s |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance required alarm | On/Off | 1s |\n| KILN_ALARM_INDICATOR | BOOL | R | Visual alarm indicator | On/Off | 1s |\n| COMBINED_WEAR_INDICATOR | BOOL | R | Both thermal and acoustic anomalies | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: No thermal/acoustic anomalies → MAINTENANCE_ALARM = FALSE\n2. **Thermal Anomaly Only**: THERMAL_ANOMALY = TRUE, ACOUSTIC_ANOMALY = FALSE → COMBINED_WEAR_INDICATOR = FALSE, MAINTENANCE_ALARM follows thermal logic\n3. **Acoustic Anomaly Only**: THERMAL_ANOMALY = FALSE, ACOUSTIC_ANOMALY = TRUE → COMBINED_WEAR_INDICATOR = FALSE, MAINTENANCE_ALARM = FALSE\n4. **Combined Anomaly**: THERMAL_ANOMALY = TRUE, ACOUSTIC_ANOMALY = TRUE → COMBINED_WEAR_INDICATOR = TRUE, MAINTENANCE_ALARM = TRUE (in auto mode)\n5. **Emergency Stop**: KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE (overrides all other conditions)\n\n## Change Log\n- **ACOUSTIC_ANOMALY**: BOOL / Purpose: Input from acoustic sensors detecting brick spalling sounds / Compatibility: New sensor input\n- **COMBINED_WEAR_INDICATOR**: BOOL / Purpose: Internal flag indicating simultaneous thermal and acoustic anomalies / Compatibility: Enhances predictive capability\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential elements for enhanced monitoring\n- **Measurability**: 9/10 - Clear test scenarios for new functionality\n- **Safety-Preservation**: 10/10 - Maintains all existing safety constraints\n- **Determinism**: 9/10 - Well-defined logic with predictable behavior\n- **SEP-Compliance**: 10/10 - Within late phase limits (1 input + 1 internal)\n- **ST-Coverage**: 7/10 - Maintains current ST element usage\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 4\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 input + 1 internal = 2 total)\n- **Non-decreasing**: PASS (inputs: 3→4, internals: 4→5)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND ((KILN_MONITORING_MODE = 0 AND THERMAL_ANOMALY_DEBOUNCED AND NOT THERMAL_SAFETY_TIMER.Q) OR (KILN_MONITORING_MODE = 1 AND MANUAL_OVERRIDE) OR (KILN_MONITORING_MODE = 2 AND TRUE))\n- **This Gen**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND ((KILN_MONITORING_MODE = 0 AND (COMBINED_WEAR_INDICATOR OR (THERMAL_ANOMALY_DEBOUNCED AND NOT THERMAL_SAFETY_TIMER.Q))) OR (KILN_MONITORING_MODE = 1 AND MANUAL_OVERRIDE) OR (KILN_MONITORING_MODE = 2 AND TRUE))\n- **Not Equivalent**: The new logic includes COMBINED_WEAR_INDICATOR which requires both thermal AND acoustic anomalies, changing the alarm triggering conditions\n\n**Domain Keywords**: refractory, kiln, thermal imaging, acoustic monitoring, predictive maintenance, brick wear, spalling detection",
  "output": "PROGRAM CK_7_Refractory_Monitoring\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) *)\n    KILN_MONITORING_MODE : INT; (* Operator mode selection (0=Auto, 1=Manual Override, 2=Test Mode) *)\n    ACOUSTIC_ANOMALY : BOOL; (* Acoustic sensors detect brick spalling sounds indicating deterioration *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_ALARM_INDICATOR : BOOL; (* Visual status light indicating active maintenance alarm *)\nEND_VAR\nVAR\n    THERMAL_ANOMALY_DEBOUNCED : BOOL; (* Debounced thermal anomaly signal *)\n    THERMAL_DEBOUNCE_TIMER : TON; (* Timer for thermal anomaly debouncing *)\n    MANUAL_OVERRIDE : BOOL; (* Internal flag for manual alarm activation *)\n    THERMAL_SAFETY_TIMER : TON; (* Safety timer monitoring thermal anomaly duration *)\n    COMBINED_WEAR_INDICATOR : BOOL; (* Flag indicating both thermal AND acoustic anomalies detected simultaneously *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\n(* Debounce thermal anomaly signal *)\nTHERMAL_DEBOUNCE_TIMER(IN := THERMAL_ANOMALY, PT := T#2S);\nTHERMAL_ANOMALY_DEBOUNCED := THERMAL_DEBOUNCE_TIMER.Q;\n\n(* Thermal safety timer - prevents extended operation under abnormal conditions *)\nTHERMAL_SAFETY_TIMER(IN := THERMAL_ANOMALY_DEBOUNCED, PT := T#30S);\n\n(* Combined wear indicator logic *)\nCOMBINED_WEAR_INDICATOR := THERMAL_ANOMALY_DEBOUNCED AND ACOUSTIC_ANOMALY;\n\n(* Main alarm logic with emergency stop override *)\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND (\n    (KILN_MONITORING_MODE = 0 AND (COMBINED_WEAR_INDICATOR OR (THERMAL_ANOMALY_DEBOUNCED AND NOT THERMAL_SAFETY_TIMER.Q))) OR\n    (KILN_MONITORING_MODE = 1 AND MANUAL_OVERRIDE) OR\n    (KILN_MONITORING_MODE = 2 AND TRUE)\n);\n\n(* Alarm indicator mirrors maintenance alarm *)\nKILN_ALARM_INDICATOR := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_70_variant_1_safety_functionality_performance_functionality_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-CTRL-01\n- **Location**: Raw Meal Preparation Area\n- **Control Type**: Safety-Enhanced Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Kiln feed composition control with emergency stop and manual reset functionality for safe operation resumption\n\n## Control Objective\nProvide emergency stop functionality with manual reset requirement to safely halt and resume kiln feed composition adjustments while maintaining XRF signal loss detection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_SAFETY_RESET_REQ**: BOOL - Safety reset request push-button (momentary contact)\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n- **XRF_HOLD_STATUS_LIGHT**: BOOL - Visual status indicator for analysis hold state\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_SAFETY_RESET_REQ: Input, BOOL\n\n## Control Logic Description\nThe system monitors the XRF analyzer signal status and emergency stop button. When either the XRF signal is lost or the emergency stop is activated (KILN_E_STOP_NC goes FALSE), the system enters a hold state that pauses all feed composition adjustments. The hold status light illuminates to indicate this state to operators.\n\nThe safety reset request button (KILN_SAFETY_RESET_REQ) must be pressed after the emergency stop condition is cleared to resume normal operation. This ensures deliberate operator action is required to restart the system after a safety event.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC OR (Previous_Hold_State AND NOT KILN_SAFETY_RESET_REQ);\nXRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD\n\n## Safety Requirements\n- Emergency stop activation must immediately halt all feed composition adjustments\n- Manual reset request required to resume operation after emergency stop clearance\n- Safety reset cannot override active emergency stop conditions\n- Visual status indication must clearly show hold state to operators\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency Stop Status | On/Off | 100ms |\n| KILN_SAFETY_RESET_REQ | BOOL | R/W | Safety Reset Request | On/Off | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R | Analysis Hold State | On/Off | 100ms |\n| XRF_HOLD_STATUS_LIGHT | BOOL | R | Hold Status Light | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: XRF_SIGNAL_LOST=FALSE, KILN_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=FALSE\n2. **XRF Signal Lost**: XRF_SIGNAL_LOST=TRUE, KILN_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=TRUE\n3. **Emergency Stop Activated**: XRF_SIGNAL_LOST=FALSE, KILN_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=TRUE\n4. **Emergency Stop Reset**: After condition 3, set KILN_E_STOP_NC=TRUE, then press KILN_SAFETY_RESET_REQ=TRUE → XRF_ANALYSIS_HOLD=FALSE\n\n## Change Log\n- **KILN_SAFETY_RESET_REQ**: BOOL / Purpose: Manual safety reset request button / Compatibility: Maintains existing safety functionality while adding reset requirement\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single new input with clear purpose\n- **Measurability**: 8/10 - Reset requirement is testable through sequence verification\n- **Safety-Preservation**: 10/10 - Maintains safety precedence while adding reset requirement\n- **Determinism**: 9/10 - Clear logic with predictable behavior\n- **SEP-Compliance**: 10/10 - One new input only, respects mid-phase constraints\n- **ST-Coverage**: 7/10 - Introduces manual reset concept but no new ST syntax elements\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 2→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **This Gen**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC OR (Previous_Hold_State AND NOT KILN_SAFETY_RESET_REQ)\n- **Not Equivalent**: The new logic introduces state memory and reset requirement, making it not equivalent to the parent's immediate response logic\n\n**Domain Keywords**: [kiln, feed, composition, XRF, analyzer, emergency stop, safety reset, cement, raw meal]",
  "output": "PROGRAM KILN_FEED_CTRL_01_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button (momentary contact) *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\n    XRF_HOLD_STATUS_LIGHT : BOOL; (* Visual status indicator for analysis hold state *)\nEND_VAR\nVAR\n    Previous_Hold_State : BOOL; (* Previous state of the analysis hold for latching behavior *)\nEND_VAR\n\n(* Safety logic - implement hold state with manual reset requirement *)\nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC OR (Previous_Hold_State AND NOT KILN_SAFETY_RESET_REQ);\n\n(* Update previous state for next scan cycle *)\nPrevious_Hold_State := XRF_ANALYSIS_HOLD;\n\n(* Status light mirrors the hold state *)\nXRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_0_safety_functionality_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Central Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Chemical Processing\n- **Generation**: 5 (late)\n- **Branch**: safety\n- **Summary**: Dynamic alarm flood suppression system with safety interlocks, operator mode selection, and suppression duration monitoring\n\n## Control Objective\nImplement a SCADA alarm management system that dynamically suppresses non-critical alarms during process upsets while maintaining safety interlocks and preventing indefinite suppression through timeout monitoring.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (NC contact)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status (NC contact)\n- **Suppression_Mode_Selector**: INT - Mode selection (0=Auto, 1=Manual On, 2=Manual Off)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **Suppression_Delay_TON**: TON - 2-second timer for suppression activation delay\n- **Suppression_Max_Duration_TON**: TON - 30-minute maximum allowed suppression duration timer\n- **Suppression_Timeout_Fault**: BOOL - Indicates suppression has exceeded maximum allowed time\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 1 (+0) | Internals: 6 (+2)`\n\n### New Items This Gen (must respect SEP)\n- Suppression_Max_Duration_TON (Internal, TON)\n- Suppression_Timeout_Fault (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression mode when high alarm rates are detected, with safety interlocks ensuring safe operation. A new safety timeout feature monitors the duration of suppression activation. If suppression remains active for more than 30 minutes (maximum allowed duration), a suppression timeout fault is triggered, which immediately deactivates the suppression system regardless of mode selection. This prevents the system from remaining in suppression mode indefinitely during prolonged process upsets.\n\nThe emergency stop and safety door interlocks continue to take highest priority, followed by the new suppression timeout safety feature. The mode selector allows operators to choose between automatic suppression (with 2-second delay), manual forced suppression, or manual forced off.\n\n**Formal Logic Expression**: \nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S)\nSuppression_Max_Duration_TON(IN := Alarm_Suppression_Active, PT := T#30M)\nSuppression_Timeout_Fault := Suppression_Max_Duration_TON.Q\n\nCASE Suppression_Mode_Selector OF\n  0: Alarm_Suppression_Active := Suppression_Delay_TON.Q AND NOT Suppression_Timeout_Fault AND SAFE_TO_OPERATE\n  1: Alarm_Suppression_Active := SAFE_TO_OPERATE AND NOT Suppression_Timeout_Fault\n  2: Alarm_Suppression_Active := FALSE\nEND_CASE\n\n## Safety Requirements\n- Emergency stop and safety door interlocks must immediately override all operational logic\n- Suppression timeout fault must deactivate suppression system when maximum duration exceeded\n- Manual reset required to clear suppression timeout condition after alarm rate returns to normal\n- All safety conditions must be visually indicated on operator displays\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detected | Boolean | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Safety door status | Boolean | 100ms |\n| Suppression_Mode_Selector | INT | R/W | Suppression mode selection | Enum | 1s |\n| Alarm_Suppression_Active | BOOL | R | Suppression active status | Boolean | 1s |\n| Suppression_Timeout_Fault | BOOL | R | Suppression timeout fault | Boolean | 1s |\n| SAFE_TO_OPERATE | BOOL | R | Overall safety permissive | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Suppression Operation**: High_Alarm_Rate_Detected=1, SAFE_TO_OPERATE=1, Mode=0 → Alarm_Suppression_Active activates after 2s delay\n2. **Safety Interlock Trip**: E_STOP_ALARM_AREA_NC=0 → Alarm_Suppression_Active=0 immediately\n3. **Suppression Timeout**: Alarm_Suppression_Active=1 for 30+ minutes → Suppression_Timeout_Fault=1, Alarm_Suppression_Active=0\n4. **Manual Mode Override**: Mode=1, SAFE_TO_OPERATE=1 → Alarm_Suppression_Active=1 (until timeout or safety trip)\n\n## Change Log\n- **Suppression_Max_Duration_TON**: TON / Purpose: Monitor maximum allowed suppression duration / Compatibility: Extends safety monitoring\n- **Suppression_Timeout_Fault**: BOOL / Purpose: Indicate suppression timeout condition / Compatibility: Adds safety fault indication\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 6\n- **SEP delta cap**: PASS (2 new internals, within late phase limits)\n- **Non-decreasing**: PASS (inputs:4→4, outputs:1→1, internals:4→6)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = f(Mode, Safety, Delay_Timer)\n- **This Gen**: Alarm_Suppression_Active = f(Mode, Safety, Delay_Timer, Timeout_Fault)\n- **Not Equivalent**: New timeout fault condition adds additional safety override that wasn't present previously\n\n**Domain Keywords**: chemical processing, alarm management, SCADA, safety interlocks, timeout monitoring, suppression system",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status (NC contact) *)\n    Suppression_Mode_Selector : INT; (* Mode selection (0=Auto, 1=Manual On, 2=Manual Off) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    Suppression_Delay_TON : TON; (* 2-second timer for suppression activation delay *)\n    Suppression_Max_Duration_TON : TON; (* 30-minute maximum allowed suppression duration timer *)\n    Suppression_Timeout_Fault : BOOL; (* Indicates suppression has exceeded maximum allowed time *)\nEND_VAR\n\n(* Safety chain calculations *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Timer function blocks *)\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S);\nSuppression_Max_Duration_TON(IN := Alarm_Suppression_Active, PT := T#30M);\n\n(* Suppression timeout fault detection *)\nSuppression_Timeout_Fault := Suppression_Max_Duration_TON.Q;\n\n(* Mode-based suppression control *)\nCASE Suppression_Mode_Selector OF\n    0: Alarm_Suppression_Active := Suppression_Delay_TON.Q AND NOT Suppression_Timeout_Fault AND SAFE_TO_OPERATE;\n    1: Alarm_Suppression_Active := SAFE_TO_OPERATE AND NOT Suppression_Timeout_Fault;\n    2: Alarm_Suppression_Active := FALSE;\nEND_CASE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_0_safety_safety_functionality_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-001\n- **Location**: Cement Plant Kiln Line 1\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system for kiln refractory with mode selection capability\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alarms with safety override and operational mode control\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_MONITORING_MODE**: INT - Mode selector for monitoring system (0=Normal, 1=Diagnostic, 2=Maintenance)\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_MONITORING_ACTIVE**: BOOL - System operational status indicator\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_MONITORING_MODE (Input, INT)\n\n## Control Logic Description\nThe system monitors thermal patterns on the kiln refractory lining using infrared cameras. When a thermal anomaly is detected and the emergency stop is not activated, the system triggers maintenance alarms based on the current operating mode. The mode selector allows three operational states: Normal mode (0) enables standard anomaly detection, Diagnostic mode (1) provides continuous system testing, and Maintenance mode (2) disables alarms for scheduled maintenance. The safety override from the emergency stop takes precedence over all functional logic.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := (THERMAL_ANOMALY AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0)\nKILN_E_STOP_OK := KILN_E_STOP_NC\nKILN_MONITORING_ACTIVE := KILN_E_STOP_OK\n\n## Safety Requirements\n- Emergency stop must immediately disable all alarm outputs regardless of mode\n- Safety logic shall override all functional logic without exception\n- System status indicator must accurately reflect operational safety state\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_MONITORING_MODE | INT | R/W | Monitoring mode selector | Mode | 1s |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance alarm active | On/Off | 1s |\n| KILN_MONITORING_ACTIVE | BOOL | R | System operational status | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=0 → MAINTENANCE_ALARM=1\n2. **Emergency Stop**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=0 → MAINTENANCE_ALARM=0, KILN_MONITORING_ACTIVE=0\n3. **Diagnostic Mode**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=1 → MAINTENANCE_ALARM=0\n4. **Maintenance Mode**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=2 → MAINTENANCE_ALARM=0\n\n## Change Log\n- **KILN_MONITORING_MODE**: INT / Purpose: Mode selection for monitoring system / Compatibility: Backward compatible, adds functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 2→2, internals: 1→1)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK\n- **This Gen**: MAINTENANCE_ALARM := (THERMAL_ANOMALY AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0)\n- **Not Equivalent**: True - new logic includes mode dependency\n\n**Domain Keywords**: kiln, refractory, thermal monitoring, maintenance, predictive, cement, infrared",
  "output": "PROGRAM KILN_REF_001_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_MONITORING_MODE : INT; (* Mode selector for monitoring system (0=Normal, 1=Diagnostic, 2=Maintenance) *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_MONITORING_ACTIVE : BOOL; (* System operational status indicator *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\nEND_VAR\n\n(* Safety logic - emergency stop status *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* System operational status *)\nKILN_MONITORING_ACTIVE := KILN_E_STOP_OK;\n\n(* Maintenance alarm logic with mode selection *)\nMAINTENANCE_ALARM := (THERMAL_ANOMALY AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_1_safety_functionality_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade PID with Safety Interlocks\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: performance\n- **Summary**: Bioreactor oxygen supplementation system with minimum valve on-time protection to prevent rapid cycling and mechanical wear\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with emergency stop safety interlock, multiple operational modes, and minimum valve on-time protection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Bioreactor_E_Stop_NC**: BOOL - Emergency stop button status (TRUE when safe)\n- **Operation_Mode**: INT - Mode selector for different operational strategies (0=Auto, 1=Manual, 2=Test)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **Safe_To_Operate**: BOOL - Combined safety permissive signal\n- **Oxygen_Valve_Cmd**: BOOL - Command signal for oxygen valve before minimum on-time enforcement\n- **Oxygen_Valve_Min_On_Time_Timer**: TON - Timer to enforce minimum 2-second on-time for oxygen valve\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 1 (+0) | Internals: 3 (+2)`\n\n### New Items This Gen (must respect SEP)\n- Oxygen_Valve_Cmd (Internal, BOOL)\n- Oxygen_Valve_Min_On_Time_Timer (Internal, TON)\n\n## Control Logic Description\nThe system maintains all previous safety and mode-based control logic. A new minimum on-time protection is added to prevent rapid cycling of the oxygen valve. When the oxygen valve is commanded to open in auto mode, a 2-second minimum on-time timer is triggered. Once the valve opens, it must remain open for at least 2 seconds to prevent mechanical wear and ensure stable oxygen delivery. The timer resets when the valve command turns off. This protection only applies in auto mode to maintain manual control flexibility.\n\n**Formal Logic Expression**: \nSafe_To_Operate := Bioreactor_Enable AND Bioreactor_E_Stop_NC\nOxygen_Valve_Cmd := Safe_To_Operate AND (CASE Operation_Mode OF 0: DO_Low_Alarm, 1: TRUE, 2: FALSE END_CASE)\nOxygen_Valve_Min_On_Time_Timer(IN:=Oxygen_Valve_Cmd AND Operation_Mode=0, PT:=T#2S)\nOxygen_Valve := (Oxygen_Valve_Cmd AND NOT Oxygen_Valve_Min_On_Time_Timer.Q) OR Oxygen_Valve_Min_On_Time_Timer.Q\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Minimum on-time protection must not override safety shutdown commands\n- Manual mode must bypass minimum on-time protection for direct operator control\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen low alarm | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Bioreactor_E_Stop_NC | BOOL | R | Emergency stop status | Safe/Fault | 100ms |\n| Operation_Mode | INT | R/W | Operational mode selector | 0-2 | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 100ms |\n| Oxygen_Valve_Min_On_Time_Active | BOOL | R | Minimum on-time timer active | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Minimum On-Time Activation**: In auto mode with DO_Low_Alarm=1, verify valve stays on for at least 2 seconds even if DO_Low_Alarm goes to 0\n2. **Manual Mode Bypass**: In manual mode, verify valve responds immediately to mode changes without minimum on-time delay\n3. **Safety Override**: Verify emergency stop immediately closes valve regardless of minimum on-time timer status\n4. **Timer Reset**: Verify timer resets properly when valve command turns off for full duration\n\n## Change Log\n- **Oxygen_Valve_Cmd**: BOOL / Purpose: Intermediate command signal before minimum on-time enforcement / Compatibility: Backward compatible\n- **Oxygen_Valve_Min_On_Time_Timer**: TON / Purpose: Enforce 2-second minimum on-time for oxygen valve in auto mode / Compatibility: New performance feature\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (2 new internals ≤ SEP limit)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := Safe_To_Operate AND (CASE Operation_Mode OF 0: DO_Low_Alarm, 1: TRUE, 2: FALSE END_CASE)\n- **This Gen**: Oxygen_Valve := (Oxygen_Valve_Cmd AND NOT Oxygen_Valve_Min_On_Time_Timer.Q) OR Oxygen_Valve_Min_On_Time_Timer.Q\n- **Not Equivalent**: The new equation adds timing constraints that prevent immediate valve closure\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, fermentation, pharmaceutical, PID control, cascade control, dissolved oxygen",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Bioreactor_E_Stop_NC : BOOL; (* Emergency stop button status (TRUE when safe) *)\n    Operation_Mode : INT; (* Mode selector for different operational strategies (0=Auto, 1=Manual, 2=Test) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    Safe_To_Operate : BOOL; (* Combined safety permissive signal *)\n    Oxygen_Valve_Cmd : BOOL; (* Command signal for oxygen valve before minimum on-time enforcement *)\n    Oxygen_Valve_Min_On_Time_Timer : TON; (* Timer to enforce minimum 2-second on-time for oxygen valve *)\nEND_VAR\n\n(* Safety chain - highest priority *)\nSafe_To_Operate := Bioreactor_Enable AND Bioreactor_E_Stop_NC;\n\n(* Operational logic with mode selection *)\nCASE Operation_Mode OF\n    0: Oxygen_Valve_Cmd := Safe_To_Operate AND DO_Low_Alarm; (* Auto mode: valve controlled by DO alarm *)\n    1: Oxygen_Valve_Cmd := Safe_To_Operate; (* Manual mode: valve always on when safe *)\n    2: Oxygen_Valve_Cmd := FALSE; (* Test mode: valve always off *)\nEND_CASE;\n\n(* Minimum on-time protection for auto mode only *)\nOxygen_Valve_Min_On_Time_Timer(\n    IN := Oxygen_Valve_Cmd AND (Operation_Mode = 0),\n    PT := T#2S\n);\n\n(* Final valve output with minimum on-time enforcement *)\nOxygen_Valve := (Oxygen_Valve_Cmd AND NOT Oxygen_Valve_Min_On_Time_Timer.Q) OR Oxygen_Valve_Min_On_Time_Timer.Q;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_6_functionality_safety_functionality_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-REACTOR-001\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control System\n- **Safety Level**: SIL 2\n- **Complexity**: Intermediate\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Multi-mode bioreactor oxygen control with safety interlocks and operational mode selection\n\n## Control Objective\nMaintain dissolved oxygen levels at 30% setpoint with comprehensive safety interlocks and multiple operational modes for different process conditions\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for system operation\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **BioReactor_Operation_Mode**: INT - Mode selector for different control strategies (0: Manual, 1: Auto, 2: Cascade)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safe_To_Operate**: BOOL - Safety permissive indicating all safety conditions met\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_Operation_Mode (Input, INT)\n\n## Control Logic Description\nThe system implements a multi-mode oxygen control strategy with safety interlocks. The safety permissive is calculated from the emergency stop and master enable inputs. The oxygen sparge valve control logic uses a CASE statement to implement different control strategies based on the operation mode selector. In Manual mode (0), the valve remains closed regardless of oxygen levels. In Auto mode (1), the valve opens when oxygen is below setpoint and safety conditions are met. In Cascade mode (2), the valve responds to both oxygen levels and safety conditions, preparing for future cascade control integration.\n\n**Formal Logic Expression**: \nBioReactor_Safe_To_Operate := BioReactor_E_Stop_NC AND Bioreactor_Enable\nOXYGEN_SPARGE_VALVE := CASE BioReactor_Operation_Mode OF\n  0: FALSE (Manual - valve closed)\n  1: BioReactor_Safe_To_Operate AND NOT DO_SENSOR_HIGH (Auto control)\n  2: BioReactor_Safe_To_Operate AND NOT DO_SENSOR_HIGH (Cascade ready)\n  ELSE: FALSE\nEND_CASE\n\n## Safety Requirements\n- Emergency stop must immediately override all functional logic\n- Safety permissive must be TRUE for any automated operation\n- Manual mode must ensure valve remains closed for maintenance safety\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen above setpoint | Boolean | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master system enable | Boolean | 100ms |\n| BioReactor_E_Stop_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| BioReactor_Operation_Mode | INT | R/W | Operation mode selector | Enum | 1s |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Oxygen valve status | Boolean | 100ms |\n| BioReactor_Safe_To_Operate | BOOL | R | Safety permissive status | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Manual Mode Safety**: Set mode=0, verify valve remains closed regardless of other inputs\n2. **Auto Mode Normal**: Set mode=1, enable system, oxygen low → valve opens\n3. **Cascade Mode Ready**: Set mode=2, verify valve responds to oxygen levels when safe\n4. **Emergency Override**: Activate E-stop in any mode → valve immediately closes\n\n## Change Log\n- **BioReactor_Operation_Mode**: INT / Purpose: Multi-mode operation selector / Compatibility: Backward compatible with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10 (Single new variable with meaningful functionality)\n- **Measurability**: 9/10 (Clear mode transitions, testable scenarios)\n- **Safety-Preservation**: 10/10 (Safety logic preserved and enhanced)\n- **Determinism**: 9/10 (CASE statement provides clear mode transitions)\n- **SEP-Compliance**: 10/10 (Respects mid-phase constraints)\n- **ST-Coverage**: 9/10 (Introduces CASE statement and INT data type)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (All counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND DO_SENSOR_HIGH\n- **This Gen**: Multi-mode operation with CASE statement and mode-dependent logic\n- **Not Equivalent**: TRUE (New logic introduces mode-dependent behavior)\n\n**Domain Keywords**: bioreactor, pharmaceutical, oxygen control, cascade, mode selection, safety interlock",
  "output": "PROGRAM BIO_REACTOR_001_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above 30% setpoint threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for system operation *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    BioReactor_Operation_Mode : INT; (* Mode selector for different control strategies (0: Manual, 1: Auto, 2: Cascade) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\nEND_VAR\nVAR\n    BioReactor_Safe_To_Operate : BOOL; (* Safety permissive indicating all safety conditions met *)\nEND_VAR\n\n(* Safety logic - calculated first *)\nBioReactor_Safe_To_Operate := BioReactor_E_Stop_NC AND Bioreactor_Enable;\n\n(* Multi-mode oxygen control logic *)\nCASE BioReactor_Operation_Mode OF\n    0: (* Manual mode - valve closed *)\n        OXYGEN_SPARGE_VALVE := FALSE;\n    1: (* Auto mode - oxygen control with safety *)\n        OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND NOT DO_SENSOR_HIGH;\n    2: (* Cascade mode - ready for cascade control *)\n        OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND NOT DO_SENSOR_HIGH;\n    ELSE (* Default safe state for invalid modes *)\n        OXYGEN_SPARGE_VALVE := FALSE;\nEND_CASE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_0_functionality_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Central Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Alarm flood suppression system with emergency stop safety override and master enable control\n\n## Control Objective\nImplement emergency stop functionality and master enable control to manage alarm suppression during high alarm rate conditions while maintaining safety-critical override capability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds 20 alarms/minute threshold\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button (NC contact) status\n- **Alarm_Suppression_Enable**: BOOL - Master enable switch for alarm suppression system\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop status (TRUE when safe)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Alarm_Suppression_Enable (Input, BOOL)\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression mode when high alarm rates are detected, but only when the system is enabled and emergency stop conditions are safe. The emergency stop safety override takes absolute precedence over all operational logic. The master enable switch allows operators to manually disable the alarm suppression functionality while maintaining safety override protection.\n\n**Formal Logic Expression**: \nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC; \nAlarm_Suppression_Active := Alarm_Suppression_Enable AND High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- System must maintain fail-safe operation with NC contacts\n- Master enable must not override emergency stop safety functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detected | On/Off | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Alarm_Suppression_Enable | BOOL | R/W | Alarm suppression master enable | On/Off | 1s |\n| Alarm_Suppression_Active | BOOL | R | Alarm suppression active | On/Off | 1s |\n| E_STOP_ALARM_AREA_OK | BOOL | R | Emergency stop safe status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Alarm_Suppression_Enable=1, High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=1 → Alarm_Suppression_Active=1\n2. **System Disabled**: Alarm_Suppression_Enable=0, High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=1 → Alarm_Suppression_Active=0\n3. **Emergency Stop**: Alarm_Suppression_Enable=1, High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=0 → Alarm_Suppression_Active=0\n4. **No High Alarm Rate**: Alarm_Suppression_Enable=1, High_Alarm_Rate_Detected=0, E_STOP_ALARM_AREA_NC=1 → Alarm_Suppression_Active=0\n\n## Change Log\n- **Alarm_Suppression_Enable**: BOOL / Purpose: Master enable control for alarm suppression system / Compatibility: Backward compatible, adds optional enable control\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new BOOL input)\n- **Non-decreasing**: PASS (3≥2, 1≥1, 1≥1)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK\n- **This Gen**: Alarm_Suppression_Active = Alarm_Suppression_Enable AND High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK\n- **Not Equivalent**: The new equation requires an additional enable condition\n\n**Domain Keywords**: chemical plant, alarm management, SCADA, suppression, emergency stop, safety override",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds 20 alarms/minute threshold *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button (NC contact) status *)\n    Alarm_Suppression_Enable : BOOL; (* Master enable switch for alarm suppression system *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop status (TRUE when safe) *)\nEND_VAR\n\n(* Safety chain - emergency stop status evaluation *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\n\n(* Operational logic - alarm suppression activation *)\nAlarm_Suppression_Active := Alarm_Suppression_Enable AND High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_0_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Process Optimization\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Kiln cooler fan control with dual cooling thresholds and manual override capability\n\n## Control Objective\nActivate grate cooler fan when clinker temperature exceeds quality-appropriate threshold with master enable control and manual override capability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_COOLER_ENABLE**: BOOL - Master enable switch for kiln cooler system\n- **CLINKER_QUALITY_MODE**: BOOL - Selects between standard (FALSE) and premium (TRUE) cooling threshold modes\n- **COOLER_MANUAL_OVERRIDE**: BOOL - Manual override mode selector (0=Auto, 1=Manual)\n- **COOLER_MANUAL_FAN_CMD**: BOOL - Manual fan command when in override mode\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n\n### Internals (CUMULATIVE)\n- **STANDARD_COOLING_ACTIVE**: BOOL - Derived signal indicating standard cooling threshold exceeded\n- **PREMIUM_COOLING_ACTIVE**: BOOL - Derived signal indicating premium cooling threshold exceeded\n\n### Counts Check\n`Inputs: 5 (+2) | Outputs: 1 (+0) | Internals: 2 (+0)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_MANUAL_OVERRIDE (Input, BOOL)\n- COOLER_MANUAL_FAN_CMD (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dual cooling thresholds for standard and premium clinker quality modes. When manual override is disabled (COOLER_MANUAL_OVERRIDE = FALSE), the system operates in automatic mode where the cooling fan activates based on temperature thresholds and quality mode selection. When manual override is enabled (COOLER_MANUAL_OVERRIDE = TRUE), the cooling fan follows the manual command input directly. The master enable (KILN_COOLER_ENABLE) remains the safety permissive for all operating modes.\n\n**Formal Logic Expression**: \nSTANDARD_COOLING_ACTIVE := TEMPERATURE_HIGH AND NOT CLINKER_QUALITY_MODE\nPREMIUM_COOLING_ACTIVE := TEMPERATURE_HIGH AND CLINKER_QUALITY_MODE\nCOOLING_FAN := KILN_COOLER_ENABLE AND (CASE COOLER_MANUAL_OVERRIDE OF \n  0: (IF CLINKER_QUALITY_MODE THEN PREMIUM_COOLING_ACTIVE ELSE STANDARD_COOLING_ACTIVE),\n  1: COOLER_MANUAL_FAN_CMD \nEND_CASE)\n\n## Safety Requirements\n- Output defaults OFF on signal loss or power-up\n- Emergency stop systems override all functional logic\n- Master enable (KILN_COOLER_ENABLE) must be TRUE for any fan operation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_COOLER_ENABLE | BOOL | R/W | Master cooler system enable | On/Off | 100ms |\n| CLINKER_QUALITY_MODE | BOOL | R/W | Quality mode selection | Std/Prem | 100ms |\n| COOLER_MANUAL_OVERRIDE | BOOL | R/W | Manual override mode selector | Auto/Man | 100ms |\n| COOLER_MANUAL_FAN_CMD | BOOL | R/W | Manual fan command | On/Off | 100ms |\n| COOLING_FAN | BOOL | R | Cooling fan output status | On/Off | 100ms |\n| STANDARD_COOLING_ACTIVE | BOOL | R | Standard cooling active | On/Off | 100ms |\n| PREMIUM_COOLING_ACTIVE | BOOL | R | Premium cooling active | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Auto Mode Standard Quality**: COOLER_MANUAL_OVERRIDE=FALSE, CLINKER_QUALITY_MODE=FALSE, TEMPERATURE_HIGH=TRUE → COOLING_FAN=TRUE (when enabled)\n2. **Auto Mode Premium Quality**: COOLER_MANUAL_OVERRIDE=FALSE, CLINKER_QUALITY_MODE=TRUE, TEMPERATURE_HIGH=TRUE → COOLING_FAN=TRUE (when enabled)\n3. **Manual Mode Fan On**: COOLER_MANUAL_OVERRIDE=TRUE, COOLER_MANUAL_FAN_CMD=TRUE → COOLING_FAN=TRUE (when enabled)\n4. **Manual Mode Fan Off**: COOLER_MANUAL_OVERRIDE=TRUE, COOLER_MANUAL_FAN_CMD=FALSE → COOLING_FAN=FALSE\n5. **Safety Disable**: KILN_COOLER_ENABLE=FALSE → COOLING_FAN=FALSE (regardless of other inputs)\n\n## Change Log\n- **COOLER_MANUAL_OVERRIDE**: BOOL / Purpose: Manual override mode selector / Compatibility: Backward compatible\n- **COOLER_MANUAL_FAN_CMD**: BOOL / Purpose: Manual fan command in override mode / Compatibility: Backward compatible\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 5, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (2 new inputs, 0 other variables)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_COOLER_ENABLE AND (IF CLINKER_QUALITY_MODE THEN PREMIUM_COOLING_ACTIVE ELSE STANDARD_COOLING_ACTIVE)\n- **This Gen**: COOLING_FAN := KILN_COOLER_ENABLE AND (CASE COOLER_MANUAL_OVERRIDE OF 0: auto_logic, 1: COOLER_MANUAL_FAN_CMD END_CASE)\n- **Not Equivalent**: Manual override introduces completely different control path\n\n**Domain Keywords**: kiln, cooler, clinker, temperature, quality, manual, override, cement, fan",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_COOLER_ENABLE : BOOL; (* Master enable switch for kiln cooler system *)\n    CLINKER_QUALITY_MODE : BOOL; (* Selects between standard (FALSE) and premium (TRUE) cooling threshold modes *)\n    COOLER_MANUAL_OVERRIDE : BOOL; (* Manual override mode selector (0=Auto, 1=Manual) *)\n    COOLER_MANUAL_FAN_CMD : BOOL; (* Manual fan command when in override mode *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\nEND_VAR\nVAR\n    STANDARD_COOLING_ACTIVE : BOOL; (* Derived signal indicating standard cooling threshold exceeded *)\n    PREMIUM_COOLING_ACTIVE : BOOL; (* Derived signal indicating premium cooling threshold exceeded *)\nEND_VAR\n\n(* Safety and operational logic *)\nSTANDARD_COOLING_ACTIVE := TEMPERATURE_HIGH AND NOT CLINKER_QUALITY_MODE;\nPREMIUM_COOLING_ACTIVE := TEMPERATURE_HIGH AND CLINKER_QUALITY_MODE;\n\nIF COOLER_MANUAL_OVERRIDE THEN\n    (* Manual mode *)\n    COOLING_FAN := KILN_COOLER_ENABLE AND COOLER_MANUAL_FAN_CMD;\nELSE\n    (* Auto mode *)\n    IF CLINKER_QUALITY_MODE THEN\n        COOLING_FAN := KILN_COOLER_ENABLE AND PREMIUM_COOLING_ACTIVE;\n    ELSE\n        COOLING_FAN := KILN_COOLER_ENABLE AND STANDARD_COOLING_ACTIVE;\n    END_IF;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_5_functionality_contextual_complication_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: AFS-101\n- **Location**: Chemical Processing Plant Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm flood suppression system with operational mode selection and visual status feedback\n\n## Control Objective\nImplement real-time alarm flood suppression with operator confirmation, mode selection capability, and visual status feedback to prevent operator overload during process upsets.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring system\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system (operator control)\n- **SUPPRESSION_MODE**: INT - Operational mode selector (0=Disabled, 1=Standard Suppression, 2=Aggressive Suppression)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering system\n- **SUPPRESSION_ACTIVE_LIGHT**: BOOL - Status indicator showing when alarm suppression is active\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_MODE (Input, INT)\n\n## Control Logic Description\nThe system now includes a mode selection capability through the SUPPRESSION_MODE integer input. The control logic uses a CASE-OF-END_CASE structure to handle different operational modes. In mode 0 (Disabled), alarm suppression is completely disabled regardless of flood detection. In mode 1 (Standard Suppression), the system operates as before with suppression enabled only when both the master enable is active and a flood is detected. In mode 2 (Aggressive Suppression), the system enables suppression immediately when a flood is detected, bypassing the master enable requirement for rapid response during critical events. The SUPPRESSION_ACTIVE_LIGHT continues to mirror the ALARM_SUPPRESSION output for operator feedback.\n\n**Formal Logic Expression**: \nCASE SUPPRESSION_MODE OF\n  0: ALARM_SUPPRESSION := FALSE\n  1: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n  2: ALARM_SUPPRESSION := FLOOD_DETECTED\nEND_CASE;\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION\n\n## Safety Requirements\n- System defaults to disabled mode (FALSE) on power-up\n- Mode 0 provides a hard disable function for safety-critical situations\n- All suppressed alarms must still be logged for post-event analysis per ISA 18.2 standards\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 1s |\n| SUPPRESSION_MODE | INT | R/W | Operational mode selector | Mode | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Suppression active signal | On/Off | 1s |\n| SUPPRESSION_ACTIVE_LIGHT | BOOL | R | Status indicator light | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Mode 0 Disabled Test**: SUPPRESSION_MODE=0, FLOOD_DETECTED=TRUE → ALARM_SUPPRESSION=FALSE\n2. **Mode 1 Standard Operation**: SUPPRESSION_MODE=1, ALARM_SUPPRESSION_ENABLE=TRUE, FLOOD_DETECTED=TRUE → ALARM_SUPPRESSION=TRUE\n3. **Mode 2 Aggressive Operation**: SUPPRESSION_MODE=2, FLOOD_DETECTED=TRUE → ALARM_SUPPRESSION=TRUE\n4. **Mode Transition**: Change SUPPRESSION_MODE from 1 to 2 during flood → Verify proper mode transition\n\n## Change Log\n- **SUPPRESSION_MODE**: INT / Purpose: Operational mode selection for different suppression strategies / Compatibility: Backward compatible with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, outputs unchanged, internals unchanged)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n- **This Gen**: CASE SUPPRESSION_MODE OF 0: FALSE; 1: ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED; 2: FLOOD_DETECTED END_CASE\n- **Not Equivalent**: Yes, the CASE structure introduces multiple operational modes not present in the simple AND logic\n\n**Domain Keywords**: [alarm management, flood suppression, process control, chemical plant, EEMUA 191, ISA 18.2]",
  "output": "PROGRAM AFS_101_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring system *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system (operator control) *)\n    SUPPRESSION_MODE : INT; (* Operational mode selector (0=Disabled, 1=Standard Suppression, 2=Aggressive Suppression) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering system *)\n    SUPPRESSION_ACTIVE_LIGHT : BOOL; (* Status indicator showing when alarm suppression is active *)\nEND_VAR\n\nCASE SUPPRESSION_MODE OF\n    0: ALARM_SUPPRESSION := FALSE;\n    1: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED;\n    2: ALARM_SUPPRESSION := FLOOD_DETECTED;\nEND_CASE;\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_5_functionality_functionality_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Main Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 4 (mid)\n- **Branch**: safety\n- **Summary**: Chemical plant alarm suppression system with safety reset requirement for operator acknowledgment after suppression events\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety reset capability, requiring operator acknowledgment to resume normal operation after suppression mode activation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold\n- **Suppression_Mode_Selector**: INT - Operator mode selection (0=Automatic, 1=Manual)\n- **Manual_Suppression_Request**: BOOL - Manual suppression activation request\n- **Alarm_System_Safety_Reset_Req**: BOOL - Safety reset request button (momentary)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n- **Alarm_Suppression_Status_Light**: BOOL - Visual indicator for suppression status\n\n### Internals (CUMULATIVE)\n- **Alarm_Suppression_Cycle_Count**: UINT - Counts suppression activations\n- **Safety_Reset_Required**: BOOL - Indicates safety reset is needed after suppression\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Alarm_System_Safety_Reset_Req (Input, BOOL)\n- Safety_Reset_Required (Internal, BOOL)\n\n## Control Logic Description\nThe system activates alarm suppression based on operator mode selection and alarm rate conditions. When suppression becomes active, the Safety_Reset_Required flag is set. The Alarm_Suppression_Active output is gated by both the operational logic AND the safety reset condition - suppression remains active until the operator manually acknowledges by pressing the safety reset button. The Alarm_Suppression_Cycle_Count increments on each suppression activation event. The status light indicates active suppression mode.\n\n**Formal Logic Expression**: \nSafety_Reset_Required := Alarm_Suppression_Active AND NOT Alarm_System_Safety_Reset_Req\nAlarm_Suppression_Active := ((Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request)) AND NOT Safety_Reset_Required\n\n## Safety Requirements\n- Safety reset must be manually initiated by operator after suppression events\n- Suppression mode must remain active until operator acknowledgment\n- Critical safety alarms are never suppressed regardless of mode\n- System defaults to safe state (suppression OFF) on power-up\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate threshold exceeded | On/Off | 1s |\n| Suppression_Mode_Selector | INT | R/W | Operation mode selection | Enum | 1s |\n| Manual_Suppression_Request | BOOL | R/W | Manual suppression request | On/Off | 1s |\n| Alarm_System_Safety_Reset_Req | BOOL | R/W | Safety reset request | On/Off | 1s |\n| Alarm_Suppression_Active | BOOL | R | Suppression mode active | On/Off | 1s |\n| Alarm_Suppression_Status_Light | BOOL | R | Status indicator | On/Off | 1s |\n| Alarm_Suppression_Cycle_Count | UINT | R | Suppression cycle count | Count | 1s |\n| Safety_Reset_Required | BOOL | R | Safety reset pending | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Automatic Suppression with Reset**: High_Alarm_Rate_Detected=1, Mode=Auto → Suppression_Active=1, then Reset_Req=1 → Suppression_Active=0\n2. **Manual Suppression with Reset**: Manual_Request=1, Mode=Manual → Suppression_Active=1, then Reset_Req=1 → Suppression_Active=0\n3. **Reset Without Suppression**: Reset_Req=1 (no prior suppression) → No effect on system\n4. **Auto Mode Normal Operation**: High_Alarm_Rate=0 → Suppression_Active=0 regardless of reset state\n\n## Change Log\n- **Alarm_System_Safety_Reset_Req**: BOOL / Purpose: Operator safety reset request / Compatibility: New safety input\n- **Safety_Reset_Required**: BOOL / Purpose: Safety reset pending flag / Compatibility: New internal safety state\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new input, 1 new internal)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := (Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request)\n- **This Gen**: Alarm_Suppression_Active := ((Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request)) AND NOT Safety_Reset_Required\n- **Not Equivalent**: The new logic adds safety reset gating that prevents automatic reactivation until operator acknowledgment\n\n**Domain Keywords**: chemical processing, alarm management, safety reset, operator acknowledgment, suppression mode",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold *)\n    Suppression_Mode_Selector : INT; (* Operator mode selection (0=Automatic, 1=Manual) *)\n    Manual_Suppression_Request : BOOL; (* Manual suppression activation request *)\n    Alarm_System_Safety_Reset_Req : BOOL; (* Safety reset request button (momentary) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\n    Alarm_Suppression_Status_Light : BOOL; (* Visual indicator for suppression status *)\nEND_VAR\nVAR\n    Alarm_Suppression_Cycle_Count : UINT; (* Counts suppression activations *)\n    Safety_Reset_Required : BOOL; (* Indicates safety reset is needed after suppression *)\n    Prev_Alarm_Suppression_Active : BOOL; (* Previous state for edge detection *)\nEND_VAR\n\n(* Safety reset logic - must be processed first *)\nSafety_Reset_Required := Alarm_Suppression_Active AND NOT Alarm_System_Safety_Reset_Req;\n\n(* Main suppression logic with safety reset gating *)\nAlarm_Suppression_Active := ((Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request)) AND NOT Safety_Reset_Required;\n\n(* Status light mirrors suppression state *)\nAlarm_Suppression_Status_Light := Alarm_Suppression_Active;\n\n(* Count suppression activation events *)\nIF Alarm_Suppression_Active AND NOT Prev_Alarm_Suppression_Active THEN\n    Alarm_Suppression_Cycle_Count := Alarm_Suppression_Cycle_Count + 1;\nEND_IF;\n\n(* Store current state for next cycle edge detection *)\nPrev_Alarm_Suppression_Active := Alarm_Suppression_Active;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_0_maintenance_functionality_functionality_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Kiln-7B-Refractory\n- **Location**: Cement Plant Kiln Line 7B\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Thermal and acoustic monitoring system for kiln refractory wear prediction with safety state management\n\n## Control Objective\nImplement comprehensive refractory wear monitoring using thermal imaging and acoustic sensors to predict maintenance needs while maintaining safety interlocks and manual reset requirements\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_MONITORING_MODE**: INT - Operational mode selector (0=Off, 1=Auto, 2=Manual)\n- **KILN_SAFETY_RESET_REQ**: BOOL - Safety reset pushbutton (momentary contact)\n- **ACOUSTIC_SENSOR_READINGS**: ARRAY[1..8] OF REAL - Acoustic sensor array readings detecting brick spalling sounds (dB)\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_MONITORING_ACTIVE**: BOOL - System operational status indicator\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n- **Safety_State**: ENUM - Current safety state (KILN_SAFE_NORMAL, KILN_SAFE_TRIPPED, KILN_SAFE_RESETTING)\n- **ACOUSTIC_WEAR_THRESHOLD_EXCEEDED**: BOOL - Indicates when acoustic readings exceed wear threshold\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 2 (+0) | Internals: 4 (+1)`\n\n### New Items This Gen (must respect SEP)\n- ACOUSTIC_SENSOR_READINGS (Input, ARRAY[1..8] OF REAL)\n- ACOUSTIC_WEAR_THRESHOLD_EXCEEDED (Internal, BOOL)\n\n## Control Logic Description\nThe system now incorporates acoustic monitoring alongside thermal imaging for enhanced refractory wear detection. Eight acoustic sensors positioned around the kiln circumference detect sound signatures indicative of brick spalling. The system calculates the average acoustic reading and compares it against a predefined wear threshold (85 dB). When either thermal anomalies are detected OR acoustic readings exceed the threshold, and the system is in safe operational state with auto monitoring enabled, the maintenance alarm is activated. The safety state machine remains unchanged, requiring manual reset after any safety trip condition.\n\n**Formal Logic Expression**: \nSAFE_TO_OPERATE := (Safety_State = KILN_SAFE_NORMAL);\nACOUSTIC_WEAR_THRESHOLD_EXCEEDED := (AVERAGE(ACOUSTIC_SENSOR_READINGS) > 85.0);\nMAINTENANCE_ALARM := (THERMAL_ANOMALY OR ACOUSTIC_WEAR_THRESHOLD_EXCEEDED) AND SAFE_TO_OPERATE AND (KILN_MONITORING_MODE = 1);\nKILN_MONITORING_ACTIVE := SAFE_TO_OPERATE AND (KILN_MONITORING_MODE > 0);\n\n## Safety Requirements\n- Emergency stop activation forces immediate transition to KILN_SAFE_TRIPPED state\n- All operational outputs disabled when Safety_State ≠ KILN_SAFE_NORMAL\n- Manual reset button must be maintained for state transition completion\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | E-stop status | On/Off | 100ms |\n| KILN_MONITORING_MODE | INT | R/W | Monitoring mode | Enum | 1s |\n| KILN_SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| ACOUSTIC_SENSOR_READINGS | REAL[8] | R | Acoustic sensor array | dB | 500ms |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance alarm | On/Off | 1s |\n| KILN_MONITORING_ACTIVE | BOOL | R | Monitoring active | On/Off | 1s |\n| Safety_State | ENUM | R | Safety state | Enum | 100ms |\n| ACOUSTIC_WEAR_THRESHOLD_EXCEEDED | BOOL | R | Acoustic wear threshold | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: All inputs normal → MAINTENANCE_ALARM=FALSE, KILN_MONITORING_ACTIVE=TRUE\n2. **Thermal Anomaly**: THERMAL_ANOMALY=TRUE → MAINTENANCE_ALARM=TRUE\n3. **Acoustic Threshold**: ACOUSTIC_SENSOR_READINGS average >85dB → MAINTENANCE_ALARM=TRUE\n4. **E-Stop Activation**: KILN_E_STOP_NC=FALSE → All outputs disabled, Safety_State=KILN_SAFE_TRIPPED\n5. **Manual Reset**: KILN_SAFETY_RESET_REQ pressed during trip → State transitions to resetting then normal\n\n## Change Log\n- **ACOUSTIC_SENSOR_READINGS**: ARRAY[1..8] OF REAL / Purpose: Acoustic monitoring array for brick spalling detection / Compatibility: New sensor integration\n- **ACOUSTIC_WEAR_THRESHOLD_EXCEEDED**: BOOL / Purpose: Wear threshold detection flag / Compatibility: Enhances maintenance prediction\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 2, Internals: 3\n- **This gen totals**: Inputs: 5, Outputs: 2, Internals: 4\n- **SEP delta cap**: PASS (1 I/O + 1 internal)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND SAFE_TO_OPERATE AND (KILN_MONITORING_MODE = 1)\n- **This Gen**: MAINTENANCE_ALARM := (THERMAL_ANOMALY OR ACOUSTIC_WEAR_THRESHOLD_EXCEEDED) AND SAFE_TO_OPERATE AND (KILN_MONITORING_MODE = 1)\n- **Not Equivalent**: TRUE (OR condition expands detection criteria)\n\n**Domain Keywords**: refractory, kiln, thermal, acoustic, monitoring, maintenance, predictive, safety, reset",
  "output": "PROGRAM Kiln_7B_Refractory_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_MONITORING_MODE : INT; (* Operational mode selector (0=Off, 1=Auto, 2=Manual) *)\n    KILN_SAFETY_RESET_REQ : BOOL; (* Safety reset pushbutton (momentary contact) *)\n    ACOUSTIC_SENSOR_READINGS : ARRAY[1..8] OF REAL; (* Acoustic sensor array readings detecting brick spalling sounds (dB) *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_MONITORING_ACTIVE : BOOL; (* System operational status indicator *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\n    Safety_State : (KILN_SAFE_NORMAL, KILN_SAFE_TRIPPED, KILN_SAFE_RESETTING); (* Current safety state *)\n    ACOUSTIC_WEAR_THRESHOLD_EXCEEDED : BOOL; (* Indicates when acoustic readings exceed wear threshold *)\n    SAFE_TO_OPERATE : BOOL; (* Derived safety status *)\n    Acoustic_Sum : REAL; (* Temporary variable for acoustic sum calculation *)\n    Acoustic_Average : REAL; (* Temporary variable for acoustic average calculation *)\n    i : INT; (* Loop counter *)\nEND_VAR\n\n(* Safety chain logic - E-Stop status normalization *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Safety state machine *)\nCASE Safety_State OF\n    KILN_SAFE_NORMAL:\n        IF NOT KILN_E_STOP_OK THEN\n            Safety_State := KILN_SAFE_TRIPPED;\n        END_IF;\n        \n    KILN_SAFE_TRIPPED:\n        IF KILN_SAFETY_RESET_REQ AND KILN_E_STOP_OK THEN\n            Safety_State := KILN_SAFE_RESETTING;\n        END_IF;\n        \n    KILN_SAFE_RESETTING:\n        IF NOT KILN_SAFETY_RESET_REQ THEN\n            Safety_State := KILN_SAFE_NORMAL;\n        ELSIF NOT KILN_E_STOP_OK THEN\n            Safety_State := KILN_SAFE_TRIPPED;\n        END_IF;\nEND_CASE;\n\n(* Derived safety status *)\nSAFE_TO_OPERATE := (Safety_State = KILN_SAFE_NORMAL);\n\n(* Acoustic monitoring - calculate average of 8 sensors *)\nAcoustic_Sum := 0.0;\nFOR i := 1 TO 8 DO\n    Acoustic_Sum := Acoustic_Sum + ACOUSTIC_SENSOR_READINGS[i];\nEND_FOR;\nAcoustic_Average := Acoustic_Sum / 8.0;\n\n(* Acoustic wear threshold detection *)\nACOUSTIC_WEAR_THRESHOLD_EXCEEDED := (Acoustic_Average > 85.0);\n\n(* Maintenance alarm logic *)\nMAINTENANCE_ALARM := (THERMAL_ANOMALY OR ACOUSTIC_WEAR_THRESHOLD_EXCEEDED) \n                     AND SAFE_TO_OPERATE \n                     AND (KILN_MONITORING_MODE = 1);\n\n(* Monitoring active indicator *)\nKILN_MONITORING_ACTIVE := SAFE_TO_OPERATE AND (KILN_MONITORING_MODE > 0);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_70_variant_1_safety_functionality_maintenance_functionality_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: SOL-V001\n- **Location**: Zone A Irrigation Valve\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation Control\n\n## Control Objective\nTurn ON irrigation valve when moisture sensor indicates dry soil.\n\n## I/O Requirements\n\n### Input Variables\n- **SOIL_DRY_A**: BOOL - Capacitive soil moisture sensor indicating dry conditions in Zone A\n\n### Output Variables\n- **VALVE_A**: BOOL - Solenoid valve controlling water flow to Zone A irrigation\n\n## Control Logic Description\nDirect pass-through control. When the soil dry signal is active (TRUE), the irrigation valve activates immediately. When the soil dry signal is inactive (FALSE), the valve deactivates immediately.\n\n**Formal Logic Expression**: VALVE_A := SOIL_DRY_A\n\n## Safety Requirements\n- Valve turns OFF when sensor signal is lost\n- System defaults to safe state (valve OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: SOIL_DRY_A = TRUE → VALVE_A = TRUE\n2. **Deactivation**: SOIL_DRY_A = FALSE → VALVE_A = FALSE\n\n**Domain Keywords**: irrigation, moisture, valve",
  "output": "PROGRAM SOL_V001_Control\nVAR_INPUT\n  SOIL_DRY_A : BOOL; (* Capacitive soil moisture sensor indicating dry conditions in Zone A *)\nEND_VAR\nVAR_OUTPUT\n  VALVE_A : BOOL; (* Solenoid valve controlling water flow to Zone A irrigation *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nVALVE_A := SOIL_DRY_A;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_2_2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-SUPPRESSION\n- **Location**: Main Control Room, Chemical Processing Plant\n- **Control Type**: Alarm Management Safety System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Dynamic alarm flood suppression system with emergency stop safety override and manual reset requirement\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety override that requires manual reset after emergency stop activation to ensure operator awareness and deliberate recovery from safety trips.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button (momentary)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block to maintain trip state until reset\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SAFETY_RESET_REQ (Input, BOOL)\n- SAFETY_LATCH (Internal, SR)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and enables suppression when a flood is detected and the system is enabled. The emergency stop button provides immediate safety override, tripping the suppression system when pressed. A safety latch function block maintains the trip state until a manual reset is requested via the safety reset button. The reset request must be deliberately activated by an operator after the emergency condition has been cleared.\n\nThe safety latch is set when the emergency stop is activated (E_STOP_NC goes FALSE) and remains set until the reset request button (SAFETY_RESET_REQ) is pressed. The alarm suppression output is only enabled when the safety latch is not tripped AND the functional conditions (flood detected and system enabled) are met.\n\n**Formal Logic Expression**: \nSAFETY_LATCH(SET := NOT E_STOP_NC, RESET1 := SAFETY_RESET_REQ)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n\n## Safety Requirements\n- Emergency stop activation must immediately disable alarm suppression\n- Manual reset request required to restore system after emergency stop\n- Safety latch must maintain trip state until deliberate reset action\n- All safety conditions must take precedence over functional logic\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 1s |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression active | On/Off | 1s |\n| SAFETY_LATCH.Q1 | BOOL | R | Safety trip status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, E_STOP_NC=1 → ALARM_SUPPRESSION=1\n2. **Emergency Stop Activation**: E_STOP_NC=0 → ALARM_SUPPRESSION=0, SAFETY_LATCH.Q1=1\n3. **Reset After Emergency**: SAFETY_RESET_REQ=1 (after E_STOP_NC=1) → SAFETY_LATCH.Q1=0, ALARM_SUPPRESSION=1 (if conditions met)\n4. **Reset Without Clear Condition**: SAFETY_RESET_REQ=1 (while E_STOP_NC=0) → SAFETY_LATCH.Q1 remains 1\n\n## Change Log\n- **SAFETY_RESET_REQ**: BOOL / Purpose: Manual safety reset request button / Compatibility: New safety input\n- **SAFETY_LATCH**: SR / Purpose: Maintain safety trip state until reset / Compatibility: New internal function block\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new safety-related item: input + internal SR)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **This Gen**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **Not Equivalent**: The new logic adds safety latch condition that requires manual reset after emergency stop\n\n**Domain Keywords**: chemical plant, alarm suppression, safety reset, emergency stop, process safety",
  "output": "PROGRAM CHEM_PLANT_ALARM_SUPPRESSION\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button (momentary) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block to maintain trip state until reset *)\nEND_VAR\n\n(* Safety logic - emergency stop handling with manual reset requirement *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* Main operational logic with safety override *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_5_functionality_safety_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Plant_Alarm_System\n- **Location**: Central_Control_Room\n- **Control Type**: Alarm_Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process_Control\n- **Generation**: 5 (late)\n- **Branch**: safety\n- **Summary**: Dynamic alarm flood suppression system with safety watchdog timer to ensure system reliability during critical incidents\n\n## Control Objective\nImplement real-time alarm flood suppression with contextual prioritization while maintaining system health monitoring through safety watchdog functionality\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **PROCESS_UNIT_CRITICALITY_MODE**: BOOL - Threshold sensitivity mode selector\n- **SUPPRESSION_MANUAL_OVERRIDE**: BOOL - Manual override switch\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression\n- **Flood_Suppression_Active**: BOOL - Status indicator light\n- **Safety_Watchdog_Trip**: BOOL - Safety watchdog trip indicator\n\n### Internals (CUMULATIVE)\n- **Alarm_Rate_Threshold**: INT - Configurable threshold for flood detection\n- **Current_Alarm_Rate**: INT - Real-time alarm arrival rate\n- **Suppression_Stabilization_Timer**: TON - 5-second timer for flood state stabilization\n- **Safety_Watchdog_Timer**: TON - 2-second maximum cycle time watchdog timer\n- **SAFETY_WATCHDOG_OK**: BOOL - Safety watchdog status (TRUE when system healthy)\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 3 (+1) | Internals: 5 (+2)`\n\n### New Items This Gen (must respect SEP)\n- Safety_Watchdog_Trip (Output, BOOL)\n- Safety_Watchdog_Timer (Internal, TON)\n- SAFETY_WATCHDOG_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system continuously monitors alarm arrival rates and activates suppression when flood conditions are detected. A 5-second stabilization timer prevents rapid state changes during borderline conditions. A new safety watchdog timer monitors the suppression system's cycle time, ensuring it completes within the maximum allowed 2-second period. If the watchdog timer expires, it indicates potential system health issues, forcing suppression to be disabled and illuminating a trip indicator. The safety watchdog status gates all operational logic, ensuring suppression cannot activate if system reliability is compromised.\n\n**Formal Logic Expression**: \nSAFETY_WATCHDOG_OK := NOT Safety_Watchdog_Timer.Q\nALARM_SUPPRESSION := SAFETY_WATCHDOG_OK AND (SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold)))\nWHERE Alarm_Rate_Threshold := IF PROCESS_UNIT_CRITICALITY_MODE THEN 10 ELSE 15\n\n## Safety Requirements\n- Safety watchdog must force suppression OFF if system cycle time exceeds maximum allowed duration\n- Critical safety alarms never suppressed regardless of suppression state or manual override\n- System defaults to suppression OFF on power-up, communication loss, or watchdog trip\n- Manual reset required after watchdog trip condition is resolved\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection signal | On/Off | 100ms |\n| PROCESS_UNIT_CRITICALITY_MODE | BOOL | R/W | Threshold sensitivity mode selector | On/Off | 1s |\n| SUPPRESSION_MANUAL_OVERRIDE | BOOL | R/W | Manual override switch | On/Off | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression enable signal | On/Off | 100ms |\n| Flood_Suppression_Active | BOOL | R | Suppression status indicator | On/Off | 1s |\n| Safety_Watchdog_Trip | BOOL | R | Safety watchdog trip indicator | On/Off | 1s |\n| Alarm_Rate_Threshold | INT | R/W | Configurable flood threshold | alarms/min | 5s |\n| Current_Alarm_Rate | INT | R | Real-time alarm rate | alarms/min | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=TRUE, Current_Alarm_Rate=20 → ALARM_SUPPRESSION=TRUE, Safety_Watchdog_Trip=FALSE\n2. **Watchdog Trip**: System cycle time >2s → ALARM_SUPPRESSION=FALSE, Safety_Watchdog_Trip=TRUE\n3. **Manual Override**: SUPPRESSION_MANUAL_OVERRIDE=TRUE → ALARM_SUPPRESSION=TRUE (if watchdog OK)\n4. **Watchdog Recovery**: After trip, system recovers and manual reset → ALARM_SUPPRESSION follows normal logic\n\n## Change Log\n- **Safety_Watchdog_Timer**: TON / Purpose: Monitor system cycle time for health / Compatibility: Gates all operational logic\n- **SAFETY_WATCHDOG_OK**: BOOL / Purpose: Safety status indicator / Compatibility: ANDed with main logic\n- **Safety_Watchdog_Trip**: BOOL / Purpose: Visual indicator of safety trip / Compatibility: New HMI element\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 5\n- **SEP delta cap**: PASS (1 new TON in late phase allowed)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold))\n- **This Gen**: ALARM_SUPPRESSION := SAFETY_WATCHDOG_OK AND (SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold)))\n- **Not Equivalent**: Safety watchdog gates all operational logic\n\n**Domain Keywords**: chemical plant, alarm flood, suppression, safety watchdog, reliability monitoring, process safety",
  "output": "PROGRAM Chemical_Plant_Alarm_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    PROCESS_UNIT_CRITICALITY_MODE : BOOL; (* Threshold sensitivity mode selector *)\n    SUPPRESSION_MANUAL_OVERRIDE : BOOL; (* Manual override switch *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression *)\n    Flood_Suppression_Active : BOOL; (* Status indicator light *)\n    Safety_Watchdog_Trip : BOOL; (* Safety watchdog trip indicator *)\nEND_VAR\nVAR\n    Alarm_Rate_Threshold : INT; (* Configurable threshold for flood detection *)\n    Current_Alarm_Rate : INT; (* Real-time alarm arrival rate *)\n    Suppression_Stabilization_Timer : TON; (* 5-second timer for flood state stabilization *)\n    Safety_Watchdog_Timer : TON; (* 2-second maximum cycle time watchdog timer *)\n    SAFETY_WATCHDOG_OK : BOOL; (* Safety watchdog status (TRUE when system healthy) *)\nEND_VAR\n\n(* Safety watchdog logic - must execute first *)\nSafety_Watchdog_Timer(IN := TRUE, PT := T#2S);\nSAFETY_WATCHDOG_OK := NOT Safety_Watchdog_Timer.Q;\nSafety_Watchdog_Trip := NOT SAFETY_WATCHDOG_OK;\n\n(* Alarm rate threshold calculation *)\nIF PROCESS_UNIT_CRITICALITY_MODE THEN\n    Alarm_Rate_Threshold := 10;\nELSE\n    Alarm_Rate_Threshold := 15;\nEND_IF;\n\n(* Flood suppression stabilization timer *)\nSuppression_Stabilization_Timer(IN := FLOOD_DETECTED, PT := T#5S);\n\n(* Main alarm suppression logic - gated by safety watchdog *)\nALARM_SUPPRESSION := SAFETY_WATCHDOG_OK AND (SUPPRESSION_MANUAL_OVERRIDE OR (Suppression_Stabilization_Timer.Q AND (Current_Alarm_Rate > Alarm_Rate_Threshold)));\n\n(* Status indicator *)\nFlood_Suppression_Active := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_5_contextual_complication_functionality_functionality_contextual_complication_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Main Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Chemical Processing\n- **Generation**: 6 (late)\n- **Branch**: safety\n- **Summary**: Chemical plant alarm management system with dynamic flood suppression and time-based safety watchdog\n\n## Control Objective\nDynamically suppress non-critical alarms during high alarm rates while maintaining safety and preventing rapid cycling, with automatic time-based restoration to ensure critical alarms are never permanently masked.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds 20 alarms/minute threshold\n- **Alarm_System_Enable**: BOOL - Master enable switch for alarm management system\n- **Alarm_System_SAFETY_RESET_REQ**: BOOL - Momentary push-button required to reset safety condition\n- **SCADA_Command_Word**: WORD - SCADA command register with bit-mapped commands\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n- **Alarm_Suppression_Watchdog_Tripped**: BOOL - Indicates suppression watchdog timer has expired\n\n### Internals (CUMULATIVE)\n- **Alarm_Suppression_Cycle_Count**: UINT - Counts number of suppression mode activations\n- **Alarm_System_Safety_Tripped**: BOOL - Indicates when safety condition requires manual reset\n- **Suppression_Min_Duration_Timer**: TON - Timer ensuring suppression remains active for minimum 30 seconds\n- **SCADA_Emergency_Override_Req**: BOOL - SCADA emergency override request (bit 0 decoded)\n- **SCADA_System_Reset_Req**: BOOL - SCADA system reset request (bit 1 decoded)\n- **SCADA_Force_Suppression_Req**: BOOL - SCADA force suppression request (bit 2 decoded)\n- **Suppression_Max_Duration_Timer**: TON - Watchdog timer limiting maximum suppression duration to 5 minutes\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 2 (+1) | Internals: 7 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Output, BOOL) Alarm_Suppression_Watchdog_Tripped\n- (Internal, TON) Suppression_Max_Duration_Timer\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression when high rates are detected. A new safety watchdog timer limits the maximum duration of alarm suppression to 5 minutes (300 seconds) to prevent critical alarms from being masked indefinitely. When the suppression mode is active, the maximum duration timer starts counting. If suppression remains active for the full 5-minute duration, the watchdog trips, forcing the system to exit suppression mode and alerting operators via the Alarm_Suppression_Watchdog_Tripped output. This ensures that even if normal alarm rate conditions don't return, the system automatically restores full alarm visibility for operator review.\n\n**Formal Logic Expression**: \nAlarm_Suppression_Active := (Alarm_System_Enable AND (High_Alarm_Rate_Detected OR SCADA_Force_Suppression_Req) AND NOT Alarm_System_Safety_Tripped AND NOT Suppression_Max_Duration_Timer.Q) OR Suppression_Min_Duration_Timer.Q OR (SCADA_Emergency_Override_Req AND Alarm_System_Enable)\nAlarm_Suppression_Watchdog_Tripped := Suppression_Max_Duration_Timer.Q\n\n## Safety Requirements\n- Alarm suppression must not exceed 5 minutes continuously to prevent critical alarm masking\n- Watchdog timer trip must immediately force exit from suppression mode\n- Watchdog trip status must be clearly indicated to operators\n- Manual reset capability must be provided for watchdog trip condition\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Suppression_Watchdog_Tripped | BOOL | R | Maximum suppression duration exceeded | On/Off | 1 sec |\n| Suppression_Max_Duration_Timer.ET | TIME | R | Time elapsed in current suppression | Seconds | 1 sec |\n\n## Verification Requirements\n### Test Scenarios\n1. **Watchdog Timer Activation**: Set suppression active for >300 seconds → Alarm_Suppression_Watchdog_Tripped = TRUE, Alarm_Suppression_Active = FALSE\n2. **Watchdog Reset**: After trip, reset system → Alarm_Suppression_Watchdog_Tripped = FALSE, timer reset\n3. **Normal Operation**: Suppression <300 seconds → No watchdog trip, normal operation\n\n## Change Log\n- **Alarm_Suppression_Watchdog_Tripped**: BOOL / Purpose: Indicates maximum suppression duration exceeded / Compatibility: New safety output\n- **Suppression_Max_Duration_Timer**: TON / Purpose: 5-minute maximum suppression duration watchdog / Compatibility: New internal timer\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 9/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 6\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 7\n- **SEP delta cap**: PASS\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := (Alarm_System_Enable AND (High_Alarm_Rate_Detected OR SCADA_Force_Suppression_Req) AND NOT Alarm_System_Safety_Tripped) OR Suppression_Min_Duration_Timer.Q OR (SCADA_Emergency_Override_Req AND Alarm_System_Enable)\n- **This Gen**: Alarm_Suppression_Active := (Alarm_System_Enable AND (High_Alarm_Rate_Detected OR SCADA_Force_Suppression_Req) AND NOT Alarm_System_Safety_Tripped AND NOT Suppression_Max_Duration_Timer.Q) OR Suppression_Min_Duration_Timer.Q OR (SCADA_Emergency_Override_Req AND Alarm_System_Enable)\n- **Not Equivalent**: The new equation includes the additional safety condition NOT Suppression_Max_Duration_Timer.Q which prevents activation when watchdog is tripped\n\n**Domain Keywords**: chemical plant, alarm management, SCADA, flood suppression, watchdog timer, safety override",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds 20 alarms/minute threshold *)\n    Alarm_System_Enable : BOOL; (* Master enable switch for alarm management system *)\n    Alarm_System_SAFETY_RESET_REQ : BOOL; (* Momentary push-button required to reset safety condition *)\n    SCADA_Command_Word : WORD; (* SCADA command register with bit-mapped commands *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\n    Alarm_Suppression_Watchdog_Tripped : BOOL; (* Indicates suppression watchdog timer has expired *)\nEND_VAR\nVAR\n    Alarm_Suppression_Cycle_Count : UINT; (* Counts number of suppression mode activations *)\n    Alarm_System_Safety_Tripped : BOOL; (* Indicates when safety condition requires manual reset *)\n    Suppression_Min_Duration_Timer : TON; (* Timer ensuring suppression remains active for minimum 30 seconds *)\n    SCADA_Emergency_Override_Req : BOOL; (* SCADA emergency override request (bit 0 decoded) *)\n    SCADA_System_Reset_Req : BOOL; (* SCADA system reset request (bit 1 decoded) *)\n    SCADA_Force_Suppression_Req : BOOL; (* SCADA force suppression request (bit 2 decoded) *)\n    Suppression_Max_Duration_Timer : TON; (* Watchdog timer limiting maximum suppression duration to 5 minutes *)\nEND_VAR\n\n(* Safety chain - decode SCADA command word *)\nSCADA_Emergency_Override_Req := (SCADA_Command_Word AND 16#0001) <> 0;\nSCADA_System_Reset_Req := (SCADA_Command_Word AND 16#0002) <> 0;\nSCADA_Force_Suppression_Req := (SCADA_Command_Word AND 16#0004) <> 0;\n\n(* Safety reset logic *)\nIF Alarm_System_SAFETY_RESET_REQ THEN\n    Alarm_System_Safety_Tripped := FALSE;\nEND_IF;\n\n(* Maximum suppression duration watchdog timer *)\nSuppression_Max_Duration_Timer(IN := Alarm_Suppression_Active, PT := T#5M);\nAlarm_Suppression_Watchdog_Tripped := Suppression_Max_Duration_Timer.Q;\n\n(* Minimum suppression duration timer *)\nSuppression_Min_Duration_Timer(IN := Alarm_Suppression_Active, PT := T#30S);\n\n(* Main alarm suppression logic *)\nAlarm_Suppression_Active := (Alarm_System_Enable AND (High_Alarm_Rate_Detected OR SCADA_Force_Suppression_Req) AND NOT Alarm_System_Safety_Tripped AND NOT Suppression_Max_Duration_Timer.Q) OR Suppression_Min_Duration_Timer.Q OR (SCADA_Emergency_Override_Req AND Alarm_System_Enable);\n\n(* Safety trip condition - watchdog trip requires manual reset *)\nIF Suppression_Max_Duration_Timer.Q THEN\n    Alarm_System_Safety_Tripped := TRUE;\nEND_IF;\n\n(* Count suppression cycles *)\nIF Alarm_Suppression_Active AND NOT Suppression_Min_Duration_Timer.Q THEN\n    Alarm_Suppression_Cycle_Count := Alarm_Suppression_Cycle_Count + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_0_maintenance_functionality_safety_performance_interoperability_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CPF-Alarm-Suppression-System\n- **Location**: Main Control Room, Chemical Processing Facility\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 5 (late)\n- **Branch**: contextual_complication\n- **Summary**: Dynamic alarm flood suppression system with load-based adaptive behavior and configurable suppression modes\n\n## Control Objective\nImplement dynamic alarm flood suppression with configurable modes and load-based adaptive behavior to prevent operator overload during process upsets\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch\n- **SUPPRESSION_MODE_SELECTOR**: INT - Operator-selectable mode for suppression strategies\n- **ALARM_LOAD_PERCENT**: REAL - Analog input representing current alarm load percentage (0-100%)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n- **SUPPRESSION_ACTIVE_LIGHT**: BOOL - Status indicator showing suppression active\n\n### Internals (CUMULATIVE)\n- **SUPPRESSION_RAMP_TIMER**: TON - Timer for gradual suppression activation (2-second ramp)\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- ALARM_LOAD_PERCENT (Input, REAL)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and applies dynamic suppression based on configurable modes. A new analog input ALARM_LOAD_PERCENT provides real-time alarm load percentage. The suppression logic now incorporates this load measurement: when alarm load exceeds 80%, the system applies more aggressive suppression regardless of the selected mode to prevent operator overload. The existing mode-based suppression strategies remain operational but are enhanced with this load-based adaptive behavior.\n\n**Formal Logic Expression**: \nSUPPRESSION_RAMP_TIMER(IN := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED, PT := T#2S);\nCASE SUPPRESSION_MODE_SELECTOR OF\n  0: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q OR (ALARM_LOAD_PERCENT > 80.0);\n  1: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q AND (FLOOD_DETECTED OR ALARM_LOAD_PERCENT > 80.0);\n  2: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q AND ((FLOOD_DETECTED AND ALARM_SUPPRESSION_ENABLE) OR ALARM_LOAD_PERCENT > 80.0);\nEND_CASE\n\n## Safety Requirements\n- Immediate deactivation when enable signal lost or flood detection clears\n- Mode changes only take effect during non-flood conditions\n- Load-based suppression is advisory only and does not override safety-critical alarm handling\n- All alarms continue to be logged regardless of suppression state\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 100ms |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 100ms |\n| SUPPRESSION_MODE_SELECTOR | INT | R/W | Suppression strategy mode | Mode (0-2) | 100ms |\n| ALARM_LOAD_PERCENT | REAL | R | Current alarm load percentage | % | 100ms |\n| ALARM_SUPPRESSION | BOOL | R | Suppression active status | On/Off | 100ms |\n| SUPPRESSION_ACTIVE_LIGHT | BOOL | R | Suppression status indicator | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=0, ALARM_LOAD_PERCENT=50 → ALARM_SUPPRESSION=0\n2. **Flood Detection**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1 → ALARM_SUPPRESSION activates after 2s ramp\n3. **High Load Without Flood**: FLOOD_DETECTED=0, ALARM_LOAD_PERCENT=85 → ALARM_SUPPRESSION=1 (load-based activation)\n4. **Mode 0 with High Load**: SUPPRESSION_MODE_SELECTOR=0, ALARM_LOAD_PERCENT=85 → ALARM_SUPPRESSION=1\n5. **Safety Override**: ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0 regardless of other conditions\n\n## Change Log\n- **ALARM_LOAD_PERCENT**: REAL / Purpose: Provides real-time alarm load percentage for adaptive suppression / Compatibility: Backward compatible, enhances existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single new input with clean integration\n- **Measurability**: 9/10 - Clear threshold-based behavior\n- **Safety-Preservation**: 10/10 - Maintains all safety constraints\n- **Determinism**: 9/10 - Well-defined arithmetic comparison\n- **SEP-Compliance**: 10/10 - Within late phase limits\n- **ST-Coverage**: 8/10 - Introduces REAL type and arithmetic operations\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION = f(MODE, FLOOD_DETECTED, ENABLE) with timer\n- **This Gen**: ALARM_SUPPRESSION = f(MODE, FLOOD_DETECTED, ENABLE, LOAD_PERCENT) with load threshold\n- **Not Equivalent**: The new logic includes an OR condition with load percentage > 80%, making it distinct from parent logic\n\n**Domain Keywords**: alarm management, flood suppression, chemical processing, EEMUA 191, ISA 18.2, load adaptation",
  "output": "PROGRAM CPF_Alarm_Suppression_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch *)\n    SUPPRESSION_MODE_SELECTOR : INT; (* Operator-selectable mode for suppression strategies *)\n    ALARM_LOAD_PERCENT : REAL; (* Analog input representing current alarm load percentage (0-100%) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\n    SUPPRESSION_ACTIVE_LIGHT : BOOL; (* Status indicator showing suppression active *)\nEND_VAR\nVAR\n    SUPPRESSION_RAMP_TIMER : TON; (* Timer for gradual suppression activation (2-second ramp) *)\nEND_VAR\n\n(* Safety logic - immediate deactivation when enable signal lost or flood detection clears *)\nSUPPRESSION_RAMP_TIMER(IN := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED, PT := T#2S);\n\n(* Main suppression logic with load-based adaptive behavior *)\nCASE SUPPRESSION_MODE_SELECTOR OF\n    0: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q OR (ALARM_LOAD_PERCENT > 80.0);\n    1: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q AND (FLOOD_DETECTED OR ALARM_LOAD_PERCENT > 80.0);\n    2: ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q AND ((FLOOD_DETECTED AND ALARM_SUPPRESSION_ENABLE) OR ALARM_LOAD_PERCENT > 80.0);\nEND_CASE;\n\n(* Status indicator follows suppression state *)\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_5_functionality_functionality_contextual_complication_functionality_contextual_complication_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic oxygen supplementation control with master enable for bioreactor safety\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold, with master enable control for operator safety\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Bioreactor_Enable (Input, BOOL)\n\n## Control Logic Description\nThe system activates the supplemental oxygen valve when dissolved oxygen levels are critically low AND the bioreactor is enabled by the operator. The master enable switch provides a safety interlock that prevents oxygen supplementation when the system should not be operating.\n\n**Formal Logic Expression**: \nOxygen_Valve := Bioreactor_Enable AND DO_Low_Alarm\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Master enable switch prevents unintended operation\n- Oxygen valve only activates when both enable and low oxygen conditions are met\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen low alarm | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen supply valve status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Bioreactor_Enable=TRUE, DO_Low_Alarm=TRUE → Oxygen_Valve=TRUE\n2. **Disabled System**: Bioreactor_Enable=FALSE, DO_Low_Alarm=TRUE → Oxygen_Valve=FALSE\n3. **No Alarm Condition**: Bioreactor_Enable=TRUE, DO_Low_Alarm=FALSE → Oxygen_Valve=FALSE\n4. **Complete Disable**: Bioreactor_Enable=FALSE, DO_Low_Alarm=FALSE → Oxygen_Valve=FALSE\n\n## Change Log\n- **Bioreactor_Enable**: BOOL / Purpose: Master safety enable switch / Compatibility: AND-gated with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, outputs same, internals same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := Bioreactor_Enable AND DO_Low_Alarm\n- **Not Equivalent**: TRUE (new logic requires both conditions instead of just one)\n\n**Domain Keywords**: bioreactor, oxygen, fermentation, pharmaceutical, enable, safety, valve",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\n\nOxygen_Valve := Bioreactor_Enable AND DO_Low_Alarm;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_6_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Process Optimization Control\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Kiln cooler temperature control with debounced activation and manual override capability\n\n## Control Objective\nOptimize clinker cooling process with debounced temperature activation, emergency stop safety, and manual override capability for maintenance and testing\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_COOLER_MANUAL_OVERRIDE**: BOOL - Manual override switch for cooling fan control\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL - Visual indicator showing fan running status\n- **SCADA_Kiln_Status_Word**: WORD - Packed status word for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **TEMP_HIGH_DEBOUNCE_TMR**: TON - Timer for debouncing temperature high signal\n- **COOLER_FAN_RUNTIME_ACCUM**: TIME - Accumulated runtime of cooler fan\n- **TEMPERATURE_HIGH_DEBOUNCED**: BOOL - Debounced temperature high signal\n- **KILN_MANUAL_FAN_CMD**: BOOL - Manual fan command from override switch\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 3 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Input, BOOL) KILN_COOLER_MANUAL_OVERRIDE\n- (Internal, BOOL) KILN_MANUAL_FAN_CMD\n\n## Control Logic Description\nThe system maintains the existing temperature-based automatic control with debouncing and emergency stop safety. A new manual override capability allows operators to directly control the cooling fan for maintenance or testing purposes. When the manual override switch is active, the cooling fan follows the manual command input regardless of temperature conditions, while still respecting the emergency stop safety interlock. The automatic temperature-based control remains operational when manual override is not active.\n\n**Formal Logic Expression**: \nKILN_E_STOP_OK := KILN_E_STOP_NC; \nTEMP_HIGH_DEBOUNCE_TMR(IN:=TEMPERATURE_HIGH, PT:=T#200ms); \nTEMPERATURE_HIGH_DEBOUNCED := TEMP_HIGH_DEBOUNCE_TMR.Q; \nKILN_MANUAL_FAN_CMD := KILN_COOLER_MANUAL_OVERRIDE; \nCOOLING_FAN := KILN_E_STOP_OK AND (TEMPERATURE_HIGH_DEBOUNCED OR KILN_MANUAL_FAN_CMD); \nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN\n\n## Safety Requirements\n- Emergency stop immediately disables cooling fans regardless of temperature conditions or manual override\n- Manual override does not bypass emergency stop safety function\n- Temperature signal debouncing prevents false activations from transient signals\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_COOLER_MANUAL_OVERRIDE | BOOL | R/W | Manual override switch | On/Off | 100ms |\n| COOLING_FAN | BOOL | R | Cooling fan output status | On/Off | 100ms |\n| COOLER_FAN_RUNNING_LIGHT | BOOL | R | Fan running indicator | On/Off | 100ms |\n| SCADA_Kiln_Status_Word | WORD | R | Packed status information | Decimal | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Auto Operation**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1, KILN_COOLER_MANUAL_OVERRIDE=0 → COOLING_FAN=1 after debounce\n2. **Manual Override Active**: TEMPERATURE_HIGH=0, KILN_E_STOP_NC=1, KILN_COOLER_MANUAL_OVERRIDE=1 → COOLING_FAN=1\n3. **Emergency Stop Override**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0, KILN_COOLER_MANUAL_OVERRIDE=1 → COOLING_FAN=0\n4. **Auto with Manual Inactive**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1, KILN_COOLER_MANUAL_OVERRIDE=0 → COOLING_FAN=1 after debounce\n\n## Change Log\n- **KILN_COOLER_MANUAL_OVERRIDE**: BOOL / Purpose: Manual override switch for cooling fan control / Compatibility: Backward compatible\n- **KILN_MANUAL_FAN_CMD**: BOOL / Purpose: Internal manual command flag / Compatibility: New internal variable\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Adds only necessary manual control capability\n- **Measurability**: 8/10 - Manual status visible through existing SCADA interface\n- **Safety-Preservation**: 10/10 - Emergency stop still overrides all functions\n- **Determinism**: 9/10 - Clear priority: safety > manual > auto\n- **SEP-Compliance**: 10/10 - Respects late phase 1+1 allowance, no TON added\n- **ST-Coverage**: 7/10 - Introduces OR logic composition pattern\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 3, Internals: 4\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 5\n- **SEP delta cap**: PASS (1 input + 1 internal = 2 total)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH_DEBOUNCED\n- **This Gen**: COOLING_FAN := KILN_E_STOP_OK AND (TEMPERATURE_HIGH_DEBOUNCED OR KILN_MANUAL_FAN_CMD)\n- **Not Equivalent**: The new logic includes an OR condition that allows manual activation independent of temperature\n\n**Domain Keywords**: kiln, cooler, clinker, temperature, manual override, emergency stop, cement",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_COOLER_MANUAL_OVERRIDE : BOOL; (* Manual override switch for cooling fan control *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\n    COOLER_FAN_RUNNING_LIGHT : BOOL; (* Visual indicator showing fan running status *)\n    SCADA_Kiln_Status_Word : WORD; (* Packed status word for SCADA monitoring *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    TEMP_HIGH_DEBOUNCE_TMR : TON; (* Timer for debouncing temperature high signal *)\n    COOLER_FAN_RUNTIME_ACCUM : TIME; (* Accumulated runtime of cooler fan *)\n    TEMPERATURE_HIGH_DEBOUNCED : BOOL; (* Debounced temperature high signal *)\n    KILN_MANUAL_FAN_CMD : BOOL; (* Manual fan command from override switch *)\nEND_VAR\n\n(* Safety logic - emergency stop permissive *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Temperature signal debouncing *)\nTEMP_HIGH_DEBOUNCE_TMR(IN := TEMPERATURE_HIGH, PT := T#200ms);\nTEMPERATURE_HIGH_DEBOUNCED := TEMP_HIGH_DEBOUNCE_TMR.Q;\n\n(* Manual override command processing *)\nKILN_MANUAL_FAN_CMD := KILN_COOLER_MANUAL_OVERRIDE;\n\n(* Main control logic - safety first, then manual/auto selection *)\nCOOLING_FAN := KILN_E_STOP_OK AND (TEMPERATURE_HIGH_DEBOUNCED OR KILN_MANUAL_FAN_CMD);\n\n(* Status indicator follows fan output *)\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\n\n(* Runtime accumulation *)\nIF COOLING_FAN THEN\n    COOLER_FAN_RUNTIME_ACCUM := COOLER_FAN_RUNTIME_ACCUM + T#1MS;\nEND_IF;\n\n(* SCADA status word packing - bit 0: Fan status, bit 1: Manual mode, bit 2: Temp high, bit 3: E-Stop OK *)\nSCADA_Kiln_Status_Word := 0;\nIF COOLING_FAN THEN\n    SCADA_Kiln_Status_Word := SCADA_Kiln_Status_Word OR 1;\nEND_IF;\nIF KILN_MANUAL_FAN_CMD THEN\n    SCADA_Kiln_Status_Word := SCADA_Kiln_Status_Word OR 2;\nEND_IF;\nIF TEMPERATURE_HIGH_DEBOUNCED THEN\n    SCADA_Kiln_Status_Word := SCADA_Kiln_Status_Word OR 4;\nEND_IF;\nIF KILN_E_STOP_OK THEN\n    SCADA_Kiln_Status_Word := SCADA_Kiln_Status_Word OR 8;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_70_variant_5_safety_functionality_performance_maintenance_interoperability_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade PID with Performance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 6 (late)\n- **Branch**: performance\n- **Summary**: Bioreactor oxygen supplementation with adaptive timing and oxygen concentration stability monitoring\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with adaptive minimum valve on-time protection and oxygen concentration stability monitoring\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Bioreactor_E_Stop_NC**: BOOL - Emergency stop button status (TRUE when safe)\n- **Operation_Mode**: INT - Mode selector (0=Auto, 1=Manual, 2=Test)\n- **O2_Concentration_Percent**: REAL - Oxygen concentration percentage in supply gas\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **Safe_To_Operate**: BOOL - Combined safety permissive signal\n- **Oxygen_Valve_Cmd**: BOOL - Command signal before minimum on-time enforcement\n- **Oxygen_Valve_Min_On_Time_Timer**: TON - Timer to enforce adaptive minimum on-time\n- **Adaptive_Min_On_Time**: TIME - Calculated minimum on-time based on oxygen concentration\n- **O2_Concentration_Array**: ARRAY[0..9] OF REAL - Circular buffer for last 10 oxygen concentration readings\n- **O2_Concentration_Index**: INT - Current position in circular buffer\n- **O2_Concentration_Max**: REAL - Maximum oxygen concentration over last 10 samples\n- **O2_Concentration_Min**: REAL - Minimum oxygen concentration over last 10 samples\n\n### Counts Check\n`Inputs: 5 (+0) | Outputs: 1 (+0) | Internals: 8 (+4)`\n\n### New Items This Gen (must respect SEP)\n- O2_Concentration_Array (Internal, ARRAY[0..9] OF REAL)\n- O2_Concentration_Index (Internal, INT)\n- O2_Concentration_Max (Internal, REAL)\n- O2_Concentration_Min (Internal, REAL)\n\n## Control Logic Description\nThe system maintains oxygen supplementation control with adaptive minimum on-time while monitoring oxygen concentration stability. Each scan cycle, the current O2 concentration reading is stored in a circular buffer array. A FOR loop processes the array to calculate the maximum and minimum concentration values over the last 10 samples. This provides operators with visibility into oxygen supply stability, helping identify potential supply issues before they impact process control. The core safety and control logic remains unchanged - oxygen valve operation is still governed by dissolved oxygen alarms, safety permissives, and adaptive minimum on-time requirements based on concentration levels.\n\n**Formal Logic Expression**: \nOxygen_Valve := (Safe_To_Operate AND ((Operation_Mode=0 AND DO_Low_Alarm) OR (Operation_Mode=1))) OR Oxygen_Valve_Min_On_Time_Timer.Q\n\n## Safety Requirements\n- Emergency stop must immediately override all control logic and close oxygen valve\n- Oxygen valve must only operate when bioreactor is enabled and safe to operate\n- Minimum on-time protection prevents valve chatter during marginal oxygen conditions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Bioreactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Operation_Mode | INT | R/W | Control mode selector | Enum | 100ms |\n| O2_Concentration_Percent | REAL | R | Oxygen concentration | % | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 100ms |\n| O2_Concentration_Max | REAL | R | Max O2 concentration (10 samples) | % | 1s |\n| O2_Concentration_Min | REAL | R | Min O2 concentration (10 samples) | % | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Concentration Stability Monitoring**: Vary O2 concentration input → Verify array stores last 10 values and calculates correct max/min\n2. **Circular Buffer Operation**: Provide more than 10 samples → Verify oldest values are overwritten correctly\n3. **Performance Monitoring Only**: Verify concentration monitoring doesn't affect oxygen valve control logic\n4. **Safety Override**: Trigger emergency stop → Verify oxygen valve closes immediately regardless of concentration readings\n\n## Change Log\n- **O2_Concentration_Array**: ARRAY[0..9] OF REAL / Purpose: Store last 10 oxygen concentration readings / Compatibility: New performance monitoring\n- **O2_Concentration_Index**: INT / Purpose: Track current position in circular buffer / Compatibility: Internal tracking only\n- **O2_Concentration_Max**: REAL / Purpose: Maximum concentration over monitoring window / Compatibility: Performance indicator\n- **O2_Concentration_Min**: REAL / Purpose: Minimum concentration over monitoring window / Compatibility: Performance indicator\n\n## Self-check Summary\n- **Minimalism**: 8/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 9/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 5, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 5, Outputs: 1, Internals: 8\n- **SEP delta cap**: PASS (4 new internals, late phase allows 2+ items)\n- **Non-decreasing**: PASS (inputs: 5→5, outputs: 1→1, internals: 4→8)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := (Safe_To_Operate AND ((Operation_Mode=0 AND DO_Low_Alarm) OR (Operation_Mode=1))) OR Oxygen_Valve_Min_On_Time_Timer.Q\n- **This Gen**: Same core logic + concentration stability monitoring (no change to output equation)\n- **Not Equivalent**: True - performance monitoring only, doesn't affect control output\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, dissolved oxygen, concentration stability, pharmaceutical fermentation, cascade control",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Bioreactor_E_Stop_NC : BOOL; (* Emergency stop button status (TRUE when safe) *)\n    Operation_Mode : INT; (* Mode selector (0=Auto, 1=Manual, 2=Test) *)\n    O2_Concentration_Percent : REAL; (* Oxygen concentration percentage in supply gas *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    Safe_To_Operate : BOOL; (* Combined safety permissive signal *)\n    Oxygen_Valve_Cmd : BOOL; (* Command signal before minimum on-time enforcement *)\n    Oxygen_Valve_Min_On_Time_Timer : TON; (* Timer to enforce adaptive minimum on-time *)\n    Adaptive_Min_On_Time : TIME; (* Calculated minimum on-time based on oxygen concentration *)\n    O2_Concentration_Array : ARRAY[0..9] OF REAL; (* Circular buffer for last 10 oxygen concentration readings *)\n    O2_Concentration_Index : INT; (* Current position in circular buffer *)\n    O2_Concentration_Max : REAL; (* Maximum oxygen concentration over last 10 samples *)\n    O2_Concentration_Min : REAL; (* Minimum oxygen concentration over last 10 samples *)\n    i : INT; (* Loop counter for array processing *)\nEND_VAR\n\n(* Safety chain - emergency stop normalization and safe to operate calculation *)\nSafe_To_Operate := Bioreactor_Enable AND Bioreactor_E_Stop_NC;\n\n(* Oxygen concentration stability monitoring - circular buffer update *)\nO2_Concentration_Array[O2_Concentration_Index] := O2_Concentration_Percent;\nO2_Concentration_Index := (O2_Concentration_Index + 1) MOD 10;\n\n(* Calculate min/max concentrations from circular buffer *)\nO2_Concentration_Max := O2_Concentration_Array[0];\nO2_Concentration_Min := O2_Concentration_Array[0];\nFOR i := 1 TO 9 DO\n    IF O2_Concentration_Array[i] > O2_Concentration_Max THEN\n        O2_Concentration_Max := O2_Concentration_Array[i];\n    END_IF;\n    IF O2_Concentration_Array[i] < O2_Concentration_Min THEN\n        O2_Concentration_Min := O2_Concentration_Array[i];\n    END_IF;\nEND_FOR;\n\n(* Adaptive minimum on-time calculation based on oxygen concentration *)\nIF O2_Concentration_Percent < 20.0 THEN\n    Adaptive_Min_On_Time := T#2S;\nELSIF O2_Concentration_Percent < 50.0 THEN\n    Adaptive_Min_On_Time := T#1S;\nELSE\n    Adaptive_Min_On_Time := T#500MS;\nEND_IF;\n\n(* Main control logic - oxygen valve command generation *)\nOxygen_Valve_Cmd := Safe_To_Operate AND ((Operation_Mode = 0 AND DO_Low_Alarm) OR (Operation_Mode = 1));\n\n(* Minimum on-time timer enforcement *)\nOxygen_Valve_Min_On_Time_Timer(IN := Oxygen_Valve_Cmd, PT := Adaptive_Min_On_Time);\n\n(* Final output with minimum on-time protection *)\nOxygen_Valve := Oxygen_Valve_Cmd OR Oxygen_Valve_Min_On_Time_Timer.Q;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_6_functionality_safety_functionality_performance_contextual_complication_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BRX-07\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioreactor\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control with manual/auto mode selection for bioreactor operation during exponential growth phase\n\n## Control Objective\nMaintain dissolved oxygen levels at 30% setpoint with operator-selectable control modes and visual feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for control system\n- **Bioreactor_Mode_Selector**: INT - Operating mode selection (0=Manual Off, 1=Manual On, 2=Auto)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n- **OXYGEN_SPARGE_STATUS_LIGHT**: BOOL - Visual indicator for sparging activity\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- [Bioreactor_Mode_Selector: INT (Input)]\n\n## Control Logic Description\nThe control system maintains dissolved oxygen levels using a mode-selectable approach. The Bioreactor_Mode_Selector input allows the operator to choose between three operating modes: Manual Off (0), Manual On (1), and Automatic (2). In Manual Off mode, the oxygen sparge valve remains closed regardless of oxygen levels. In Manual On mode, the valve opens if the system is enabled. In Automatic mode, the valve opens only when enabled AND when dissolved oxygen levels are below the 30% setpoint threshold. The status light mirrors the valve state in all operational modes.\n\n**Formal Logic Expression**: \nCASE Bioreactor_Mode_Selector OF\n  0: OXYGEN_SPARGE_VALVE := FALSE\n  1: OXYGEN_SPARGE_VALVE := Bioreactor_Enable\n  2: OXYGEN_SPARGE_VALVE := Bioreactor_Enable AND NOT DO_SENSOR_HIGH\nEND_CASE;\nOXYGEN_SPARGE_STATUS_LIGHT := OXYGEN_SPARGE_VALVE\n\n## Safety Requirements\n- Master enable (Bioreactor_Enable) required for any control action\n- System defaults to safe state (valve closed) on power-up or signal loss\n- Manual Off mode provides emergency override capability\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | DO above setpoint | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable | On/Off | 100ms |\n| Bioreactor_Mode_Selector | INT | R/W | Operating mode | Mode | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Sparge valve state | On/Off | 100ms |\n| OXYGEN_SPARGE_STATUS_LIGHT | BOOL | R | Status indicator | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Manual Off Mode**: Bioreactor_Enable=TRUE, Bioreactor_Mode_Selector=0 → OXYGEN_SPARGE_VALVE=FALSE\n2. **Manual On Mode**: Bioreactor_Enable=TRUE, Bioreactor_Mode_Selector=1 → OXYGEN_SPARGE_VALVE=TRUE\n3. **Auto Mode Low Oxygen**: Bioreactor_Enable=TRUE, Bioreactor_Mode_Selector=2, DO_SENSOR_HIGH=FALSE → OXYGEN_SPARGE_VALVE=TRUE\n4. **Auto Mode High Oxygen**: Bioreactor_Enable=TRUE, Bioreactor_Mode_Selector=2, DO_SENSOR_HIGH=TRUE → OXYGEN_SPARGE_VALVE=FALSE\n5. **Safety Disable**: Bioreactor_Enable=FALSE → OXYGEN_SPARGE_VALVE=FALSE (all modes)\n\n## Change Log\n- **Bioreactor_Mode_Selector**: INT / Purpose: Operator mode selection / Compatibility: Backward compatible, adds functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10 (single new input with clear purpose)\n- **Measurability**: 9/10 (easily testable modes)\n- **Safety-Preservation**: 10/10 (maintains all safety features)\n- **Determinism**: 10/10 (clear mode-based logic)\n- **SEP-Compliance**: 10/10 (1 new variable, no TON violation)\n- **ST-Coverage**: 8/10 (introduces INT and CASE syntax)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, outputs unchanged, internals unchanged)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := Bioreactor_Enable AND DO_SENSOR_HIGH\n- **This Gen**: CASE-based logic with manual/auto modes\n- **Not Equivalent**: Manual modes provide completely different control paths than pure automatic operation\n\n**Domain Keywords**: [bioreactor, dissolved oxygen, sparge valve, mode selection, pharmaceutical, exponential growth]",
  "output": "PROGRAM BRX_07_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above 30% setpoint threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for control system *)\n    Bioreactor_Mode_Selector : INT; (* Operating mode selection (0=Manual Off, 1=Manual On, 2=Auto) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\n    OXYGEN_SPARGE_STATUS_LIGHT : BOOL; (* Visual indicator for sparging activity *)\nEND_VAR\n\nCASE Bioreactor_Mode_Selector OF\n    0: OXYGEN_SPARGE_VALVE := FALSE;\n    1: OXYGEN_SPARGE_VALVE := Bioreactor_Enable;\n    2: OXYGEN_SPARGE_VALVE := Bioreactor_Enable AND NOT DO_SENSOR_HIGH;\nEND_CASE;\nOXYGEN_SPARGE_STATUS_LIGHT := OXYGEN_SPARGE_VALVE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_0_functionality_functionality_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-REACTOR-001\n- **Location**: Fermentation Suite B, Pharmaceutical Production\n- **Control Type**: Cascade Control with Adaptive Optimization\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 5 (late)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen cascade control with agitator soft-start and aeration valve priority control\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with mode selection, agitator soft-start protection, and prioritized aeration response to minimize shear stress during oxygen demand spikes.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Dissolved oxygen below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch\n- **Fermenter_E_Stop_NC**: BOOL - Emergency stop button (NC contact)\n- **Mode_Selector**: INT - Operating mode selection (1=Auto, 2=Manual, 3=Test)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Activates agitator motor\n- **AERATION_VALVE_CMD**: BOOL - Controls oxygen/air supply valve\n\n### Internals (CUMULATIVE)\n- **Fermenter_E_Stop_OK**: BOOL - Emergency stop status\n- **Soft_Start_Timer**: TON - Timer for 5-second soft-start ramp period\n- **Soft_Start_Complete**: BOOL - Flag indicating soft-start period has finished\n- **Manual_Agitator_Cmd**: BOOL - Manual agitator control command\n- **Aeration_Valve_Active**: BOOL - Status flag for aeration valve operation\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 2 (+1) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- AERATION_VALVE_CMD (Output, BOOL)\n- Aeration_Valve_Active (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels through cascade control prioritizing aeration over agitation to minimize shear stress. When DO drops below 40%, the aeration valve immediately activates to increase oxygen supply. The agitator follows after a 5-second soft-start period if low oxygen conditions persist. Emergency stop immediately overrides all control functions. Mode selection allows for auto, manual, or test operation with manual agitator control available in manual mode.\n\n**Formal Logic Expression**: \nAERATION_VALVE_CMD := Fermenter_E_Stop_OK AND DO_LOW\nAGITATOR_ON := Fermenter_E_Stop_OK AND (CASE Mode_Selector OF 1: Fermenter_Enable AND DO_LOW AND (Soft_Start_Timer.Q OR Soft_Start_Complete) 2: Manual_Agitator_Cmd ELSE: FALSE END_CASE)\n\n## Safety Requirements\n- Emergency stop must immediately override all operating modes and stop both agitator and aeration systems\n- Safety permissive (Fermenter_E_Stop_OK) must be TRUE for any equipment operation\n- Manual mode requires explicit operator intervention for agitator control\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen below threshold | Boolean | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master enable | Boolean | 100ms |\n| Fermenter_E_Stop_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| Mode_Selector | INT | R/W | Operation mode | Enum | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator status | Boolean | 100ms |\n| AERATION_VALVE_CMD | BOOL | R | Aeration valve status | Boolean | 100ms |\n| Soft_Start_Complete | BOOL | R | Soft-start status | Boolean | 100ms |\n| Aeration_Valve_Active | BOOL | R | Aeration active status | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Aeration Priority Test**: DO_LOW=TRUE, Fermenter_Enable=TRUE, Mode_Selector=1 → AERATION_VALVE_CMD=TRUE immediately, AGITATOR_ON=TRUE after 5 seconds\n2. **Emergency Stop Override**: Fermenter_E_Stop_NC=FALSE → AERATION_VALVE_CMD=FALSE, AGITATOR_ON=FALSE regardless of other conditions\n3. **Manual Mode Operation**: Mode_Selector=2, Manual_Agitator_Cmd=TRUE → AGITATOR_ON=TRUE, AERATION_VALVE_CMD follows DO_LOW state\n\n## Change Log\n- **AERATION_VALVE_CMD**: BOOL / Purpose: Control oxygen/air supply valve to prioritize aeration over agitation / Compatibility: Added to existing safety and mode logic\n- **Aeration_Valve_Active**: BOOL / Purpose: Status flag for HMI display of aeration operation / Compatibility: Derived from AERATION_VALVE_CMD\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 output + 1 internal = 2 items)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_E_Stop_OK AND (CASE Mode_Selector OF 1: Fermenter_Enable AND DO_LOW AND (Soft_Start_Timer.Q OR Soft_Start_Complete) 2: Manual_Agitator_Cmd ELSE: FALSE END_CASE)\n- **This Gen**: AERATION_VALVE_CMD := Fermenter_E_Stop_OK AND DO_LOW\n- **Not Equivalent**: TRUE - Different outputs with different condition complexity\n\n**Domain Keywords**: fermentation, dissolved oxygen, aeration, agitation, bioreactor, pharmaceutical, cascade control",
  "output": "PROGRAM BIO_REACTOR_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Dissolved oxygen below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch *)\n    Fermenter_E_Stop_NC : BOOL; (* Emergency stop button (NC contact) *)\n    Mode_Selector : INT; (* Operating mode selection (1=Auto, 2=Manual, 3=Test) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Activates agitator motor *)\n    AERATION_VALVE_CMD : BOOL; (* Controls oxygen/air supply valve *)\nEND_VAR\nVAR\n    Fermenter_E_Stop_OK : BOOL; (* Emergency stop status *)\n    Soft_Start_Timer : TON; (* Timer for 5-second soft-start ramp period *)\n    Soft_Start_Complete : BOOL; (* Flag indicating soft-start period has finished *)\n    Manual_Agitator_Cmd : BOOL; (* Manual agitator control command *)\n    Aeration_Valve_Active : BOOL; (* Status flag for aeration valve operation *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nFermenter_E_Stop_OK := Fermenter_E_Stop_NC;\n\n(* Aeration valve control - immediate response to low oxygen *)\nAERATION_VALVE_CMD := Fermenter_E_Stop_OK AND DO_LOW;\nAeration_Valve_Active := AERATION_VALVE_CMD;\n\n(* Agitator control with mode selection and soft-start *)\nSoft_Start_Timer(IN := DO_LOW AND Fermenter_E_Stop_OK AND (Mode_Selector = 1) AND Fermenter_Enable, PT := T#5S);\n\nIF Soft_Start_Timer.Q THEN\n    Soft_Start_Complete := TRUE;\nEND_IF;\n\nCASE Mode_Selector OF\n    1: (* Auto mode *)\n        AGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW AND (Soft_Start_Timer.Q OR Soft_Start_Complete);\n    2: (* Manual mode *)\n        AGITATOR_ON := Fermenter_E_Stop_OK AND Manual_Agitator_Cmd;\nELSE (* Test mode or invalid mode *)\n    AGITATOR_ON := FALSE;\nEND_CASE;\n\n(* Reset soft-start complete flag when conditions change *)\nIF NOT (DO_LOW AND Fermenter_E_Stop_OK AND (Mode_Selector = 1) AND Fermenter_Enable) THEN\n    Soft_Start_Complete := FALSE;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_1_functionality_safety_contextual_complication_functionality_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: AFSS-101\n- **Location**: Main Control Room - Chemical Processing Plant\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: contextual_complication\n- **Summary**: Alarm flood suppression system with gradual activation ramp to prevent abrupt state changes during flood events\n\n## Control Objective\nImplement real-time alarm flood suppression with operator confirmation, visual status feedback, and gradual activation to prevent operator confusion during flood onset\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring system\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system (operator control)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering system\n- **SUPPRESSION_ACTIVE_LIGHT**: BOOL - Status indicator showing when alarm suppression is active\n\n### Internals (CUMULATIVE)\n- **SUPPRESSION_RAMP_TIMER**: TON - Timer for gradual suppression system activation (2-second ramp period)\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_RAMP_TIMER (Internal, TON)\n\n## Control Logic Description\nThe system monitors for alarm flood conditions and enables suppression when both the operator enable switch is active and a flood is detected. A new gradual activation feature uses a TON timer to create a 2-second ramp-up period before full suppression activates. The SUPPRESSION_RAMP_TIMER starts when both enable conditions are met, and the ALARM_SUPPRESSION output follows the timer's Q output, providing smooth activation. The SUPPRESSION_ACTIVE_LIGHT indicates when suppression is active, including during the ramp period. Safety logic ensures immediate deactivation if either enable condition is lost.\n\n**Formal Logic Expression**: \nSUPPRESSION_RAMP_TIMER(IN := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED, PT := T#2S);\nALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q;\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION;\n\n## Safety Requirements\n- System defaults to disabled (FALSE) on power-up\n- Immediate deactivation when either enable signal is lost or flood detection clears\n- Gradual activation prevents abrupt state changes but does not compromise safety response times\n- All suppressed alarms must still be logged for post-event analysis\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Suppression system enable | On/Off | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 1s |\n| SUPPRESSION_ACTIVE_LIGHT | BOOL | R | Visual status indicator | On/Off | 1s |\n| SUPPRESSION_RAMP_TIMER.ET | TIME | R | Ramp timer elapsed time | Seconds | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Flood Response**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1 → ALARM_SUPPRESSION ramps up over 2 seconds\n2. **Immediate Deactivation**: During suppression, ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0 immediately\n3. **Flood Clears**: During suppression, FLOOD_DETECTED=0 → ALARM_SUPPRESSION=0 immediately\n4. **System Disabled**: ALARM_SUPPRESSION_ENABLE=0, FLOOD_DETECTED=1 → ALARM_SUPPRESSION=0\n\n## Change Log\n- **SUPPRESSION_RAMP_TIMER**: TON / Purpose: Gradual activation of suppression system / Compatibility: Backward compatible with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n- **This Gen**: SUPPRESSION_RAMP_TIMER(IN := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED, PT := T#2S); ALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q\n- **Not Equivalent**: The new logic introduces a time delay before full activation, making the outputs temporally different\n\n**Domain Keywords**: alarm management, flood suppression, gradual activation, process safety, EEMUA 191, ISA 18.2",
  "output": "PROGRAM AFSS_101_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring system *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system (operator control) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering system *)\n    SUPPRESSION_ACTIVE_LIGHT : BOOL; (* Status indicator showing when alarm suppression is active *)\nEND_VAR\nVAR\n    SUPPRESSION_RAMP_TIMER : TON; (* Timer for gradual suppression system activation (2-second ramp period) *)\nEND_VAR\n\nSUPPRESSION_RAMP_TIMER(IN := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED, PT := T#2S);\nALARM_SUPPRESSION := SUPPRESSION_RAMP_TIMER.Q;\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_5_functionality_functionality_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-SUPP-001\n- **Location**: Chemical Processing Plant - Central Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Alarm flood suppression system with safety interlocks and activation delay to prevent brief spikes from triggering suppression mode\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety interlocks and activation delay to prevent operator overload during process upsets while maintaining safety-critical visibility\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (NC contact, fail-safe)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor area safety door interlock status (NC contact, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **Suppression_Delay_TON**: TON - 2-second timer for suppression activation delay\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 4 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Suppression_Delay_TON (Internal, TON)\n\n## Control Logic Description\nThe system monitors alarm rates and safety conditions. When a high alarm rate is detected AND safety permissive conditions are met, a 2-second delay timer starts. Alarm suppression only activates after this delay period completes, preventing brief alarm spikes from triggering suppression mode. The safety permissive combines emergency stop and reactor guard door status, with both requiring normally-closed fail-safe operation.\n\n**Formal Logic Expression**: \nAlarm_Suppression_Active := Suppression_Delay_TON.Q\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S)\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC\n\n## Safety Requirements\n- Emergency stop must immediately disable alarm suppression functionality\n- Reactor guard door interlock must prevent alarm suppression when door is open\n- Safety logic overrides all functional logic without exception\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detected | On/Off | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Guard door status | On/Off | 100ms |\n| Alarm_Suppression_Active | BOOL | R/W | Suppression mode active | On/Off | 1s |\n| Suppression_Delay_TON.ET | TIME | R | Delay timer elapsed time | ms | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High alarm rate + safety permissive → Suppression activates after 2s delay\n2. **Brief Spike**: High alarm rate for <2s + safety permissive → No suppression activation\n3. **Safety Violation**: High alarm rate + emergency stop active → No suppression activation\n4. **Door Open**: High alarm rate + guard door open → No suppression activation\n\n## Change Log\n- **Suppression_Delay_TON**: TON / Purpose: Prevent brief alarm spikes from triggering suppression / Compatibility: Maintains all existing safety functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE\n- **This Gen**: Alarm_Suppression_Active := Suppression_Delay_TON.Q\n- **Not Equivalent**: The new logic introduces timing dependency not present in parent\n\n**Domain Keywords**: alarm suppression, chemical processing, safety interlock, delay timer, SCADA",
  "output": "PROGRAM ALM_SUPP_001_Control\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (NC contact, fail-safe) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor area safety door interlock status (NC contact, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    Suppression_Delay_TON : TON; (* 2-second timer for suppression activation delay *)\nEND_VAR\n\n(* Safety chain logic - evaluated first *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Main operational logic *)\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S);\nAlarm_Suppression_Active := Suppression_Delay_TON.Q;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_0_safety_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control with mode selection for different fermentation phases\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with configurable control strategies through mode selection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Control_Mode**: INT - Mode selector for different control strategies (0=Manual OFF, 1=Auto, 2=High Demand)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n- **AGITATOR_RUNNING_LIGHT**: BOOL - Visual indicator showing agitator motor status\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Control_Mode: Input, INT\n\n## Control Logic Description\nThe system implements a mode-selectable control strategy for dissolved oxygen management. When Fermenter_Enable is TRUE, the Control_Mode input determines the agitator behavior:\n- Mode 0 (Manual OFF): AGITATOR_ON remains OFF regardless of DO level\n- Mode 1 (Auto): AGITATOR_ON activates when DO_LOW is detected (original logic)\n- Mode 2 (High Demand): AGITATOR_ON activates immediately (preemptive agitation for high oxygen demand phases)\n\nThe AGITATOR_RUNNING_LIGHT mirrors the AGITATOR_ON status for operator feedback. Safety logic ensures outputs turn OFF when input signals are lost and defaults to safe state on power-up.\n\n**Formal Logic Expression**: \nCASE Control_Mode OF\n  0: AGITATOR_ON := FALSE\n  1: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n  2: AGITATOR_ON := Fermenter_Enable\nEND_CASE;\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Mode 0 provides manual override capability for emergency situations\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable | On/Off | 100ms |\n| Control_Mode | INT | R/W | Control Strategy Mode | Enum | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Active | On/Off | 100ms |\n| AGITATOR_RUNNING_LIGHT | BOOL | R | Agitator Status Light | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Manual Override Test**: Control_Mode=0, Fermenter_Enable=TRUE → AGITATOR_ON=FALSE\n2. **Auto Mode Normal**: Control_Mode=1, Fermenter_Enable=TRUE, DO_LOW=FALSE → AGITATOR_ON=FALSE\n3. **Auto Mode Low Oxygen**: Control_Mode=1, Fermenter_Enable=TRUE, DO_LOW=TRUE → AGITATOR_ON=TRUE\n4. **High Demand Mode**: Control_Mode=2, Fermenter_Enable=TRUE → AGITATOR_ON=TRUE\n5. **Safety Disable**: Fermenter_Enable=FALSE → AGITATOR_ON=FALSE (all modes)\n\n## Change Log\n- **Control_Mode**: INT / Purpose: Mode selection for different control strategies / Compatibility: Backward compatible with existing logic in Mode 1\n\n## Self-check Summary\n- **Minimalism**: 9/10 (Single new variable with clear purpose)\n- **Measurability**: 8/10 (Mode changes are observable through agitator behavior)\n- **Safety-Preservation**: 9/10 (Maintains all safety features, adds manual override)\n- **Determinism**: 10/10 (Deterministic CASE logic)\n- **SEP-Compliance**: 10/10 (One new input, no TON added)\n- **ST-Coverage**: 8/10 (Introduces CASE statement and INT data type)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (Inputs: 2→3, Outputs: 2→2, Internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: CASE Control_Mode OF 0: FALSE; 1: Fermenter_Enable AND DO_LOW; 2: Fermenter_Enable END_CASE\n- **Not Equivalent**: The new logic introduces mode-dependent behavior that is not equivalent to the simple AND gate\n\n**Domain Keywords**: [bioreactor, fermentation, dissolved oxygen, agitation, pharmaceutical, mode selection]",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Control_Mode : INT; (* Mode selector for different control strategies (0=Manual OFF, 1=Auto, 2=High Demand) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\n    AGITATOR_RUNNING_LIGHT : BOOL; (* Visual indicator showing agitator motor status *)\nEND_VAR\n\n(* Main control logic with mode selection *)\nCASE Control_Mode OF\n    0: AGITATOR_ON := FALSE; (* Manual OFF mode: agitator remains OFF *)\n    1: AGITATOR_ON := Fermenter_Enable AND DO_LOW; (* Auto mode: agitator ON when enabled AND low oxygen *)\n    2: AGITATOR_ON := Fermenter_Enable; (* High Demand mode: agitator ON when enabled *)\nEND_CASE;\n\n(* Mirror agitator status to running light *)\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_1_functionality_functionality_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Main Control Room\n- **Control Type**: Alarm Filtering Logic\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 1 (early)\n- **Branch**: contextual_complication\n- **Summary**: State-aware alarm filtering that suppresses non-critical alarms during abnormal plant operating conditions\n\n## Control Objective\nImplement dynamic alarm filtering that adjusts alarm presentation based on plant operational state to reduce operator cognitive load during process upsets while maintaining visibility of critical alarms.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **Plant_State_Normal**: BOOL - Indicates plant is in normal operating state (TRUE = normal, FALSE = abnormal/startup/shutdown)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Plant_State_Normal (Input, BOOL)\n\n## Control Logic Description\nThe system implements state-aware alarm filtering. During normal plant operation (Plant_State_Normal = TRUE), all active alarms are displayed to the operator. When the plant is in abnormal states such as startup, shutdown, or emergency conditions (Plant_State_Normal = FALSE), alarm presentation is suppressed to prevent alarm flooding while maintaining system logging for later analysis.\n\n**Formal Logic Expression**: \nAlarm_Display := Alarm_Active AND Plant_State_Normal\n\n## Safety Requirements\n- Alarm suppression shall only occur when explicitly commanded by the Plant_State_Normal input\n- All alarms shall be logged regardless of display state for post-event analysis\n- Critical safety alarms (to be defined in future generations) shall bypass state-based filtering\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Process alarm activation signal | On/Off | 100ms |\n| Plant_State_Normal | BOOL | R/W | Plant operational state indicator | On/Off | 1s |\n| Alarm_Display | BOOL | R | Alarm display status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation Alarm**: Plant_State_Normal = TRUE, Alarm_Active = TRUE → Alarm_Display = TRUE\n2. **Normal Operation No Alarm**: Plant_State_Normal = TRUE, Alarm_Active = FALSE → Alarm_Display = FALSE\n3. **Abnormal State Alarm**: Plant_State_Normal = FALSE, Alarm_Active = TRUE → Alarm_Display = FALSE\n4. **Abnormal State No Alarm**: Plant_State_Normal = FALSE, Alarm_Active = FALSE → Alarm_Display = FALSE\n\n## Change Log\n- **Plant_State_Normal**: BOOL / Purpose: Enable state-aware alarm filtering / Compatibility: Backward compatible with existing alarm signals\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs: 1→2, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := Alarm_Active\n- **This Gen**: Alarm_Display := Alarm_Active AND Plant_State_Normal\n- **Not Equivalent**: The new logic introduces conditional suppression based on plant state\n\n**Domain Keywords**: [chemical plant, alarm management, state-aware filtering, operator cognitive load, process upsets]",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    Alarm_Active : BOOL; (* Process alarm activation signal *)\n    Plant_State_Normal : BOOL; (* Plant operational state indicator *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm display status *)\nEND_VAR\n\nAlarm_Display := Alarm_Active AND Plant_State_Normal;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_68_variant_6_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Discrete Control with Timing\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Kiln cooler fan control with thermal shock prevention and manual override capability\n\n## Control Objective\nActivate grate cooler fan when clinker temperature exceeds threshold with safety override, soft start ramp, and manual operator control capability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_COOLER_ENABLE**: BOOL - Master enable switch for kiln cooler system\n- **KILN_COOLER_E_STOP_NC**: BOOL - Emergency stop button (NC contact, TRUE when safe)\n- **COOLER_MANUAL_OVERRIDE**: BOOL - Manual override switch for direct fan control\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n\n### Internals (CUMULATIVE)\n- **SAFE_TO_OPERATE**: BOOL - Safety permissive signal\n- **SOFT_START_TON**: TON - Timer for soft start ramp period (5 seconds)\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 2 (+0)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_MANUAL_OVERRIDE: Input, BOOL\n\n## Control Logic Description\nThe system activates the cooling fan when either manual override is engaged or when automatic conditions are met (enable switch active, high temperature detected, and soft start timer complete). Safety permissive (emergency stop not activated) is required for all operational modes. The soft start timer provides a 5-second ramp period to prevent thermal shock when automatic operation begins.\n\n**Formal Logic Expression**: \nCOOLING_FAN := SAFE_TO_OPERATE AND (COOLER_MANUAL_OVERRIDE OR (KILN_COOLER_ENABLE AND TEMPERATURE_HIGH AND SOFT_START_TON.Q))\n\n## Safety Requirements\n- Emergency stop must immediately de-energize cooling fan regardless of mode\n- Safety permissive signal must be TRUE for any fan operation\n- Manual override must still respect safety constraints\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_COOLER_ENABLE | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| KILN_COOLER_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLER_MANUAL_OVERRIDE | BOOL | R/W | Manual fan override | On/Off | 100ms |\n| COOLING_FAN | BOOL | R | Cooling fan status | On/Off | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Safety permissive status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Automatic Normal Operation**: KILN_COOLER_ENABLE=TRUE, TEMPERATURE_HIGH=TRUE, KILN_COOLER_E_STOP_NC=TRUE, COOLER_MANUAL_OVERRIDE=FALSE → COOLING_FAN=TRUE after 5s delay\n2. **Manual Override Operation**: COOLER_MANUAL_OVERRIDE=TRUE, KILN_COOLER_E_STOP_NC=TRUE → COOLING_FAN=TRUE immediately\n3. **Safety Override**: KILN_COOLER_E_STOP_NC=FALSE → COOLING_FAN=FALSE regardless of other inputs\n4. **Mixed Mode Safety**: COOLER_MANUAL_OVERRIDE=TRUE but KILN_COOLER_E_STOP_NC=FALSE → COOLING_FAN=FALSE\n\n## Change Log\n- **COOLER_MANUAL_OVERRIDE**: BOOL / Purpose: Manual operator control override / Compatibility: OR'd with auto logic while preserving safety\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs: 3→4, outputs: 1→1, internals: 2→2)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := SAFE_TO_OPERATE AND KILN_COOLER_ENABLE AND TEMPERATURE_HIGH AND SOFT_START_TON.Q\n- **This Gen**: COOLING_FAN := SAFE_TO_OPERATE AND (COOLER_MANUAL_OVERRIDE OR (KILN_COOLER_ENABLE AND TEMPERATURE_HIGH AND SOFT_START_TON.Q))\n- **Not Equivalent**: Manual override path creates different logical behavior\n\n**Domain Keywords**: [kiln, cooler, clinker, temperature, fan, override, safety, cement]",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_COOLER_ENABLE : BOOL; (* Master enable switch for kiln cooler system *)\n    KILN_COOLER_E_STOP_NC : BOOL; (* Emergency stop button (NC contact, TRUE when safe) *)\n    COOLER_MANUAL_OVERRIDE : BOOL; (* Manual override switch for direct fan control *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\nEND_VAR\nVAR\n    SAFE_TO_OPERATE : BOOL; (* Safety permissive signal *)\n    SOFT_START_TON : TON; (* Timer for soft start ramp period (5 seconds) *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nSAFE_TO_OPERATE := KILN_COOLER_E_STOP_NC;\n\n(* Soft start timer activation - runs when automatic conditions are met but safety is OK *)\nSOFT_START_TON(\n    IN := SAFE_TO_OPERATE AND KILN_COOLER_ENABLE AND TEMPERATURE_HIGH AND NOT COOLER_MANUAL_OVERRIDE,\n    PT := T#5S\n);\n\n(* Main control logic with manual override and automatic operation *)\nCOOLING_FAN := SAFE_TO_OPERATE AND (\n    COOLER_MANUAL_OVERRIDE OR \n    (KILN_COOLER_ENABLE AND TEMPERATURE_HIGH AND SOFT_START_TON.Q)\n);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_70_variant_5_functionality_safety_contextual_complication_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: VAL-001\n- **Location**: Irrigation Main Line\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation Control\n\n## Control Objective\nTurn ON main water shut-off valve when leak detection signal is inactive.\n\n## I/O Requirements\n\n### Input Variables\n- **LEAK_DETECT**: BOOL - Flow meter leak detection signal (TRUE indicates leak condition)\n\n### Output Variables\n- **MAIN_VALVE**: BOOL - Main water supply shut-off valve control\n\n## Control Logic Description\nDirect pass-through control. When the leak detection signal is inactive (FALSE), the main valve remains open. When the leak detection signal is active (TRUE), the main valve closes immediately.\n\n**Formal Logic Expression**: MAIN_VALVE := NOT LEAK_DETECT\n\n## Safety Requirements\n- Output turns OFF (valve closes) when leak signal is active\n- System defaults to safe state (valve closed) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: LEAK_DETECT = FALSE → MAIN_VALVE = TRUE\n2. **Leak Condition**: LEAK_DETECT = TRUE → MAIN_VALVE = FALSE\n\n**Domain Keywords**: irrigation, flow control, leak detection",
  "output": "PROGRAM VAL_001_Control\nVAR_INPUT\n    LEAK_DETECT : BOOL; (* Flow meter leak detection signal (TRUE indicates leak condition) *)\nEND_VAR\nVAR_OUTPUT\n    MAIN_VALVE : BOOL; (* Main water supply shut-off valve control *)\nEND_VAR\n\n(* Direct pass-through control with safety default *)\nMAIN_VALVE := NOT LEAK_DETECT;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_7",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-SUPP-001\n- **Location**: Central Control Room\n- **Control Type**: Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic alarm flood suppression system with manual enable control for operator-initiated suppression during flood events\n\n## Control Objective\nImplement a real-time alarm suppression system that activates during confirmed alarm flood events to prevent operator overload while maintaining manual control capability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring system\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system (operator control)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering system\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- ALARM_SUPPRESSION_ENABLE (Input, BOOL)\n\n## Control Logic Description\nThe alarm suppression system activates when both conditions are met: the flood detection system identifies a flood event AND the operator has enabled the suppression system. This provides manual override capability to ensure suppression only occurs when intentionally enabled by the operator during legitimate flood scenarios.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n\n## Safety Requirements\n- Suppression system defaults to disabled (FALSE) on power-up\n- Manual enable required before any suppression can occur\n- System turns OFF immediately when either enable signal is lost or flood detection clears\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1 sec |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Suppression system master enable | On/Off | 1 sec |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 1 sec |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation - Suppression Enabled**: ALARM_SUPPRESSION_ENABLE = TRUE, FLOOD_DETECTED = TRUE → ALARM_SUPPRESSION = TRUE\n2. **Suppression Disabled**: ALARM_SUPPRESSION_ENABLE = FALSE, FLOOD_DETECTED = TRUE → ALARM_SUPPRESSION = FALSE\n3. **No Flood Event**: ALARM_SUPPRESSION_ENABLE = TRUE, FLOOD_DETECTED = FALSE → ALARM_SUPPRESSION = FALSE\n4. **Power-up Safety**: System startup → ALARM_SUPPRESSION = FALSE\n\n## Change Log\n- **ALARM_SUPPRESSION_ENABLE**: BOOL / Purpose: Master enable control for suppression system / Compatibility: Backward compatible with existing FLOOD_DETECTED input\n\n## Self-check Summary\n- **Minimalism**: 9/10 (single new variable with clear purpose)\n- **Measurability**: 8/10 (easily testable enable/disable scenarios)\n- **Safety-Preservation**: 9/10 (manual override capability added)\n- **Determinism**: 10/10 (clear Boolean logic)\n- **SEP-Compliance**: 10/10 (1 new BOOL variable in early phase)\n- **ST-Coverage**: 7/10 (maintains basic assignment, adds AND operator)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable ≤ 1 limit)\n- **Non-decreasing**: PASS (inputs: 1→2, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := FLOOD_DETECTED\n- **This Gen**: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n- **Not Equivalent**: The new logic requires both enable AND flood detection, while parent only required flood detection\n\n**Domain Keywords**: [alarm management, flood suppression, process control, operator override, EEMUA 191, ISA 18.2]",
  "output": "PROGRAM ALM_SUPP_001_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring system *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system (operator control) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering system *)\nEND_VAR\n\nALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_68_variant_5_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-001\n- **Location**: Cement Plant Kiln Line 1\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system with debounce filtering and operator-selectable monitoring modes\n\n## Control Objective\nDetect persistent thermal anomalies in kiln refractory lining while providing operator control over monitoring modes and preventing false alerts with safety override\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) for kiln monitoring area\n- **KILN_MONITORING_MODE**: INT - Operator mode selection (0=Auto, 1=Manual Override, 2=Test Mode)\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_ALARM_INDICATOR**: BOOL - Visual status light indicating active maintenance alarm condition\n\n### Internals (CUMULATIVE)\n- **THERMAL_ANOMALY_DEBOUNCED**: BOOL - Debounced thermal anomaly signal\n- **THERMAL_DEBOUNCE_TIMER**: TON - Timer instance for thermal anomaly debouncing\n- **MANUAL_OVERRIDE**: BOOL - Internal flag for manual alarm activation in override mode\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 3 (+1)`\n\n### New Items This Gen (must respect SEP)\n- KILN_MONITORING_MODE (Input, INT)\n- MANUAL_OVERRIDE (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors thermal anomalies using infrared cameras with a 2-second debounce filter to prevent false alerts. A new mode selector input allows operators to choose between three monitoring modes: Auto mode uses the standard thermal anomaly detection logic, Manual Override mode allows direct alarm control, and Test Mode forces the alarm active for system verification. The emergency stop safety override remains the highest priority in all modes, immediately silencing alarms when activated.\n\n**Formal Logic Expression**: \nCASE KILN_MONITORING_MODE OF\n  0: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY_DEBOUNCED;\n  1: MAINTENANCE_ALARM := KILN_E_STOP_NC AND MANUAL_OVERRIDE;\n  2: MAINTENANCE_ALARM := KILN_E_STOP_NC AND TRUE;\nEND_CASE\n\n## Safety Requirements\n- Emergency stop must override all functional logic and immediately silence alarms\n- Safety circuits must use normally-closed contacts for fail-safe operation\n- Mode changes must not compromise safety interlocks\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_MONITORING_MODE | INT | R/W | Monitoring mode selection | Mode | 1s |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance alarm status | On/Off | 100ms |\n| KILN_ALARM_INDICATOR | BOOL | R | Alarm indicator status | On/Off | 100ms |\n| THERMAL_ANOMALY_DEBOUNCED | BOOL | R | Debounced anomaly signal | On/Off | 100ms |\n| MANUAL_OVERRIDE | BOOL | R/W | Manual override control | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Auto Mode Operation**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=0 → MAINTENANCE_ALARM=1 after 2s debounce\n2. **Manual Override Mode**: KILN_MONITORING_MODE=1, MANUAL_OVERRIDE=1, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=1\n3. **Test Mode Operation**: KILN_MONITORING_MODE=2, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=1\n4. **Safety Override**: KILN_E_STOP_NC=0 in any mode → MAINTENANCE_ALARM=0\n\n## Change Log\n- **KILN_MONITORING_MODE**: INT / Purpose: Operator mode selection for monitoring system / Compatibility: Backward compatible\n- **MANUAL_OVERRIDE**: BOOL / Purpose: Manual alarm control in override mode / Compatibility: New internal flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 3\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY_DEBOUNCED\n- **This Gen**: CASE KILN_MONITORING_MODE OF 0: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY_DEBOUNCED; 1: MAINTENANCE_ALARM := KILN_E_STOP_NC AND MANUAL_OVERRIDE; 2: MAINTENANCE_ALARM := KILN_E_STOP_NC AND TRUE; END_CASE\n- **Not Equivalent**: True - New logic includes mode-dependent behavior\n\n**Domain Keywords**: [kiln, refractory, thermal, monitoring, maintenance, alarm, mode, override]",
  "output": "PROGRAM KILN_REF_001_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) for kiln monitoring area *)\n    KILN_MONITORING_MODE : INT; (* Operator mode selection (0=Auto, 1=Manual Override, 2=Test Mode) *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_ALARM_INDICATOR : BOOL; (* Visual status light indicating active maintenance alarm condition *)\nEND_VAR\nVAR\n    THERMAL_ANOMALY_DEBOUNCED : BOOL; (* Debounced thermal anomaly signal *)\n    THERMAL_DEBOUNCE_TIMER : TON; (* Timer instance for thermal anomaly debouncing *)\n    MANUAL_OVERRIDE : BOOL; (* Internal flag for manual alarm activation in override mode *)\nEND_VAR\n\n(* Thermal anomaly debouncing *)\nTHERMAL_DEBOUNCE_TIMER(IN := THERMAL_ANOMALY, PT := T#2S);\nTHERMAL_ANOMALY_DEBOUNCED := THERMAL_DEBOUNCE_TIMER.Q;\n\n(* Mode-dependent alarm logic with safety override *)\nCASE KILN_MONITORING_MODE OF\n    0: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY_DEBOUNCED;\n    1: MAINTENANCE_ALARM := KILN_E_STOP_NC AND MANUAL_OVERRIDE;\n    2: MAINTENANCE_ALARM := KILN_E_STOP_NC AND TRUE;\nEND_CASE;\n\n(* Alarm indicator follows maintenance alarm state *)\nKILN_ALARM_INDICATOR := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_70_variant_1_safety_functionality_performance_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KIL-042\n- **Location**: Kiln Shell Section 3\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Monitoring\n\n## Control Objective\nTurn ON MAINTENANCE_ALARM when THERMAL_ANOMALY is active.\n\n## I/O Requirements\n\n### Input Variables\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern on kiln shell\n\n### Output Variables\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: MAINTENANCE_ALARM := THERMAL_ANOMALY\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: THERMAL_ANOMALY = TRUE → MAINTENANCE_ALARM = TRUE\n2. **Deactivation**: THERMAL_ANOMALY = FALSE → MAINTENANCE_ALARM = FALSE\n\n**Domain Keywords**: refractory monitoring, thermal imaging, maintenance alert",
  "output": "PROGRAM KIL_042_Control\nVAR_INPUT\n  THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern on kiln shell *)\nEND_VAR\nVAR_OUTPUT\n  MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\nEND_VAR\n\nMAINTENANCE_ALARM := THERMAL_ANOMALY;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_70_variant_1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Reactor Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: contextual_complication\n- **Summary**: Chemical plant alarm suppression system with safety interlocks and stabilization timer to prevent rapid mode switching during borderline alarm rate conditions\n\n## Control Objective\nImplement emergency stop and safety door interlock functionality with stabilization timer to disable alarm suppression during safety-critical situations and prevent rapid toggling during borderline alarm rates\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (NC contact, fail-safe)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor area safety door interlock status (NC contact, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **TON_Alarm_Suppression_Stabilize**: TON - Timer for alarm suppression stabilization period\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 4 (+1)`\n\n### New Items This Gen (must respect SEP)\n- TON_Alarm_Suppression_Stabilize (Internal, TON)\n\n## Control Logic Description\nThe system continuously monitors alarm rates and safety conditions. Emergency stop and safety door status are normalized to safe status signals. The combined safety permissive requires both safety systems to be in safe state. When high alarm rate is detected and the system is safe to operate, a 5-second stabilization timer starts. Alarm suppression only activates after the timer completes, preventing rapid toggling during borderline alarm rate conditions. Safety signals override all operational logic with immediate effect.\n\n**Formal Logic Expression**: \nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC; E_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC; SAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK; TON_Alarm_Suppression_Stabilize(IN:=High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT:=T#5S); Alarm_Suppression_Active := TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE\n\n## Safety Requirements\n- Emergency stop and safety door interlocks must override all operational logic immediately\n- No filtering or delay allowed on safety signal propagation\n- Alarm suppression must never activate during safety-critical conditions\n- Stabilization timer must not delay safety shutdown functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate exceeds threshold | On/Off | 1s |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Safety door status | On/Off | 100ms |\n| Alarm_Suppression_Active | BOOL | R/W | Alarm suppression mode active | On/Off | 1s |\n| TON_Alarm_Suppression_Stabilize.ET | TIME | R | Stabilization timer elapsed time | ms | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High alarm rate + safe conditions → Alarm suppression activates after 5s delay\n2. **Safety Override**: High alarm rate + emergency stop → Immediate suppression deactivation\n3. **Borderline Alarm Rate**: Rapid alarm rate fluctuations around threshold → Stable suppression state\n4. **Door Interrupt**: High alarm rate + door open → Immediate suppression deactivation\n\n## Change Log\n- **TON_Alarm_Suppression_Stabilize**: TON / Purpose: 5-second stabilization timer to prevent rapid alarm suppression mode switching / Compatibility: Preserves all safety functions while adding operational stability\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (inputs: 3→3, outputs: 1→1, internals: 3→4)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = High_Alarm_Rate_Detected AND SAFE_TO_OPERATE\n- **This Gen**: Alarm_Suppression_Active = TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE\n- **Not Equivalent**: True - timer delay introduces different temporal behavior\n\n**Domain Keywords**: chemical processing, alarm management, safety interlocks, stabilization timer, SCADA",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (NC contact, fail-safe) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor area safety door interlock status (NC contact, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    TON_Alarm_Suppression_Stabilize : TON; (* Timer for alarm suppression stabilization period *)\nEND_VAR\n\n(* Safety signal normalization - immediate propagation *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\n\n(* Combined safety permissive *)\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Alarm suppression stabilization timer *)\nTON_Alarm_Suppression_Stabilize(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#5S);\n\n(* Alarm suppression activation logic - safety always overrides *)\nAlarm_Suppression_Active := TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_0_safety_safety_contextual_complication_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Adaptive Dosing\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Bioprocess Control\n- **Generation**: 5 (late)\n- **Branch**: functionality\n- **Summary**: Bioreactor dissolved oxygen control with pH monitoring for early metabolic imbalance detection\n\n## Control Objective\nMaintain dissolved oxygen at 30% setpoint with safety interlocks while monitoring pH levels for early detection of metabolic imbalances that could affect product quality\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for system operation\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **pH_SENSOR**: REAL - pH level measurement from bioreactor probe (0-14 pH)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n- **pH_Out_Of_Range_Alarm**: BOOL - Alarm indicating pH outside optimal metabolic range (6.8-7.2 pH)\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safe_To_Operate**: BOOL - Safety permissive indicating all safety conditions met\n- **Oxygen_Sparge_Min_On_Timer**: TON - Timer ensuring minimum 2-second valve on-time\n- **Agitator_Soft_Start_Timer**: TON - 30-second soft-start timer for gradual agitator ramp-up\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+1) | Internals: 3 (+0)`\n\n### New Items This Gen (must respect SEP)\n- pH_SENSOR (Input, REAL)\n- pH_Out_Of_Range_Alarm (Output, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control through the primary sparge valve while continuously monitoring pH levels for early detection of metabolic imbalances. The oxygen sparge valve operates based on DO sensor readings, safety permissives, and timing constraints to prevent rapid cycling. A new pH sensor provides continuous measurement of bioreactor acidity/alkalinity, with an alarm triggered when pH deviates outside the optimal metabolic range of 6.8-7.2 pH, indicating potential metabolic stress that could affect protein quality.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND Agitator_Soft_Start_Timer.Q\npH_Out_Of_Alarm := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2)\n\n## Safety Requirements\n- Emergency stop immediately overrides all functional logic\n- Safety permissive must be TRUE for any operational output\n- pH alarm provides early warning but does not override safety functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | DO above setpoint | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | System master enable | On/Off | 100ms |\n| BioReactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| pH_SENSOR | REAL | R | pH level measurement | pH | 1s |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen valve control | On/Off | 100ms |\n| pH_Out_Of_Range_Alarm | BOOL | R | pH deviation alarm | On/Off | 1s |\n| BioReactor_Safe_To_Operate | BOOL | R | Safety permissive status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal pH Operation**: pH_SENSOR = 7.0 → pH_Out_Of_Range_Alarm = FALSE\n2. **Low pH Alarm**: pH_SENSOR = 6.5 → pH_Out_Of_Range_Alarm = TRUE\n3. **High pH Alarm**: pH_SENSOR = 7.5 → pH_Out_Of_Range_Alarm = TRUE\n4. **pH Boundary Testing**: pH_SENSOR = 6.8 → pH_Out_Of_Range_Alarm = FALSE\n5. **pH Boundary Testing**: pH_SENSOR = 7.2 → pH_Out_Of_Range_Alarm = FALSE\n\n## Change Log\n- **pH_SENSOR**: REAL / Purpose: Continuous pH monitoring for metabolic imbalance detection / Compatibility: New analog input\n- **pH_Out_Of_Range_Alarm**: BOOL / Purpose: Alarm for pH outside optimal metabolic range / Compatibility: New alarm output\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential pH monitoring with simple threshold logic\n- **Measurability**: 10/10 - Clear alarm thresholds and test scenarios defined\n- **Safety-Preservation**: 10/10 - Safety logic unchanged and prioritized\n- **Determinism**: 9/10 - Simple threshold logic with predictable behavior\n- **SEP-Compliance**: 10/10 - Late phase allows 1 new I/O + 1 new I/O (2 total)\n- **ST-Coverage**: 8/10 - Introduces REAL data type and comparison operators\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 3\n- **SEP delta cap**: PASS (2 new I/O variables)\n- **Non-decreasing**: PASS (4≥3, 2≥1, 3≥3)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND Agitator_Soft_Start_Timer.Q\n- **This Gen**: pH_Out_Of_Range_Alarm := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2)\n- **Not Equivalent**: Oxygen control vs pH alarm - completely different functions\n\n**Domain Keywords**: bioreactor, pH monitoring, metabolic imbalance, dissolved oxygen, pharmaceutical, protein quality",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above 30% setpoint threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for system operation *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    pH_SENSOR : REAL; (* pH level measurement from bioreactor probe (0-14 pH) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\n    pH_Out_Of_Range_Alarm : BOOL; (* Alarm indicating pH outside optimal metabolic range (6.8-7.2 pH) *)\nEND_VAR\nVAR\n    BioReactor_Safe_To_Operate : BOOL; (* Safety permissive indicating all safety conditions met *)\n    Oxygen_Sparge_Min_On_Timer : TON; (* Timer ensuring minimum 2-second valve on-time *)\n    Agitator_Soft_Start_Timer : TON; (* 30-second soft-start timer for gradual agitator ramp-up *)\nEND_VAR\n\n(* Safety chain - emergency stop and enable conditions *)\nBioReactor_Safe_To_Operate := BioReactor_E_Stop_NC AND Bioreactor_Enable;\n\n(* Oxygen sparge control logic *)\nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND Agitator_Soft_Start_Timer.Q;\n\n(* pH monitoring and alarm logic *)\npH_Out_Of_Range_Alarm := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2);\n\n(* Timer function blocks *)\nOxygen_Sparge_Min_On_Timer(IN := OXYGEN_SPARGE_VALVE, PT := T#2S);\nAgitator_Soft_Start_Timer(IN := BioReactor_Safe_To_Operate, PT := T#30S);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_0_functionality_safety_performance_contextual_complication_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALARM_MGMT_SYSTEM_01\n- **Location**: Chemical Processing Plant - Central Control Room\n- **Control Type**: SCADA Alarm Management with Safety Interlocks\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control & Safety\n- **Generation**: 4 (mid)\n- **Branch**: performance\n- **Summary**: Chemical plant alarm suppression system with input debouncing and safety interlocks to prevent alarm flooding during process upsets\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety interlocks and input debouncing to prevent rapid mode switching during borderline alarm rate conditions\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **TON_Alarm_Suppression_Stabilize**: TON - Timer for alarm suppression stabilization period\n- **TON_Alarm_Rate_Debounce**: TON - Timer for debouncing high alarm rate detection signal\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- TON_Alarm_Rate_Debounce (Internal, TON) - 2-second debounce timer for alarm rate detection\n\n## Control Logic Description\nThe system monitors alarm rates and safety interlocks to dynamically suppress non-critical alarms during process upsets. Emergency stop and safety door status are converted to safe-to-operate signals. The High_Alarm_Rate_Detected input is debounced with a 2-second timer to prevent false triggers from transient signals. When a sustained high alarm rate is detected and safety conditions are met, a 5-second stabilization timer activates before enabling alarm suppression mode. Safety signals override all operational logic immediately.\n\n**Formal Logic Expression**: \nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC; \nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC; \nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK; \nTON_Alarm_Rate_Debounce(IN:=High_Alarm_Rate_Detected, PT:=T#2S); \nTON_Alarm_Suppression_Stabilize(IN:=TON_Alarm_Rate_Debounce.Q AND SAFE_TO_OPERATE, PT:=T#5S); \nAlarm_Suppression_Active := TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE\n\n## Safety Requirements\n- Emergency stop and safety door interlocks must override alarm suppression logic immediately\n- Safety permissives must gate all operational outputs\n- No filtering or delay applied to safety-critical signals\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate exceeds threshold | Boolean | 100ms |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | Boolean | 50ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Safety door status | Boolean | 50ms |\n| Alarm_Suppression_Active | BOOL | R/W | Alarm suppression mode active | Boolean | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Combined safety permissive | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High_Alarm_Rate_Detected=1, SAFE_TO_OPERATE=1 → Alarm_Suppression_Active activates after 7 seconds total (2s debounce + 5s stabilization)\n2. **Transient Alarm Spike**: High_Alarm_Rate_Detected pulses for 1.5s → Alarm_Suppression_Active remains 0 (debounce timer prevents activation)\n3. **Safety Override**: High_Alarm_Rate_Detected=1, E_STOP_ALARM_AREA_NC=0 → Alarm_Suppression_Active remains 0 regardless of alarm rate\n4. **Sustained High Rate**: High_Alarm_Rate_Detected=1 for 3s, SAFE_TO_OPERATE=1 → Alarm_Suppression_Active activates after 7 seconds\n\n## Change Log\n- **TON_Alarm_Rate_Debounce**: TON / Purpose: Debounce high alarm rate detection to prevent false triggers / Compatibility: Maintains all existing safety functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single TON addition for input conditioning\n- **Measurability**: 8/10 - 2-second debounce time provides quantifiable performance improvement\n- **Safety-Preservation**: 10/10 - Safety logic remains unchanged and fully functional\n- **Determinism**: 9/10 - Clear timing behavior with predictable debounce period\n- **SEP-Compliance**: 10/10 - Respects TON cooldown rule (only one new TON added)\n- **ST-Coverage**: 8/10 - Introduces input filtering concept while maintaining syntax consistency\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 5\n- **SEP delta cap**: PASS (1 new internal variable)\n- **Non-decreasing**: PASS (inputs: 3→3, outputs: 1→1, internals: 4→5)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active = TON(High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, 5s).Q AND SAFE_TO_OPERATE\n- **This Gen**: Alarm_Suppression_Active = TON(TON(High_Alarm_Rate_Detected, 2s).Q AND SAFE_TO_OPERATE, 5s).Q AND SAFE_TO_OPERATE\n- **Not Equivalent**: TRUE - The debounce timer adds a filtering layer that changes the timing behavior\n\n**Domain Keywords**: alarm suppression, chemical plant, SCADA, safety interlocks, debouncing, process control",
  "output": "PROGRAM ALARM_MGMT_SYSTEM_01\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    TON_Alarm_Suppression_Stabilize : TON; (* Timer for alarm suppression stabilization period *)\n    TON_Alarm_Rate_Debounce : TON; (* Timer for debouncing high alarm rate detection signal *)\nEND_VAR\n\n(* Safety chain logic - no filtering or delays *)\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Operational logic with safety gating *)\nTON_Alarm_Rate_Debounce(IN := High_Alarm_Rate_Detected, PT := T#2S);\nTON_Alarm_Suppression_Stabilize(IN := TON_Alarm_Rate_Debounce.Q AND SAFE_TO_OPERATE, PT := T#5S);\nAlarm_Suppression_Active := TON_Alarm_Suppression_Stabilize.Q AND SAFE_TO_OPERATE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_0_safety_safety_contextual_complication_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Process Optimization with Safety Interlocks\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 6 (late)\n- **Branch**: contextual_complication\n- **Summary**: Kiln cooler fan control with temperature monitoring and adaptive load-based speed adjustment to optimize clinker quenching while maintaining safety constraints\n\n## Control Objective\nActivate cooling fan when clinker temperature exceeds threshold with safety interlocks, monitor temperature stability, and adapt fan operation based on real-time clinker bed load conditions to optimize energy consumption and cooling efficiency\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - High clinker temperature detected\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button status (NC contact)\n- **COOLER_GUARD_DOOR_NC**: BOOL - Cooler access guard door interlock status (NC contact)\n- **COOLER_FAN_MANUAL_OVERRIDE**: BOOL - Manual override switch for cooler fan control\n- **CLINKER_LOAD_SENSOR**: REAL - Analog input measuring clinker bed load percentage (0-100%)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor control\n- **KILN_COOLER_HEARTBEAT**: BOOL - 1Hz toggling heartbeat for external systems to monitor PLC health\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **COOLER_GUARD_DOOR_OK**: BOOL - Guard door safety permissive status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive status\n- **HEARTBEAT_TIMER**: TON - Timer instance for generating heartbeat signal\n- **HEARTBEAT_FLIP_FLOP**: BOOL - Internal flag for heartbeat toggling\n- **CLINKER_TEMP_ARRAY**: ARRAY[1..10] OF REAL - Last 10 temperature readings for jitter calculation\n- **CLINKER_TEMP_JITTER**: REAL - Calculated temperature jitter (max-min over window)\n- **CLINKER_LOAD_OK**: BOOL - Load condition within acceptable limits for normal fan operation\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 2 (+0) | Internals: 7 (+1)`\n\n### New Items This Gen (must respect SEP)\n- CLINKER_LOAD_SENSOR (Input, REAL)\n- CLINKER_LOAD_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors clinker temperature and activates the cooling fan when temperature exceeds the threshold, subject to safety interlocks. A 1Hz heartbeat signal provides PLC health monitoring. Temperature jitter is calculated from the last 10 readings to monitor process stability. The new load adaptation feature reads the clinker bed load percentage and sets CLINKER_LOAD_OK to TRUE when load is below 80% of maximum capacity. When load exceeds 80%, CLINKER_LOAD_OK becomes FALSE, which reduces the effective fan operation by introducing brief pauses in fan operation while maintaining the cooling function. The manual override continues to bypass all automatic controls when engaged.\n\n**Formal Logic Expression**: \nCLINKER_LOAD_OK := (CLINKER_LOAD_SENSOR <= 80.0)\nCOOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE) AND CLINKER_LOAD_OK\n\n## Safety Requirements\n- Emergency stop must immediately disable all outputs regardless of other conditions\n- Guard door interlock must prevent fan operation when door is open\n- Load-based speed reduction must not compromise safety functions\n- Manual override must be clearly indicated on HMI\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High Temperature Detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | E-Stop Status | NC/Open | 1s |\n| COOLER_GUARD_DOOR_NC | BOOL | R | Guard Door Status | Closed/Open | 1s |\n| COOLER_FAN_MANUAL_OVERRIDE | BOOL | R/W | Manual Override | On/Off | 1s |\n| CLINKER_LOAD_SENSOR | REAL | R | Clinker Load Percentage | % | 1s |\n| COOLING_FAN | BOOL | R | Fan Output Status | On/Off | 1s |\n| KILN_COOLER_HEARTBEAT | BOOL | R | System Heartbeat | Blinking | 1s |\n| CLINKER_TEMP_JITTER | REAL | R | Temperature Stability | °C | 10s |\n| CLINKER_LOAD_OK | BOOL | R | Load Within Limits | OK/Limit | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1, SAFE_TO_OPERATE=1, CLINKER_LOAD_SENSOR=50 → COOLING_FAN=1\n2. **High Load Reduction**: TEMPERATURE_HIGH=1, SAFE_TO_OPERATE=1, CLINKER_LOAD_SENSOR=85 → COOLING_FAN=0\n3. **Safety Override**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0 → COOLING_FAN=0 regardless of load\n4. **Manual Override**: COOLER_FAN_MANUAL_OVERRIDE=1 → COOLING_FAN=1 regardless of load or temperature\n\n## Change Log\n- **CLINKER_LOAD_SENSOR**: REAL / Purpose: Monitor clinker bed load for adaptive fan control / Compatibility: New analog input\n- **CLINKER_LOAD_OK**: BOOL / Purpose: Load condition status for fan control logic / Compatibility: New internal flag\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential load monitoring with simple threshold\n- **Measurability**: 9/10 - Clear 80% threshold with HMI visibility\n- **Safety-Preservation**: 10/10 - Load logic subordinate to safety interlocks\n- **Determinism**: 9/10 - Simple arithmetic comparison with predictable behavior\n- **SEP-Compliance**: 10/10 - Within late phase limits (2 new items)\n- **ST-Coverage**: 8/10 - Introduces REAL type and arithmetic operations\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 2, Internals: 6\n- **This gen totals**: Inputs: 5, Outputs: 2, Internals: 7\n- **SEP delta cap**: PASS (2 new items ≤ 2 limit)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE)\n- **This Gen**: COOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE) AND CLINKER_LOAD_OK\n- **Not Equivalent**: The new equation includes an additional AND condition with CLINKER_LOAD_OK, making it not equivalent to the parent\n\n**Domain Keywords**: kiln, cooler, clinker, temperature, load, fan, cement, quenching, optimization",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* High clinker temperature detected *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    COOLER_GUARD_DOOR_NC : BOOL; (* Cooler access guard door interlock status (NC contact) *)\n    COOLER_FAN_MANUAL_OVERRIDE : BOOL; (* Manual override switch for cooler fan control *)\n    CLINKER_LOAD_SENSOR : REAL; (* Analog input measuring clinker bed load percentage (0-100%) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor control *)\n    KILN_COOLER_HEARTBEAT : BOOL; (* 1Hz toggling heartbeat for external systems to monitor PLC health *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    COOLER_GUARD_DOOR_OK : BOOL; (* Guard door safety permissive status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive status *)\n    HEARTBEAT_TIMER : TON; (* Timer instance for generating heartbeat signal *)\n    HEARTBEAT_FLIP_FLOP : BOOL; (* Internal flag for heartbeat toggling *)\n    CLINKER_TEMP_ARRAY : ARRAY[1..10] OF REAL; (* Last 10 temperature readings for jitter calculation *)\n    CLINKER_TEMP_JITTER : REAL; (* Calculated temperature jitter (max-min over window) *)\n    CLINKER_LOAD_OK : BOOL; (* Load condition within acceptable limits for normal fan operation *)\nEND_VAR\n\n(* Safety chain calculations *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\nCOOLER_GUARD_DOOR_OK := COOLER_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK;\n\n(* Load condition monitoring *)\nCLINKER_LOAD_OK := (CLINKER_LOAD_SENSOR <= 80.0);\n\n(* Main fan control logic *)\nCOOLING_FAN := SAFE_TO_OPERATE AND (TEMPERATURE_HIGH OR COOLER_FAN_MANUAL_OVERRIDE) AND CLINKER_LOAD_OK;\n\n(* Heartbeat generation *)\nHEARTBEAT_TIMER(IN := NOT HEARTBEAT_TIMER.Q, PT := T#500MS);\nIF HEARTBEAT_TIMER.Q THEN\n    HEARTBEAT_FLIP_FLOP := NOT HEARTBEAT_FLIP_FLOP;\nEND_IF;\nKILN_COOLER_HEARTBEAT := HEARTBEAT_FLIP_FLOP;\n\n(* Temperature jitter calculation - placeholder for implementation *)\n(* Note: Actual jitter calculation would require temperature input and array management *)\nCLINKER_TEMP_JITTER := 0.0;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_70_variant_5_safety_safety_interoperability_functionality_performance_contextual_complication_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Plant_Alarm_System\n- **Location**: Central_Control_Room\n- **Control Type**: Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Real-time alarm flood suppression with contextual prioritization and dedicated flood console for critical alarm highlighting\n\n## Control Objective\nImplement dynamic alarm flood suppression with root cause identification and contextual filtering while providing enhanced operator visibility of critical alarms during flood events through a dedicated console interface.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n- **FLOOD_CONSOLE_ENABLE**: BOOL - Enable signal for dedicated flood console display\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block\n- **ALARM_RATE_HISTORY**: ARRAY[1..60] OF INT - 60-second history of alarm rates\n- **MAX_ALARM_RATE**: INT - Maximum alarm rate observed in monitoring window\n\n### Counts Check\n`Inputs: 5 (+0) | Outputs: 2 (+1) | Internals: 3 (+0)`\n\n### New Items This Gen (must respect SEP)\n- FLOOD_CONSOLE_ENABLE (Output, BOOL)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and enables suppression filtering when appropriate. A dedicated flood console is activated during flood events to highlight critical alarms for operator attention. Safety conditions override all functional logic - emergency stop immediately disables both suppression and console functions, requiring manual safety reset. The flood console enables whenever a flood is detected, regardless of suppression mode or enable status, ensuring operators always have enhanced visibility during critical events.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\nFLOOD_CONSOLE_ENABLE := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND FLOOD_DETECTED\n\n## Safety Requirements\n- Emergency stop must immediately disable all alarm suppression and console functions\n- Safety latch requires manual reset after emergency stop activation\n- Safety conditions override all functional logic without exception\n- All suppressed alarms must be logged for post-event analysis\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 1s |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 1s |\n| SUPPRESSION_MODE | INT | R/W | Suppression strategy mode | Mode | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression active | On/Off | 1s |\n| FLOOD_CONSOLE_ENABLE | BOOL | R | Flood console active | On/Off | 1s |\n| MAX_ALARM_RATE | INT | R | Maximum alarm rate | alarms/min | 10s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=0 → ALARM_SUPPRESSION=0, FLOOD_CONSOLE_ENABLE=0\n2. **Flood Detected**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=1 → ALARM_SUPPRESSION=1, FLOOD_CONSOLE_ENABLE=1\n3. **Flood Console Only**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0, FLOOD_CONSOLE_ENABLE=1\n4. **Emergency Stop**: E_STOP_NC=0 → ALARM_SUPPRESSION=0, FLOOD_CONSOLE_ENABLE=0 regardless of other inputs\n5. **Safety Reset**: After E_STOP_NC=1, SAFETY_RESET_REQ=1 pulse → Safety latch reset, normal operation restored\n\n## Change Log\n- **FLOOD_CONSOLE_ENABLE**: BOOL / Purpose: Enable dedicated console for highlighting critical alarms during flood events / Compatibility: Backward compatible, adds new functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 5, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 5, Outputs: 2, Internals: 3\n- **SEP delta cap**: PASS (1 new output, 0 new internals)\n- **Non-decreasing**: PASS (inputs: 5→5, outputs: 1→2, internals: 3→3)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n- **This Gen**: FLOOD_CONSOLE_ENABLE := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND FLOOD_DETECTED\n- **Not Equivalent**: Different conditions - new output activates on flood detection alone, not requiring suppression enable or mode selection\n\n**Domain Keywords**: alarm management, flood suppression, contextual prioritization, chemical processing, EEMUA 191, ISA 18.2, safety systems",
  "output": "PROGRAM Chemical_Plant_Alarm_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\n    FLOOD_CONSOLE_ENABLE : BOOL; (* Enable signal for dedicated flood console display *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block *)\n    ALARM_RATE_HISTORY : ARRAY[1..60] OF INT; (* 60-second history of alarm rates *)\n    MAX_ALARM_RATE : INT; (* Maximum alarm rate observed in monitoring window *)\nEND_VAR\n\n(* Safety logic - highest priority *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* Main operational logic *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND (SUPPRESSION_MODE <> 0));\nFLOOD_CONSOLE_ENABLE := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND FLOOD_DETECTED;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_68_variant_5_functionality_safety_safety_functionality_performance_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: AFS-001\n- **Location**: Chemical Processing Plant - Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Basic alarm display system with emergency stop safety override for chemical plant alarm flood suppression\n\n## Control Objective\nProvide visual alarm indication to operators while ensuring immediate safety shutdown capability via emergency stop button\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **E_STOP_PROCESS_AREA_NC**: BOOL - Emergency stop button (NC contact) for process area safety shutdown\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- E_STOP_PROCESS_AREA_NC (Input, BOOL)\n\n## Control Logic Description\nThe system monitors process alarms and provides visual indication to operators. An emergency stop button with normally-closed contacts provides immediate safety override capability. The alarm display is only active when both an alarm condition exists AND the emergency stop system indicates it is safe to operate (emergency stop not activated). The E_STOP_PROCESS_AREA_NC input is TRUE when the emergency stop button is not pressed (safe condition) and FALSE when the emergency stop is activated. This creates a safety permissive (E_STOP_OK) that gates all operational logic.\n\n**Formal Logic Expression**: \nAlarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active\n\n## Safety Requirements\n- Emergency stop activation must immediately override all alarm display functions\n- Safety permissive logic takes absolute precedence over operational logic\n- System defaults to safe state (output OFF) on power-up or emergency stop activation\n- No filtering or delay permitted on safety signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Process alarm activation status | On/Off | 100ms |\n| E_STOP_PROCESS_AREA_NC | BOOL | R | Emergency stop status (NC contact) | Safe/Tripped | 100ms |\n| Alarm_Display | BOOL | R/W | Alarm indicator output | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Alarm Operation**: Alarm_Active = TRUE, E_STOP_PROCESS_AREA_NC = TRUE → Alarm_Display = TRUE\n2. **Emergency Stop Activation**: Alarm_Active = TRUE, E_STOP_PROCESS_AREA_NC = FALSE → Alarm_Display = FALSE\n3. **No Alarm Condition**: Alarm_Active = FALSE, E_STOP_PROCESS_AREA_NC = TRUE → Alarm_Display = FALSE\n4. **Emergency Stop with No Alarm**: Alarm_Active = FALSE, E_STOP_PROCESS_AREA_NC = FALSE → Alarm_Display = FALSE\n\n## Change Log\n- **E_STOP_PROCESS_AREA_NC**: BOOL / Purpose: Emergency stop safety input for process area / Compatibility: Direct replacement for any safety input requirement\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs: 1→2, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := Alarm_Active\n- **This Gen**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active\n- **Not Equivalent**: Safety override changes logic behavior during emergency conditions\n\n**Domain Keywords**: chemical plant, alarm suppression, emergency stop, safety override, process safety",
  "output": "PROGRAM AFS_001_Control\nVAR_INPUT\n    Alarm_Active : BOOL; (* Process alarm activation signal from process sensor *)\n    E_STOP_PROCESS_AREA_NC : BOOL; (* Emergency stop button (NC contact) for process area safety shutdown *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\n\nAlarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_68_variant_6_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: AFS-101\n- **Location**: Chemical Processing Plant Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Alarm flood suppression system with emergency stop safety override\n\n## Control Objective\nImplement dynamic alarm flood suppression with emergency stop capability to ensure operator safety during critical incidents\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- E_STOP_NC: Input, BOOL\n\n## Control Logic Description\nThe system monitors for alarm flood conditions and enables suppression when both flood detection is active and the operator has enabled the system. A new emergency stop input provides immediate safety override capability. The E_STOP_NC input (normally-closed contact) is TRUE when the emergency stop button is not pressed (safe condition). This creates an E_STOP_OK signal that is ANDed with the functional logic to create a comprehensive safety permissive. All operational logic is gated by this safety permissive, ensuring the emergency stop takes absolute precedence.\n\n**Formal Logic Expression**: \nSAFE_TO_OPERATE := E_STOP_NC\nALARM_SUPPRESSION := SAFE_TO_OPERATE AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all functional logic\n- Safety permissive must be FALSE on power-up until explicitly confirmed safe\n- Emergency stop circuit must use fail-safe normally-closed contacts\n- No filtering or delay permitted on safety signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Suppression system enable | On/Off | 1s |\n| E_STOP_NC | BOOL | R | Emergency stop status (NC) | On/Off | 100ms |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, E_STOP_NC=1 → ALARM_SUPPRESSION=1\n2. **Emergency Stop Activated**: E_STOP_NC=0 → ALARM_SUPPRESSION=0 (regardless of other inputs)\n3. **System Disabled**: ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0\n4. **No Flood**: FLOOD_DETECTED=0 → ALARM_SUPPRESSION=0\n\n## Change Log\n- **E_STOP_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: Added to existing safety chain\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n- **This Gen**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **Not Equivalent**: TRUE - safety permissive fundamentally changes behavior\n\n**Domain Keywords**: alarm suppression, emergency stop, chemical plant, safety override, E_STOP",
  "output": "PROGRAM AFS_101_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFE_TO_OPERATE : BOOL; (* Safety permissive signal *)\nEND_VAR\n\n(* Safety logic - emergency stop takes absolute precedence *)\nSAFE_TO_OPERATE := E_STOP_NC;\n\n(* Main operational logic - gated by safety permissive *)\nALARM_SUPPRESSION := SAFE_TO_OPERATE AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_5_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Safety Interlock\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Bioreactor dissolved oxygen control with emergency stop safety interlock and manual agitator override capability\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with emergency stop safety interlock and operator manual override capability for agitator control during critical fermentation phases.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Fermenter_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact, TRUE when safe)\n- **Agitator_Manual_Override**: BOOL - Manual override switch for agitator control (TRUE forces agitator on when safe)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Fermenter_E_Stop_OK**: BOOL - Emergency stop status (TRUE when emergency stop is not activated)\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Agitator_Manual_Override (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when oxygen drops below 40% saturation, provided the emergency stop is not activated and the fermenter is enabled. A new manual override input allows operators to force the agitator on regardless of oxygen levels, while still respecting the safety interlock. The emergency stop takes absolute precedence over all functional logic.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_E_Stop_OK AND (DO_LOW AND Fermenter_Enable OR Agitator_Manual_Override)\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Manual override must not bypass safety interlocks\n- System must maintain fail-safe operation with normally-closed emergency stop contact\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen below 40% | % sat | 1 sec |\n| Fermenter_Enable | BOOL | R/W | Master enable switch | On/Off | 1 sec |\n| Fermenter_E_Stop_NC | BOOL | R | Emergency stop status | Safe/Fault | 100 ms |\n| Agitator_Manual_Override | BOOL | R/W | Manual agitator override | On/Off | 1 sec |\n| AGITATOR_ON | BOOL | R | Agitator motor status | On/Off | 1 sec |\n| Fermenter_E_Stop_OK | BOOL | R | Emergency stop permissive | Safe/Fault | 100 ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Auto Operation**: DO_LOW=1, Fermenter_Enable=1, Fermenter_E_Stop_OK=1, Agitator_Manual_Override=0 → AGITATOR_ON=1\n2. **Manual Override Active**: DO_LOW=0, Fermenter_Enable=1, Fermenter_E_Stop_OK=1, Agitator_Manual_Override=1 → AGITATOR_ON=1\n3. **Safety Override**: Any inputs with Fermenter_E_Stop_OK=0 → AGITATOR_ON=0\n4. **Manual Override with Safety**: Agitator_Manual_Override=1, Fermenter_E_Stop_OK=0 → AGITATOR_ON=0\n\n## Change Log\n- **Agitator_Manual_Override**: BOOL / Purpose: Allows operator to manually force agitator operation during critical phases / Compatibility: Maintains all existing safety interlocks\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_E_Stop_OK AND (DO_LOW AND Fermenter_Enable OR Agitator_Manual_Override)\n- **Not Equivalent**: The new logic includes an OR condition that allows manual override, making it distinct from the pure AND logic of the parent\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, safety interlock, manual override",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Fermenter_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact, TRUE when safe) *)\n    Agitator_Manual_Override : BOOL; (* Manual override switch for agitator control (TRUE forces agitator on when safe) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    Fermenter_E_Stop_OK : BOOL; (* Emergency stop status (TRUE when emergency stop is not activated) *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nFermenter_E_Stop_OK := Fermenter_E_Stop_NC;\n\n(* Main control logic with safety interlock *)\nAGITATOR_ON := Fermenter_E_Stop_OK AND (DO_LOW AND Fermenter_Enable OR Agitator_Manual_Override);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_1_functionality_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Plant_Alarm_System\n- **Location**: Control_Room_Main_Panel\n- **Control Type**: Alarm Management & Filtering\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 4 (mid)\n- **Branch**: performance\n- **Summary**: Dynamic alarm filtering system with input debouncing and performance timing requirements\n\n## Control Objective\nImplement intelligent alarm filtering that suppresses non-critical alarms based on plant operational state while preventing false alarms through input debouncing and ensuring responsive alarm presentation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **Plant_State_Normal**: BOOL - Indicates plant is in normal operating state\n- **Plant_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\n- **Alarm_Debounce_Timer**: TON - Timer instance for debouncing alarm input signals (500ms preset)\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- [Descriptive performance requirement only - no new variables]\n\n## Control Logic Description\nThe system monitors alarm inputs and plant state to determine which alarms should be displayed to operators. Alarm inputs are debounced with a 500ms timer to prevent false alarms from brief signal glitches. The emergency stop condition takes absolute precedence over all operational logic. During normal plant operation, validated alarms are displayed to the operator. The system must respond to validated alarm conditions within 100ms to ensure timely operator awareness.\n\n**Formal Logic Expression**: \nAlarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all alarm display logic\n- Alarm debouncing must not delay critical safety-related alarms\n- System response time must not exceed 100ms for validated alarm conditions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Raw alarm input signal | On/Off | 100ms |\n| Plant_State_Normal | BOOL | R | Plant normal operation state | On/Off | 1s |\n| Plant_E_Stop_NC | BOOL | R | Emergency stop status | Safe/Not Safe | 100ms |\n| Alarm_Display | BOOL | R | Alarm display output | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Alarm Response**: Alarm_Active = TRUE, Plant_State_Normal = TRUE, Plant_E_Stop_NC = TRUE → Alarm_Display = TRUE within 100ms\n2. **Debounce Filtering**: Alarm_Active pulse <500ms → Alarm_Display remains FALSE\n3. **Emergency Stop Override**: Plant_E_Stop_NC = FALSE → Alarm_Display = FALSE immediately\n4. **Non-Normal State**: Plant_State_Normal = FALSE → Alarm_Display = FALSE\n\n## Change Log\n- **Alarm_Response_Time_Target**: Descriptive / Purpose: Ensure timely operator awareness of alarms / Compatibility: Performance requirement only, no variable changes\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 7/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 5/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (0 new variables)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal\n- **This Gen**: Same as parent (descriptive addition only)\n- **Not Equivalent**: N/A (descriptive enhancement only)\n\n**Domain Keywords**: chemical plant, alarm management, dynamic filtering, debouncing, response time, operator awareness",
  "output": "PROGRAM Chemical_Plant_Alarm_System\nVAR_INPUT\n    Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\n    Plant_State_Normal : BOOL; (* Indicates plant is in normal operating state *)\n    Plant_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\nVAR\n    Alarm_Debounce_Timer : TON; (* Timer instance for debouncing alarm input signals (500ms preset) *)\nEND_VAR\n\n(* Safety chain - emergency stop takes absolute precedence *)\n(* Alarm debouncing for false alarm prevention *)\nAlarm_Debounce_Timer(IN := Alarm_Active, PT := T#500MS);\n\n(* Main alarm display logic *)\nAlarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_6_contextual_complication_safety_performance_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Alarm_Flood_Suppression_System\n- **Location**: Chemical_Process_Control_Room\n- **Control Type**: Rule-based alarm management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Safety\n- **Generation**: 5 (late)\n- **Branch**: interoperability\n- **Summary**: Dynamic alarm flood suppression system with SCADA command interface for remote operation\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety override requiring manual reset after emergency stop, now enhanced with SCADA command interface for remote operation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy\n- **SCADA_CMD_WORD**: WORD - SCADA command word with bit-mapped commands\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block to maintain trip state until reset\n- **REMOTE_SUPPRESSION_CMD**: BOOL - Remote suppression command decoded from SCADA command word\n\n### Counts Check\n`Inputs: 6 (+1) | Outputs: 1 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SCADA_CMD_WORD (Input, WORD)\n- REMOTE_SUPPRESSION_CMD (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and enables suppression when a flood is detected and the system is enabled. Emergency stop immediately disables all functions and requires manual reset. The SCADA command word input allows remote control of suppression functions, where bit 0 represents remote suppression enable command. This remote command is ANDed with local safety conditions and enable signals to maintain safety priority. The command word is decoded using bitwise AND operations to extract individual command bits.\n\n**Formal Logic Expression**: \nREMOTE_SUPPRESSION_CMD := (SCADA_CMD_WORD AND 16#0001) <> 0;\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n\n## Safety Requirements\n- Emergency stop must immediately disable all alarm suppression functions\n- Remote commands must be gated by local safety permissives and enable conditions\n- Manual reset required after emergency stop condition\n- Local control always has priority over remote commands\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 100ms |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 100ms |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| SUPPRESSION_MODE | INT | R/W | Suppression strategy mode | Enum | 100ms |\n| SCADA_CMD_WORD | WORD | R/W | SCADA command interface | Hex | 100ms |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Remote Suppression Command**: Set SCADA_CMD_WORD bit 0 to 1 with system enabled → ALARM_SUPPRESSION should activate when flood detected\n2. **Safety Override**: Activate E_STOP during remote suppression → ALARM_SUPPRESSION should immediately deactivate\n3. **Command Word Decoding**: Test various bit patterns in SCADA_CMD_WORD → Verify only bit 0 affects suppression command\n4. **Local Priority**: Set ALARM_SUPPRESSION_ENABLE to false with remote command active → ALARM_SUPPRESSION should remain false\n\n## Change Log\n- **SCADA_CMD_WORD**: WORD / Purpose: SCADA command interface for remote suppression control / Compatibility: Backward compatible, adds remote control capability\n- **REMOTE_SUPPRESSION_CMD**: BOOL / Purpose: Decoded remote suppression command from SCADA interface / Compatibility: Internal working variable\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only necessary SCADA interface components\n- **Measurability**: 8/10 - Clear command structure with defined bit mapping\n- **Safety-Preservation**: 10/10 - Maintains local safety priority over remote commands\n- **Determinism**: 9/10 - Bitwise operations provide deterministic behavior\n- **SEP-Compliance**: 10/10 - Within late phase limits (2 new items)\n- **ST-Coverage**: 8/10 - Introduces bitwise AND operations missing from parent\n\n## Complexity Audit\n- **Parent totals**: Inputs: 5, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 6, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (1 input + 1 internal = 2 new items)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n- **This Gen**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n- **Not Equivalent**: The new logic includes an OR condition with remote command, making it not equivalent to parent\n\n**Domain Keywords**: [alarm management, flood suppression, SCADA integration, process safety, chemical plant, EEMUA 191, ISA 18.2]",
  "output": "PROGRAM Alarm_Flood_Suppression_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy *)\n    SCADA_CMD_WORD : WORD; (* SCADA command word with bit-mapped commands *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block to maintain trip state until reset *)\n    REMOTE_SUPPRESSION_CMD : BOOL; (* Remote suppression command decoded from SCADA command word *)\nEND_VAR\n\n(* Safety chain - emergency stop handling *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* SCADA command decoding - extract bit 0 *)\nREMOTE_SUPPRESSION_CMD := (SCADA_CMD_WORD AND 16#0001) <> 0;\n\n(* Main suppression logic with safety override and remote command integration *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 \n                     AND E_STOP_NC \n                     AND ((ALARM_SUPPRESSION_ENABLE OR REMOTE_SUPPRESSION_CMD) \n                     AND FLOOD_DETECTED \n                     AND SUPPRESSION_MODE <> 0);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_5_functionality_safety_safety_functionality_interoperability_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Safety Interlock\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: interoperability\n- **Summary**: Bioreactor oxygen supplementation control with SCADA status monitoring capability\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with master enable control and SCADA visibility\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold (30% saturation)\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **BioReactor_Oxygen_Active_Status**: BOOL - Status indicator for SCADA monitoring (TRUE when oxygen supplementation active)\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_Oxygen_Active_Status (Output, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and activates supplemental oxygen when levels fall below the safety threshold. The master enable switch must be active for oxygen supplementation to occur. The new status output provides SCADA systems with real-time visibility into whether oxygen supplementation is currently active.\n\n**Formal Logic Expression**: \nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm;\nBioReactor_Oxygen_Active_Status := Oxygen_Valve\n\n## Safety Requirements\n- System defaults to safe state (outputs OFF) on power-up and when input signals are lost\n- Local control logic maintains priority over any remote monitoring\n- Status output is read-only and cannot affect control logic\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| BioReactor_Enable | BOOL | R/W | Master enable control | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 100ms |\n| BioReactor_Oxygen_Active_Status | BOOL | R | Oxygen supplementation active | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: BioReactor_Enable = TRUE, DO_Low_Alarm = TRUE → Oxygen_Valve = TRUE, BioReactor_Oxygen_Active_Status = TRUE\n2. **Disabled Operation**: BioReactor_Enable = FALSE, DO_Low_Alarm = TRUE → Oxygen_Valve = FALSE, BioReactor_Oxygen_Active_Status = FALSE\n3. **Adequate Oxygen**: BioReactor_Enable = TRUE, DO_Low_Alarm = FALSE → Oxygen_Valve = FALSE, BioReactor_Oxygen_Active_Status = FALSE\n\n## Change Log\n- **BioReactor_Oxygen_Active_Status**: BOOL / Purpose: SCADA monitoring of oxygen supplementation status / Compatibility: Read-only status mirror\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm; BioReactor_Oxygen_Active_Status := Oxygen_Valve\n- **Not Equivalent**: True - New equation includes status mirroring without altering control logic\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, dissolved oxygen, SCADA, pharmaceutical, fermentation, monitoring",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold (30% saturation) *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    BioReactor_Oxygen_Active_Status : BOOL; (* Status indicator for SCADA monitoring (TRUE when oxygen supplementation active) *)\nEND_VAR\n\nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm;\nBioReactor_Oxygen_Active_Status := Oxygen_Valve;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_6_functionality_interoperability_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BR-101\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control with Safety Interlock\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Pharmaceutical Bioreactor\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic oxygen supplementation control with master enable for bioreactor safety\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold, with master enable control for operator intervention.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold (30% saturation)\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control system\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen\n- BioReactor_Enable (Input, BOOL)\n\n## Control Logic Description\nThe system controls the supplemental oxygen valve based on dissolved oxygen levels and operator enable command. When the bioreactor enable switch is active AND the dissolved oxygen low alarm is triggered, the oxygen valve opens to provide supplemental oxygen. If either condition is false, the valve remains closed for safety.\n\n**Formal Logic Expression**: \nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n\n## Safety Requirements\n- System defaults to safe state (output OFF) on power-up\n- Output turns OFF when input signals are lost\n- Master enable provides operator override capability for emergency shutdown\n- Oxygen valve only operates when both enable and low oxygen conditions are met\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved Oxygen Low Alarm | On/Off | 1s |\n| BioReactor_Enable | BOOL | R/W | Bioreactor Master Enable | On/Off | 1s |\n| Oxygen_Valve | BOOL | R | Oxygen Valve Status | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: BioReactor_Enable = TRUE, DO_Low_Alarm = TRUE → Oxygen_Valve = TRUE\n2. **Disabled System**: BioReactor_Enable = FALSE, DO_Low_Alarm = TRUE → Oxygen_Valve = FALSE\n3. **No Alarm Condition**: BioReactor_Enable = TRUE, DO_Low_Alarm = FALSE → Oxygen_Valve = FALSE\n4. **Complete Shutdown**: BioReactor_Enable = FALSE, DO_Low_Alarm = FALSE → Oxygen_Valve = FALSE\n\n## Change Log\n- **BioReactor_Enable**: BOOL / Purpose: Master enable control for oxygen supplementation system / Compatibility: Backward compatible with existing alarm logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, outputs unchanged, internals unchanged)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n- **Not Equivalent**: TRUE (new logic requires both conditions instead of single condition)\n\n**Domain Keywords**: bioreactor, oxygen, fermentation, pharmaceutical, enable, safety, valve, dissolved oxygen",
  "output": "PROGRAM BR_101_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold (30% saturation) *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control system *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\n\nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_6_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Control Room, Chemical Processing Unit 4\n- **Control Type**: Safety-Integrated Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Dynamic alarm filtering system with emergency stop safety override for chemical plant operations\n\n## Control Objective\nImplement dynamic alarm filtering that adjusts alarm presentation based on plant operational state with integrated emergency stop safety functionality\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **Plant_State_Normal**: BOOL - Indicates plant is in normal operating state\n- **Plant_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Plant_E_Stop_NC (Input, BOOL)\n\n## Control Logic Description\nThe system monitors alarm signals and plant operational state to dynamically filter alarm presentation. During normal plant operation, active alarms are displayed to the operator. The emergency stop button (normally-closed contact) provides immediate safety override capability - when pressed (contact opens), all alarm display is suppressed regardless of plant state or alarm conditions. The E_Stop status is derived directly from the NC contact (TRUE when safe, FALSE when emergency stop is activated).\n\n**Formal Logic Expression**: \nAlarm_Display := Plant_E_Stop_NC AND Alarm_Active AND Plant_State_Normal\n\n## Safety Requirements\n- Emergency stop functionality must take absolute precedence over all operational logic\n- Safety signals must propagate immediately without filtering or delay\n- Emergency stop status must be derived directly from NC contact for fail-safe operation\n- All alarm logging continues regardless of display state for post-incident analysis\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Process alarm active status | On/Off | 100ms |\n| Plant_State_Normal | BOOL | R | Normal operation state indicator | On/Off | 100ms |\n| Plant_E_Stop_NC | BOOL | R | Emergency stop status (NC contact) | On/Off | 100ms |\n| Alarm_Display | BOOL | R/W | Alarm display output | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation with Alarm**: Plant_E_Stop_NC=TRUE, Alarm_Active=TRUE, Plant_State_Normal=TRUE → Alarm_Display=TRUE\n2. **Emergency Stop Activation**: Plant_E_Stop_NC=FALSE, Alarm_Active=TRUE, Plant_State_Normal=TRUE → Alarm_Display=FALSE\n3. **Normal Operation No Alarm**: Plant_E_Stop_NC=TRUE, Alarm_Active=FALSE, Plant_State_Normal=TRUE → Alarm_Display=FALSE\n4. **Abnormal State with Alarm**: Plant_E_Stop_NC=TRUE, Alarm_Active=TRUE, Plant_State_Normal=FALSE → Alarm_Display=FALSE\n\n## Change Log\n- **Plant_E_Stop_NC**: BOOL / Purpose: Emergency stop safety input (NC contact) / Compatibility: Added as highest-priority safety override\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single safety input addition with direct integration\n- **Measurability**: 10/10 - Clear test scenarios with predictable outcomes\n- **Safety-Preservation**: 10/10 - Safety takes absolute precedence over operational logic\n- **Determinism**: 10/10 - Immediate propagation without timing dependencies\n- **SEP-Compliance**: 10/10 - Exactly one BOOL input added in early phase\n- **ST-Coverage**: 7/10 - Maintains simple BOOL logic appropriate for phase\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input ≤ 1 limit)\n- **Non-decreasing**: PASS (3≥2, 1≥1, 0≥0)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := Alarm_Active AND Plant_State_Normal\n- **This Gen**: Alarm_Display := Plant_E_Stop_NC AND Alarm_Active AND Plant_State_Normal\n- **Not Equivalent**: TRUE - New equation includes safety gating term\n\n**Domain Keywords**: chemical plant, alarm management, emergency stop, safety override, dynamic filtering, process safety",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n  Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\n  Plant_State_Normal : BOOL; (* Indicates plant is in normal operating state *)\n  Plant_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n  Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\n\nAlarm_Display := Plant_E_Stop_NC AND Alarm_Active AND Plant_State_Normal;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_6_contextual_complication_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: VAL-001\n- **Location**: Irrigation Main Line\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation Control\n\n## Control Objective\nTurn ON main water shut-off valve when leak detection signal is inactive.\n\n## I/O Requirements\n\n### Input Variables\n- **LEAK_DETECT**: BOOL - Flow meter leak detection signal (TRUE indicates leak condition)\n\n### Output Variables\n- **MAIN_VALVE**: BOOL - Main water supply shut-off valve control\n\n## Control Logic Description\nDirect pass-through control. When the leak detection signal is inactive (FALSE), the main valve remains open. When the leak detection signal is active (TRUE), the main valve closes immediately.\n\n**Formal Logic Expression**: MAIN_VALVE := NOT LEAK_DETECT\n\n## Safety Requirements\n- Output turns OFF (valve closes) when leak signal is active\n- System defaults to safe state (valve closed) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: LEAK_DETECT = FALSE → MAIN_VALVE = TRUE\n2. **Leak Condition**: LEAK_DETECT = TRUE → MAIN_VALVE = FALSE\n\n**Domain Keywords**: irrigation, flow control, leak detection",
  "output": "PROGRAM VAL_001_Control\nVAR_INPUT\n    LEAK_DETECT : BOOL; (* Flow meter leak detection signal (TRUE indicates leak condition) *)\nEND_VAR\nVAR_OUTPUT\n    MAIN_VALVE : BOOL; (* Main water supply shut-off valve control *)\nEND_VAR\n\n(* Direct pass-through control with safety default *)\nMAIN_VALVE := NOT LEAK_DETECT;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_7_2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CP-ALM-SUPP-01\n- **Location**: Main Control Room, Chemical Processing Plant\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Safety & Control\n- **Generation**: 5 (late)\n- **Branch**: contextual_complication\n- **Summary**: Real-time alarm flood suppression system with load-adaptive suppression to prevent SCADA overload during high-processing scenarios\n\n## Control Objective\nImplement dynamic alarm flood suppression with configurable modes, flood confirmation delay, and adaptive suppression based on SCADA system processing load to maintain system stability during high-alarm events\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy (0=Off, 1=Basic, 2=Aggressive)\n- **ALARM_PROCESSING_LOAD**: REAL - SCADA system CPU load percentage (0.0-100.0%)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n- **SUPPRESSION_LEVEL**: BOOL - Reduced suppression mode indicator (active when load > 80%)\n\n### Internals (CUMULATIVE)\n- **FLOOD_CONFIRMED**: BOOL - Confirmed flood state after delay\n- **FLOOD_CONFIRM_TIMER**: TON - Timer instance for flood confirmation delay\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 2 (+1) | Internals: 2 (+0)`\n\n### New Items This Gen (must respect SEP)\n- ALARM_PROCESSING_LOAD (Input, REAL)\n- SUPPRESSION_LEVEL (Output, BOOL)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and enables suppression when confirmed. A new ALARM_PROCESSING_LOAD input provides real-time SCADA system CPU utilization. When processing load exceeds 80%, the system activates SUPPRESSION_LEVEL output and reduces suppression aggressiveness to prevent further system overload. The emergency stop (E_STOP_NC) maintains highest priority override of all functional logic. Flood confirmation requires a 2-second delay via TON timer to prevent false triggers.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_CONFIRMED AND (SUPPRESSION_MODE > 0) AND (ALARM_PROCESSING_LOAD <= 80.0 OR SUPPRESSION_LEVEL))\n\n## Safety Requirements\n- Emergency stop (E_STOP_NC) must override all suppression logic with highest priority\n- Flood confirmation delay must prevent false suppression activation\n- Load-based suppression reduction must not disable critical safety-related alarm suppression\n- All suppressed alarms must be logged for post-event analysis\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 100ms |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 100ms |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 50ms |\n| SUPPRESSION_MODE | INT | R/W | Suppression strategy mode | 0-2 | 100ms |\n| ALARM_PROCESSING_LOAD | REAL | R | SCADA CPU load percentage | % | 500ms |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 100ms |\n| SUPPRESSION_LEVEL | BOOL | R | Reduced suppression mode | On/Off | 100ms |\n| FLOOD_CONFIRMED | BOOL | R | Confirmed flood state | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Flood Suppression**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=2, ALARM_PROCESSING_LOAD=60.0 → ALARM_SUPPRESSION=1, SUPPRESSION_LEVEL=0\n2. **High Load Reduction**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=2, ALARM_PROCESSING_LOAD=85.0 → ALARM_SUPPRESSION=1, SUPPRESSION_LEVEL=1\n3. **Emergency Stop Override**: E_STOP_NC=0, all other conditions met → ALARM_SUPPRESSION=0, SUPPRESSION_LEVEL=0\n4. **Disabled Mode**: SUPPRESSION_MODE=0, all other conditions met → ALARM_SUPPRESSION=0\n\n## Change Log\n- **ALARM_PROCESSING_LOAD**: REAL / Purpose: Monitor SCADA system CPU load to adapt suppression behavior / Compatibility: New analog input\n- **SUPPRESSION_LEVEL**: BOOL / Purpose: Indicate reduced suppression mode during high system load / Compatibility: New status output\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 8/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 5, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (2 new items, cap=2)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_CONFIRMED AND (SUPPRESSION_MODE > 0))\n- **This Gen**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_CONFIRMED AND (SUPPRESSION_MODE > 0) AND (ALARM_PROCESSING_LOAD <= 80.0 OR SUPPRESSION_LEVEL))\n- **Not Equivalent**: The new logic includes additional condition based on processing load threshold\n\n**Domain Keywords**: chemical processing, alarm management, flood suppression, SCADA, CPU load, adaptive control, process safety",
  "output": "PROGRAM CP_ALM_SUPP_01_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy (0=Off, 1=Basic, 2=Aggressive) *)\n    ALARM_PROCESSING_LOAD : REAL; (* SCADA system CPU load percentage (0.0-100.0%) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\n    SUPPRESSION_LEVEL : BOOL; (* Reduced suppression mode indicator (active when load > 80%) *)\nEND_VAR\nVAR\n    FLOOD_CONFIRMED : BOOL; (* Confirmed flood state after delay *)\n    FLOOD_CONFIRM_TIMER : TON; (* Timer instance for flood confirmation delay *)\nEND_VAR\n\n(* Safety chain - emergency stop normalization *)\n(* Flood confirmation timer with 2-second delay *)\nFLOOD_CONFIRM_TIMER(IN := FLOOD_DETECTED, PT := T#2S);\nFLOOD_CONFIRMED := FLOOD_CONFIRM_TIMER.Q;\n\n(* Load-based suppression level indicator *)\nSUPPRESSION_LEVEL := ALARM_PROCESSING_LOAD > 80.0;\n\n(* Main suppression logic with emergency stop override and load adaptation *)\nALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_CONFIRMED AND (SUPPRESSION_MODE > 0) AND (ALARM_PROCESSING_LOAD <= 80.0 OR SUPPRESSION_LEVEL));\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_5_functionality_safety_functionality_functionality_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioreactor\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Bioreactor oxygen supplementation with emergency stop safety interlock\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with master enable and emergency stop safety interlocks for operator protection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Bioreactor_E_Stop_NC**: BOOL - Emergency stop button (NC contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Bioreactor_E_Stop_NC (Input, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and provides supplemental oxygen when levels fall below the safety threshold. All operational logic is gated by a master enable switch and an emergency stop safety interlock. The emergency stop button uses normally-closed contacts for fail-safe operation, where TRUE indicates the button is not pressed and the system is safe to operate. The oxygen valve will only activate when the bioreactor is enabled, the emergency stop is not activated, and the dissolved oxygen alarm is active.\n\n**Formal Logic Expression**: \nOxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Safety permissives shall gate all functional outputs\n- Emergency stop must use normally-closed contacts for fail-safe operation\n- No filtering or delay on safety chain signals\n- Manual reset required after emergency stop activation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Bioreactor_E_Stop_NC | BOOL | R | Emergency stop status | Safe/Tripped | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve control | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Bioreactor_Enable=TRUE, Bioreactor_E_Stop_NC=TRUE, DO_Low_Alarm=TRUE → Oxygen_Valve=TRUE\n2. **Emergency Stop Activation**: Bioreactor_Enable=TRUE, Bioreactor_E_Stop_NC=FALSE, DO_Low_Alarm=TRUE → Oxygen_Valve=FALSE\n3. **Disabled Bioreactor**: Bioreactor_Enable=FALSE, Bioreactor_E_Stop_NC=TRUE, DO_Low_Alarm=TRUE → Oxygen_Valve=FALSE\n4. **No Oxygen Demand**: Bioreactor_Enable=TRUE, Bioreactor_E_Stop_NC=TRUE, DO_Low_Alarm=FALSE → Oxygen_Valve=FALSE\n\n## Change Log\n- **Bioreactor_E_Stop_NC**: BOOL / Purpose: Emergency stop safety interlock / Compatibility: AND-gated with existing safety logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := Bioreactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm\n- **Not Equivalent**: The new equation adds an additional safety interlock condition\n\n**Domain Keywords**: bioreactor, oxygen, fermentation, pharmaceutical, emergency stop, safety interlock",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Bioreactor_E_Stop_NC : BOOL; (* Emergency stop button (NC contact, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\n\n(* Main control logic - safety chain first *)\nOxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_6_functionality_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: IRR-001\n- **Location**: Zone 1 Irrigation\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation\n\n## Control Objective\nTurn ON Zone_1_Valve when Soil_Moisture_Low is active.\n\n## I/O Requirements\n\n### Input Variables\n- **SOIL_MOISTURE_LOW**: BOOL - Capacitive soil moisture sensor detects dry conditions in zone 1\n\n### Output Variables\n- **ZONE_1_VALVE**: BOOL - Solenoid valve controlling water flow to irrigation zone 1\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: ZONE_1_VALVE := SOIL_MOISTURE_LOW\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: SOIL_MOISTURE_LOW = TRUE → ZONE_1_VALVE = TRUE\n2. **Deactivation**: SOIL_MOISTURE_LOW = FALSE → ZONE_1_VALVE = FALSE\n\n**Domain Keywords**: irrigation, moisture, valve",
  "output": "PROGRAM IRR_001_Control\nVAR_INPUT\n  SOIL_MOISTURE_LOW : BOOL; (* Capacitive soil moisture sensor detects dry conditions in zone 1 *)\nEND_VAR\nVAR_OUTPUT\n  ZONE_1_VALVE : BOOL; (* Solenoid valve controlling water flow to irrigation zone 1 *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nZONE_1_VALVE := SOIL_MOISTURE_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_5_2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioRx-42A\n- **Location**: Fermentation Suite B, Pharmaceutical Production\n- **Control Type**: Cascade Control with Manual Override\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control system with mode selection and manual override capability for pharmaceutical fermentation processes\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with configurable control strategies while providing manual override capability for operator intervention during critical fermentation phases\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Control_Mode**: INT - Mode selector for different control strategies (0=Manual OFF, 1=Auto, 2=High Demand)\n- **Manual_Agitator_Override**: BOOL - Manual override switch for direct agitator control\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n- **AGITATOR_RUNNING_LIGHT**: BOOL - Visual indicator showing agitator motor status\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Manual_Agitator_Override (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control through three operational modes selected by the Control_Mode input. In mode 0 (Manual OFF), the agitator remains off. In mode 1 (Auto), the agitator activates only when dissolved oxygen drops below 40% saturation. In mode 2 (High Demand), the agitator runs continuously during fermentation. A new manual override input allows operators to directly control the agitator, bypassing all automatic mode logic when activated. The agitator running light mirrors the actual agitator status for operator feedback. All control functions require the master Fermenter_Enable signal to be active for operation.\n\n**Formal Logic Expression**: \nAGITATOR_ON := (Manual_Agitator_Override AND Fermenter_Enable) OR \n                (CASE Control_Mode OF\n                  0: FALSE\n                  1: Fermenter_Enable AND DO_LOW\n                  2: Fermenter_Enable\n                END_CASE);\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Manual override requires master enable for operation\n- Safety interlock hierarchy preserved with Fermenter_Enable as primary safety\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable | On/Off | 100ms |\n| Control_Mode | INT | R/W | Control Mode Selector | Mode | 1s |\n| Manual_Agitator_Override | BOOL | R/W | Manual Agitator Override | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Status | On/Off | 100ms |\n| AGITATOR_RUNNING_LIGHT | BOOL | R | Agitator Running Light | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Manual Override Active**: Manual_Agitator_Override=TRUE, Fermenter_Enable=TRUE → AGITATOR_ON=TRUE regardless of Control_Mode or DO_LOW\n2. **Manual Override Inactive**: Manual_Agitator_Override=FALSE → System follows normal mode-based control logic\n3. **Safety Priority**: Fermenter_Enable=FALSE → AGITATOR_ON=FALSE even with Manual_Agitator_Override=TRUE\n4. **Mode 0 Operation**: Control_Mode=0, Manual_Agitator_Override=FALSE → AGITATOR_ON=FALSE\n5. **Mode 1 Operation**: Control_Mode=1, DO_LOW=TRUE, Manual_Agitator_Override=FALSE → AGITATOR_ON=TRUE\n6. **Mode 2 Operation**: Control_Mode=2, Manual_Agitator_Override=FALSE → AGITATOR_ON=TRUE\n\n## Change Log\n- **Manual_Agitator_Override**: BOOL / Purpose: Provides direct operator control of agitator during critical phases / Compatibility: OR'd with existing mode logic, requires master enable\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 8/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs: 3→4, outputs: 2→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := CASE(Control_Mode) with mode-dependent conditions\n- **This Gen**: AGITATOR_ON := (Manual_Agitator_Override AND Fermenter_Enable) OR (CASE logic)\n- **Not Equivalent**: Manual override creates a parallel control path that bypasses mode logic\n\n**Domain Keywords**: fermentation, bioreactor, dissolved oxygen, pharmaceutical, agitation, override, cascade control",
  "output": "PROGRAM BioRx_42A_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Control_Mode : INT; (* Mode selector for different control strategies (0=Manual OFF, 1=Auto, 2=High Demand) *)\n    Manual_Agitator_Override : BOOL; (* Manual override switch for direct agitator control *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\n    AGITATOR_RUNNING_LIGHT : BOOL; (* Visual indicator showing agitator motor status *)\nEND_VAR\n\nVAR\n    mode_result : BOOL; (* Temporary variable to store CASE result *)\nEND_VAR\n\n(* Main control logic *)\nCASE Control_Mode OF\n    0: mode_result := FALSE;\n    1: mode_result := Fermenter_Enable AND DO_LOW;\n    2: mode_result := Fermenter_Enable;\n    ELSE\n        mode_result := FALSE; (* Default case for invalid mode values *)\nEND_CASE;\n\nAGITATOR_ON := (Manual_Agitator_Override AND Fermenter_Enable) OR mode_result;\n\n(* Mirror agitator status to running light *)\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_1_functionality_functionality_functionality_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: SOL-V001\n- **Location**: Zone A Irrigation Valve\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation Control\n\n## Control Objective\nTurn ON irrigation valve when moisture sensor indicates dry soil.\n\n## I/O Requirements\n\n### Input Variables\n- **SOIL_DRY_A**: BOOL - Capacitive soil moisture sensor indicating dry conditions in Zone A\n\n### Output Variables\n- **VALVE_A**: BOOL - Solenoid valve controlling water flow to Zone A irrigation\n\n## Control Logic Description\nDirect pass-through control. When the soil dry signal is active (TRUE), the irrigation valve activates immediately. When the soil dry signal is inactive (FALSE), the valve deactivates immediately.\n\n**Formal Logic Expression**: VALVE_A := SOIL_DRY_A\n\n## Safety Requirements\n- Valve turns OFF when sensor signal is lost\n- System defaults to safe state (valve OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: SOIL_DRY_A = TRUE → VALVE_A = TRUE\n2. **Deactivation**: SOIL_DRY_A = FALSE → VALVE_A = FALSE\n\n**Domain Keywords**: irrigation, moisture, valve",
  "output": "PROGRAM SOL_V001_Control\nVAR_INPUT\n    SOIL_DRY_A : BOOL; (* Capacitive soil moisture sensor indicating dry conditions in Zone A *)\nEND_VAR\nVAR_OUTPUT\n    VALVE_A : BOOL; (* Solenoid valve controlling water flow to Zone A irrigation *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nVALVE_A := SOIL_DRY_A;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_2",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic dissolved oxygen control with master enable for bioreactor agitator system\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation by activating agitator when oxygen levels drop below threshold, with master enable control for operator safety.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Fermenter_Enable (Input, BOOL)\n\n## Control Logic Description\nThe agitator is activated when both conditions are met: dissolved oxygen levels are below 40% saturation threshold AND the fermenter master enable switch is engaged. This provides operator control over the system while maintaining the basic oxygen control functionality.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW\n\n## Safety Requirements\n- System defaults to safe state (output OFF) on power-up\n- Master enable switch must be engaged for any agitator operation\n- Output turns OFF when input signal is lost\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable Switch | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Active Status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_LOW = TRUE, Fermenter_Enable = TRUE → AGITATOR_ON = TRUE\n2. **Disabled System**: DO_LOW = TRUE, Fermenter_Enable = FALSE → AGITATOR_ON = FALSE\n3. **Adequate Oxygen**: DO_LOW = FALSE, Fermenter_Enable = TRUE → AGITATOR_ON = FALSE\n4. **Complete Disable**: DO_LOW = FALSE, Fermenter_Enable = FALSE → AGITATOR_ON = FALSE\n\n## Change Log\n- **Fermenter_Enable**: BOOL / Purpose: Master enable control for bioreactor system / Compatibility: Backward compatible with existing DO control logic\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs: 1→2, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **Not Equivalent**: TRUE (new logic requires additional condition)\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, antibiotic production",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\n\n(* Main control logic - agitator activates only when both conditions are met *)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_1_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: IRR-001\n- **Location**: Zone 1 Irrigation\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Irrigation\n\n## Control Objective\nTurn ON Zone_1_Valve when Soil_Moisture_Low is active.\n\n## I/O Requirements\n\n### Input Variables\n- **SOIL_MOISTURE_LOW**: BOOL - Capacitive soil moisture sensor detects dry conditions in zone 1\n\n### Output Variables\n- **ZONE_1_VALVE**: BOOL - Solenoid valve controlling water flow to irrigation zone 1\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: ZONE_1_VALVE := SOIL_MOISTURE_LOW\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: SOIL_MOISTURE_LOW = TRUE → ZONE_1_VALVE = TRUE\n2. **Deactivation**: SOIL_MOISTURE_LOW = FALSE → ZONE_1_VALVE = FALSE\n\n**Domain Keywords**: irrigation, moisture, valve",
  "output": "PROGRAM IRR_001_Control\nVAR_INPUT\n  SOIL_MOISTURE_LOW : BOOL; (* Capacitive soil moisture sensor detects dry conditions in zone 1 *)\nEND_VAR\nVAR_OUTPUT\n  ZONE_1_VALVE : BOOL; (* Solenoid valve controlling water flow to irrigation zone 1 *)\nEND_VAR\n\nZONE_1_VALVE := SOIL_MOISTURE_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_6_variant_5",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALARM-001\n- **Location**: Control Room Console\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Alarm Management\n\n## Control Objective\nTurn ON Alarm_Display when Alarm_Active is active.\n\n## I/O Requirements\n\n### Input Variables\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n\n### Output Variables\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: Alarm_Display := Alarm_Active\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: Alarm_Active = TRUE → Alarm_Display = TRUE\n2. **Deactivation**: Alarm_Active = FALSE → Alarm_Display = FALSE\n\n**Domain Keywords**: alarm, display, suppression",
  "output": "PROGRAM ALARM_001_Control\nVAR_INPUT\n  Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\nEND_VAR\nVAR_OUTPUT\n  Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\n\nAlarm_Display := Alarm_Active;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_68_variant_6",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic oxygen sparging control with master enable for bioreactor operation during exponential growth phase\n\n## Control Objective\nMaintain dissolved oxygen levels at 30% setpoint during critical exponential growth phase by controlling oxygen sparging valve, with master enable for system operation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen sensor indicates level above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor control system operation\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Bioreactor_Enable (Input, BOOL)\n\n## Control Logic Description\nThe oxygen sparge valve opens when both the master bioreactor enable is active AND the dissolved oxygen sensor indicates levels are below the 30% setpoint threshold. The system requires explicit operator enablement before oxygen control can activate.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := Bioreactor_Enable AND DO_SENSOR_HIGH\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Master enable switch must be explicitly activated by operator\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | DO above 30% threshold | Boolean | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master system enable | Boolean | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Oxygen sparge valve status | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Bioreactor_Enable = TRUE, DO_SENSOR_HIGH = TRUE → OXYGEN_SPARGE_VALVE = TRUE\n2. **System Disabled**: Bioreactor_Enable = FALSE, DO_SENSOR_HIGH = TRUE → OXYGEN_SPARGE_VALVE = FALSE\n3. **Oxygen Adequate**: Bioreactor_Enable = TRUE, DO_SENSOR_HIGH = FALSE → OXYGEN_SPARGE_VALVE = FALSE\n4. **Complete Disable**: Bioreactor_Enable = FALSE, DO_SENSOR_HIGH = FALSE → OXYGEN_SPARGE_VALVE = FALSE\n\n## Change Log\n- **Bioreactor_Enable**: BOOL / Purpose: Master enable for bioreactor control system / Compatibility: Gates all control outputs\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := DO_SENSOR_HIGH\n- **This Gen**: OXYGEN_SPARGE_VALVE := Bioreactor_Enable AND DO_SENSOR_HIGH\n- **Not Equivalent**: TRUE (enable condition changes behavior)\n\n**Domain Keywords**: bioreactor, oxygen, sparge, valve, dissolved oxygen, pharmaceutical, exponential growth",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n  DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen sensor indicates level above 30% setpoint threshold *)\n  Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor control system operation *)\nEND_VAR\nVAR_OUTPUT\n  OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\nEND_VAR\n\nOXYGEN_SPARGE_VALVE := Bioreactor_Enable AND DO_SENSOR_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_0_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: DO-PRB-001\n- **Location**: Bioreactor Vessel\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Control\n\n## Control Objective\nTurn ON agitator when dissolved oxygen is low.\n\n## I/O Requirements\n\n### Input Variables\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n\n### Output Variables\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: AGITATOR_ON := DO_LOW\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: DO_LOW = TRUE → AGITATOR_ON = TRUE\n2. **Deactivation**: DO_LOW = FALSE → AGITATOR_ON = FALSE\n\n**Domain Keywords**: dissolved oxygen, agitation, bioreactor",
  "output": "PROGRAM DO_PRB_001_Control\nVAR_INPUT\n  DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\nEND_VAR\nVAR_OUTPUT\n  AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\n\nAGITATOR_ON := DO_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_69_variant_1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Processing_Unit_A\n- **Location**: Main Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm suppression system with operator mode selection capability\n\n## Control Objective\nActivate alarm suppression during high alarm rates while providing operator feedback and counting activations for maintenance scheduling, with operator-selectable automatic or manual control modes.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds 20 alarms/minute threshold\n- **Suppression_Mode_Selector**: INT - Operator mode selection (0=Automatic, 1=Manual)\n- **Manual_Suppression_Request**: BOOL - Manual suppression activation request (when in manual mode)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n- **Alarm_Suppression_Status_Light**: BOOL - Visual indicator showing suppression mode status\n\n### Internals (CUMULATIVE)\n- **Alarm_Suppression_Cycle_Count**: UINT - Counts number of suppression mode activations\n\n### Counts Check\n`Inputs: 3 (+2) | Outputs: 2 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Suppression_Mode_Selector (Input, INT)\n- Manual_Suppression_Request (Input, BOOL)\n\n## Control Logic Description\nThe system now supports two operating modes selected by the operator via Suppression_Mode_Selector. In automatic mode (0), alarm suppression activates automatically when High_Alarm_Rate_Detected is TRUE. In manual mode (1), alarm suppression activates only when Manual_Suppression_Request is TRUE, regardless of the alarm rate. The Alarm_Suppression_Status_Light mirrors the Alarm_Suppression_Active state for operator feedback. The Alarm_Suppression_Cycle_Count increments on each rising edge of Alarm_Suppression_Active to track maintenance cycles.\n\n**Formal Logic Expression**: \nAlarm_Suppression_Active := (Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request);\nAlarm_Suppression_Status_Light := Alarm_Suppression_Active;\nAlarm_Suppression_Cycle_Count increments on rising edge of Alarm_Suppression_Active\n\n## Safety Requirements\n- System defaults to safe state (suppression OFF) on power-up\n- Critical safety alarms never suppressed regardless of mode\n- Manual mode requires explicit operator action to activate suppression\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate threshold exceeded | On/Off | 1s |\n| Suppression_Mode_Selector | INT | R/W | Operation mode selection | Mode | 1s |\n| Manual_Suppression_Request | BOOL | R/W | Manual suppression request | On/Off | 1s |\n| Alarm_Suppression_Active | BOOL | R | Suppression mode active | On/Off | 1s |\n| Alarm_Suppression_Status_Light | BOOL | R | Status indicator light | On/Off | 1s |\n| Alarm_Suppression_Cycle_Count | UINT | R | Suppression activation count | Count | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Automatic Mode Operation**: High_Alarm_Rate_Detected = TRUE, Suppression_Mode_Selector = 0 → Alarm_Suppression_Active = TRUE\n2. **Manual Mode Operation**: Manual_Suppression_Request = TRUE, Suppression_Mode_Selector = 1 → Alarm_Suppression_Active = TRUE\n3. **Mode Transition Safety**: Changing modes while suppression active should maintain current state until conditions change\n\n## Change Log\n- **Suppression_Mode_Selector**: INT / Purpose: Operator mode selection / Compatibility: Backward compatible, defaults to automatic mode\n- **Manual_Suppression_Request**: BOOL / Purpose: Manual suppression activation / Compatibility: New functionality for manual control\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only necessary mode control variables\n- **Measurability**: 9/10 - Clear mode transitions testable\n- **Safety-Preservation**: 10/10 - Maintains all safety constraints\n- **Determinism**: 9/10 - Clear mode-based logic\n- **SEP-Compliance**: 10/10 - Within mid-phase limits, no TON added\n- **ST-Coverage**: 9/10 - Introduced CASE structure and INT data type\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (2 new inputs, within mid-phase limits)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := High_Alarm_Rate_Detected\n- **This Gen**: Alarm_Suppression_Active := (Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request)\n- **Not Equivalent**: TRUE - New logic incorporates mode selection and manual control\n\n**Domain Keywords**: chemical processing, alarm suppression, SCADA, operator interface, mode control",
  "output": "PROGRAM Chemical_Processing_Unit_A\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds 20 alarms/minute threshold *)\n    Suppression_Mode_Selector : INT; (* Operator mode selection (0=Automatic, 1=Manual) *)\n    Manual_Suppression_Request : BOOL; (* Manual suppression activation request (when in manual mode) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\n    Alarm_Suppression_Status_Light : BOOL; (* Visual indicator showing suppression mode status *)\nEND_VAR\nVAR\n    Alarm_Suppression_Cycle_Count : UINT; (* Counts number of suppression mode activations *)\n    Alarm_Suppression_Active_Prev : BOOL; (* Previous state for edge detection *)\n    Alarm_Suppression_Rising_Edge : BOOL; (* Rising edge detection signal *)\nEND_VAR\n\n(* Safety chain - ensure safe state on power-up *)\nAlarm_Suppression_Active := FALSE;\nAlarm_Suppression_Status_Light := FALSE;\nAlarm_Suppression_Cycle_Count := 0;\nAlarm_Suppression_Active_Prev := FALSE;\nAlarm_Suppression_Rising_Edge := FALSE;\n\n(* Main operational logic *)\nAlarm_Suppression_Active := (Suppression_Mode_Selector = 0 AND High_Alarm_Rate_Detected) OR (Suppression_Mode_Selector = 1 AND Manual_Suppression_Request);\nAlarm_Suppression_Status_Light := Alarm_Suppression_Active;\n\n(* Rising edge detection for cycle counting *)\nAlarm_Suppression_Rising_Edge := Alarm_Suppression_Active AND NOT Alarm_Suppression_Active_Prev;\nAlarm_Suppression_Active_Prev := Alarm_Suppression_Active;\n\n(* Increment cycle count on rising edge *)\nIF Alarm_Suppression_Rising_Edge THEN\n    Alarm_Suppression_Cycle_Count := Alarm_Suppression_Cycle_Count + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_0_maintenance_functionality_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Production Line A\n- **Control Type**: Predictive Maintenance System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system with anomaly delay timer for kiln refractory lining maintenance prediction\n\n## Control Objective\nDetect thermal anomalies with a 2-second delay filter and trigger maintenance alarms with safety override and mode control\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_MONITORING_MODE**: INT - Mode selector for monitoring system (0=Normal, 1=Diagnostic, 2=Maintenance)\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_MONITORING_ACTIVE**: BOOL - System operational status indicator\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n- **THERMAL_ANOMALY_DELAY_TON**: TON - 2-second timer for thermal anomaly filtering\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- THERMAL_ANOMALY_DELAY_TON (Internal, TON)\n\n## Control Logic Description\nThe system monitors thermal anomalies detected by infrared cameras. When a thermal anomaly is detected, a 2-second timer starts to filter transient signals. Only sustained thermal anomalies that persist for at least 2 seconds trigger the maintenance alarm. The emergency stop safety circuit overrides all functional logic, and the monitoring mode must be in Normal mode (0) for alarm triggering. The system operational status indicator remains active when the emergency stop is not engaged.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := (THERMAL_ANOMALY_DELAY_TON.Q AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0)\nKILN_E_STOP_OK := KILN_E_STOP_NC\nTHERMAL_ANOMALY_DELAY_TON(IN:=THERMAL_ANOMALY, PT:=T#2s)\n\n## Safety Requirements\n- Emergency stop immediately overrides all functional logic\n- Maintenance alarms shall not activate during emergency stop conditions\n- System status indicator shall show inactive during emergency stop\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_MONITORING_MODE | INT | R/W | Monitoring mode selector | Mode | 1s |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance alarm active | On/Off | 100ms |\n| KILN_MONITORING_ACTIVE | BOOL | R | System operational status | On/Off | 100ms |\n| THERMAL_ANOMALY_DELAY_TON.ET | TIME | R | Anomaly timer elapsed time | ms | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=1 for 3s, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=0 → MAINTENANCE_ALARM=1 after 2s delay\n2. **Transient Anomaly**: THERMAL_ANOMALY=1 for 1s, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=0 → MAINTENANCE_ALARM=0 (no alarm)\n3. **Emergency Stop Override**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=0 → MAINTENANCE_ALARM=0 (safety override)\n4. **Maintenance Mode**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1, KILN_MONITORING_MODE=2 → MAINTENANCE_ALARM=0 (mode override)\n\n## Change Log\n- **THERMAL_ANOMALY_DELAY_TON**: TON / Purpose: 2-second filter for thermal anomalies / Compatibility: Added to existing logic chain\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 internal added)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := (THERMAL_ANOMALY AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0)\n- **This Gen**: MAINTENANCE_ALARM := (THERMAL_ANOMALY_DELAY_TON.Q AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0)\n- **Not Equivalent**: True (timer delay changes response timing)\n\n**Domain Keywords**: kiln, refractory, thermal, monitoring, maintenance, predictive, cement, anomaly",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_MONITORING_MODE : INT; (* Mode selector for monitoring system (0=Normal, 1=Diagnostic, 2=Maintenance) *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_MONITORING_ACTIVE : BOOL; (* System operational status indicator *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\n    THERMAL_ANOMALY_DELAY_TON : TON; (* 2-second timer for thermal anomaly filtering *)\nEND_VAR\n\n(* Safety chain - emergency stop status *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* System operational status indicator *)\nKILN_MONITORING_ACTIVE := KILN_E_STOP_OK;\n\n(* Thermal anomaly delay timer *)\nTHERMAL_ANOMALY_DELAY_TON(IN := THERMAL_ANOMALY, PT := T#2S);\n\n(* Maintenance alarm logic with safety override and mode control *)\nMAINTENANCE_ALARM := (THERMAL_ANOMALY_DELAY_TON.Q AND KILN_E_STOP_OK) AND (KILN_MONITORING_MODE = 0);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_70_variant_1_safety_functionality_functionality_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B, Antibiotic Production Wing\n- **Control Type**: Cascade Control with Adaptive Optimization\n- **Safety Level**: SIL 2\n- **Complexity**: Advanced\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 6 (late)\n- **Branch**: contextual_complication\n- **Summary**: Enhanced bioreactor control with biomass concentration monitoring and adaptive agitator speed reduction to prevent shear stress during high-density fermentation\n\n## Control Objective\nMaintain dissolved oxygen levels between 40-60% saturation while implementing load-based agitator speed optimization to minimize shear stress on sensitive antibiotic-producing cultures during exponential growth phase\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n- **Fermentation_Mode_SEL**: INT - Mode selector for different fermentation phases\n- **Biomass_Concentration**: REAL - Real-time biomass concentration measurement from off-gas analysis (g/L)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n- **Bioreactor_Status_Word**: WORD - Packed status information for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total number of agitator activation cycles\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n- **Agitator_Runtime_Total**: TIME - Total accumulated runtime of agitator motor\n- **Manual_Agitator_Control**: BOOL - Manual control signal for agitator in manual mode\n- **High_Biomass_Condition**: BOOL - Flag indicating biomass concentration exceeds 80% of maximum capacity\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Biomass_Concentration (Input, REAL)\n- High_Biomass_Condition (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control while incorporating biomass concentration monitoring. When biomass concentration exceeds 80% of maximum capacity (8.0 g/L), the system sets a high biomass condition flag. In automatic fermentation modes, if high biomass condition is active, the agitator activation is temporarily suspended unless dissolved oxygen drops critically low, prioritizing aeration over mechanical agitation to reduce shear stress on the dense culture. The master enable switch continues to override all functional logic when disabled.\n\n**Formal Logic Expression**: \nHigh_Biomass_Condition := Biomass_Concentration > 8.0;\nAGITATOR_ON := CASE Fermentation_Mode_SEL OF \n  0: Fermenter_Enable AND Manual_Agitator_Control; \n  1: Fermenter_Enable AND (DO_LOW OR NOT High_Biomass_Condition);\n  2: FALSE; \nEND_CASE\n\n## Safety Requirements\n- Master enable switch must override all functional logic when disabled\n- DO low condition must override biomass-based speed reduction to prevent oxygen starvation\n- Biomass concentration readings must be validated with range checking to prevent false high-load conditions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Biomass_Concentration | REAL | R | Real-time biomass concentration | g/L | 1 sec |\n| High_Biomass_Condition | BOOL | R | High density culture flag | - | 1 sec |\n| DO_LOW | BOOL | R | Dissolved oxygen low alarm | - | 100 ms |\n| Fermenter_Enable | BOOL | R/W | System master enable | - | 100 ms |\n| AGITATOR_ON | BOOL | R | Agitator motor status | - | 100 ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Biomass = 5.0 g/L, DO normal → Agitator follows mode logic\n2. **High Biomass Condition**: Biomass = 9.0 g/L, DO normal → Agitator deactivated unless manual mode\n3. **High Biomass with DO Low**: Biomass = 9.0 g/L, DO low → Agitator activated despite high biomass\n4. **System Disabled**: Fermenter_Enable = FALSE → Agitator deactivated regardless of other conditions\n\n## Change Log\n- **Biomass_Concentration**: REAL / Purpose: Real-time biomass monitoring for adaptive control / Compatibility: New analog input\n- **High_Biomass_Condition**: BOOL / Purpose: Flag for high-density culture condition / Compatibility: New internal flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 4\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (2 new items ≤ 2 cap)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := CASE Fermentation_Mode_SEL OF 0: Fermenter_Enable AND Manual_Agitator_Control; 1: Fermenter_Enable AND DO_LOW; 2: FALSE; END_CASE\n- **This Gen**: AGITATOR_ON := CASE Fermentation_Mode_SEL OF 0: Fermenter_Enable AND Manual_Agitator_Control; 1: Fermenter_Enable AND (DO_LOW OR NOT High_Biomass_Condition); 2: FALSE; END_CASE\n- **Not Equivalent**: The new logic incorporates biomass condition, making agitator behavior dependent on culture density rather than just DO level and mode\n\n**Domain Keywords**: [bioreactor, fermentation, dissolved oxygen, biomass concentration, shear stress, antibiotic production, adaptive control]",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\n    Fermentation_Mode_SEL : INT; (* Mode selector for different fermentation phases *)\n    Biomass_Concentration : REAL; (* Real-time biomass concentration measurement from off-gas analysis (g/L) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\n    Bioreactor_Status_Word : WORD; (* Packed status information for SCADA monitoring *)\nEND_VAR\nVAR\n    Agitator_Cycle_Count : UINT; (* Total number of agitator activation cycles *)\n    Agitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\n    Agitator_Runtime_Total : TIME; (* Total accumulated runtime of agitator motor *)\n    Manual_Agitator_Control : BOOL; (* Manual control signal for agitator in manual mode *)\n    High_Biomass_Condition : BOOL; (* Flag indicating biomass concentration exceeds 80% of maximum capacity *)\nEND_VAR\n\n(* Safety and validation logic - executed first *)\nHigh_Biomass_Condition := (Biomass_Concentration > 8.0);\n\n(* Main operational logic *)\nCASE Fermentation_Mode_SEL OF \n    0: AGITATOR_ON := Fermenter_Enable AND Manual_Agitator_Control;\n    1: AGITATOR_ON := Fermenter_Enable AND (DO_LOW OR NOT High_Biomass_Condition);\n    2: AGITATOR_ON := FALSE;\nEND_CASE;\n\n(* Edge detection and cycle counting for agitator *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\nIF Agitator_R_TRIG.Q THEN\n    Agitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\n\n(* Runtime accumulation - simplified implementation *)\n(* Note: Actual runtime accumulation would require timer integration *)\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_1_functionality_maintenance_maintenance_functionality_interoperability_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALARM-MGMT-01\n- **Location**: Chemical Processing Plant - Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 4 (mid)\n- **Branch**: interoperability\n- **Summary**: Dynamic alarm flood suppression system with safety interlocks, activation delay, and SCADA heartbeat monitoring\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety interlocks, activation delay, and SCADA integration for system health monitoring\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds threshold (20 alarms/minute)\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button status (normally closed, TRUE when safe)\n- **REACTOR_GUARD_DOOR_NC**: BOOL - Reactor safety door interlock status (normally closed, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n- **Alarm_Heartbeat_Status**: BOOL - 1Hz heartbeat for SCADA system health monitoring\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop safe status\n- **REACTOR_GUARD_DOOR_OK**: BOOL - Reactor safety door safe status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive\n- **Suppression_Delay_TON**: TON - 2-second timer for suppression activation delay\n- **Heartbeat_Timer**: TON - 500ms timer for heartbeat generation\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 2 (+1) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Alarm_Heartbeat_Status (Output, BOOL)\n- Heartbeat_Timer (Internal, TON)\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression mode when high alarm rates are detected, provided all safety permissives are satisfied. A 2-second delay prevents brief spikes from triggering suppression. The emergency stop and reactor door interlocks are monitored with normally-closed contacts, requiring inversion to derive safe status signals. A new heartbeat output toggles at 1Hz using a 500ms timer to provide SCADA systems with continuous health monitoring of the alarm management PLC.\n\n**Formal Logic Expression**: \nAlarm_Suppression_Active := Suppression_Delay_TON.Q\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC\nAlarm_Heartbeat_Status := Heartbeat_Timer.Q\n\n## Safety Requirements\n- Emergency stop must immediately disable alarm suppression activation\n- Reactor safety door interlock must prevent suppression activation when door is open\n- Remote commands must never override local safety interlocks\n- Heartbeat monitoring must not affect safety-critical functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | Alarm rate exceeds threshold | On/Off | 100ms |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| REACTOR_GUARD_DOOR_NC | BOOL | R | Reactor door status | On/Off | 100ms |\n| Alarm_Suppression_Active | BOOL | R | Suppression mode active | On/Off | 100ms |\n| Alarm_Heartbeat_Status | BOOL | R | PLC health heartbeat | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Low alarm rate, safety permissives TRUE → Alarm_Suppression_Active FALSE, Heartbeat toggling\n2. **High Alarm Rate**: High alarm rate detected, safety TRUE → Alarm_Suppression_Active TRUE after 2s delay\n3. **Safety Violation**: High alarm rate, emergency stop pressed → Alarm_Suppression_Active remains FALSE\n4. **Heartbeat Verification**: Monitor Alarm_Heartbeat_Status → Should toggle at 1Hz frequency\n\n## Change Log\n- **Alarm_Heartbeat_Status**: BOOL / Purpose: SCADA health monitoring / Compatibility: Read-only status bit\n- **Heartbeat_Timer**: TON / Purpose: Generate 1Hz heartbeat / Compatibility: Internal timer function\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 4\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := Suppression_Delay_TON.Q\n- **This Gen**: Alarm_Heartbeat_Status := Heartbeat_Timer.Q\n- **Not Equivalent**: TRUE - Different functionality and variables\n\n**Domain Keywords**: [alarm management, SCADA integration, heartbeat, chemical processing, safety interlocks]",
  "output": "PROGRAM ALARM_MGMT_01_Control\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds threshold (20 alarms/minute) *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button status (normally closed, TRUE when safe) *)\n    REACTOR_GUARD_DOOR_NC : BOOL; (* Reactor safety door interlock status (normally closed, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\n    Alarm_Heartbeat_Status : BOOL; (* 1Hz heartbeat for SCADA system health monitoring *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop safe status *)\n    REACTOR_GUARD_DOOR_OK : BOOL; (* Reactor safety door safe status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive *)\n    Suppression_Delay_TON : TON; (* 2-second timer for suppression activation delay *)\n    Heartbeat_Timer : TON; (* 500ms timer for heartbeat generation *)\nEND_VAR\n\n(* Safety chain logic - process safety interlocks first *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nREACTOR_GUARD_DOOR_OK := REACTOR_GUARD_DOOR_NC;\nSAFE_TO_OPERATE := E_STOP_ALARM_AREA_OK AND REACTOR_GUARD_DOOR_OK;\n\n(* Alarm suppression logic with safety interlock *)\nSuppression_Delay_TON(IN := High_Alarm_Rate_Detected AND SAFE_TO_OPERATE, PT := T#2S);\nAlarm_Suppression_Active := Suppression_Delay_TON.Q;\n\n(* SCADA heartbeat generation *)\nHeartbeat_Timer(IN := NOT Heartbeat_Timer.Q, PT := T#500MS);\nAlarm_Heartbeat_Status := Heartbeat_Timer.Q;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_0_safety_safety_functionality_interoperability_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-001\n- **Location**: Control Room HMI\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Alarm Management\n\n## Control Objective\nTurn ON ALARM_SUPPRESSION when FLOOD_DETECTED is active.\n\n## I/O Requirements\n\n### Input Variables\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring system\n\n### Output Variables\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering system\n\n## Control Logic Description\nDirect pass-through control. When the flood detection signal is active (TRUE), the alarm suppression activates immediately. When the flood detection signal is inactive (FALSE), alarm suppression deactivates immediately.\n\n**Formal Logic Expression**: ALARM_SUPPRESSION := FLOOD_DETECTED\n\n## Safety Requirements\n- Alarm suppression turns OFF when flood detection signal is lost\n- System defaults to safe state (suppression OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: FLOOD_DETECTED = TRUE → ALARM_SUPPRESSION = TRUE\n2. **Deactivation**: FLOOD_DETECTED = FALSE → ALARM_SUPPRESSION = FALSE\n\n**Domain Keywords**: alarm management, flood suppression, SCADA",
  "output": "PROGRAM ALM_001_Control\nVAR_INPUT\n  FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring system *)\nEND_VAR\nVAR_OUTPUT\n  ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering system *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nALARM_SUPPRESSION := FLOOD_DETECTED;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_68_variant_5",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Safety Override\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: safety\n- **Summary**: Bioreactor dissolved oxygen control with emergency stop safety, minimum sparge duration, and safety reset capability\n\n## Control Objective\nMaintain dissolved oxygen levels with emergency stop safety, minimum sparge duration to prevent rapid valve cycling, and manual safety reset requirement after trip conditions\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (NC contact)\n- **BIO_SAFETY_RESET_REQ**: BOOL - Safety reset request button (momentary)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n- **OXYGEN_SPARGE_ACTIVE_LIGHT**: BOOL - Visual indicator light for valve status\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n- **BIO_SPARGE_MIN_ON_TIMER**: TON - Minimum on-time timer for oxygen sparge valve\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 2 (+0)`\n\n### New Items This Gen (must respect SEP)\n- BIO_SAFETY_RESET_REQ (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by controlling the oxygen sparge valve. When dissolved oxygen drops below threshold, the valve opens and must remain open for a minimum of 5 seconds to prevent rapid cycling. The emergency stop button provides immediate safety override, stopping all operation when pressed. The new safety reset request input provides a manual reset capability that will be used to acknowledge and reset safety fault conditions.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (NOT DO_SENSOR_HIGH OR BIO_SPARGE_MIN_ON_TIMER.Q)\nBIO_E_STOP_OK := BIO_E_STOP_NC\n\n## Safety Requirements\n- Emergency stop must immediately override all operational logic\n- Safety reset requires manual acknowledgment after trip conditions\n- Minimum sparge duration prevents equipment damage from rapid cycling\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved Oxygen High | On/Off | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency Stop Status | On/Off | 100ms |\n| BIO_SAFETY_RESET_REQ | BOOL | R/W | Safety Reset Request | On/Off | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Sparge Valve Status | On/Off | 100ms |\n| OXYGEN_SPARGE_ACTIVE_LIGHT | BOOL | R | Valve Active Indicator | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_SENSOR_HIGH = FALSE, BIO_E_STOP_NC = TRUE → OXYGEN_SPARGE_VALVE = TRUE\n2. **Emergency Stop**: BIO_E_STOP_NC = FALSE → OXYGEN_SPARGE_VALVE = FALSE (immediate)\n3. **Minimum On-Time**: Valve opening triggers 5-second minimum on timer\n4. **Reset Button Function**: BIO_SAFETY_RESET_REQ press acknowledged by system\n\n## Change Log\n- **BIO_SAFETY_RESET_REQ**: BOOL / Purpose: Manual safety reset request input / Compatibility: Backward compatible, adds reset capability\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs increased, outputs and internals unchanged)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (NOT DO_SENSOR_HIGH OR BIO_SPARGE_MIN_ON_TIMER.Q)\n- **This Gen**: Same as parent (reset input doesn't change core logic yet)\n- **Not Equivalent**: True (new input variable added)\n\n**Domain Keywords**: bioreactor, dissolved oxygen, sparge valve, pharmaceutical, safety reset, emergency stop",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    BIO_SAFETY_RESET_REQ : BOOL; (* Safety reset request button (momentary) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\n    OXYGEN_SPARGE_ACTIVE_LIGHT : BOOL; (* Visual indicator light for valve status *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\n    BIO_SPARGE_MIN_ON_TIMER : TON; (* Minimum on-time timer for oxygen sparge valve *)\nEND_VAR\n\n(* Safety chain - emergency stop status *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Minimum sparge duration timer *)\nBIO_SPARGE_MIN_ON_TIMER(IN := NOT DO_SENSOR_HIGH AND BIO_E_STOP_OK, PT := T#5S);\n\n(* Main control logic - oxygen sparge valve control *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (NOT DO_SENSOR_HIGH OR BIO_SPARGE_MIN_ON_TIMER.Q);\n\n(* Status indicator light follows valve status *)\nOXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_0_safety_functionality_performance_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: AFS-101\n- **Location**: Central Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm suppression system with operator enable control and status indication\n\n## Control Objective\nImplement real-time alarm flood suppression with operator confirmation and visual status feedback to prevent operator overload during process upsets\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal from rate monitoring system\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system (operator control)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering system\n- **SUPPRESSION_ACTIVE_LIGHT**: BOOL - Status indicator showing when alarm suppression is active\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_ACTIVE_LIGHT (Output, BOOL)\n\n## Control Logic Description\nThe system activates alarm suppression only when both conditions are met: flood detection is active AND the operator has enabled suppression. The suppression active light provides immediate visual feedback to operators when suppression is active, helping them understand the current system state during high-stress flood events.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION\n\n## Safety Requirements\n- System defaults to disabled (FALSE) on power-up\n- Turns OFF immediately when either enable signal is lost or flood detection clears\n- Status light provides clear indication of suppression state to prevent operator confusion\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Suppression system enable | On/Off | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression active | On/Off | 1s |\n| SUPPRESSION_ACTIVE_LIGHT | BOOL | R | Suppression status indicator | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1 → ALARM_SUPPRESSION=1, SUPPRESSION_ACTIVE_LIGHT=1\n2. **Flood Detected but Disabled**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0, SUPPRESSION_ACTIVE_LIGHT=0\n3. **Enabled but No Flood**: FLOOD_DETECTED=0, ALARM_SUPPRESSION_ENABLE=1 → ALARM_SUPPRESSION=0, SUPPRESSION_ACTIVE_LIGHT=0\n4. **System Disabled**: FLOOD_DETECTED=0, ALARM_SUPPRESSION_ENABLE=0 → ALARM_SUPPRESSION=0, SUPPRESSION_ACTIVE_LIGHT=0\n\n## Change Log\n- **SUPPRESSION_ACTIVE_LIGHT**: BOOL / Purpose: Visual status indicator for operators during alarm flood events / Compatibility: Mirrors ALARM_SUPPRESSION output\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new BOOL output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED\n- **This Gen**: SUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION\n- **Not Equivalent**: The new equation provides status feedback without altering the core control logic\n\n**Domain Keywords**: alarm suppression, flood detection, operator feedback, status indication, process control",
  "output": "PROGRAM AFS_101_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal from rate monitoring system *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system (operator control) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering system *)\n    SUPPRESSION_ACTIVE_LIGHT : BOOL; (* Status indicator showing when alarm suppression is active *)\nEND_VAR\n\nALARM_SUPPRESSION := ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED;\nSUPPRESSION_ACTIVE_LIGHT := ALARM_SUPPRESSION;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_5_functionality_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control with agitator activation and operator status indication\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with master enable safety and operator status feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n- **AGITATOR_RUNNING_LIGHT**: BOOL - Visual indicator showing agitator motor status\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- AGITATOR_RUNNING_LIGHT (Output, BOOL)\n\n## Control Logic Description\nThe system activates the agitator motor when both the master enable is active and dissolved oxygen levels fall below 40% saturation. A running light indicator mirrors the agitator status to provide operator feedback on motor operation.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Master enable switch must be engaged for any agitator operation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | Boolean | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable Switch | Boolean | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Motor Status | Boolean | 100ms |\n| AGITATOR_RUNNING_LIGHT | BOOL | R | Agitator Running Indicator | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_Enable = TRUE, DO_LOW = TRUE → AGITATOR_ON = TRUE, AGITATOR_RUNNING_LIGHT = TRUE\n2. **Disabled System**: Fermenter_Enable = FALSE, DO_LOW = TRUE → AGITATOR_ON = FALSE, AGITATOR_RUNNING_LIGHT = FALSE\n3. **Adequate Oxygen**: Fermenter_Enable = TRUE, DO_LOW = FALSE → AGITATOR_ON = FALSE, AGITATOR_RUNNING_LIGHT = FALSE\n\n## Change Log\n- **AGITATOR_RUNNING_LIGHT**: BOOL / Purpose: Operator feedback indicator for agitator status / Compatibility: Direct mirror of AGITATOR_ON output\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (outputs: 1→2)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW; AGITATOR_RUNNING_LIGHT := AGITATOR_ON\n- **Not Equivalent**: The new generation adds a second output equation that provides operator feedback\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, antibiotic production",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\n    AGITATOR_RUNNING_LIGHT : BOOL; (* Visual indicator showing agitator motor status *)\nEND_VAR\n\nAGITATOR_ON := Fermenter_Enable AND DO_LOW;\nAGITATOR_RUNNING_LIGHT := AGITATOR_ON;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_1_functionality_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-SUP-001\n- **Location**: Chemical Processing Plant Control Room\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Alarm Management\n\n## Control Objective\nTurn ON Alarm_Suppression_Active when High_Alarm_Rate_Detected is active.\n\n## I/O Requirements\n\n### Input Variables\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds 20 alarms/minute threshold\n\n### Output Variables\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n## Control Logic Description\nDirect pass-through control. When the high alarm rate signal is active (TRUE), the suppression mode activates immediately. When the high alarm rate signal is inactive (FALSE), the suppression mode deactivates immediately.\n\n**Formal Logic Expression**: Alarm_Suppression_Active := High_Alarm_Rate_Detected\n\n## Safety Requirements\n- Suppression mode turns OFF when high alarm rate signal is lost\n- System defaults to safe state (suppression OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: High_Alarm_Rate_Detected = TRUE → Alarm_Suppression_Active = TRUE\n2. **Deactivation**: High_Alarm_Rate_Detected = FALSE → Alarm_Suppression_Active = FALSE\n\n**Domain Keywords**: Alarm Management, Flood Suppression, SCADA",
  "output": "PROGRAM ALM_SUP_001_Control\nVAR_INPUT\n  High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds 20 alarms/minute threshold *)\nEND_VAR\nVAR_OUTPUT\n  Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\n\nAlarm_Suppression_Active := High_Alarm_Rate_Detected;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_68_variant_0",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-SYS\n- **Location**: Main Control Room, Chemical Processing Plant\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 2 (early)\n- **Branch**: interoperability\n- **Summary**: Chemical plant alarm display system with emergency stop override and SCADA status monitoring\n\n## Control Objective\nProvide visual alarm indication while ensuring immediate safety shutdown capability, with remote status monitoring for SCADA integration\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **E_STOP_PROCESS_AREA_NC**: BOOL - Emergency stop button status (NC contact)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n- **SCADA_Alarm_Suppression_Status**: BOOL - Status output indicating when alarm suppression is active for SCADA monitoring\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- SCADA_Alarm_Suppression_Status (Output, BOOL)\n\n## Control Logic Description\nThe system monitors process alarms and provides visual indication to operators while maintaining emergency stop override capability. The SCADA_Alarm_Suppression_Status output provides remote visibility into the alarm suppression state, mirroring the internal suppression logic for external monitoring systems. This allows SCADA systems to track when alarms are being suppressed due to emergency conditions.\n\n**Formal Logic Expression**: \nAlarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active\nSCADA_Alarm_Suppression_Status := NOT E_STOP_PROCESS_AREA_NC\n\n## Safety Requirements\n- Emergency stop activation must immediately override all alarm display functions\n- Remote status outputs must be read-only and not affect local control logic\n- Safety signals must propagate without filtering or delay\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Process alarm activation status | On/Off | 100ms |\n| E_STOP_PROCESS_AREA_NC | BOOL | R | Emergency stop button status | NC/Open | 50ms |\n| Alarm_Display | BOOL | R | Alarm indicator status | On/Off | 100ms |\n| SCADA_Alarm_Suppression_Status | BOOL | R | Alarm suppression active status | Active/Inactive | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Alarm Operation**: Alarm_Active = TRUE, E_STOP_PROCESS_AREA_NC = TRUE → Alarm_Display = TRUE, SCADA_Alarm_Suppression_Status = FALSE\n2. **Emergency Stop Activation**: Alarm_Active = TRUE, E_STOP_PROCESS_AREA_NC = FALSE → Alarm_Display = FALSE, SCADA_Alarm_Suppression_Status = TRUE\n3. **No Alarm Condition**: Alarm_Active = FALSE, E_STOP_PROCESS_AREA_NC = TRUE → Alarm_Display = FALSE, SCADA_Alarm_Suppression_Status = FALSE\n\n## Change Log\n- **SCADA_Alarm_Suppression_Status**: BOOL / Purpose: Provides remote monitoring of alarm suppression state for SCADA integration / Compatibility: Read-only status output, no impact on local control\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active\n- **This Gen**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active; SCADA_Alarm_Suppression_Status := NOT E_STOP_PROCESS_AREA_NC\n- **Not Equivalent**: The new generation adds a completely independent output function that provides status monitoring rather than altering the core alarm display logic\n\n**Domain Keywords**: chemical plant, alarm suppression, SCADA integration, emergency stop, process safety, status monitoring",
  "output": "PROGRAM CHEM_PLANT_ALARM_SYS\nVAR_INPUT\n    Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\n    E_STOP_PROCESS_AREA_NC : BOOL; (* Emergency stop button status (NC contact) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\n    SCADA_Alarm_Suppression_Status : BOOL; (* Status output indicating when alarm suppression is active for SCADA monitoring *)\nEND_VAR\n\n(* Safety logic - emergency stop override *)\nAlarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active;\n\n(* SCADA status monitoring *)\nSCADA_Alarm_Suppression_Status := NOT E_STOP_PROCESS_AREA_NC;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_6_safety_interoperability_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: COOLER-FAN-001\n- **Location**: Grate Cooler Section\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Cement Production\n\n## Control Objective\nTurn ON cooling_fan when temperature_high is active.\n\n## I/O Requirements\n\n### Input Variables\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects clinker temperature exceeding upper threshold\n\n### Output Variables\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: COOLING_FAN := TEMPERATURE_HIGH\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: TEMPERATURE_HIGH = TRUE → COOLING_FAN = TRUE\n2. **Deactivation**: TEMPERATURE_HIGH = FALSE → COOLING_FAN = FALSE\n\n**Domain Keywords**: clinker cooling, temperature control, cement production",
  "output": "PROGRAM COOLER_FAN_001_Control\nVAR_INPUT\n  TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects clinker temperature exceeding upper threshold *)\nEND_VAR\nVAR_OUTPUT\n  COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nCOOLING_FAN := TEMPERATURE_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_70_variant_5",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-01\n- **Location**: Raw Meal Preparation Area\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Emergency stop protection for kiln feed composition control system with XRF signal monitoring\n\n## Control Objective\nProvide emergency stop functionality to safely halt kiln feed composition adjustments while maintaining XRF signal loss detection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for kiln feed area\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_E_STOP_NC (Input, BOOL)\n\n## Control Logic Description\nThe system monitors the XRF analyzer signal status and emergency stop button state. The XRF_ANALYSIS_HOLD output is activated when either the XRF signal is lost or the emergency stop button is pressed. The emergency stop takes absolute precedence as a safety override. The normally-closed emergency stop contact means the system is safe when the contact is closed (TRUE), and a trip occurs when the contact opens (FALSE).\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n\n## Safety Requirements\n- Emergency stop must immediately halt all feed composition adjustments\n- Safety permissive (KILN_E_STOP_NC) must gate all operational logic\n- System defaults to safe state (output ON, hold active) on power-up or emergency stop activation\n- No filtering or delay permitted on safety chain signals\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost Status | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency Stop Button Status (NC) | On/Off | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R/W | Feed Adjustment Hold State | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: XRF_SIGNAL_LOST = FALSE, KILN_E_STOP_NC = TRUE → XRF_ANALYSIS_HOLD = FALSE\n2. **XRF Signal Lost**: XRF_SIGNAL_LOST = TRUE, KILN_E_STOP_NC = TRUE → XRF_ANALYSIS_HOLD = TRUE\n3. **Emergency Stop Activated**: XRF_SIGNAL_LOST = FALSE, KILN_E_STOP_NC = FALSE → XRF_ANALYSIS_HOLD = TRUE\n4. **Both Conditions**: XRF_SIGNAL_LOST = TRUE, KILN_E_STOP_NC = FALSE → XRF_ANALYSIS_HOLD = TRUE\n\n## Change Log\n- **KILN_E_STOP_NC**: BOOL / Purpose: Emergency stop button input for kiln feed area safety / Compatibility: Maintains existing XRF signal monitoring functionality while adding safety override\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single additional input with simple OR logic\n- **Measurability**: 9/10 - Clear test scenarios cover all combinations\n- **Safety-Preservation**: 10/10 - Emergency stop takes absolute precedence\n- **Determinism**: 10/10 - Immediate response with no filtering\n- **SEP-Compliance**: 10/10 - Exactly one BOOL input added in early phase\n- **ST-Coverage**: 7/10 - Basic BOOL operations introduced\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n- **This Gen**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **Not Equivalent**: TRUE - New logic includes emergency stop override condition\n\n**Domain Keywords**: kiln, cement, XRF, analyzer, emergency stop, feed composition, safety",
  "output": "PROGRAM KILN_FEED_01_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for kiln feed area *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\nEND_VAR\n\nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_70_variant_0_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-SUPP-001\n- **Location**: Central Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Safety\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm flood suppression system with safety override and configurable suppression modes\n\n## Control Objective\nImplement dynamic alarm flood suppression with safety override requiring manual reset after emergency stop, with configurable suppression strategies based on process conditions\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button (momentary)\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy (0=Normal, 1=Aggressive, 2=Conservative)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block to maintain trip state until reset\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_MODE (Input, INT)\n\n## Control Logic Description\nThe system monitors alarm flood conditions and enables suppression filtering when a flood is detected and suppression is enabled. Safety override via emergency stop immediately disables suppression and requires manual reset. A new mode selector input allows operators to choose between different suppression strategies: Mode 0 (Normal) provides basic suppression, Mode 1 (Aggressive) applies broader suppression for severe upsets, and Mode 2 (Conservative) uses minimal suppression for critical processes.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n\n## Safety Requirements\n- Emergency stop must immediately disable all alarm suppression functions\n- Safety reset must require manual operator intervention\n- Safety logic overrides all functional logic without exception\n- System must return to normal alarm handling when not in flood state\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1s |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 1s |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 1s |\n| SUPPRESSION_MODE | INT | R/W | Suppression strategy mode | 0-2 | 1s |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression active | On/Off | 1s |\n| SAFETY_LATCH.Q1 | BOOL | R | Safety latch status | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, E_STOP_NC=1, SUPPRESSION_MODE=1 → ALARM_SUPPRESSION=1\n2. **Emergency Stop**: E_STOP_NC=0 → ALARM_SUPPRESSION=0 (requires reset)\n3. **Mode 0 Disabled**: SUPPRESSION_MODE=0 → ALARM_SUPPRESSION=0 regardless of flood state\n4. **Safety Reset**: After E-stop, SAFETY_RESET_REQ=1 → System can resume normal operation\n\n## Change Log\n- **SUPPRESSION_MODE**: INT / Purpose: Configurable suppression strategy selection / Compatibility: Backward compatible, defaults to Mode 0 (disabled)\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 5, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **This Gen**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0)\n- **Not Equivalent**: The new logic adds a mode selection constraint\n\n**Domain Keywords**: [alarm management, flood suppression, process safety, EEMUA 191, ISA 18.2, chemical processing, compressor trip, consequential alarms]",
  "output": "PROGRAM ALM_SUPP_001_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button (momentary) *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy (0=Normal, 1=Aggressive, 2=Conservative) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block to maintain trip state until reset *)\nEND_VAR\n\n(* Safety logic - emergency stop handling *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* Main alarm suppression logic *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND SUPPRESSION_MODE <> 0);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_5_functionality_safety_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Kiln Shell Monitoring Station\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Production\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system with emergency stop override and visual alarm status indication\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alerts with emergency stop safety override, providing visual operator feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) for kiln monitoring area\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_ALARM_LIGHT**: BOOL - Visual status light indicating active maintenance alarm condition\n\n### Internals (CUMULATIVE)\n- None\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_ALARM_LIGHT: Output, BOOL\n\n## Control Logic Description\nThe system monitors thermal imaging data for abnormal patterns indicating refractory wear. When a thermal anomaly is detected and the emergency stop is not activated, the maintenance alarm is triggered. The kiln alarm light provides visual confirmation of the active alarm state, mirroring the maintenance alarm output for operator visibility.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\nKILN_ALARM_LIGHT := MAINTENANCE_ALARM\n\n## Safety Requirements\n- Emergency stop takes absolute precedence over all functional logic\n- Outputs default to FALSE on power-up or signal loss\n- Safety circuits must be hardwired and independent of PLC logic where possible\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alarm output | On/Off | 1s |\n| KILN_ALARM_LIGHT | BOOL | R | Alarm status light | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=TRUE, KILN_E_STOP_NC=TRUE → MAINTENANCE_ALARM=TRUE, KILN_ALARM_LIGHT=TRUE\n2. **E-Stop Active**: THERMAL_ANOMALY=TRUE, KILN_E_STOP_NC=FALSE → MAINTENANCE_ALARM=FALSE, KILN_ALARM_LIGHT=FALSE\n3. **No Anomaly**: THERMAL_ANOMALY=FALSE, KILN_E_STOP_NC=TRUE → MAINTENANCE_ALARM=FALSE, KILN_ALARM_LIGHT=FALSE\n\n## Change Log\n- **KILN_ALARM_LIGHT**: BOOL / Purpose: Visual status indicator for maintenance alarm / Compatibility: Mirrors existing MAINTENANCE_ALARM output\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new BOOL output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\n- **This Gen**: KILN_ALARM_LIGHT := MAINTENANCE_ALARM\n- **Not Equivalent**: True - new equation provides status mirroring rather than condition detection\n\n**Domain Keywords**: kiln, refractory, thermal, monitoring, maintenance, alarm, safety, cement",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) for kiln monitoring area *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_ALARM_LIGHT : BOOL; (* Visual status light indicating active maintenance alarm condition *)\nEND_VAR\n\n(* Safety and operational logic *)\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY;\nKILN_ALARM_LIGHT := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_1_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Adaptive Dosing\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 5 (late)\n- **Branch**: interoperability\n- **Summary**: Bioreactor dissolved oxygen control with SCADA status monitoring and heartbeat\n\n## Control Objective\nMaintain dissolved oxygen at 30% setpoint with mode selection, safety override, and comprehensive SCADA status reporting\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold (30% setpoint)\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (normally-closed, fail-safe)\n- **BIO_REACTOR_MODE**: INT - Operation mode selector (0=Off, 1=Auto, 2=Manual)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n- **BIO_SCADA_HEARTBEAT**: BOOL - 1Hz toggling heartbeat for SCADA system monitoring\n- **BIO_SCADA_STATUS_WORD**: WORD - Packed status word for SCADA system monitoring (bit definitions below)\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n- **SPARGE_VALVE_CYCLE_COUNT**: UINT - Total number of oxygen sparge valve activation cycles\n- **HEARTBEAT_TIMER**: UINT - Internal counter for heartbeat timing\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 3 (+1) | Internals: 3 (+0)`\n\n### New Items This Gen (must respect SEP)\n- BIO_SCADA_STATUS_WORD: Output, WORD\n\n## Control Logic Description\nThe system maintains dissolved oxygen control through a sparge valve activated when oxygen levels drop below 30% setpoint. Emergency stop safety override takes priority over all operations. A mode selector allows Off, Auto, and Manual operation. A 1Hz heartbeat signal provides basic PLC health monitoring. The new status word packs key system states into a single WORD for comprehensive SCADA monitoring with the following bit definitions: bit 0 = Emergency Stop Status (1=Safe), bit 1 = Auto Mode Active, bit 2 = Manual Mode Active, bit 3 = Oxygen Sparge Valve Active, bit 4 = DO Sensor High Status, bits 5-15 = Reserved for future use.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (CASE BIO_REACTOR_MODE OF 1: DO_SENSOR_HIGH; 2: TRUE; ELSE: FALSE END_CASE)\nBIO_SCADA_STATUS_WORD := (BIO_E_STOP_OK << 0) OR ((BIO_REACTOR_MODE = 1) << 1) OR ((BIO_REACTOR_MODE = 2) << 2) OR (OXYGEN_SPARGE_VALVE << 3) OR (DO_SENSOR_HIGH << 4)\n\n## Safety Requirements\n- Emergency stop must override all control functions\n- Status word is read-only for monitoring purposes only\n- Local control logic maintains priority over any remote monitoring\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| BIO_SCADA_STATUS_WORD | WORD | R | Packed system status word | N/A | 100ms |\n| BIO_SCADA_HEARTBEAT | BOOL | R | PLC heartbeat signal | N/A | 1s |\n| OXYGEN_SPARGE_VALVE | BOOL | R | Oxygen valve status | N/A | 100ms |\n| BIO_REACTOR_MODE | INT | R/W | Operation mode selector | N/A | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | N/A | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Status Word Bit 0 Test**: BIO_E_STOP_NC = TRUE → BIO_SCADA_STATUS_WORD bit 0 = 1\n2. **Status Word Bit 1 Test**: BIO_REACTOR_MODE = 1 → BIO_SCADA_STATUS_WORD bit 1 = 1\n3. **Status Word Bit 2 Test**: BIO_REACTOR_MODE = 2 → BIO_SCADA_STATUS_WORD bit 2 = 1\n4. **Status Word Bit 3 Test**: OXYGEN_SPARGE_VALVE = TRUE → BIO_SCADA_STATUS_WORD bit 3 = 1\n5. **Status Word Bit 4 Test**: DO_SENSOR_HIGH = TRUE → BIO_SCADA_STATUS_WORD bit 4 = 1\n\n## Change Log\n- **BIO_SCADA_STATUS_WORD**: WORD / Purpose: Packed status word for comprehensive SCADA monitoring / Compatibility: Read-only monitoring interface\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 3\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 3\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (CASE BIO_REACTOR_MODE OF 1: DO_SENSOR_HIGH; 2: TRUE; ELSE: FALSE END_CASE)\n- **This Gen**: BIO_SCADA_STATUS_WORD := (BIO_E_STOP_OK << 0) OR ((BIO_REACTOR_MODE = 1) << 1) OR ((BIO_REACTOR_MODE = 2) << 2) OR (OXYGEN_SPARGE_VALVE << 3) OR (DO_SENSOR_HIGH << 4)\n- **Not Equivalent**: True - Monitoring vs control function\n\n**Domain Keywords**: bioreactor, dissolved oxygen, SCADA, status monitoring, pharmaceutical, cascade control",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold (30% setpoint) *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (normally-closed, fail-safe) *)\n    BIO_REACTOR_MODE : INT; (* Operation mode selector (0=Off, 1=Auto, 2=Manual) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\n    BIO_SCADA_HEARTBEAT : BOOL; (* 1Hz toggling heartbeat for SCADA system monitoring *)\n    BIO_SCADA_STATUS_WORD : WORD; (* Packed status word for SCADA system monitoring *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\n    SPARGE_VALVE_CYCLE_COUNT : UINT; (* Total number of oxygen sparge valve activation cycles *)\n    HEARTBEAT_TIMER : UINT; (* Internal counter for heartbeat timing *)\n    Heartbeat_Toggle : BOOL; (* Internal heartbeat toggle state *)\n    Last_Oxygen_Valve_State : BOOL; (* Previous state for cycle counting *)\n    R_TRIG_Valve : R_TRIG; (* Rising edge detector for valve state *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nBIO_E_STOP_OK := BIO_E_STOP_NC; (* Normally-closed contact: TRUE when safe *)\n\n(* Main control logic - oxygen sparge valve control *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND (\n    (BIO_REACTOR_MODE = 1 AND DO_SENSOR_HIGH) OR\n    (BIO_REACTOR_MODE = 2)\n);\n\n(* Sparge valve cycle counting *)\nR_TRIG_Valve(CLK := OXYGEN_SPARGE_VALVE);\nIF R_TRIG_Valve.Q AND NOT Last_Oxygen_Valve_State THEN\n    SPARGE_VALVE_CYCLE_COUNT := SPARGE_VALVE_CYCLE_COUNT + 1;\nEND_IF;\nLast_Oxygen_Valve_State := OXYGEN_SPARGE_VALVE;\n\n(* Heartbeat generation - 1Hz toggle *)\nHEARTBEAT_TIMER := HEARTBEAT_TIMER + 1;\nIF HEARTBEAT_TIMER >= 1000 THEN (* Assuming 1ms cycle time *)\n    HEARTBEAT_TIMER := 0;\n    Heartbeat_Toggle := NOT Heartbeat_Toggle;\nEND_IF;\nBIO_SCADA_HEARTBEAT := Heartbeat_Toggle;\n\n(* SCADA status word packing *)\nBIO_SCADA_STATUS_WORD := \n    (BOOL_TO_WORD(BIO_E_STOP_OK) AND 16#0001) OR (* Bit 0: Emergency Stop Status *)\n    (BOOL_TO_WORD(BIO_REACTOR_MODE = 1) AND 16#0002) OR (* Bit 1: Auto Mode Active *)\n    (BOOL_TO_WORD(BIO_REACTOR_MODE = 2) AND 16#0004) OR (* Bit 2: Manual Mode Active *)\n    (BOOL_TO_WORD(OXYGEN_SPARGE_VALVE) AND 16#0008) OR (* Bit 3: Oxygen Sparge Valve Active *)\n    (BOOL_TO_WORD(DO_SENSOR_HIGH) AND 16#0010); (* Bit 4: DO Sensor High Status *)\n    (* Bits 5-15: Reserved (0) *)\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_0_safety_maintenance_interoperability_functionality_interoperability_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: VLV-217\n- **Location**: Bioreactor Sparger Line\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Control\n\n## Control Objective\nTurn ON Oxygen_Valve when DO_Low_Alarm is active.\n\n## I/O Requirements\n\n### Input Variables\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n\n### Output Variables\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: Oxygen_Valve := DO_Low_Alarm\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: DO_Low_Alarm = TRUE → Oxygen_Valve = TRUE\n2. **Deactivation**: DO_Low_Alarm = FALSE → Oxygen_Valve = FALSE\n\n**Domain Keywords**: bioreactor, oxygen, valve",
  "output": "PROGRAM VLV_217_Control\nVAR_INPUT\n  DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\nEND_VAR\nVAR_OUTPUT\n  Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nOxygen_Valve := DO_Low_Alarm;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_69_variant_6",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-CTRL-001\n- **Location**: Cement Plant Raw Meal Preparation Area\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Manufacturing\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Kiln feed composition optimization system with emergency stop and master enable control\n\n## Control Objective\nProvide safe emergency stop functionality and operational control for kiln feed composition adjustments based on XRF analysis feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for kiln feed area\n- **KILN_FEED_OPTIMIZATION_ENABLE**: BOOL - Master enable switch for kiln feed composition optimization system\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_FEED_OPTIMIZATION_ENABLE (Input, BOOL)\n\n## Control Logic Description\nThe system maintains a hold state on feed composition adjustments when either the XRF signal is lost or the emergency stop is activated. A new master enable switch allows operators to enable/disable the entire kiln feed optimization system. When disabled, the system maintains the hold state regardless of other conditions. Safety logic (emergency stop and XRF signal loss) takes absolute precedence and cannot be overridden by the enable switch.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := NOT KILN_FEED_OPTIMIZATION_ENABLE OR XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n\n## Safety Requirements\n- Emergency stop activation must immediately halt all feed composition adjustments\n- XRF signal loss must automatically place system in hold state\n- Safety functions must operate independently of master enable state\n- All safety-critical inputs must use fail-safe normally-closed contacts\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency Stop Status | On/Off | 100ms |\n| KILN_FEED_OPTIMIZATION_ENABLE | BOOL | R/W | Optimization System Enable | On/Off | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R | Analysis Hold State | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: KILN_FEED_OPTIMIZATION_ENABLE=TRUE, XRF_SIGNAL_LOST=FALSE, KILN_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=FALSE\n2. **Emergency Stop**: KILN_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=TRUE (regardless of other inputs)\n3. **XRF Signal Lost**: XRF_SIGNAL_LOST=TRUE → XRF_ANALYSIS_HOLD=TRUE (regardless of other inputs)\n4. **System Disabled**: KILN_FEED_OPTIMIZATION_ENABLE=FALSE → XRF_ANALYSIS_HOLD=TRUE (regardless of other inputs)\n\n## Change Log\n- **KILN_FEED_OPTIMIZATION_ENABLE**: BOOL / Purpose: Master enable for kiln feed optimization system / Compatibility: Backward compatible, adds operational control\n\n## Self-check Summary\n- **Minimalism**: 9/10 (single simple addition)\n- **Measurability**: 8/10 (clear test scenarios)\n- **Safety-Preservation**: 10/10 (safety logic preserved and enhanced)\n- **Determinism**: 10/10 (clear logic expression)\n- **SEP-Compliance**: 10/10 (1 new BOOL, early phase appropriate)\n- **ST-Coverage**: 7/10 (maintains basic ST coverage)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable ≤ 1 limit)\n- **Non-decreasing**: PASS (3≥2, 1≥1, 0≥0)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **This Gen**: XRF_ANALYSIS_HOLD := NOT KILN_FEED_OPTIMIZATION_ENABLE OR XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **Not Equivalent**: TRUE (new enable condition changes behavior when system is disabled)\n\n**Domain Keywords**: kiln, feed, optimization, XRF, analysis, composition, emergency stop, enable",
  "output": "PROGRAM KILN_FEED_CTRL_001_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for kiln feed area *)\n    KILN_FEED_OPTIMIZATION_ENABLE : BOOL; (* Master enable switch for kiln feed composition optimization system *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\nEND_VAR\n\nXRF_ANALYSIS_HOLD := NOT KILN_FEED_OPTIMIZATION_ENABLE OR XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_0_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioReact_01\n- **Location**: Fermentation Suite B, Pharma Production\n- **Control Type**: Cascade Control with Maintenance Tracking\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: maintenance\n- **Summary**: Dissolved oxygen control with agitator cycle counting and runtime accumulation for preventive maintenance\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation with master enable safety while tracking agitator activation cycles and total runtime for preventive maintenance scheduling.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total number of agitator activation cycles for maintenance tracking\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n- **Agitator_Runtime_Total**: TIME - Total accumulated runtime of agitator motor for maintenance scheduling\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 1 (+0) | Internals: 3 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Agitator_Runtime_Total (Internal, TIME)\n\n## Control Logic Description\nThe control system activates the agitator when dissolved oxygen levels drop below 40% saturation and the master enable is active. A rising edge detector tracks each agitator activation to increment the cycle counter. The system now also accumulates total runtime by adding one second to the runtime accumulator for every second the agitator remains active, providing critical maintenance data for predictive maintenance scheduling.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW\nAgitator_Cycle_Count := Agitator_Cycle_Count + 1 WHEN Agitator_R_TRIG.Q\nAgitator_Runtime_Total := Agitator_Runtime_Total + T#1s WHEN AGITATOR_ON\n\n## Safety Requirements\n- Master enable switch must take precedence over all control functions\n- Maintenance tracking must not interfere with primary control logic\n- Runtime accumulation must be non-intrusive and run in parallel\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | On/Off | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Status | On/Off | 100ms |\n| Agitator_Cycle_Count | UINT | R | Activation Cycles | Count | 1s |\n| Agitator_Runtime_Total | TIME | R | Total Runtime | HH:MM:SS | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Runtime Accumulation**: AGITATOR_ON = TRUE for 60 seconds → Agitator_Runtime_Total increases by 60 seconds\n2. **Cycle Counting**: AGITATOR_ON transitions from FALSE to TRUE → Agitator_Cycle_Count increments by 1\n3. **Safety Override**: Fermenter_Enable = FALSE → AGITATOR_ON = FALSE regardless of DO_LOW state\n\n## Change Log\n- **Agitator_Runtime_Total**: TIME / Purpose: Track total agitator runtime for predictive maintenance / Compatibility: Non-intrusive addition to existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: Agitator_Runtime_Total := Agitator_Runtime_Total + T#1s WHEN AGITATOR_ON\n- **Not Equivalent**: True - runtime accumulation is distinct from activation control\n\n**Domain Keywords**: fermentation, bioreactor, dissolved oxygen, agitator, maintenance, runtime, pharmaceutical",
  "output": "PROGRAM BioReact_01_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    Agitator_Cycle_Count : UINT; (* Total number of agitator activation cycles for maintenance tracking *)\n    Agitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\n    Agitator_Runtime_Total : TIME; (* Total accumulated runtime of agitator motor for maintenance scheduling *)\nEND_VAR\n\n(* Rising edge detection for agitator activation *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\n\n(* Primary control logic - safety first *)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW;\n\n(* Maintenance tracking - cycle counting *)\nIF Agitator_R_TRIG.Q THEN\n    Agitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\n\n(* Maintenance tracking - runtime accumulation *)\nIF AGITATOR_ON THEN\n    Agitator_Runtime_Total := Agitator_Runtime_Total + T#1s;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_1_functionality_maintenance_maintenance_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: XRF-001\n- **Location**: Raw Meal Feed Chute\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Control\n\n## Control Objective\nTurn ON XRF_ANALYSIS_HOLD when XRF_SIGNAL_LOST is active.\n\n## I/O Requirements\n\n### Input Variables\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n\n### Output Variables\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: XRF_SIGNAL_LOST = TRUE → XRF_ANALYSIS_HOLD = TRUE\n2. **Deactivation**: XRF_SIGNAL_LOST = FALSE → XRF_ANALYSIS_HOLD = FALSE\n\n**Domain Keywords**: XRF analyzer, feed control, composition monitoring",
  "output": "PROGRAM XRF_001_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\nEND_VAR\n\n(* Direct pass-through control logic *)\nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_70_variant_0",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Safety-Enhanced Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 6 (late)\n- **Branch**: safety\n- **Summary**: Kiln cooler temperature control with enhanced safety interlocks including emergency stop and guard door protection\n\n## Control Objective\nOptimize clinker cooling with temperature-based fan activation while preventing rapid cycling, maintaining fault history, and ensuring operator safety through physical guarding interlocks\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button status (normally-closed contact)\n- **COOLER_GUARD_DOOR_NC**: BOOL - Cooler access guard door interlock status (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL - Visual indicator for fan running status\n- **COOLER_MAINTENANCE_DUE**: BOOL - Maintenance due indicator\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **COOLER_GUARD_DOOR_OK**: BOOL - Guard door safety permissive status\n- **COOLER_FAN_SETTLING_TIMER**: TON - Timer ensuring minimum fan run time\n- **COOLER_FAULT_HISTORY**: ARRAY[0..4] OF DINT - Last 5 fault codes for maintenance diagnostics\n- **COOLER_FAULT_INDEX**: UINT - Current position in fault history array\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 3 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_GUARD_DOOR_NC (Input, BOOL)\n- COOLER_GUARD_DOOR_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors clinker temperature using infrared pyrometers and activates cooling fans when high temperatures are detected. A 30-second minimum run timer prevents rapid cycling of the fans. Emergency stop and guard door interlocks provide safety protection, requiring both to be engaged for system operation. Fault history is maintained in a circular buffer for maintenance diagnostics.\n\n**Formal Logic Expression**: \nCOOLING_FAN := (KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q\nKILN_E_STOP_OK := KILN_E_STOP_NC\nCOOLER_GUARD_DOOR_OK := COOLER_GUARD_DOOR_NC\n\n## Safety Requirements\n- Emergency stop must immediately de-energize all outputs when activated\n- Guard door interlock must prevent operation when access door is open\n- Safety permissives must be evaluated every scan cycle without filtering\n- Manual reset required after safety trip conditions are cleared\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLER_GUARD_DOOR_NC | BOOL | R | Guard door interlock status | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Cooling fan control | On/Off | 100ms |\n| COOLER_FAN_RUNNING_LIGHT | BOOL | R/W | Fan running indicator | On/Off | 100ms |\n| COOLER_MAINTENANCE_DUE | BOOL | R/W | Maintenance due indicator | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1, COOLER_GUARD_DOOR_NC=1 → COOLING_FAN=1\n2. **Emergency Stop**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0 → COOLING_FAN=0\n3. **Guard Door Open**: TEMPERATURE_HIGH=1, COOLER_GUARD_DOOR_NC=0 → COOLING_FAN=0\n4. **Timer Extension**: TEMPERATURE_HIGH=0 after being 1 → COOLING_FAN remains 1 for 30s\n\n## Change Log\n- **COOLER_GUARD_DOOR_NC**: BOOL / Purpose: Safety interlock for cooler access door / Compatibility: Added to safety permissive chain\n- **COOLER_GUARD_DOOR_OK**: BOOL / Purpose: Derived safety status from guard door interlock / Compatibility: ANDed with existing safety permissives\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 3, Internals: 4\n- **This gen totals**: Inputs: 3, Outputs: 3, Internals: 5\n- **SEP delta cap**: PASS (1 input, 1 internal)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 3→3, internals: 4→5)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := (KILN_E_STOP_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q\n- **This Gen**: COOLING_FAN := (KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q\n- **Not Equivalent**: New equation requires both safety permissives instead of just one\n\n**Domain Keywords**: kiln, cooler, clinker, temperature, safety, interlock, guard door, emergency stop",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button status (normally-closed contact) *)\n    COOLER_GUARD_DOOR_NC : BOOL; (* Cooler access guard door interlock status (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\n    COOLER_FAN_RUNNING_LIGHT : BOOL; (* Visual indicator for fan running status *)\n    COOLER_MAINTENANCE_DUE : BOOL; (* Maintenance due indicator *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    COOLER_GUARD_DOOR_OK : BOOL; (* Guard door safety permissive status *)\n    COOLER_FAN_SETTLING_TIMER : TON; (* Timer ensuring minimum fan run time *)\n    COOLER_FAULT_HISTORY : ARRAY[0..4] OF DINT; (* Last 5 fault codes for maintenance diagnostics *)\n    COOLER_FAULT_INDEX : UINT; (* Current position in fault history array *)\nEND_VAR\n\n(* Safety chain evaluation - evaluated every scan cycle without filtering *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\nCOOLER_GUARD_DOOR_OK := COOLER_GUARD_DOOR_NC;\n\n(* Main cooling fan control logic with safety interlocks and timer extension *)\nCOOLER_FAN_SETTLING_TIMER(IN := COOLING_FAN, PT := T#30S);\nCOOLING_FAN := (KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q;\n\n(* Status indicators *)\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\nCOOLER_MAINTENANCE_DUE := FALSE; (* Placeholder for future maintenance logic *)\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_70_variant_5_safety_functionality_performance_maintenance_maintenance_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-CTRL-001\n- **Location**: Raw Meal Preparation Area\n- **Control Type**: Safety-Integrated Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Kiln feed composition control with emergency stop and operator status feedback\n\n## Control Objective\nProvide emergency stop functionality to safely halt kiln feed composition adjustments while maintaining XRF signal loss detection, with enhanced operator visibility through status indication\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for kiln feed area\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n- **XRF_HOLD_STATUS_LIGHT**: BOOL - Visual status indicator for analysis hold state\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- XRF_HOLD_STATUS_LIGHT (Output, BOOL)\n\n## Control Logic Description\nThe system monitors XRF analyzer signal status and emergency stop button state. When either the XRF signal is lost or the emergency stop is activated, the system enters a hold state that pauses all feed composition adjustments. The hold status is visually indicated to operators through a dedicated status light that mirrors the hold state.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC;\nXRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD\n\n## Safety Requirements\n- Emergency stop takes absolute precedence as safety override\n- No filtering or delay permitted on safety chain signals\n- Status light must provide clear visual indication of hold state\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost | - | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency Stop Status | - | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R/W | Analysis Hold State | - | 100ms |\n| XRF_HOLD_STATUS_LIGHT | BOOL | R | Hold Status Indicator | - | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: XRF_SIGNAL_LOST=FALSE, KILN_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=FALSE, XRF_HOLD_STATUS_LIGHT=FALSE\n2. **XRF Signal Lost**: XRF_SIGNAL_LOST=TRUE, KILN_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=TRUE, XRF_HOLD_STATUS_LIGHT=TRUE\n3. **Emergency Stop**: XRF_SIGNAL_LOST=FALSE, KILN_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=TRUE, XRF_HOLD_STATUS_LIGHT=TRUE\n4. **Both Conditions**: XRF_SIGNAL_LOST=TRUE, KILN_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=TRUE, XRF_HOLD_STATUS_LIGHT=TRUE\n\n## Change Log\n- **XRF_HOLD_STATUS_LIGHT**: BOOL / Purpose: Visual status indicator for analysis hold state / Compatibility: Direct mirror of existing hold state\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (2≥2, 2≥1, 0≥0)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **This Gen**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC; XRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD\n- **Not Equivalent**: TRUE - New equation adds status light functionality\n\n**Domain Keywords**: kiln, XRF, analyzer, composition, emergency stop, status light, cement, raw meal",
  "output": "PROGRAM KILN_FEED_CTRL_001_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for kiln feed area *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\n    XRF_HOLD_STATUS_LIGHT : BOOL; (* Visual status indicator for analysis hold state *)\nEND_VAR\n\nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC;\nXRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_0_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: ALM-SUPP-001\n- **Location**: Chemical Processing Plant Control Room\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: functionality\n- **Summary**: Dynamic alarm flood suppression system with emergency stop safety override and mode-based suppression strategies\n\n## Control Objective\nImplement dynamic alarm flood suppression with configurable mode-based filtering strategies and emergency stop safety override to prevent operator overload during process upsets.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal (>15 alarms/minute for 30 seconds)\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SUPPRESSION_MODE**: INT - Mode selector for suppression strategy (0=Off, 1=General, 2=Unit-Specific)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- None\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_MODE (Input, INT)\n\n## Control Logic Description\nThe system monitors for alarm flood conditions and enables suppression filtering when a flood is detected. The emergency stop provides immediate safety override. A new mode selector input allows operators to choose between different suppression strategies: Mode 0 (Off) disables all suppression, Mode 1 enables general flood suppression, and Mode 2 enables unit-specific suppression filtering. The system uses a CASE-OF statement to implement the mode-based logic while maintaining safety precedence.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND (SUPPRESSION_MODE > 0))\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- All suppressed alarms must be logged for post-event analysis\n- System must automatically return to normal operation when flood conditions subside\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 1 sec |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 1 sec |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100 ms |\n| SUPPRESSION_MODE | INT | R/W | Suppression strategy mode | 0-2 | 1 sec |\n| ALARM_SUPPRESSION | BOOL | R | Active suppression status | On/Off | 1 sec |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: FLOOD_DETECTED=0, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=1, E_STOP_NC=1 → ALARM_SUPPRESSION=0\n2. **Flood Detection General Mode**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=1, E_STOP_NC=1 → ALARM_SUPPRESSION=1\n3. **Flood Detection Unit-Specific Mode**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=2, E_STOP_NC=1 → ALARM_SUPPRESSION=1\n4. **Mode 0 Override**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=0, E_STOP_NC=1 → ALARM_SUPPRESSION=0\n5. **Emergency Stop**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, SUPPRESSION_MODE=1, E_STOP_NC=0 → ALARM_SUPPRESSION=0\n\n## Change Log\n- **SUPPRESSION_MODE**: INT / Purpose: Mode selector for suppression strategies / Compatibility: Backward compatible, adds functionality without breaking existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs: 3→4, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **This Gen**: ALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND (SUPPRESSION_MODE > 0))\n- **Not Equivalent**: True - New equation requires SUPPRESSION_MODE > 0\n\n**Domain Keywords**: [alarm management, flood suppression, chemical processing, EEMUA 191, ISA 18.2, process safety]",
  "output": "PROGRAM ALM_SUPP_001_Control\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal (>15 alarms/minute for 30 seconds) *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SUPPRESSION_MODE : INT; (* Mode selector for suppression strategy (0=Off, 1=General, 2=Unit-Specific) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\n\n(* Safety and operational logic *)\nALARM_SUPPRESSION := E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED AND (SUPPRESSION_MODE > 0));\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_5_functionality_safety_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Production Line 2\n- **Control Type**: Predictive Maintenance Safety System\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Safety\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Basic thermal anomaly detection with emergency stop safety override for kiln refractory monitoring\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alerts while ensuring immediate emergency stop capability for operator safety\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) for kiln monitoring area\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_E_STOP_NC (Input, BOOL)\n\n## Control Logic Description\nThe system monitors thermal imaging data for anomalies in the kiln refractory lining. When a thermal anomaly is detected, the maintenance alarm is activated. All operational logic is gated by the emergency stop safety permissive, which uses a normally-closed contact that remains TRUE during normal operation. If the emergency stop is activated (contact opens), the safety permissive becomes FALSE, immediately de-energizing all outputs regardless of thermal anomaly status.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Safety permissive must propagate immediately without filtering\n- Outputs must default to FALSE on power-up or signal loss\n- Emergency stop button must use fail-safe NC contact configuration\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status (NC) | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alarm status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY = FALSE, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = FALSE\n2. **Anomaly Detection**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = TRUE\n3. **Emergency Stop Active**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE\n4. **Emergency Stop Clear**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC changes FALSE→TRUE → MAINTENANCE_ALARM becomes TRUE\n\n## Change Log\n- **KILN_E_STOP_NC**: BOOL / Purpose: Emergency stop safety override for kiln monitoring area / Compatibility: Direct NC contact interface\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input only)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY\n- **This Gen**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\n- **Not Equivalent**: The safety permissive creates a fundamental logical difference - the output now requires both conditions\n\n**Domain Keywords**: kiln, refractory, thermal, emergency stop, safety, maintenance, monitoring",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) for kiln monitoring area *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\nEND_VAR\n\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_70_variant_1_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-01\n- **Location**: Raw Meal Preparation Area\n- **Control Type**: Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 1 (early)\n- **Branch**: performance\n- **Summary**: XRF analyzer signal monitoring with response time performance requirement\n\n## Control Objective\nMonitor XRF analyzer signal status and activate hold state when signal is lost, with guaranteed response time for process stability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 1 (+0) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- [Descriptive performance requirement only - no new variables]\n\n## Control Logic Description\nThe system continuously monitors the XRF_SIGNAL_LOST input. When this signal becomes active (TRUE), indicating loss of XRF analyzer signal, the system immediately activates the XRF_ANALYSIS_HOLD output to pause feed composition adjustments. The system must respond to signal loss detection within 100ms to maintain process stability and prevent quality deviations in the raw meal composition.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n\n## Safety Requirements\n- System defaults to safe state (XRF_ANALYSIS_HOLD = FALSE) on power-up\n- XRF_ANALYSIS_HOLD must activate within 100ms of XRF_SIGNAL_LOST detection\n- Manual override capability must be provided for maintenance operations\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost Status | - | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R/W | Feed Composition Adjustment Hold | - | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: XRF_SIGNAL_LOST = FALSE → XRF_ANALYSIS_HOLD = FALSE\n2. **Signal Loss Detection**: XRF_SIGNAL_LOST = TRUE → XRF_ANALYSIS_HOLD = TRUE within 100ms\n3. **Response Time Verification**: Measure time from XRF_SIGNAL_LOST activation to XRF_ANALYSIS_HOLD activation, must be ≤100ms\n\n## Change Log\n- **XRF_Response_Time_Target**: DESCRIPTIVE / Purpose: Ensure rapid response to XRF signal loss / Compatibility: Backward compatible\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 5/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (0 new variables)\n- **Non-decreasing**: PASS (counts unchanged)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n- **This Gen**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n- **Not Equivalent**: FALSE (core logic unchanged, only descriptive enhancement added)\n\n**Domain Keywords**: XRF, analyzer, signal, response time, cement, kiln, feed composition",
  "output": "PROGRAM KILN_FEED_01_Control\nVAR_INPUT\n  XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\nEND_VAR\nVAR_OUTPUT\n  XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\nEND_VAR\n\nXRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_70_variant_0_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic dissolved oxygen control with master enable for bioreactor agitator operation\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation by activating the agitator when oxygen is low, with master enable control for operational safety.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Fermenter_Enable (Input, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and activates the agitator when oxygen falls below 40% saturation, but only when the master enable switch is engaged. This provides operational control to prevent unintended agitator operation.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- Defaults to safe state (output OFF) on power-up\n- Master enable provides operational safety interlock\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master enable | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=1\n2. **Disabled Operation**: Fermenter_Enable=0, DO_LOW=1 → AGITATOR_ON=0\n3. **Oxygen Adequate**: Fermenter_Enable=1, DO_LOW=0 → AGITATOR_ON=0\n4. **Complete Disable**: Fermenter_Enable=0, DO_LOW=0 → AGITATOR_ON=0\n\n## Change Log\n- **Fermenter_Enable**: BOOL / Purpose: Master operational control / Compatibility: AND-composed with existing logic\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs: 1→2, outputs: 1→1, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **Not Equivalent**: TRUE (new logic requires both conditions)\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, antibiotic production",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\n\nAGITATOR_ON := Fermenter_Enable AND DO_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_69_variant_1_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Kiln_Cooler_02\n- **Location**: Cement_Plant_Cooling_Area\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Kiln cooler fan control with emergency stop and guard door safety interlocks\n\n## Control Objective\nActivate cooling fan when clinker temperature exceeds threshold with dual safety interlock override (emergency stop and guard door protection)\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - High clinker temperature detected\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button status (NC contact)\n- **COOLER_GUARD_DOOR_NC**: BOOL - Cooler access guard door interlock status (NC contact)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor control\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **COOLER_GUARD_DOOR_OK**: BOOL - Guard door safety permissive status\n- **SAFE_TO_OPERATE**: BOOL - Combined safety permissive status\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 3 (+2)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_GUARD_DOOR_NC (Input, BOOL)\n- COOLER_GUARD_DOOR_OK (Internal, BOOL)\n- SAFE_TO_OPERATE (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors clinker temperature and activates the cooling fan when temperature exceeds the high threshold. Safety takes absolute precedence through two independent safety interlocks: the emergency stop button and the cooler access guard door. Both safety devices use normally-closed contacts for fail-safe operation. The emergency stop permissive (KILN_E_STOP_OK) is derived directly from the emergency stop input status. The guard door permissive (COOLER_GUARD_DOOR_OK) is derived directly from the guard door interlock input status. These two safety permessives are combined into a single SAFE_TO_OPERATE status. The cooling fan output is enabled only when both safety conditions are satisfied AND the temperature is high.\n\n**Formal Logic Expression**: \nSAFE_TO_OPERATE := KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK\nCOOLING_FAN := SAFE_TO_OPERATE AND TEMPERATURE_HIGH\n\n## Safety Requirements\n- Emergency stop must immediately disable all equipment when activated\n- Guard door interlock must prevent equipment operation when door is open\n- Safety conditions must take absolute precedence over operational logic\n- No filtering or delay permitted on safety signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLER_GUARD_DOOR_NC | BOOL | R | Guard door interlock status | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Cooling fan control | On/Off | 100ms |\n| KILN_E_STOP_OK | BOOL | R | Emergency stop permissive | On/Off | 100ms |\n| COOLER_GUARD_DOOR_OK | BOOL | R | Guard door permissive | On/Off | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Combined safety status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1, COOLER_GUARD_DOOR_NC=1 → COOLING_FAN=1\n2. **Emergency Stop**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0, COOLER_GUARD_DOOR_NC=1 → COOLING_FAN=0\n3. **Guard Door Open**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1, COOLER_GUARD_DOOR_NC=0 → COOLING_FAN=0\n4. **Both Safety Tripped**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0, COOLER_GUARD_DOOR_NC=0 → COOLING_FAN=0\n5. **Safe but Cool**: TEMPERATURE_HIGH=0, KILN_E_STOP_NC=1, COOLER_GUARD_DOOR_NC=1 → COOLING_FAN=0\n\n## Change Log\n- **COOLER_GUARD_DOOR_NC**: BOOL / Purpose: Safety interlock for cooler access guard door / Compatibility: NC contact for fail-safe operation\n- **COOLER_GUARD_DOOR_OK**: BOOL / Purpose: Derived safety permissive from guard door interlock / Compatibility: Direct mapping from NC input\n- **SAFE_TO_OPERATE**: BOOL / Purpose: Combined safety status for both emergency stop and guard door / Compatibility: AND combination of all safety permessives\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (1 new input only)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := (KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK) AND TEMPERATURE_HIGH\n- **Not Equivalent**: TRUE - Additional safety condition required\n\n**Domain Keywords**: kiln, cooler, clinker, temperature, safety, interlock, guard door, emergency stop",
  "output": "PROGRAM Kiln_Cooler_02_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* High clinker temperature detected *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    COOLER_GUARD_DOOR_NC : BOOL; (* Cooler access guard door interlock status (NC contact) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor control *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    COOLER_GUARD_DOOR_OK : BOOL; (* Guard door safety permissive status *)\n    SAFE_TO_OPERATE : BOOL; (* Combined safety permissive status *)\nEND_VAR\n\n(* Safety chain logic - takes absolute precedence *)\nKILN_E_STOP_OK := KILN_E_STOP_NC; (* Direct mapping from NC emergency stop contact *)\nCOOLER_GUARD_DOOR_OK := COOLER_GUARD_DOOR_NC; (* Direct mapping from NC guard door contact *)\nSAFE_TO_OPERATE := KILN_E_STOP_OK AND COOLER_GUARD_DOOR_OK; (* Combined safety permissive *)\n\n(* Operational logic - only enabled when safety conditions are satisfied *)\nCOOLING_FAN := SAFE_TO_OPERATE AND TEMPERATURE_HIGH; (* Fan control with safety interlock *)\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_5_safety_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Plant Kiln Line 1\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Thermal anomaly detection with emergency stop safety and operator alarm indicator\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alerts with emergency stop safety override and visual operator feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) for kiln monitoring area\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_ALARM_INDICATOR**: BOOL - Visual status light indicating active maintenance alarm condition\n\n### Internals (CUMULATIVE)\n- None\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_ALARM_INDICATOR (Output, BOOL)\n\n## Control Logic Description\nThe system monitors thermal imaging data for abnormal patterns indicating refractory wear. When a thermal anomaly is detected and the emergency stop is not activated, the maintenance alarm is triggered. A visual indicator light mirrors the alarm status to provide immediate operator feedback. Emergency stop safety takes absolute precedence over all operational logic.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\nKILN_ALARM_INDICATOR := MAINTENANCE_ALARM\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety circuits must use fail-safe NC contacts\n- All safety-related inputs must be tested periodically\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alarm output | On/Off | 1s |\n| KILN_ALARM_INDICATOR | BOOL | R | Alarm status indicator | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=1, KILN_ALARM_INDICATOR=1\n2. **Emergency Stop**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=0 → MAINTENANCE_ALARM=0, KILN_ALARM_INDICATOR=0\n3. **No Anomaly**: THERMAL_ANOMALY=0, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=0, KILN_ALARM_INDICATOR=0\n4. **Indicator Test**: Verify KILN_ALARM_INDICATOR always matches MAINTENANCE_ALARM state\n\n## Change Log\n- **KILN_ALARM_INDICATOR**: BOOL / Purpose: Visual feedback for maintenance alarm status / Compatibility: Backward compatible, adds operator usability\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new BOOL output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\n- **This Gen**: KILN_ALARM_INDICATOR := MAINTENANCE_ALARM\n- **Not Equivalent**: True - new equation is derivative, not equivalent\n\n**Domain Keywords**: kiln, refractory, thermal monitoring, maintenance, alarm, indicator, cement",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) for kiln monitoring area *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_ALARM_INDICATOR : BOOL; (* Visual status light indicating active maintenance alarm condition *)\nEND_VAR\n\n(* Safety and operational logic *)\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY;\nKILN_ALARM_INDICATOR := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_1_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioreactor\n- **Generation**: 2 (early)\n- **Branch**: maintenance\n- **Summary**: Dissolved oxygen control with emergency stop safety and valve cycle counting for maintenance\n\n## Control Objective\nMaintain dissolved oxygen levels at 30% setpoint using oxygen sparging control with emergency stop safety interlock and valve operation cycle counting for maintenance planning.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold (30% setpoint)\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (normally-closed, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n- **SPARGE_VALVE_CYCLE_COUNT**: UINT - Total number of oxygen sparge valve activation cycles\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 1 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SPARGE_VALVE_CYCLE_COUNT (Internal, UINT)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the oxygen sparge valve when oxygen levels are below the 30% setpoint, provided the emergency stop system is in a safe state. The safety interlock takes absolute precedence over process control. A maintenance counter increments each time the oxygen sparge valve activates (on the rising edge), providing data for predictive maintenance scheduling of the valve assembly.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\nBIO_E_STOP_OK := BIO_E_STOP_NC\nSPARGE_VALVE_CYCLE_COUNT increments on rising edge of OXYGEN_SPARGE_VALVE\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all process control\n- Maintenance functions must not interfere with safety or control logic\n- Valve cycle counting must run in parallel and be non-intrusive\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen above setpoint | Boolean | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen sparge control valve | Boolean | 100ms |\n| SPARGE_VALVE_CYCLE_COUNT | UINT | R | Valve activation cycles | Count | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_SENSOR_HIGH=1, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=1, counter increments\n2. **Low Oxygen Stop**: DO_SENSOR_HIGH=0, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=0, no counter change\n3. **Emergency Stop**: BIO_E_STOP_NC=0 → OXYGEN_SPARGE_VALVE=0 regardless of DO_SENSOR_HIGH\n4. **Counter Accuracy**: Multiple valve activations → SPARGE_VALVE_CYCLE_COUNT increases by exact activation count\n\n## Change Log\n- **SPARGE_VALVE_CYCLE_COUNT**: UINT / Purpose: Track valve activations for maintenance scheduling / Compatibility: Non-intrusive addition to existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\n- **This Gen**: Same control logic + SPARGE_VALVE_CYCLE_COUNT increment on valve activation\n- **Not Equivalent**: True - maintenance counter addition doesn't alter control behavior\n\n**Domain Keywords**: bioreactor, dissolved oxygen, sparge valve, maintenance, cycle counting, pharmaceutical",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold (30% setpoint) *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (normally-closed, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\n    SPARGE_VALVE_CYCLE_COUNT : UINT; (* Total number of oxygen sparge valve activation cycles *)\n    R_TRIG_Valve : R_TRIG; (* Rising edge detector for valve activation *)\nEND_VAR\n\n(* Safety chain - emergency stop status *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Main control logic - safety interlock takes absolute precedence *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH;\n\n(* Maintenance counter - non-intrusive parallel function *)\nR_TRIG_Valve(CLK := OXYGEN_SPARGE_VALVE);\nIF R_TRIG_Valve.Q THEN\n    SPARGE_VALVE_CYCLE_COUNT := SPARGE_VALVE_CYCLE_COUNT + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_0_safety_maintenance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Kiln Shell Section 3\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Production\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system with emergency stop safety and master enable control\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alarms with emergency stop safety override and system enable control\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_REFRACTORY_MONITOR_ENABLE**: BOOL - Master enable switch for refractory monitoring system\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_REFRACTORY_MONITOR_ENABLE (Input, BOOL)\n\n## Control Logic Description\nThe system monitors thermal patterns on the kiln refractory lining. When the master enable is active and no emergency stop condition exists, detected thermal anomalies trigger the maintenance alarm. The emergency stop safety permissive gates all functional outputs regardless of the enable state.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety permissive (KILN_E_STOP_OK) must be derived directly from emergency stop hardware input\n- Maintenance alarm must only activate when system is safe to operate\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| KILN_REFRACTORY_MONITOR_ENABLE | BOOL | R/W | System master enable | On/Off | 1s |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance required alarm | On/Off | 1s |\n| KILN_E_STOP_OK | BOOL | R | Safe to operate status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=1, KILN_E_STOP_OK=1, KILN_REFRACTORY_MONITOR_ENABLE=1 → MAINTENANCE_ALARM=1\n2. **System Disabled**: THERMAL_ANOMALY=1, KILN_E_STOP_OK=1, KILN_REFRACTORY_MONITOR_ENABLE=0 → MAINTENANCE_ALARM=0\n3. **Emergency Stop**: THERMAL_ANOMALY=1, KILN_E_STOP_OK=0, KILN_REFRACTORY_MONITOR_ENABLE=1 → MAINTENANCE_ALARM=0\n4. **No Anomaly**: THERMAL_ANOMALY=0, KILN_E_STOP_OK=1, KILN_REFRACTORY_MONITOR_ENABLE=1 → MAINTENANCE_ALARM=0\n\n## Change Log\n- **KILN_REFRACTORY_MONITOR_ENABLE**: BOOL / Purpose: Master enable control for refractory monitoring system / Compatibility: ANDed with existing logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 1→1, internals: 1→1)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK\n- **This Gen**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE\n- **Not Equivalent**: TRUE (new enable condition changes behavior)\n\n**Domain Keywords**: kiln, refractory, thermal, monitoring, maintenance, enable, safety",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Thermal anomaly detected *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_REFRACTORY_MONITOR_ENABLE : BOOL; (* Master enable switch for refractory monitoring system *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\nEND_VAR\n\n(* Safety logic - emergency stop status calculation *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Main operational logic - thermal monitoring with safety override *)\nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_1_safety_functionality_child1_2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CRP-ALM-001\n- **Location**: Main Control Room, Chemical Processing Plant\n- **Control Type**: Alarm Display with Safety Override\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Alarm display system with emergency stop and control room door safety interlocks\n\n## Control Objective\nProvide visual alarm indication with comprehensive safety override capabilities including emergency stop and control room access protection\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **E_STOP_PROCESS_AREA_NC**: BOOL - Emergency stop button status (NC contact)\n- **CONTROL_ROOM_DOOR_NC**: BOOL - Control room safety door interlock status (NC contact)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- CONTROL_ROOM_DOOR_NC (Input, BOOL)\n\n## Control Logic Description\nThe alarm display system now incorporates two independent safety interlocks. The emergency stop button provides immediate process area safety shutdown, while the control room door interlock prevents alarm display when unauthorized access to the control room is detected. Both safety inputs use normally-closed contacts for fail-safe operation. The alarm display is only active when both safety conditions are satisfied (doors closed and E-stop not activated) AND an alarm condition is present from the process.\n\n**Formal Logic Expression**: \nAlarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND Alarm_Active\n\n## Safety Requirements\n- Emergency stop activation must immediately override all alarm display functions\n- Control room door opening must immediately disable alarm display\n- No filtering or delay permitted on safety signal propagation\n- Safety interlocks must use normally-closed contacts for fail-safe operation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Process alarm activation status | On/Off | 100ms |\n| E_STOP_PROCESS_AREA_NC | BOOL | R | Emergency stop status | Normal/Tripped | 50ms |\n| CONTROL_ROOM_DOOR_NC | BOOL | R | Control room door status | Closed/Open | 100ms |\n| Alarm_Display | BOOL | R/W | Alarm indicator status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Alarm_Active=1, E_STOP_PROCESS_AREA_NC=1, CONTROL_ROOM_DOOR_NC=1 → Alarm_Display=1\n2. **E-Stop Activation**: Alarm_Active=1, E_STOP_PROCESS_AREA_NC=0, CONTROL_ROOM_DOOR_NC=1 → Alarm_Display=0\n3. **Door Open**: Alarm_Active=1, E_STOP_PROCESS_AREA_NC=1, CONTROL_ROOM_DOOR_NC=0 → Alarm_Display=0\n4. **No Alarm**: Alarm_Active=0, E_STOP_PROCESS_AREA_NC=1, CONTROL_ROOM_DOOR_NC=1 → Alarm_Display=0\n\n## Change Log\n- **CONTROL_ROOM_DOOR_NC**: BOOL / Purpose: Safety door interlock for control room access / Compatibility: ANDed with existing safety logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input only)\n- **Non-decreasing**: PASS (inputs increased, others unchanged)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND Alarm_Active\n- **This Gen**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND Alarm_Active\n- **Not Equivalent**: The new equation adds an additional safety condition (door interlock) that was not present in the parent\n\n**Domain Keywords**: chemical plant, alarm management, safety interlock, control room, emergency stop, process safety",
  "output": "PROGRAM CRP_ALM_001_Control\nVAR_INPUT\n    Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\n    E_STOP_PROCESS_AREA_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    CONTROL_ROOM_DOOR_NC : BOOL; (* Control room safety door interlock status (NC contact) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\n\nAlarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND Alarm_Active;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_68_variant_6_safety_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: maintenance\n- **Summary**: Dissolved oxygen control with agitator cycle counting for maintenance tracking\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation with master enable safety and track agitator activation cycles for preventive maintenance\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total number of agitator activation cycles for maintenance tracking\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 1 (+0) | Internals: 2 (+2)`\n\n### New Items This Gen (must respect SEP)\n- (Internal, UINT) Agitator_Cycle_Count - Total number of agitator activation cycles\n- (Internal, R_TRIG) Agitator_R_TRIG - Rising edge detection for agitator activation\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when oxygen drops below 40% saturation, provided the master enable is active. A rising edge detector monitors when the agitator output transitions from OFF to ON. Each time this transition occurs, the agitator cycle counter increments by one, providing maintenance personnel with data on total agitator activations for preventive maintenance scheduling.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_Enable AND DO_LOW; Agitator_Cycle_Count := Agitator_Cycle_Count + 1 WHEN Agitator_R_TRIG.Q\n\n## Safety Requirements\n- Maintenance logic must not interfere with primary safety functions\n- Cycle counter is read-only for maintenance purposes only\n- Master enable switch takes precedence over all control functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen low | Boolean | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master enable | Boolean | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator status | Boolean | 100ms |\n| Agitator_Cycle_Count | UINT | R | Agitator cycle count | Count | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=1, counter increments on rising edge\n2. **Disabled System**: Fermenter_Enable=0, DO_LOW=1 → AGITATOR_ON=0, no counter increment\n3. **Adequate Oxygen**: Fermenter_Enable=1, DO_LOW=0 → AGITATOR_ON=0, no counter increment\n4. **Multiple Activations**: Rapid toggling of DO_LOW → Counter increments once per rising edge\n\n## Change Log\n- **Agitator_Cycle_Count**: UINT / Purpose: Track agitator activation cycles for maintenance / Compatibility: Read-only maintenance data\n- **Agitator_R_TRIG**: R_TRIG / Purpose: Detect agitator activation rising edges / Compatibility: Internal function block only\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (≤1 new internal variable requirement met)\n- **Non-decreasing**: PASS (2→2 inputs, 1→1 outputs, 0→2 internals)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW; Agitator_Cycle_Count := Agitator_Cycle_Count + 1 WHEN Agitator_R_TRIG.Q\n- **Not Equivalent**: Maintenance counting logic is additive to core control function\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, maintenance, cycle counting, pharmaceutical",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    Agitator_Cycle_Count : UINT; (* Total number of agitator activation cycles for maintenance tracking *)\n    Agitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\nEND_VAR\n\n(* Primary control logic - safety first *)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW;\n\n(* Maintenance cycle counting logic *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\nIF Agitator_R_TRIG.Q THEN\n    Agitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_1_functionality_maintenance_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CKF-XRF-01\n- **Location**: Kiln Feed Preparation Area\n- **Control Type**: Safety-Enhanced Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Kiln feed composition control with emergency stop safety override and XRF signal monitoring\n\n## Control Objective\nMonitor XRF analyzer signal status with emergency stop override capability, activating hold state when signal is lost or emergency stop is pressed with guaranteed response time\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **Kiln_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for immediate kiln feed system shutdown\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Kiln_E_STOP_NC (Input, BOOL)\n\n## Control Logic Description\nThe system continuously monitors the XRF analyzer signal status. When the XRF_SIGNAL_LOST input activates (TRUE), indicating loss of analyzer signal, the system immediately activates the XRF_ANALYSIS_HOLD output to pause feed composition adjustments. The emergency stop button (Kiln_E_STOP_NC) provides a hard-wired safety override - when pressed (contact opens, making Kiln_E_STOP_NC FALSE), it immediately forces the system into hold state regardless of XRF signal status. The system defaults to safe state (XRF_ANALYSIS_HOLD = FALSE) on power-up. Response time is guaranteed to be ≤100ms from any input activation to output response.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := Kiln_E_STOP_NC AND XRF_SIGNAL_LOST\n\n## Safety Requirements\n- Emergency stop must immediately override all operational logic and force system to safe state\n- Safety permissives shall gate all operational outputs\n- No filtering or delay permitted on safety chain signals\n- System must default to safe state on power-up\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Lost Status | On/Off | 100ms |\n| Kiln_E_STOP_NC | BOOL | R | Emergency Stop Status (NC) | On/Off | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R/W | Analysis Hold State | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: XRF_SIGNAL_LOST=FALSE, Kiln_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=FALSE\n2. **XRF Signal Lost**: XRF_SIGNAL_LOST=TRUE, Kiln_E_STOP_NC=TRUE → XRF_ANALYSIS_HOLD=TRUE\n3. **Emergency Stop Activated**: XRF_SIGNAL_LOST=FALSE, Kiln_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=FALSE (safe state)\n4. **Both Conditions**: XRF_SIGNAL_LOST=TRUE, Kiln_E_STOP_NC=FALSE → XRF_ANALYSIS_HOLD=FALSE (safety override)\n\n## Change Log\n- **Kiln_E_STOP_NC**: BOOL / Purpose: Emergency stop button input for immediate system shutdown / Compatibility: Direct replacement for any existing E-stop logic\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Added only essential safety input\n- **Measurability**: 8/10 - Clear test scenarios defined\n- **Safety-Preservation**: 10/10 - Safety takes absolute precedence\n- **Determinism**: 9/10 - Immediate response guaranteed\n- **SEP-Compliance**: 10/10 - Within early phase limits\n- **ST-Coverage**: 7/10 - Basic BOOL logic, no advanced syntax yet\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS - 1 new input only\n- **Non-decreasing**: PASS - All counts maintained or increased\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST\n- **This Gen**: XRF_ANALYSIS_HOLD := Kiln_E_STOP_NC AND XRF_SIGNAL_LOST\n- **Not Equivalent**: TRUE - Safety gating changes logical behavior\n\n**Domain Keywords**: kiln, XRF, analyzer, emergency stop, cement, feed composition, safety",
  "output": "PROGRAM CKF_XRF_01_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    Kiln_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for immediate kiln feed system shutdown *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\nEND_VAR\n\n(* Safety and operational logic *)\nXRF_ANALYSIS_HOLD := Kiln_E_STOP_NC AND XRF_SIGNAL_LOST;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_0_performance_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: CHEM-PLANT-ALARM-MGMT\n- **Location**: Main Control Room\n- **Control Type**: SCADA Alarm Management\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Emergency stop safety enhancement for chemical plant alarm suppression system\n\n## Control Objective\nImplement emergency stop functionality to immediately disable alarm suppression during safety-critical situations while maintaining the core alarm flood suppression capability.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **High_Alarm_Rate_Detected**: BOOL - Alarm rate exceeds 20 alarms/minute threshold\n- **E_STOP_ALARM_AREA_NC**: BOOL - Emergency stop button (NC contact) for alarm management area\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Suppression_Active**: BOOL - Activates alarm flood suppression mode\n\n### Internals (CUMULATIVE)\n- **E_STOP_ALARM_AREA_OK**: BOOL - Emergency stop status (TRUE when safe)\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- E_STOP_ALARM_AREA_NC (Input, BOOL)\n- E_STOP_ALARM_AREA_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors alarm rates and activates suppression when high rates are detected. An emergency stop button provides immediate safety override capability. The emergency stop uses normally-closed contacts for fail-safe operation, where E_STOP_ALARM_AREA_NC is TRUE when the button is not pressed (safe condition). This is converted to E_STOP_ALARM_AREA_OK for consistent positive logic. Alarm suppression is only active when both high alarm rate is detected AND the emergency stop is in safe condition.\n\n**Formal Logic Expression**: \nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\nAlarm_Suppression_Active := High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK;\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- System must default to safe state (suppression OFF) on power-up or emergency stop activation\n- Emergency stop status must be continuously monitored with no filtering or delays\n- Manual reset required after emergency stop activation (by releasing the button)\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| High_Alarm_Rate_Detected | BOOL | R | High alarm rate detection status | On/Off | 1 sec |\n| E_STOP_ALARM_AREA_NC | BOOL | R | Emergency stop button status | On/Off | 100 ms |\n| E_STOP_ALARM_AREA_OK | BOOL | R | Emergency stop safe status | On/Off | 100 ms |\n| Alarm_Suppression_Active | BOOL | R/W | Alarm suppression active status | On/Off | 1 sec |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: High_Alarm_Rate_Detected = TRUE, E_STOP_ALARM_AREA_NC = TRUE → Alarm_Suppression_Active = TRUE\n2. **Emergency Stop Activation**: High_Alarm_Rate_Detected = TRUE, E_STOP_ALARM_AREA_NC = FALSE → Alarm_Suppression_Active = FALSE\n3. **Power-up Safety**: High_Alarm_Rate_Detected = FALSE, E_STOP_ALARM_AREA_NC = TRUE → Alarm_Suppression_Active = FALSE\n\n## Change Log\n- **E_STOP_ALARM_AREA_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: NC contact for fail-safe operation\n- **E_STOP_ALARM_AREA_OK**: BOOL / Purpose: Emergency stop status signal / Compatibility: Normalized safety permissive\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Alarm_Suppression_Active := High_Alarm_Rate_Detected\n- **This Gen**: Alarm_Suppression_Active := High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK\n- **Not Equivalent**: The new equation includes safety gating that can override the functional logic\n\n**Domain Keywords**: chemical plant, alarm management, emergency stop, safety interlock, SCADA",
  "output": "PROGRAM CHEM_PLANT_ALARM_MGMT\nVAR_INPUT\n    High_Alarm_Rate_Detected : BOOL; (* Alarm rate exceeds 20 alarms/minute threshold *)\n    E_STOP_ALARM_AREA_NC : BOOL; (* Emergency stop button (NC contact) for alarm management area *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Suppression_Active : BOOL; (* Activates alarm flood suppression mode *)\nEND_VAR\nVAR\n    E_STOP_ALARM_AREA_OK : BOOL; (* Emergency stop status (TRUE when safe) *)\nEND_VAR\n\n(* Safety logic - emergency stop status normalization *)\nE_STOP_ALARM_AREA_OK := E_STOP_ALARM_AREA_NC;\n\n(* Main operational logic - alarm suppression control *)\nAlarm_Suppression_Active := High_Alarm_Rate_Detected AND E_STOP_ALARM_AREA_OK;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_68_variant_0_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: PHARMA-BIO-001\n- **Location**: Fermentation Suite B\n- **Control Type**: Safety-Enhanced Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Bioreactor dissolved oxygen control with emergency stop safety override\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation by activating agitator when oxygen levels drop below threshold, with emergency stop capability for operator safety\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n- **Fermenter_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Fermenter_E_STOP_NC (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control with safety override. A safety permissive signal (SAFE_TO_OPERATE) is derived from the emergency stop button status, where SAFE_TO_OPERATE := Fermenter_E_STOP_NC. The agitator output is enabled only when all three conditions are met: safety permissive is TRUE, fermenter is enabled by operator, and dissolved oxygen levels are below 40% saturation. The emergency stop takes absolute precedence over all operational logic.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND DO_LOW\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Safety permissive must be derived directly from safety inputs without filtering\n- System must default to safe state (output OFF) on power-up or signal loss\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Fermenter_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator drive status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_E_STOP_NC=1, Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=1\n2. **Emergency Stop**: Fermenter_E_STOP_NC=0, Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=0\n3. **System Disabled**: Fermenter_E_STOP_NC=1, Fermenter_Enable=0, DO_LOW=1 → AGITATOR_ON=0\n4. **Oxygen Adequate**: Fermenter_E_STOP_NC=1, Fermenter_Enable=1, DO_LOW=0 → AGITATOR_ON=0\n\n## Change Log\n- **Fermenter_E_STOP_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: Backward compatible, enhances safety\n\n## Self-check Summary\n- **Minimalism**: 10/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new input)\n- **Non-decreasing**: PASS (inputs increased, others unchanged)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND DO_LOW\n- **Not Equivalent**: The emergency stop condition fundamentally changes the logic by adding a safety override\n\n**Domain Keywords**: bioreactor, pharmaceutical, fermentation, dissolved oxygen, agitator, emergency stop, safety",
  "output": "PROGRAM PHARMA_BIO_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\n    Fermenter_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\n\n(* Safety and operational logic *)\nAGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND DO_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_1_functionality_safety_child2_2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioReactor_OTR_Control\n- **Location**: Pharmaceutical Fermentation Suite B\n- **Control Type**: Cascade Control with Adaptive Setpoint\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: contextual_complication\n- **Summary**: Oxygen supplementation control with product-specific response strategies and master enable\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold, with product-specific response strategies and operator master enable control\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for oxygen control system\n- **Antibiotic_Type_Selector**: BOOL - Selects antibiotic production mode (0 = Penicillin, 1 = Cephalosporin)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **Excessive_Foam_Alarm**: BOOL - Internal flag for foam detection (hardcoded FALSE for now)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Antibiotic_Type_Selector (Input, BOOL)\n- Excessive_Foam_Alarm (Internal, BOOL)\n\n## Control Logic Description\nThe system provides supplemental oxygen when dissolved oxygen levels are critically low. The master enable switch must be active for any oxygen supplementation. For Penicillin production (Antibiotic_Type_Selector = FALSE), oxygen is supplied whenever DO is low. For Cephalosporin production (Antibiotic_Type_Selector = TRUE), oxygen is supplied only when DO is low AND no excessive foaming is detected (foam alarm not active). The foam detection is currently implemented as a hardcoded FALSE value for future expansion.\n\n**Formal Logic Expression**: \nOxygen_Valve := BioReactor_Enable AND (IF Antibiotic_Type_Selector THEN (DO_Low_Alarm AND NOT Excessive_Foam_Alarm) ELSE DO_Low_Alarm)\n\n## Safety Requirements\n- System defaults to safe state (output OFF) on power-up\n- Output turns OFF when input signals are lost\n- Cephalosporin mode includes additional foam protection to prevent overflow\n- Master enable provides operator override capability\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| BioReactor_Enable | BOOL | R/W | Master enable control | On/Off | 100ms |\n| Antibiotic_Type_Selector | BOOL | R/W | Antibiotic production mode | Penicillin/Cephalosporin | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen supply valve status | On/Off | 100ms |\n| Excessive_Foam_Alarm | BOOL | R | Foam detection status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Penicillin Mode Normal Operation**: Antibiotic_Type_Selector = FALSE, BioReactor_Enable = TRUE, DO_Low_Alarm = TRUE → Oxygen_Valve = TRUE\n2. **Cephalosporin Mode Normal Operation**: Antibiotic_Type_Selector = TRUE, BioReactor_Enable = TRUE, DO_Low_Alarm = TRUE, Excessive_Foam_Alarm = FALSE → Oxygen_Valve = TRUE\n3. **Cephalosporin Mode Foam Protection**: Antibiotic_Type_Selector = TRUE, BioReactor_Enable = TRUE, DO_Low_Alarm = TRUE, Excessive_Foam_Alarm = TRUE → Oxygen_Valve = FALSE\n4. **Master Enable Override**: BioReactor_Enable = FALSE → Oxygen_Valve = FALSE (regardless of other inputs)\n\n## Change Log\n- **Antibiotic_Type_Selector**: BOOL / Purpose: Select between antibiotic production modes with different oxygen response strategies / Compatibility: Backward compatible, defaults to Penicillin mode\n- **Excessive_Foam_Alarm**: BOOL / Purpose: Internal flag for foam detection in Cephalosporin mode / Compatibility: Future expansion ready\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new input allowed in early phase)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := BioReactor_Enable AND (IF Antibiotic_Type_Selector THEN (DO_Low_Alarm AND NOT Excessive_Foam_Alarm) ELSE DO_Low_Alarm)\n- **Not Equivalent**: TRUE - New logic includes conditional branching and additional safety check\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, antibiotic production, fermentation, dissolved oxygen, pharmaceutical, penicillin, cephalosporin",
  "output": "PROGRAM BioReactor_OTR_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for oxygen control system *)\n    Antibiotic_Type_Selector : BOOL; (* Selects antibiotic production mode (0 = Penicillin, 1 = Cephalosporin) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    Excessive_Foam_Alarm : BOOL; (* Internal flag for foam detection (hardcoded FALSE for now) *)\nEND_VAR\n\n(* Initialize foam alarm to FALSE for future expansion *)\nExcessive_Foam_Alarm := FALSE;\n\n(* Main control logic with product-specific response strategies *)\nIF BioReactor_Enable THEN\n    IF Antibiotic_Type_Selector THEN \n        Oxygen_Valve := DO_Low_Alarm AND NOT Excessive_Foam_Alarm;\n    ELSE \n        Oxygen_Valve := DO_Low_Alarm;\n    END_IF;\nELSE\n    Oxygen_Valve := FALSE;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_6_functionality_contextual_complication_child1",
    "matiec_passed": true,
    "generation_attempts": 2
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End Area\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Kiln cooler fan control with emergency stop safety interlock and temperature-based activation\n\n## Control Objective\nActivate grate cooler fan when clinker temperature exceeds threshold with master enable control and emergency stop safety override\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_COOLER_ENABLE**: BOOL - Master enable switch for kiln cooler system\n- **KILN_COOLER_E_STOP_NC**: BOOL - Emergency stop button (NC contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n\n### Internals (CUMULATIVE)\n- **SAFE_TO_OPERATE**: BOOL - Safety permissive signal (TRUE when all safety conditions met)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- KILN_COOLER_E_STOP_NC (Input, BOOL)\n- SAFE_TO_OPERATE (Internal, BOOL)\n\n## Control Logic Description\nThe system implements a safety-interlocked control scheme where all functional operations are gated by a safety permissive signal. The emergency stop button uses a normally-closed contact (KILN_COOLER_E_STOP_NC) that reads TRUE when the button is not pressed (safe condition). The safety permissive (SAFE_TO_OPERATE) is TRUE only when the emergency stop is engaged (not pressed). The cooling fan output is enabled only when both the safety permissive is TRUE AND the master enable is active AND the temperature is high. This ensures the emergency stop immediately overrides all functional logic when activated.\n\n**Formal Logic Expression**: \nSAFE_TO_OPERATE := KILN_COOLER_E_STOP_NC\nCOOLING_FAN := SAFE_TO_OPERATE AND KILN_COOLER_ENABLE AND TEMPERATURE_HIGH\n\n## Safety Requirements\n- Emergency stop must immediately override all functional control logic\n- Safety permissive must be constructed from fail-safe input signals\n- Output defaults to OFF state on signal loss or power-up\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_COOLER_ENABLE | BOOL | R/W | Master system enable | On/Off | 100ms |\n| KILN_COOLER_E_STOP_NC | BOOL | R | Emergency stop status (NC) | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Cooler fan output status | On/Off | 100ms |\n| SAFE_TO_OPERATE | BOOL | R | Safety permissive status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1, KILN_COOLER_ENABLE=1, KILN_COOLER_E_STOP_NC=1 → COOLING_FAN=1\n2. **Emergency Stop Activated**: TEMPERATURE_HIGH=1, KILN_COOLER_ENABLE=1, KILN_COOLER_E_STOP_NC=0 → COOLING_FAN=0\n3. **Master Disabled**: TEMPERATURE_HIGH=1, KILN_COOLER_ENABLE=0, KILN_COOLER_E_STOP_NC=1 → COOLING_FAN=0\n4. **Temperature Normal**: TEMPERATURE_HIGH=0, KILN_COOLER_ENABLE=1, KILN_COOLER_E_STOP_NC=1 → COOLING_FAN=0\n\n## Change Log\n- **KILN_COOLER_E_STOP_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: NC contact for fail-safe operation\n- **SAFE_TO_OPERATE**: BOOL / Purpose: Safety permissive signal / Compatibility: Gates all functional logic\n\n## Self-check Summary\n- **Minimalism**: 9/10 (added only essential safety elements)\n- **Measurability**: 8/10 (clear test scenarios for new functionality)\n- **Safety-Preservation**: 10/10 (safety takes absolute precedence)\n- **Determinism**: 9/10 (immediate safety response)\n- **SEP-Compliance**: 10/10 (1 new input, 1 new internal - within early phase limits)\n- **ST-Coverage**: 7/10 (introduced safety input normalization concept)\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new input, 1 new internal)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_COOLER_ENABLE AND TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := KILN_COOLER_E_STOP_NC AND KILN_COOLER_ENABLE AND TEMPERATURE_HIGH\n- **Not Equivalent**: TRUE (new safety term changes behavior when E-stop is pressed)\n\n**Domain Keywords**: kiln, cooler, cement, clinker, temperature, emergency stop, safety, fan control",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_COOLER_ENABLE : BOOL; (* Master enable switch for kiln cooler system *)\n    KILN_COOLER_E_STOP_NC : BOOL; (* Emergency stop button (NC contact, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\nEND_VAR\nVAR\n    SAFE_TO_OPERATE : BOOL; (* Safety permissive signal (TRUE when all safety conditions met) *)\nEND_VAR\n\n(* Safety logic - emergency stop normalization *)\nSAFE_TO_OPERATE := KILN_COOLER_E_STOP_NC;\n\n(* Main operational logic - safety-gated fan control *)\nCOOLING_FAN := SAFE_TO_OPERATE AND KILN_COOLER_ENABLE AND TEMPERATURE_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_5_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: VAL-042\n- **Location**: Bioreactor Sparge Line\n- **Control Type**: Direct Boolean Control\n- **Safety Level**: SIL-0 (Basic Operation)\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Control\n\n## Control Objective\nTurn ON oxygen_sparge_valve when DO_sensor_high is active.\n\n## I/O Requirements\n\n### Input Variables\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen sensor indicates level above 30% setpoint threshold\n\n### Output Variables\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n\n## Control Logic Description\nDirect pass-through control. When the input signal is active (TRUE), the output activates immediately. When the input signal is inactive (FALSE), the output deactivates immediately.\n\n**Formal Logic Expression**: OXYGEN_SPARGE_VALVE := DO_SENSOR_HIGH\n\n## Safety Requirements\n- Output turns OFF when input signal is lost\n- System defaults to safe state (output OFF) on power-up\n\n## Verification Requirements\n### Test Scenarios\n1. **Activation**: DO_SENSOR_HIGH = TRUE → OXYGEN_SPARGE_VALVE = TRUE\n2. **Deactivation**: DO_SENSOR_HIGH = FALSE → OXYGEN_SPARGE_VALVE = FALSE\n\n**Domain Keywords**: bioreactor, dissolved oxygen, sparging",
  "output": "PROGRAM VAL_042_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen sensor indicates level above 30% setpoint threshold *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\nEND_VAR\n\nOXYGEN_SPARGE_VALVE := DO_SENSOR_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen0_seed_69_variant_0",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BioReactor_OTR_System\n- **Location**: Pharmaceutical Fermentation Suite\n- **Control Type**: Cascade PID Control with Safety Override\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Bioreactor oxygen supplementation with emergency stop safety interlock and SCADA monitoring\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with master enable control, emergency stop capability, and SCADA visibility\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact) for immediate shutdown\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **BioReactor_Oxygen_Active_Status**: BOOL - Status indicator for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **BioReactor_E_Stop_OK**: BOOL - Emergency stop permissive status (TRUE when E-stop not activated)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_E_Stop_NC (Input, BOOL)\n- BioReactor_E_Stop_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and provides supplemental oxygen when levels fall below the safety threshold. The emergency stop button provides immediate shutdown capability when pressed. The E-stop permissive status is derived from the normally-closed contact (TRUE when circuit is closed/safe). All operational outputs are gated by the emergency stop permissive, master enable, and low oxygen alarm conditions. The SCADA status indicator mirrors the oxygen valve state for operator visibility.\n\n**Formal Logic Expression**: \nBioReactor_E_Stop_OK := BioReactor_E_Stop_NC;\nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK;\nBioReactor_Oxygen_Active_Status := Oxygen_Valve\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- System must default to safe state (outputs OFF) on power-up and when input signals are lost\n- Emergency stop activation must be immediately propagated to all outputs\n- Manual reset required by releasing and re-securing the emergency stop button\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen below threshold | On/Off | 100ms |\n| BioReactor_Enable | BOOL | R/W | Master enable control | On/Off | 100ms |\n| BioReactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve control | On/Off | 100ms |\n| BioReactor_Oxygen_Active_Status | BOOL | R | System active status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: BioReactor_Enable=1, DO_Low_Alarm=1, BioReactor_E_Stop_NC=1 → Oxygen_Valve=1, BioReactor_Oxygen_Active_Status=1\n2. **Emergency Stop Activation**: BioReactor_E_Stop_NC=0 → Oxygen_Valve=0, BioReactor_Oxygen_Active_Status=0 (immediate)\n3. **E-Stop Recovery**: BioReactor_E_Stop_NC transitions 0→1 → System remains in safe state until normal conditions are re-established\n\n## Change Log\n- **BioReactor_E_Stop_NC**: BOOL / Purpose: Emergency stop input for immediate shutdown / Compatibility: Normally-closed fail-safe contact\n- **BioReactor_E_Stop_OK**: BOOL / Purpose: Emergency stop permissive status derivation / Compatibility: Direct mapping from NC input\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new input, 1 new internal)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 2→2, internals: 0→1)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK\n- **Not Equivalent**: TRUE - New equation includes emergency stop permissive\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, fermentation, pharmaceutical, emergency stop, safety interlock",
  "output": "PROGRAM BioReactor_OTR_System\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) for immediate shutdown *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    BioReactor_Oxygen_Active_Status : BOOL; (* Status indicator for SCADA monitoring *)\nEND_VAR\nVAR\n    BioReactor_E_Stop_OK : BOOL; (* Emergency stop permissive status (TRUE when E-stop not activated) *)\nEND_VAR\n\n(* Safety chain - emergency stop permissive calculation *)\nBioReactor_E_Stop_OK := BioReactor_E_Stop_NC;\n\n(* Operational logic - oxygen control with safety interlock *)\nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK;\n\n(* SCADA status mirroring *)\nBioReactor_Oxygen_Active_Status := Oxygen_Valve;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_6_functionality_interoperability_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Safety Overrides\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: functionality\n- **Summary**: Bioreactor dissolved oxygen control with agitator protection and manual override capability\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with emergency stop override, agitator minimum run-time protection, and manual operator control capability\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Dissolved oxygen below 40% saturation threshold\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control\n- **Fermenter_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **Agitator_Manual_Override**: BOOL - Manual override switch for agitator control\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Activates agitator motor drive\n\n### Internals (CUMULATIVE)\n- **Agitator_MinRun_Timer**: TON - Timer ensuring agitator runs for minimum 30 seconds\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- Agitator_Manual_Override (Input, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when oxygen falls below 40% saturation or when manually overridden by the operator. The agitator runs for a minimum of 30 seconds once activated to prevent motor stress from rapid cycling. All control functions are subordinate to emergency stop and master enable safety constraints.\n\nThe new manual override input allows operators to manually activate the agitator regardless of dissolved oxygen levels, while still respecting all safety interlocks including emergency stop and master enable.\n\n**Formal Logic Expression**: \nAGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND (DO_LOW OR Agitator_MinRun_Timer.Q OR Agitator_Manual_Override)\n\n## Safety Requirements\n- Emergency stop must immediately de-energize all equipment\n- Master enable must be required for any equipment operation\n- Manual override must not bypass safety interlocks\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved oxygen low | On/Off | 1s |\n| Fermenter_Enable | BOOL | R/W | Master enable | On/Off | 1s |\n| Fermenter_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Agitator_Manual_Override | BOOL | R/W | Manual agitator control | On/Off | 1s |\n| AGITATOR_ON | BOOL | R | Agitator status | On/Off | 1s |\n| Agitator_MinRun_Timer.ET | TIME | R | Agitator run time | Seconds | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Auto Operation**: DO_LOW=1, Fermenter_Enable=1, Fermenter_E_STOP_NC=1, Agitator_Manual_Override=0 → AGITATOR_ON=1\n2. **Manual Override**: DO_LOW=0, Fermenter_Enable=1, Fermenter_E_STOP_NC=1, Agitator_Manual_Override=1 → AGITATOR_ON=1\n3. **Safety Override**: Any condition with Fermenter_E_STOP_NC=0 → AGITATOR_ON=0\n4. **Minimum Run Time**: Verify agitator runs for full 30 seconds after activation\n\n## Change Log\n- **Agitator_Manual_Override**: BOOL / Purpose: Allows manual agitator control / Compatibility: OR'd with existing auto logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (inputs increased, others unchanged)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND (DO_LOW OR Agitator_MinRun_Timer.Q)\n- **This Gen**: AGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND (DO_LOW OR Agitator_MinRun_Timer.Q OR Agitator_Manual_Override)\n- **Not Equivalent**: Manual override condition adds new activation path\n\n**Domain Keywords**: bioreactor, fermentation, dissolved oxygen, agitator, pharmaceutical, antibiotic production, cascade control",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Dissolved oxygen below 40% saturation threshold *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control *)\n    Fermenter_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    Agitator_Manual_Override : BOOL; (* Manual override switch for agitator control *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Activates agitator motor drive *)\nEND_VAR\nVAR\n    Agitator_MinRun_Timer : TON; (* Timer ensuring agitator runs for minimum 30 seconds *)\nEND_VAR\n\n(* Safety chain evaluation - emergency stop and master enable must both be satisfied *)\n(* Main control logic with manual override capability *)\nAGITATOR_ON := Fermenter_E_STOP_NC AND Fermenter_Enable AND (DO_LOW OR Agitator_MinRun_Timer.Q OR Agitator_Manual_Override);\n\n(* Minimum run timer - starts when agitator is commanded on, ensures 30 second minimum run time *)\nAgitator_MinRun_Timer(IN := AGITATOR_ON, PT := T#30S);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_1_functionality_safety_performance_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Safety Interlock\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen control with emergency stop safety and operator feedback light\n\n## Control Objective\nMaintain dissolved oxygen levels at optimal range during exponential growth phase with emergency stop safety interlock and visual operator feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold (30% setpoint)\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (normally closed, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n- **OXYGEN_SPARGE_ACTIVE_LIGHT**: BOOL - Visual indicator light showing oxygen sparge valve status\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- OXYGEN_SPARGE_ACTIVE_LIGHT (Output, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by controlling the oxygen sparge valve based on sensor input. The emergency stop provides a safety interlock that takes absolute precedence. A new visual indicator light mirrors the oxygen sparge valve status to provide immediate operator feedback when the system is actively oxygenating the bioreactor.\n\n**Formal Logic Expression**: \nBIO_E_STOP_OK := BIO_E_STOP_NC\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\nOXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety permissive (BIO_E_STOP_OK) must be derived directly from safety hardware status\n- Visual indicators must not compromise safety functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen above threshold | Boolean | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen sparge control | Boolean | 100ms |\n| OXYGEN_SPARGE_ACTIVE_LIGHT | BOOL | R | Sparge active indicator | Boolean | 100ms |\n| BIO_E_STOP_OK | BOOL | R | Safety permissive status | Boolean | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_SENSOR_HIGH=1, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=1, OXYGEN_SPARGE_ACTIVE_LIGHT=1\n2. **Low Oxygen**: DO_SENSOR_HIGH=0, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=0, OXYGEN_SPARGE_ACTIVE_LIGHT=0\n3. **Emergency Stop**: DO_SENSOR_HIGH=1, BIO_E_STOP_NC=0 → OXYGEN_SPARGE_VALVE=0, OXYGEN_SPARGE_ACTIVE_LIGHT=0\n4. **Light Verification**: Any condition where OXYGEN_SPARGE_VALVE=1 → OXYGEN_SPARGE_ACTIVE_LIGHT=1 must hold true\n\n## Change Log\n- **OXYGEN_SPARGE_ACTIVE_LIGHT**: BOOL / Purpose: Visual feedback for operators when oxygen sparging is active / Compatibility: Direct mirror of OXYGEN_SPARGE_VALVE status\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new output, within early phase limit)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\n- **This Gen**: OXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE\n- **Not Equivalent**: The new equation is a direct assignment rather than a conditional expression\n\n**Domain Keywords**: bioreactor, dissolved oxygen, sparge valve, pharmaceutical, safety interlock, operator feedback",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold (30% setpoint) *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (normally closed, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\n    OXYGEN_SPARGE_ACTIVE_LIGHT : BOOL; (* Visual indicator light showing oxygen sparge valve status *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\nEND_VAR\n\n(* Safety chain - emergency stop status evaluation *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Operational logic - oxygen sparge control *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH;\n\n(* Operator feedback - visual indicator *)\nOXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_0_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Pharmaceutical Fermentation Suite A\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Bioreactor oxygen supplementation with emergency stop safety interlock and manual reset requirement\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with master enable, emergency stop safety interlocks, and manual reset requirement after safety trips\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Bioreactor_E_Stop_NC**: BOOL - Emergency stop button status (TRUE when safe)\n- **Bioreactor_Safety_Reset_Req**: BOOL - Safety reset request button (momentary)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n\n### Internals (CUMULATIVE)\n- **Safety_Tripped**: BOOL - Safety trip state (TRUE when safety condition requires manual reset)\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Bioreactor_Safety_Reset_Req (Input, BOOL)\n- Safety_Tripped (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and activates supplemental oxygen when levels fall below the safety threshold. All operation is gated by the master enable switch and emergency stop safety interlock. When the emergency stop is activated (Bioreactor_E_Stop_NC becomes FALSE), the Safety_Tripped internal flag is set to TRUE, which blocks all oxygen valve operation. After the emergency stop condition is cleared (Bioreactor_E_Stop_NC returns to TRUE), the operator must manually press the Bioreactor_Safety_Reset_Req button to clear the Safety_Tripped state and resume normal operation. This ensures deliberate operator intervention is required after any safety trip condition.\n\n**Formal Logic Expression**: \nSafety_Tripped := (NOT Bioreactor_E_Stop_NC) OR (Safety_Tripped AND NOT Bioreactor_Safety_Reset_Req)\nOxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm AND NOT Safety_Tripped\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Manual reset required after any safety trip condition before operation can resume\n- Safety trip state must persist until explicitly cleared by operator\n- All outputs must be gated by the combined safety permissive condition\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen low alarm status | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | Master enable switch | On/Off | 100ms |\n| Bioreactor_E_Stop_NC | BOOL | R | Emergency stop status | Safe/Tripped | 100ms |\n| Bioreactor_Safety_Reset_Req | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve control status | On/Off | 100ms |\n| Safety_Tripped | BOOL | R | Safety trip state | Tripped/Clear | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Bioreactor_Enable=TRUE, Bioreactor_E_Stop_NC=TRUE, DO_Low_Alarm=TRUE, Safety_Tripped=FALSE → Oxygen_Valve=TRUE\n2. **Emergency Stop Trip**: Bioreactor_E_Stop_NC=FALSE → Oxygen_Valve=FALSE, Safety_Tripped=TRUE\n3. **Post-Trip Reset**: After Bioreactor_E_Stop_NC returns to TRUE, Bioreactor_Safety_Reset_Req=TRUE → Safety_Tripped=FALSE\n4. **Operation Without Reset**: Bioreactor_E_Stop_NC=TRUE, Safety_Tripped=TRUE → Oxygen_Valve=FALSE regardless of other conditions\n\n## Change Log\n- **Bioreactor_Safety_Reset_Req**: BOOL / Purpose: Manual safety reset request button / Compatibility: New safety input\n- **Safety_Tripped**: BOOL / Purpose: Safety trip state memory / Compatibility: New internal safety flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm AND NOT Safety_Tripped\n- **Not Equivalent**: TRUE - New equation includes safety trip state blocking\n\n**Domain Keywords**: bioreactor, pharmaceutical, fermentation, oxygen, safety, emergency stop, reset",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Bioreactor_E_Stop_NC : BOOL; (* Emergency stop button status (TRUE when safe) *)\n    Bioreactor_Safety_Reset_Req : BOOL; (* Safety reset request button (momentary) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\nEND_VAR\nVAR\n    Safety_Tripped : BOOL; (* Safety trip state (TRUE when safety condition requires manual reset) *)\nEND_VAR\n\n(* Safety logic - emergency stop and manual reset requirement *)\nSafety_Tripped := (NOT Bioreactor_E_Stop_NC) OR (Safety_Tripped AND NOT Bioreactor_Safety_Reset_Req);\n\n(* Operational logic - oxygen valve control with safety interlock *)\nOxygen_Valve := Bioreactor_Enable AND Bioreactor_E_Stop_NC AND DO_Low_Alarm AND NOT Safety_Tripped;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_6_functionality_safety_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BRX-007A\n- **Location**: Fermentation Suite 3, North Wing\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Dissolved oxygen control with safety reset requirement for pharmaceutical fermentation bioreactor\n\n## Control Objective\nMaintain dissolved oxygen levels above 40% saturation with master enable safety and manual reset requirement after safety events\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor control system\n- **BioReact_Reset_Req**: BOOL - Manual reset request button required to resume operation after safety trip\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Agitator_Cycle_Count**: UINT - Total number of agitator activation cycles for maintenance tracking\n- **Agitator_R_TRIG**: R_TRIG - Rising edge detection for agitator activation\n- **Safety_Tripped**: BOOL - Latched safety trip state requiring manual reset\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 3 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BioReact_Reset_Req (Input, BOOL)\n- Safety_Tripped (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when oxygen drops below 40% saturation. A master enable switch provides basic safety interlocking. A new safety reset requirement has been added: if the system becomes disabled (Fermenter_Enable goes FALSE), the Safety_Tripped internal flag is set TRUE. To resume operation, both conditions must be met: Fermenter_Enable must be TRUE AND the operator must press the BioReact_Reset_Req button. The agitator cycle counter continues to track maintenance cycles on rising edges of agitator activation.\n\n**Formal Logic Expression**: \nSafety_Tripped := NOT Fermenter_Enable OR (Safety_Tripped AND NOT BioReact_Reset_Req)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped\nAgitator_Cycle_Count := Agitator_Cycle_Count + 1 WHEN Agitator_R_TRIG.Q\n\n## Safety Requirements\n- Safety trip state must be latched until manual reset confirmation\n- Reset requires deliberate operator action via dedicated reset button\n- Safety permissive must include both enable switch and reset clearance\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable Switch | On/Off | 100ms |\n| BioReact_Reset_Req | BOOL | R/W | Safety Reset Request | On/Off | 100ms |\n| AGITATOR_ON | BOOL | R | Agitator Status | On/Off | 100ms |\n| Agitator_Cycle_Count | UINT | R | Maintenance Cycle Count | cycles | 1s |\n| Safety_Tripped | BOOL | R | Safety Trip Status | Tripped/Clear | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_Enable=1, DO_LOW=1 → AGITATOR_ON=1\n2. **Safety Trip**: Fermenter_Enable=0 → AGITATOR_ON=0, Safety_Tripped=1\n3. **Reset Requirement**: Fermenter_Enable=1, BioReact_Reset_Req=0 → AGITATOR_ON=0 (remains tripped)\n4. **Reset Clearance**: Fermenter_Enable=1, BioReact_Reset_Req=1 → AGITATOR_ON=1, Safety_Tripped=0\n\n## Change Log\n- **BioReact_Reset_Req**: BOOL / Purpose: Manual safety reset request / Compatibility: New safety input\n- **Safety_Tripped**: BOOL / Purpose: Latched safety trip state / Compatibility: New internal safety flag\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (1 new input, 1 new internal)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped\n- **Not Equivalent**: The new equation includes additional safety trip condition that can block operation even when enable and DO conditions are met\n\n**Domain Keywords**: [bioreactor, fermentation, pharmaceutical, dissolved oxygen, agitator, safety reset, SIL]",
  "output": "PROGRAM BRX_007A_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor control system *)\n    BioReact_Reset_Req : BOOL; (* Manual reset request button required to resume operation after safety trip *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    Agitator_Cycle_Count : UINT; (* Total number of agitator activation cycles for maintenance tracking *)\n    Agitator_R_TRIG : R_TRIG; (* Rising edge detection for agitator activation *)\n    Safety_Tripped : BOOL; (* Latched safety trip state requiring manual reset *)\nEND_VAR\n\n(* Safety logic - latching safety trip state *)\nSafety_Tripped := NOT Fermenter_Enable OR (Safety_Tripped AND NOT BioReact_Reset_Req);\n\n(* Main operational logic *)\nAGITATOR_ON := Fermenter_Enable AND DO_LOW AND NOT Safety_Tripped;\n\n(* Maintenance cycle counting *)\nAgitator_R_TRIG(CLK := AGITATOR_ON);\nIF Agitator_R_TRIG.Q THEN\n    Agitator_Cycle_Count := Agitator_Cycle_Count + 1;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_1_functionality_maintenance_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Fermentation Suite B\n- **Control Type**: Safety-Enhanced Cascade Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Bioreactor oxygen control with emergency stop and manual reset safety chain\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with enhanced safety permissive chain including emergency stop and manual reset requirements\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control\n- **BioReactor_Emergency_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **BioReactor_Safety_Reset_Req**: BOOL - Safety reset request pushbutton\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **BioReactor_Oxygen_Active_Status**: BOOL - Status indicator for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safety_Permissive**: BOOL - Combined safety permissive signal\n\n### Counts Check\n`Inputs: 4 (+2) | Outputs: 2 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- BioReactor_Emergency_Stop_NC (Input, BOOL)\n- BioReactor_Safety_Reset_Req (Input, BOOL) \n- BioReactor_Safety_Permissive (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains the core oxygen supplementation logic where the oxygen valve activates when both the bioreactor is enabled and dissolved oxygen is low. A safety permissive chain is implemented where all operational outputs are gated by the safety permissive signal. The safety permissive requires the emergency stop button to be in normal position (not pressed) AND either a manual reset request is active OR the previous safety state was permissive. This ensures that after an emergency stop activation, a deliberate manual reset is required to restore operation. The SCADA status indicator continues to mirror the oxygen valve state for operator visibility.\n\n**Formal Logic Expression**: \nBioReactor_Safety_Permissive := BioReactor_Emergency_Stop_NC AND (BioReactor_Safety_Reset_Req OR BioReactor_Safety_Permissive);\nOxygen_Valve := BioReactor_Safety_Permissive AND BioReactor_Enable AND DO_Low_Alarm;\nBioReactor_Oxygen_Active_Status := Oxygen_Valve\n\n## Safety Requirements\n- Emergency stop must immediately override all operational logic and force outputs to safe state\n- Manual reset required to restore operation after emergency stop activation\n- Safety permissive must be computed before operational logic in each scan cycle\n- All output states must be visually indicated to operators\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved Oxygen Low Alarm | On/Off | 100ms |\n| BioReactor_Enable | BOOL | R/W | Bioreactor Master Enable | On/Off | 100ms |\n| BioReactor_Emergency_Stop_NC | BOOL | R | Emergency Stop Status | Normal/Tripped | 100ms |\n| BioReactor_Safety_Reset_Req | BOOL | R/W | Safety Reset Request | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen Valve Status | Open/Closed | 100ms |\n| BioReactor_Oxygen_Active_Status | BOOL | R | Oxygen System Active | Yes/No | 100ms |\n| BioReactor_Safety_Permissive | BOOL | R | Safety Permissive Status | Granted/Denied | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: BioReactor_Enable=1, DO_Low_Alarm=1, BioReactor_Emergency_Stop_NC=1 → Oxygen_Valve=1, BioReactor_Oxygen_Active_Status=1\n2. **Emergency Stop Activation**: BioReactor_Emergency_Stop_NC=0 → Oxygen_Valve=0, BioReactor_Oxygen_Active_Status=0 regardless of other inputs\n3. **Post-E-Stop Reset**: After E-Stop, BioReactor_Emergency_Stop_NC=1, BioReactor_Safety_Reset_Req=1 → Oxygen_Valve resumes based on enable and alarm conditions\n4. **Reset Without E-Stop Clear**: BioReactor_Emergency_Stop_NC=0, BioReactor_Safety_Reset_Req=1 → Oxygen_Valve remains 0\n\n## Change Log\n- **BioReactor_Emergency_Stop_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: New safety chain\n- **BioReactor_Safety_Reset_Req**: BOOL / Purpose: Manual safety reset request / Compatibility: New reset functionality  \n- **BioReactor_Safety_Permissive**: BOOL / Purpose: Combined safety permissive signal / Compatibility: New internal safety state\n\n## Self-check Summary\n- **Minimalism**: 8/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 9/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (2 new inputs, 1 internal within mid phase limits)\n- **Non-decreasing**: PASS (all counts increased or stayed same)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm\n- **This Gen**: Oxygen_Valve := BioReactor_Safety_Permissive AND BioReactor_Enable AND DO_Low_Alarm\n- **Not Equivalent**: The new equation includes an additional safety permissive term that can independently disable the output\n\n**Domain Keywords**: bioreactor, pharmaceutical, fermentation, oxygen transfer, safety, emergency stop, reset",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control *)\n    BioReactor_Emergency_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    BioReactor_Safety_Reset_Req : BOOL; (* Safety reset request pushbutton *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    BioReactor_Oxygen_Active_Status : BOOL; (* Status indicator for SCADA monitoring *)\nEND_VAR\nVAR\n    BioReactor_Safety_Permissive : BOOL; (* Combined safety permissive signal *)\nEND_VAR\n\n(* Safety permissive chain - must be computed first *)\nBioReactor_Safety_Permissive := BioReactor_Emergency_Stop_NC AND (BioReactor_Safety_Reset_Req OR BioReactor_Safety_Permissive);\n\n(* Operational oxygen control logic *)\nOxygen_Valve := BioReactor_Safety_Permissive AND BioReactor_Enable AND DO_Low_Alarm;\n\n(* SCADA status indicator *)\nBioReactor_Oxygen_Active_Status := Oxygen_Valve;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_6_functionality_interoperability_safety_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-React-01\n- **Location**: Pharmaceutical Production Suite B\n- **Control Type**: Cascade Control with Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 3 (mid)\n- **Branch**: maintenance\n- **Summary**: Dissolved oxygen control with emergency stop safety, operator feedback, and oxygen sparge valve runtime tracking for predictive maintenance\n\n## Control Objective\nMaintain dissolved oxygen levels at optimal range with emergency stop safety, visual operator feedback, and maintenance runtime tracking of oxygen sparge valve operation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above threshold (30% setpoint)\n- **BIO_E_STOP_NC**: BOOL - Emergency stop button status (normally closed, fail-safe)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve\n- **OXYGEN_SPARGE_ACTIVE_LIGHT**: BOOL - Visual indicator light showing oxygen sparge valve status\n\n### Internals (CUMULATIVE)\n- **BIO_E_STOP_OK**: BOOL - Emergency stop safe status\n- **SPARGE_RUNTIME_ACCUM**: TIME - Total accumulated runtime of oxygen sparge valve for maintenance tracking\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SPARGE_RUNTIME_ACCUM (Internal, TIME)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control with safety interlock and maintenance monitoring. The emergency stop status is derived from the normally-closed emergency stop input. The oxygen sparge valve activates when dissolved oxygen is below threshold and emergency stop is not engaged. A visual indicator light mirrors the valve status for operator feedback. A runtime accumulator tracks the total operational time of the oxygen sparge valve, incrementing by one second for each second the valve remains active, providing data for predictive maintenance scheduling.\n\n**Formal Logic Expression**: \nBIO_E_STOP_OK := BIO_E_STOP_NC\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\nOXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE\nSPARGE_RUNTIME_ACCUM := SPARGE_RUNTIME_ACCUM + T#1s (when OXYGEN_SPARGE_VALVE is TRUE)\n\n## Safety Requirements\n- Emergency stop (BIO_E_STOP_NC=0) must override all functional logic and force OXYGEN_SPARGE_VALVE := FALSE\n- Maintenance logic must not interfere with safety or control functions\n- Runtime accumulator must not affect control decisions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | Dissolved oxygen above threshold | Boolean | 100ms |\n| BIO_E_STOP_NC | BOOL | R | Emergency stop status | Boolean | 100ms |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen sparge valve control | Boolean | 100ms |\n| OXYGEN_SPARGE_ACTIVE_LIGHT | BOOL | R | Valve status indicator | Boolean | 100ms |\n| SPARGE_RUNTIME_ACCUM | TIME | R | Sparge valve runtime accumulator | Time | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: DO_SENSOR_HIGH=1, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=1, SPARGE_RUNTIME_ACCUM increments\n2. **Low Oxygen**: DO_SENSOR_HIGH=0, BIO_E_STOP_NC=1 → OXYGEN_SPARGE_VALVE=0, SPARGE_RUNTIME_ACCUM stable\n3. **Emergency Stop**: BIO_E_STOP_NC=0 → OXYGEN_SPARGE_VALVE=0 regardless of DO_SENSOR_HIGH, SPARGE_RUNTIME_ACCUM stable\n4. **Runtime Accumulation**: Verify SPARGE_RUNTIME_ACCUM increases only when OXYGEN_SPARGE_VALVE is active\n\n## Change Log\n- **SPARGE_RUNTIME_ACCUM**: TIME / Purpose: Track oxygen sparge valve operational time for predictive maintenance / Compatibility: Non-intrusive addition to existing control logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH\n- **This Gen**: SPARGE_RUNTIME_ACCUM := SPARGE_RUNTIME_ACCUM + T#1s (when OXYGEN_SPARGE_VALVE active)\n- **Not Equivalent**: True - control logic vs maintenance tracking\n\n**Domain Keywords**: bioreactor, dissolved oxygen, sparge valve, runtime tracking, predictive maintenance, pharmaceutical",
  "output": "PROGRAM BIO_React_01_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above threshold (30% setpoint) *)\n    BIO_E_STOP_NC : BOOL; (* Emergency stop button status (normally closed, fail-safe) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve *)\n    OXYGEN_SPARGE_ACTIVE_LIGHT : BOOL; (* Visual indicator light showing oxygen sparge valve status *)\nEND_VAR\nVAR\n    BIO_E_STOP_OK : BOOL; (* Emergency stop safe status *)\n    SPARGE_RUNTIME_ACCUM : TIME; (* Total accumulated runtime of oxygen sparge valve for maintenance tracking *)\nEND_VAR\n\n(* Safety chain - emergency stop status *)\nBIO_E_STOP_OK := BIO_E_STOP_NC;\n\n(* Operational logic - oxygen sparge control *)\nOXYGEN_SPARGE_VALVE := BIO_E_STOP_OK AND DO_SENSOR_HIGH;\n\n(* Operator feedback - status indicator *)\nOXYGEN_SPARGE_ACTIVE_LIGHT := OXYGEN_SPARGE_VALVE;\n\n(* Maintenance tracking - runtime accumulation *)\nIF OXYGEN_SPARGE_VALVE THEN\n    SPARGE_RUNTIME_ACCUM := SPARGE_RUNTIME_ACCUM + T#1s;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_69_variant_0_safety_functionality_maintenance_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Production Line A\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Thermal monitoring system with safety override and operational status indicator\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alarms with emergency stop safety override, while providing operator feedback on system operational status.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n- **KILN_MONITORING_ACTIVE**: BOOL - System operational status indicator (green lamp)\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_MONITORING_ACTIVE (Output, BOOL)\n\n## Control Logic Description\nThe system monitors thermal patterns using infrared cameras to detect refractory lining anomalies. When a thermal anomaly is detected AND the emergency stop system indicates safe operation, the maintenance alarm is activated. The KILN_MONITORING_ACTIVE output provides operator feedback by indicating when the monitoring system is operational and safe (mirroring the emergency stop status). The emergency stop button (normally-closed contact) provides fail-safe operation, where opening the circuit indicates an emergency condition that gates all outputs.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK\nKILN_MONITORING_ACTIVE := KILN_E_STOP_OK\nKILN_E_STOP_OK := KILN_E_STOP_NC\n\n## Safety Requirements\n- Emergency stop must override all functional outputs when activated\n- Normally-closed emergency stop contacts must be used for fail-safe operation\n- Safety status must be visually indicated to operators\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 1s |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance required | On/Off | 1s |\n| KILN_MONITORING_ACTIVE | BOOL | R/W | System operational | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=0, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=0, KILN_MONITORING_ACTIVE=1\n2. **Anomaly Detection**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=1 → MAINTENANCE_ALARM=1, KILN_MONITORING_ACTIVE=1\n3. **Emergency Stop**: THERMAL_ANOMALY=1, KILN_E_STOP_NC=0 → MAINTENANCE_ALARM=0, KILN_MONITORING_ACTIVE=0\n4. **System Status**: KILN_E_STOP_NC=1 → KILN_MONITORING_ACTIVE=1\n\n## Change Log\n- **KILN_MONITORING_ACTIVE**: BOOL / Purpose: Operator feedback indicator for system operational status / Compatibility: Direct mapping from safety status\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (2≥2, 2≥1, 1≥1)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK\n- **This Gen**: KILN_MONITORING_ACTIVE := KILN_E_STOP_OK\n- **Not Equivalent**: True (different outputs with different logic)\n\n**Domain Keywords**: kiln, refractory, thermal, monitoring, maintenance, safety, emergency stop",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\n    KILN_MONITORING_ACTIVE : BOOL; (* System operational status indicator (green lamp) *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\nEND_VAR\n\n(* Safety logic - emergency stop status calculation *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Main operational logic *)\nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK;\nKILN_MONITORING_ACTIVE := KILN_E_STOP_OK;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_1_safety_functionality_child2_2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-REACTOR-001\n- **Location**: Pharmaceutical Production Suite A\n- **Control Type**: Safety-Interlocked Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Bioprocessing\n- **Generation**: 2 (early)\n- **Branch**: safety\n- **Summary**: Bioreactor dissolved oxygen control with emergency stop safety interlock\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with master enable and emergency stop safety interlocks\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Optical dissolved oxygen probe detects levels below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch for bioreactor operation\n- **Fermenter_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Variable frequency drive activates agitator motor\n\n### Internals (CUMULATIVE)\n- **Fermenter_E_Stop_OK**: BOOL - Emergency stop status (TRUE when emergency stop is not activated)\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Fermenter_E_Stop_NC (Input, BOOL)\n- Fermenter_E_Stop_OK (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains dissolved oxygen levels by activating the agitator when oxygen drops below 40% saturation. All operational logic is gated by a comprehensive safety chain that includes both a master enable switch and an emergency stop button. The emergency stop takes absolute priority - when activated (contact opens), it immediately forces all outputs to safe state regardless of other conditions. A manual reset of the emergency stop is required to restore operation after activation.\n\n**Formal Logic Expression**: \nFermenter_E_Stop_OK := Fermenter_E_Stop_NC;\nAGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Emergency stop circuit must use fail-safe normally-closed contacts\n- Manual reset required after emergency stop activation\n- Safety status must be clearly indicated to operators\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_LOW | BOOL | R | Dissolved Oxygen Low | % sat | 100ms |\n| Fermenter_Enable | BOOL | R/W | Master Enable | On/Off | 100ms |\n| Fermenter_E_Stop_NC | BOOL | R | Emergency Stop Status | Safe/Tripped | 100ms |\n| Fermenter_E_Stop_OK | BOOL | R | Emergency Stop OK | OK/Fault | 100ms |\n| AGITATOR_ON | BOOL | R/W | Agitator Output | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: Fermenter_E_Stop_NC=TRUE, Fermenter_Enable=TRUE, DO_LOW=TRUE → AGITATOR_ON=TRUE\n2. **Emergency Stop Activation**: Fermenter_E_Stop_NC=FALSE → AGITATOR_ON=FALSE (regardless of other inputs)\n3. **Enable Off**: Fermenter_Enable=FALSE → AGITATOR_ON=FALSE\n4. **DO Normal**: DO_LOW=FALSE → AGITATOR_ON=FALSE\n\n## Change Log\n- **Fermenter_E_Stop_NC**: BOOL / Purpose: Emergency stop safety input / Compatibility: NC contact for fail-safe operation\n- **Fermenter_E_Stop_OK**: BOOL / Purpose: Emergency stop status indicator / Compatibility: Derived from NC input\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new item)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_Enable AND DO_LOW\n- **This Gen**: AGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW\n- **Not Equivalent**: TRUE (emergency stop adds critical safety override)\n\n**Domain Keywords**: bioreactor, pharmaceutical, fermentation, dissolved oxygen, emergency stop, safety interlock",
  "output": "PROGRAM BIO_REACTOR_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Optical dissolved oxygen probe detects levels below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch for bioreactor operation *)\n    Fermenter_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact, TRUE when safe) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Variable frequency drive activates agitator motor *)\nEND_VAR\nVAR\n    Fermenter_E_Stop_OK : BOOL; (* Emergency stop status (TRUE when emergency stop is not activated) *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nFermenter_E_Stop_OK := Fermenter_E_Stop_NC;\n\n(* Operational logic - agitator control *)\nAGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_69_variant_1_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-FEED-CTRL-01\n- **Location**: Raw Meal Preparation Area\n- **Control Type**: Safety-Enhanced Process Control\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: safety\n- **Summary**: Kiln feed composition control with emergency stop and safety reset functionality\n\n## Control Objective\nProvide emergency stop functionality with manual reset requirement to safely halt kiln feed composition adjustments while maintaining XRF signal loss detection and requiring deliberate operator action to resume operation\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **XRF_SIGNAL_LOST**: BOOL - Online XRF analyzer signal loss detection sensor\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_SAFETY_RESET_REQ**: BOOL - Safety reset request push-button (momentary contact)\n\n### Output Variables (CUMULATIVE)\n- **XRF_ANALYSIS_HOLD**: BOOL - Feed composition adjustment hold state actuator\n- **XRF_HOLD_STATUS_LIGHT**: BOOL - Visual status indicator for analysis hold state\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 3 (+1) | Outputs: 2 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_SAFETY_RESET_REQ (Input, BOOL)\n\n## Control Logic Description\nThe system maintains feed composition adjustment hold when either the XRF signal is lost or the emergency stop is activated. A new safety reset request input has been added that requires deliberate operator action to clear the safety hold state. The safety reset button must be pressed and held to resume normal operation after a safety condition has been cleared. Emergency stop activation takes absolute precedence over all other logic, and the reset requirement ensures operators must consciously acknowledge and clear safety conditions before resuming automated control.\n\n**Formal Logic Expression**: \nXRF_ANALYSIS_HOLD := (XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC) AND NOT KILN_SAFETY_RESET_REQ\n\n## Safety Requirements\n- Emergency stop must immediately halt all feed composition adjustments\n- Safety reset requires deliberate manual action to resume operation\n- Safety conditions must persist until explicitly cleared by operator\n- No filtering or delay permitted on safety chain signals\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| XRF_SIGNAL_LOST | BOOL | R | XRF Analyzer Signal Status | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency Stop Status | On/Off | 100ms |\n| KILN_SAFETY_RESET_REQ | BOOL | R/W | Safety Reset Request | On/Off | 100ms |\n| XRF_ANALYSIS_HOLD | BOOL | R | Analysis Hold State | On/Off | 100ms |\n| XRF_HOLD_STATUS_LIGHT | BOOL | R | Hold Status Indicator | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Emergency Stop Activation**: KILN_E_STOP_NC = FALSE → XRF_ANALYSIS_HOLD = TRUE, XRF_HOLD_STATUS_LIGHT = TRUE\n2. **XRF Signal Loss**: XRF_SIGNAL_LOST = TRUE → XRF_ANALYSIS_HOLD = TRUE, XRF_HOLD_STATUS_LIGHT = TRUE\n3. **Safety Reset Operation**: During hold state, KILN_SAFETY_RESET_REQ = TRUE → XRF_ANALYSIS_HOLD = FALSE, XRF_HOLD_STATUS_LIGHT = FALSE\n4. **Reset Without Clear Condition**: KILN_SAFETY_RESET_REQ = TRUE while safety condition still active → XRF_ANALYSIS_HOLD remains TRUE\n\n## Change Log\n- **KILN_SAFETY_RESET_REQ**: BOOL / Purpose: Manual safety reset request input / Compatibility: Added to existing safety logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 0\n- **SEP delta cap**: PASS (1 new input, 0 other additions)\n- **Non-decreasing**: PASS (inputs: 2→3, outputs: 2→2, internals: 0→0)\n\n## Core Logic Equations\n- **Parent**: XRF_ANALYSIS_HOLD := XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC\n- **This Gen**: XRF_ANALYSIS_HOLD := (XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC) AND NOT KILN_SAFETY_RESET_REQ\n- **Not Equivalent**: TRUE - New logic requires reset request to clear safety state\n\n**Domain Keywords**: kiln, XRF, composition, safety, reset, emergency stop, cement, raw meal",
  "output": "PROGRAM KILN_FEED_CTRL_01_Control\nVAR_INPUT\n    XRF_SIGNAL_LOST : BOOL; (* Online XRF analyzer signal loss detection sensor *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button (momentary contact) *)\nEND_VAR\nVAR_OUTPUT\n    XRF_ANALYSIS_HOLD : BOOL; (* Feed composition adjustment hold state actuator *)\n    XRF_HOLD_STATUS_LIGHT : BOOL; (* Visual status indicator for analysis hold state *)\nEND_VAR\n\nXRF_ANALYSIS_HOLD := (XRF_SIGNAL_LOST OR NOT KILN_E_STOP_NC) AND NOT KILN_SAFETY_RESET_REQ;\nXRF_HOLD_STATUS_LIGHT := XRF_ANALYSIS_HOLD;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_0_safety_functionality_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Discrete Logic Control\n- **Safety Level**: SIL 1\n- **Complexity**: Minimal\n- **Industrial_Category**: Process Control\n- **Generation**: 1 (early)\n- **Branch**: functionality\n- **Summary**: Basic kiln cooler fan control with master enable for temperature-based activation\n\n## Control Objective\nAutomatically activate grate cooler fan when clinker temperature exceeds threshold, with master enable control for operator intervention\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_COOLER_ENABLE**: BOOL - Master enable switch for kiln cooler system\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n\n### Internals (CUMULATIVE)\nNone\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 0 (+0)`\n\n### New Items This Gen (must respect SEP)\n- KILN_COOLER_ENABLE (Input, BOOL)\n\n## Control Logic Description\nThe cooling fan is activated when both the master enable switch is engaged and the infrared pyrometer detects high clinker temperature. The system provides a safety interlock requiring explicit operator enablement before automatic temperature-based control can occur.\n\n**Formal Logic Expression**: \nCOOLING_FAN := KILN_COOLER_ENABLE AND TEMPERATURE_HIGH\n\n## Safety Requirements\n- Output defaults OFF on signal loss or power-up\n- Master enable switch required for system operation\n- Emergency stop systems must override all functional logic\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detection | On/Off | 100ms |\n| KILN_COOLER_ENABLE | BOOL | R/W | Master enable for kiln cooler system | On/Off | 100ms |\n| COOLING_FAN | BOOL | R | Cooler fan status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Disabled System Test**: KILN_COOLER_ENABLE = FALSE, TEMPERATURE_HIGH = TRUE → COOLING_FAN = FALSE\n2. **Enabled Normal Operation**: KILN_COOLER_ENABLE = TRUE, TEMPERATURE_HIGH = TRUE → COOLING_FAN = TRUE\n3. **Enabled Cool Operation**: KILN_COOLER_ENABLE = TRUE, TEMPERATURE_HIGH = FALSE → COOLING_FAN = FALSE\n\n## Change Log\n- **KILN_COOLER_ENABLE**: BOOL / Purpose: Master enable control for kiln cooler system / Compatibility: Backward compatible with existing temperature logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 8/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 0\n- **SEP delta cap**: PASS (1 new variable)\n- **Non-decreasing**: PASS (2≥1, 1≥1, 0≥0)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := KILN_COOLER_ENABLE AND TEMPERATURE_HIGH\n- **Not Equivalent**: TRUE (new logic requires enable condition)\n\n**Domain Keywords**: kiln, cooler, cement, clinker, temperature, fan, enable",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_COOLER_ENABLE : BOOL; (* Master enable switch for kiln cooler system *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\nEND_VAR\n\nCOOLING_FAN := KILN_COOLER_ENABLE AND TEMPERATURE_HIGH;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_70_variant_5_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Alarm_Flood_Suppression_System\n- **Location**: Chemical_Processing_Plant_Main_Control\n- **Control Type**: Rule-based alarm management\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Safety & Alarm Management\n- **Generation**: 4 (mid)\n- **Branch**: performance\n- **Summary**: Dynamic alarm flood suppression with safety override and minimum activation duration to prevent rapid cycling\n\n## Control Objective\nImplement dynamic alarm flood suppression with contextual prioritization, safety override requiring manual reset after emergency stop, and minimum activation duration to prevent rapid cycling during borderline flood conditions.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **FLOOD_DETECTED**: BOOL - Alarm flood detection signal\n- **ALARM_SUPPRESSION_ENABLE**: BOOL - Master enable switch for suppression system\n- **E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **SAFETY_RESET_REQ**: BOOL - Safety reset request push-button (momentary)\n\n### Output Variables (CUMULATIVE)\n- **ALARM_SUPPRESSION**: BOOL - Enable signal for alarm suppression filtering\n\n### Internals (CUMULATIVE)\n- **SAFETY_LATCH**: SR - Safety latch function block to maintain trip state until reset\n- **SUPPRESSION_SETTLING_TIMER**: TON - Timer to ensure suppression remains active for minimum duration (2 seconds)\n\n### Counts Check\n`Inputs: 4 (+0) | Outputs: 1 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- SUPPRESSION_SETTLING_TIMER: Internal, TON\n\n## Control Logic Description\nThe system monitors for alarm flood conditions and enables suppression filtering when a flood is detected and suppression is enabled. Safety override via emergency stop immediately disables suppression and requires manual reset. A settling timer ensures that once suppression activates, it remains active for a minimum of 2 seconds to prevent rapid cycling during borderline flood detection conditions.\n\nThe suppression settling timer starts when suppression would normally activate. The timer's output is ORed with the flood detection signal, meaning suppression remains active for at least 2 seconds even if the flood detection signal becomes intermittent. All safety permissives (emergency stop status and safety latch) continue to gate the suppression output.\n\n**Formal Logic Expression**: \nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND (FLOOD_DETECTED OR SUPPRESSION_SETTLING_TIMER.Q))\n\n## Safety Requirements\n- Emergency stop must immediately disable alarm suppression regardless of other conditions\n- Manual reset required after emergency stop activation before suppression can be re-enabled\n- Safety permissives must gate all performance-related outputs\n- Minimum activation duration must not compromise safety override functionality\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| FLOOD_DETECTED | BOOL | R | Alarm flood detection status | On/Off | 100ms |\n| ALARM_SUPPRESSION_ENABLE | BOOL | R/W | Master suppression enable | On/Off | 100ms |\n| E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| SAFETY_RESET_REQ | BOOL | R/W | Safety reset request | On/Off | 100ms |\n| ALARM_SUPPRESSION | BOOL | R | Alarm suppression active | On/Off | 100ms |\n| SAFETY_LATCH.Q1 | BOOL | R | Safety latch status | On/Off | 100ms |\n| SUPPRESSION_SETTLING_TIMER.Q | BOOL | R | Settling timer status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Flood Suppression**: FLOOD_DETECTED=1, ALARM_SUPPRESSION_ENABLE=1, E_STOP_NC=1 → ALARM_SUPPRESSION=1 after 2-second minimum activation\n2. **Emergency Stop Override**: E_STOP_NC=0 during active suppression → ALARM_SUPPRESSION=0 immediately\n3. **Minimum Duration**: FLOOD_DETECTED pulses for 1 second → ALARM_SUPPRESSION remains active for full 2 seconds\n4. **Safety Reset Requirement**: After E_STOP_NC=0 then E_STOP_NC=1, SAFETY_RESET_REQ=0 → ALARM_SUPPRESSION remains 0 until manual reset\n\n## Change Log\n- **SUPPRESSION_SETTLING_TIMER**: TON / Purpose: Ensure minimum 2-second suppression duration to prevent rapid cycling / Compatibility: Maintains all existing safety functions\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 2\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (inputs:4→4, outputs:1→1, internals:1→2)\n\n## Core Logic Equations\n- **Parent**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED)\n- **This Gen**: ALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND (ALARM_SUPPRESSION_ENABLE AND (FLOOD_DETECTED OR SUPPRESSION_SETTLING_TIMER.Q))\n- **Not Equivalent**: The new equation includes timer hold functionality that extends suppression beyond immediate flood detection\n\n**Domain Keywords**: alarm flood, suppression, settling timer, chemical processing, safety override, EEMUA 191, ISA 18.2",
  "output": "PROGRAM Alarm_Flood_Suppression_System\nVAR_INPUT\n    FLOOD_DETECTED : BOOL; (* Alarm flood detection signal *)\n    ALARM_SUPPRESSION_ENABLE : BOOL; (* Master enable switch for suppression system *)\n    E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    SAFETY_RESET_REQ : BOOL; (* Safety reset request push-button (momentary) *)\nEND_VAR\nVAR_OUTPUT\n    ALARM_SUPPRESSION : BOOL; (* Enable signal for alarm suppression filtering *)\nEND_VAR\nVAR\n    SAFETY_LATCH : SR; (* Safety latch function block to maintain trip state until reset *)\n    SUPPRESSION_SETTLING_TIMER : TON; (* Timer to ensure suppression remains active for minimum duration (2 seconds) *)\nEND_VAR\n\n(* Safety chain logic - highest priority *)\nSAFETY_LATCH(S1 := NOT E_STOP_NC, R := SAFETY_RESET_REQ);\n\n(* Settling timer logic - starts when suppression would normally activate *)\nSUPPRESSION_SETTLING_TIMER(\n    IN := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND ALARM_SUPPRESSION_ENABLE AND FLOOD_DETECTED,\n    PT := T#2S\n);\n\n(* Main suppression logic with safety override and minimum duration *)\nALARM_SUPPRESSION := NOT SAFETY_LATCH.Q1 AND E_STOP_NC AND \n                    (ALARM_SUPPRESSION_ENABLE AND \n                    (FLOOD_DETECTED OR SUPPRESSION_SETTLING_TIMER.Q));\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_68_variant_5_functionality_safety_safety_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-7A\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Adaptive Setpoint\n- **Safety Level**: SIL 2\n- **Complexity**: Advanced\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 5 (late)\n- **Branch**: functionality\n- **Summary**: Cascading bioreactor control maintaining 30% dissolved oxygen with pH-triggered adaptive nutrient dosing to prevent metabolic imbalance during exponential growth phase\n\n## Control Objective\nImplement a three-tier cascading control system: primary dissolved oxygen control, secondary pH trend monitoring, and tertiary nutrient dosing adjustment to maintain optimal culture conditions and prevent stress responses during critical growth phase\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for system operation\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **pH_PROBE_VALUE**: REAL - Current pH measurement from bioreactor probe (6.0-8.0 range)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n- **Nutrient_Pump_Setpoint**: REAL - Setpoint command for nutrient peristaltic pump (0-100% flow rate)\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safe_To_Operate**: BOOL - Safety permissive indicating all safety conditions met\n- **Oxygen_Sparge_Min_On_Timer**: TON - Timer ensuring minimum 2-second valve on-time\n- **Agitator_Soft_Start_Timer**: TON - 30-second soft-start timer for gradual agitator ramp-up\n- **pH_Trend_High_Alarm**: BOOL - pH trending above optimal band (7.2) with hysteresis\n- **pH_Trend_Low_Alarm**: BOOL - pH trending below optimal band (6.8) with hysteresis\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+1) | Internals: 4 (+2)`\n\n### New Items This Gen (must respect SEP)\n- pH_PROBE_VALUE (Input, REAL)\n- Nutrient_Pump_Setpoint (Output, REAL) \n- pH_Trend_High_Alarm (Internal, BOOL)\n- pH_Trend_Low_Alarm (Internal, BOOL)\n\n## Control Logic Description\nThe system maintains primary dissolved oxygen control while monitoring pH trends for metabolic imbalance detection. pH values are monitored with hysteresis: pH_Trend_High_Alarm activates when pH exceeds 7.3 and deactivates when pH drops below 7.1. pH_Trend_Low_Alarm activates when pH falls below 6.7 and deactivates when pH rises above 6.9. When pH trends outside the optimal 6.8-7.2 band for sustained periods (indicating metabolic imbalance), the system calculates and adjusts the Nutrient_Pump_Setpoint to administer corrective nutrient boluses that address the root cause rather than just pH symptoms.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND Agitator_Soft_Start_Timer.Q\nNutrient_Pump_Setpoint := f(pH_PROBE_VALUE, pH_Trend_High_Alarm, pH_Trend_Low_Alarm, time_in_alarm)\n\n## Safety Requirements\n- Emergency stop immediately overrides all functional logic\n- Nutrient dosing only permitted when bioreactor is safe to operate\n- pH alarm conditions must persist for minimum 2 minutes before setpoint adjustment\n- Maximum nutrient flow rate limited to prevent culture shock\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| pH_PROBE_VALUE | REAL | R | Bioreactor pH measurement | pH | 1 sec |\n| Nutrient_Pump_Setpoint | REAL | R/W | Nutrient pump flow setpoint | % | 1 sec |\n| pH_Trend_High_Alarm | BOOL | R | pH above optimal band | On/Off | 1 sec |\n| pH_Trend_Low_Alarm | BOOL | R | pH below optimal band | On/Off | 1 sec |\n\n## Verification Requirements\n### Test Scenarios\n1. **pH Normal Operation**: pH = 7.0 → pH alarms inactive, nutrient setpoint unchanged\n2. **pH High Alarm**: pH = 7.4 → pH_Trend_High_Alarm active, nutrient setpoint decreased after 2 minutes\n3. **pH Low Alarm**: pH = 6.6 → pH_Trend_Low_Alarm active, nutrient setpoint increased after 2 minutes\n4. **Hysteresis Test**: pH drops from 7.0 to 6.6 → alarm at 6.7, clears at 6.9\n\n## Change Log\n- **pH_PROBE_VALUE**: REAL / Purpose: Continuous pH monitoring for metabolic trend analysis / Compatibility: New analog input\n- **Nutrient_Pump_Setpoint**: REAL / Purpose: Adaptive setpoint for corrective nutrient dosing / Compatibility: New analog output\n- **pH_Trend_High_Alarm**: BOOL / Purpose: Hysteresis-based high pH alarm / Compatibility: New internal flag\n- **pH_Trend_Low_Alarm**: BOOL / Purpose: Hysteresis-based low pH alarm / Compatibility: New internal flag\n\n## Self-check Summary\n- **Minimalism**: 8/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 input + 1 output + 2 internals = 4 total, within late phase limit)\n- **Non-decreasing**: PASS (all counts increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND Agitator_Soft_Start_Timer.Q\n- **This Gen**: Nutrient_Pump_Setpoint adjustment based on pH trend analysis with hysteresis\n- **Not Equivalent**: Parent controls binary valve, new addition controls analog setpoint based on different process variable\n\n**Domain Keywords**: bioreactor, pH monitoring, dissolved oxygen, nutrient dosing, cascade control, metabolic imbalance, hysteresis, setpoint adjustment",
  "output": "PROGRAM BIO_7A_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above 30% setpoint threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for system operation *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    pH_PROBE_VALUE : REAL; (* Current pH measurement from bioreactor probe (6.0-8.0 range) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\n    Nutrient_Pump_Setpoint : REAL; (* Setpoint command for nutrient peristaltic pump (0-100% flow rate) *)\nEND_VAR\nVAR\n    BioReactor_Safe_To_Operate : BOOL; (* Safety permissive indicating all safety conditions met *)\n    Oxygen_Sparge_Min_On_Timer : TON; (* Timer ensuring minimum 2-second valve on-time *)\n    Agitator_Soft_Start_Timer : TON; (* 30-second soft-start timer for gradual agitator ramp-up *)\n    pH_Trend_High_Alarm : BOOL; (* pH trending above optimal band (7.2) with hysteresis *)\n    pH_Trend_Low_Alarm : BOOL; (* pH trending below optimal band (6.8) with hysteresis *)\n    pH_High_Alarm_Timer : TON; (* 2-minute timer for sustained high pH alarm *)\n    pH_Low_Alarm_Timer : TON; (* 2-minute timer for sustained low pH alarm *)\n    Base_Nutrient_Setpoint : REAL := 50.0; (* Base nutrient setpoint percentage *)\nEND_VAR\n\n(* Safety chain - emergency stop normalization and safety permissive *)\nBioReactor_Safe_To_Operate := BioReactor_E_Stop_NC AND Bioreactor_Enable;\n\n(* pH trend monitoring with hysteresis *)\npH_Trend_High_Alarm := pH_PROBE_VALUE > 7.3;\nIF pH_PROBE_VALUE < 7.1 THEN\n    pH_Trend_High_Alarm := FALSE;\nEND_IF;\n\npH_Trend_Low_Alarm := pH_PROBE_VALUE < 6.7;\nIF pH_PROBE_VALUE > 6.9 THEN\n    pH_Trend_Low_Alarm := FALSE;\nEND_IF;\n\n(* Sustained alarm timers *)\npH_High_Alarm_Timer(IN := pH_Trend_High_Alarm, PT := T#2M);\npH_Low_Alarm_Timer(IN := pH_Trend_Low_Alarm, PT := T#2M);\n\n(* Nutrient pump setpoint calculation *)\nNutrient_Pump_Setpoint := Base_Nutrient_Setpoint;\nIF pH_High_Alarm_Timer.Q AND BioReactor_Safe_To_Operate THEN\n    (* Decrease setpoint for high pH condition *)\n    Nutrient_Pump_Setpoint := Base_Nutrient_Setpoint - 15.0;\n    (* Ensure minimum 10% flow rate *)\n    IF Nutrient_Pump_Setpoint < 10.0 THEN\n        Nutrient_Pump_Setpoint := 10.0;\n    END_IF;\nELSIF pH_Low_Alarm_Timer.Q AND BioReactor_Safe_To_Operate THEN\n    (* Increase setpoint for low pH condition *)\n    Nutrient_Pump_Setpoint := Base_Nutrient_Setpoint + 15.0;\n    (* Ensure maximum 85% flow rate to prevent culture shock *)\n    IF Nutrient_Pump_Setpoint > 85.0 THEN\n        Nutrient_Pump_Setpoint := 85.0;\n    END_IF;\nEND_IF;\n\n(* Oxygen sparge control with minimum on-time *)\nOxygen_Sparge_Min_On_Timer(IN := DO_SENSOR_HIGH, PT := T#2S);\nAgitator_Soft_Start_Timer(IN := BioReactor_Safe_To_Operate, PT := T#30S);\n\n(* Main oxygen control logic *)\nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND \n                      (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q) AND \n                      Agitator_Soft_Start_Timer.Q;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_0_functionality_safety_performance_contextual_complication_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-REACTOR-001\n- **Location**: Pharmaceutical Fermentation Suite B\n- **Control Type**: Cascade Control with Adaptive Optimization\n- **Safety Level**: SIL 2\n- **Complexity**: Advanced\n- **Industrial_Category**: Bioprocess Control\n- **Generation**: 6 (late)\n- **Branch**: functionality\n- **Summary**: Dissolved oxygen cascade control with hysteresis-based agitator activation to prevent rapid cycling during critical exponential growth phase\n\n## Control Objective\nMaintain dissolved oxygen above 40% saturation with safety interlocks, status monitoring, and hysteresis control to prevent rapid agitator cycling during oxygen demand fluctuations\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_LOW**: BOOL - Dissolved oxygen below 40% saturation\n- **Fermenter_Enable**: BOOL - Master enable switch\n- **Fermenter_E_Stop_NC**: BOOL - Emergency stop button (NC contact)\n- **Fermenter_Safety_Reset_Req**: BOOL - Safety reset request button\n- **DO_Percent**: REAL - Actual dissolved oxygen percentage (0-100% saturation)\n\n### Output Variables (CUMULATIVE)\n- **AGITATOR_ON**: BOOL - Activates agitator motor\n- **SCADA_Status_Word**: WORD - Packed status word for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **Fermenter_E_Stop_OK**: BOOL - Emergency stop status\n- **Soft_Start_Timer**: TON - Timer for 5-second soft-start ramp\n- **Soft_Start_Complete**: BOOL - Soft-start period complete flag\n- **Safety_Reset_Complete**: BOOL - Safety reset acknowledged flag\n- **DO_Hysteresis_Flag**: BOOL - Hysteresis state flag to prevent rapid cycling\n\n### Counts Check\n`Inputs: 5 (+1) | Outputs: 2 (+0) | Internals: 5 (+1)`\n\n### New Items This Gen (must respect SEP)\n- DO_Percent (Input, REAL) - Actual dissolved oxygen percentage\n- DO_Hysteresis_Flag (Internal, BOOL) - Hysteresis state flag\n\n## Control Logic Description\nThe system maintains dissolved oxygen control with hysteresis to prevent rapid agitator cycling. When DO_Percent drops below 38%, the DO_Hysteresis_Flag is set, and the agitator activates once all safety conditions are met. The agitator remains active until DO_Percent rises above 42%, at which point the DO_Hysteresis_Flag resets. This 4% hysteresis band prevents rapid cycling around the 40% threshold during oxygen demand fluctuations. The original DO_LOW input remains functional for backward compatibility but is now supplemented by the more precise DO_Percent measurement.\n\n**Formal Logic Expression**: \nDO_Hysteresis_Flag := (DO_Percent < 38.0) OR (DO_Hysteresis_Flag AND (DO_Percent < 42.0))\nAGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND (DO_LOW OR DO_Hysteresis_Flag) AND (Soft_Start_Timer.Q OR Soft_Start_Complete) AND Safety_Reset_Complete\n\n## Safety Requirements\n- Emergency stop immediately de-energizes agitator regardless of oxygen levels\n- Safety reset must be manually acknowledged before system restart\n- Hysteresis control must not override safety interlocks\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Percent | REAL | R | Dissolved Oxygen Percentage | % sat | 100ms |\n| DO_Hysteresis_Flag | BOOL | R | Hysteresis Active Flag | - | 100ms |\n| AGITATOR_ON | BOOL | R/W | Agitator Motor Status | - | 100ms |\n| SCADA_Status_Word | WORD | R | System Status Word | - | 500ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Hysteresis Activation**: DO_Percent drops to 37% → DO_Hysteresis_Flag activates, AGITATOR_ON energizes\n2. **Hysteresis Deactivation**: DO_Percent rises to 43% → DO_Hysteresis_Flag deactivates, AGITATOR_ON de-energizes\n3. **Hysteresis Band**: DO_Percent fluctuates between 39-41% → AGITATOR_ON state remains unchanged\n4. **Backward Compatibility**: DO_LOW signal active → AGITATOR_ON energizes regardless of DO_Percent value\n\n## Change Log\n- **DO_Percent**: REAL / Purpose: Precise dissolved oxygen measurement / Compatibility: Backward compatible with existing DO_LOW logic\n- **DO_Hysteresis_Flag**: BOOL / Purpose: Prevent rapid agitator cycling / Compatibility: Enhances existing control strategy\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 10/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 4, Outputs: 2, Internals: 4\n- **This gen totals**: Inputs: 5, Outputs: 2, Internals: 5\n- **SEP delta cap**: PASS (1 I/O + 1 internal)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: AGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND DO_LOW AND (Soft_Start_Timer.Q OR Soft_Start_Complete) AND Safety_Reset_Complete\n- **This Gen**: AGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND (DO_LOW OR DO_Hysteresis_Flag) AND (Soft_Start_Timer.Q OR Soft_Start_Complete) AND Safety_Reset_Complete\n- **Not Equivalent**: New logic incorporates hysteresis-based activation in addition to threshold-based activation\n\n**Domain Keywords**: dissolved oxygen, hysteresis, pharmaceutical fermentation, agitator control, oxygen uptake rate, exponential growth phase",
  "output": "PROGRAM BIO_REACTOR_001_Control\nVAR_INPUT\n    DO_LOW : BOOL; (* Dissolved oxygen below 40% saturation *)\n    Fermenter_Enable : BOOL; (* Master enable switch *)\n    Fermenter_E_Stop_NC : BOOL; (* Emergency stop button (NC contact) *)\n    Fermenter_Safety_Reset_Req : BOOL; (* Safety reset request button *)\n    DO_Percent : REAL; (* Actual dissolved oxygen percentage (0-100% saturation) *)\nEND_VAR\nVAR_OUTPUT\n    AGITATOR_ON : BOOL; (* Activates agitator motor *)\n    SCADA_Status_Word : WORD; (* Packed status word for SCADA monitoring *)\nEND_VAR\nVAR\n    Fermenter_E_Stop_OK : BOOL; (* Emergency stop status *)\n    Soft_Start_Timer : TON; (* Timer for 5-second soft-start ramp *)\n    Soft_Start_Complete : BOOL; (* Soft-start period complete flag *)\n    Safety_Reset_Complete : BOOL; (* Safety reset acknowledged flag *)\n    DO_Hysteresis_Flag : BOOL; (* Hysteresis state flag to prevent rapid cycling *)\nEND_VAR\n\n(* Safety chain - emergency stop processing *)\nFermenter_E_Stop_OK := Fermenter_E_Stop_NC;\n\n(* Safety reset logic *)\nIF Fermenter_Safety_Reset_Req AND Fermenter_E_Stop_OK THEN\n    Safety_Reset_Complete := TRUE;\nEND_IF;\n\n(* Soft start timer *)\nSoft_Start_Timer(IN := Fermenter_E_Stop_OK AND Fermenter_Enable AND Safety_Reset_Complete, PT := T#5S);\nIF Soft_Start_Timer.Q THEN\n    Soft_Start_Complete := TRUE;\nEND_IF;\n\n(* Hysteresis control logic *)\nDO_Hysteresis_Flag := (DO_Percent < 38.0) OR (DO_Hysteresis_Flag AND (DO_Percent < 42.0));\n\n(* Main agitator control logic *)\nAGITATOR_ON := Fermenter_E_Stop_OK AND Fermenter_Enable AND (DO_LOW OR DO_Hysteresis_Flag) AND (Soft_Start_Timer.Q OR Soft_Start_Complete) AND Safety_Reset_Complete;\n\n(* SCADA status word packing *)\nSCADA_Status_Word := 0;\nSCADA_Status_Word := SCADA_Status_Word OR (BOOL_TO_WORD(AGITATOR_ON) AND 16#0001);\nSCADA_Status_Word := SCADA_Status_Word OR (BOOL_TO_WORD(DO_Hysteresis_Flag) AND 16#0002);\nSCADA_Status_Word := SCADA_Status_Word OR (BOOL_TO_WORD(Fermenter_E_Stop_OK) AND 16#0004);\nSCADA_Status_Word := SCADA_Status_Word OR (BOOL_TO_WORD(Safety_Reset_Complete) AND 16#0008);\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen6_seed_69_variant_1_functionality_safety_contextual_complication_safety_interoperability_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-007\n- **Location**: Fermentation Suite B\n- **Control Type**: Cascade Control with Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 4 (mid)\n- **Branch**: maintenance\n- **Summary**: Bioreactor oxygen supplementation with emergency stop safety and valve runtime monitoring\n\n## Control Objective\nProvide supplemental oxygen when dissolved oxygen levels fall below minimum safety threshold with emergency stop capability, while monitoring oxygen valve runtime for predictive maintenance.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_Low_Alarm**: BOOL - Dissolved oxygen level below minimum safety threshold\n- **BioReactor_Enable**: BOOL - Master enable switch for bioreactor oxygen control\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **Oxygen_Valve**: BOOL - Supplemental oxygen supply valve control\n- **BioReactor_Oxygen_Active_Status**: BOOL - Status indicator for SCADA monitoring\n\n### Internals (CUMULATIVE)\n- **BioReactor_E_Stop_OK**: BOOL - Emergency stop permissive status\n- **Oxygen_Valve_Runtime**: TIME - Total accumulated runtime of oxygen valve\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Oxygen_Valve_Runtime (Internal, TIME)\n\n## Control Logic Description\nThe system monitors dissolved oxygen levels and activates supplemental oxygen when levels fall below the safety threshold, provided the bioreactor is enabled and no emergency stop is active. The emergency stop takes absolute precedence over all other controls. The oxygen valve active status is mirrored to the SCADA system for operator visibility. Additionally, the system accumulates the total runtime of the oxygen valve by incrementing a TIME accumulator by one second for every second the valve remains active, providing maintenance personnel with data for predictive maintenance scheduling.\n\n**Formal Logic Expression**: \nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK\nBioReactor_E_Stop_OK := BioReactor_E_Stop_NC\nOxygen_Valve_Runtime := Oxygen_Valve_Runtime + TIME#1s (when Oxygen_Valve is TRUE)\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all control functions\n- Maintenance monitoring must not interfere with primary safety functions\n- Valve runtime data is for informational purposes only and must not affect control logic\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_Low_Alarm | BOOL | R | Dissolved oxygen low alarm | On/Off | 1s |\n| BioReactor_Enable | BOOL | R/W | Bioreactor enable switch | On/Off | 1s |\n| BioReactor_E_Stop_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| Oxygen_Valve | BOOL | R | Oxygen valve status | On/Off | 1s |\n| BioReactor_Oxygen_Active_Status | BOOL | R | Oxygen system active | On/Off | 1s |\n| Oxygen_Valve_Runtime | TIME | R | Valve accumulated runtime | HH:MM:SS | 10s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: BioReactor_Enable=1, DO_Low_Alarm=1, BioReactor_E_Stop_NC=1 → Oxygen_Valve=1, Oxygen_Valve_Runtime increments\n2. **Emergency Stop**: BioReactor_E_Stop_NC=0 → Oxygen_Valve=0, Oxygen_Valve_Runtime stops incrementing\n3. **Disabled System**: BioReactor_Enable=0 → Oxygen_Valve=0, Oxygen_Valve_Runtime unchanged\n4. **Adequate Oxygen**: DO_Low_Alarm=0 → Oxygen_Valve=0, Oxygen_Valve_Runtime unchanged\n\n## Change Log\n- **Oxygen_Valve_Runtime**: TIME / Purpose: Track oxygen valve operational hours for predictive maintenance / Compatibility: Non-intrusive addition, does not affect control logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK\n- **This Gen**: Oxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK; Oxygen_Valve_Runtime := Oxygen_Valve_Runtime + TIME#1s (when Oxygen_Valve active)\n- **Not Equivalent**: True (runtime accumulation is new functionality)\n\n**Domain Keywords**: bioreactor, oxygen transfer rate, fermentation, pharmaceutical, predictive maintenance, valve runtime",
  "output": "PROGRAM BIO_007_Control\nVAR_INPUT\n    DO_Low_Alarm : BOOL; (* Dissolved oxygen level below minimum safety threshold *)\n    BioReactor_Enable : BOOL; (* Master enable switch for bioreactor oxygen control *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    Oxygen_Valve : BOOL; (* Supplemental oxygen supply valve control *)\n    BioReactor_Oxygen_Active_Status : BOOL; (* Status indicator for SCADA monitoring *)\nEND_VAR\nVAR\n    BioReactor_E_Stop_OK : BOOL; (* Emergency stop permissive status *)\n    Oxygen_Valve_Runtime : TIME; (* Total accumulated runtime of oxygen valve *)\nEND_VAR\n\n(* Safety chain - emergency stop permissive *)\nBioReactor_E_Stop_OK := BioReactor_E_Stop_NC;\n\n(* Main control logic *)\nOxygen_Valve := BioReactor_Enable AND DO_Low_Alarm AND BioReactor_E_Stop_OK;\n\n(* Mirror valve status to SCADA *)\nBioReactor_Oxygen_Active_Status := Oxygen_Valve;\n\n(* Maintenance monitoring - accumulate valve runtime *)\nIF Oxygen_Valve THEN\n    Oxygen_Valve_Runtime := Oxygen_Valve_Runtime + TIME#1S;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen4_seed_69_variant_6_functionality_interoperability_safety_maintenance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Plant_Alarm_System\n- **Location**: Control_Room_Main_Panel\n- **Control Type**: Alarm Management with Dynamic Filtering\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 3 (mid)\n- **Branch**: performance\n- **Summary**: Dynamic alarm filtering system with emergency stop override and input debouncing to prevent false alarms during process upsets\n\n## Control Objective\nImplement intelligent alarm filtering that suppresses non-critical alarms based on plant operational state while preventing false alarms through input debouncing\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **Plant_State_Normal**: BOOL - Indicates plant is in normal operating state\n- **Plant_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact, TRUE when safe)\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\n- **Alarm_Debounce_Timer**: TON - Timer instance for debouncing alarm input signals (500ms preset)\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Alarm_Debounce_Timer (Internal, TON)\n\n## Control Logic Description\nThe system implements a 500ms debounce filter on the Alarm_Active input using a TON timer. The timer starts when Alarm_Active becomes TRUE and must remain TRUE for 500ms continuously before the debounced alarm signal is considered valid. This filtered alarm signal is then combined with the plant state and emergency stop status to determine if the alarm should be displayed to the operator. The emergency stop maintains absolute priority and will immediately suppress all alarm displays regardless of other conditions.\n\n**Formal Logic Expression**: \nAlarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all operational logic\n- Debounce filtering must not affect safety-critical emergency stop functionality\n- All alarm suppression logic must be bypassed during emergency conditions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Raw alarm input signal | On/Off | 100ms |\n| Plant_State_Normal | BOOL | R | Normal operation state indicator | On/Off | 1s |\n| Plant_E_Stop_NC | BOOL | R | Emergency stop status (safe when TRUE) | On/Off | 100ms |\n| Alarm_Display | BOOL | R | Filtered alarm display output | On/Off | 100ms |\n| Alarm_Debounce_Timer.ET | TIME | R | Elapsed debounce time | ms | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Alarm Display**: Alarm_Active TRUE for >500ms, Plant_State_Normal TRUE, Plant_E_Stop_NC TRUE → Alarm_Display TRUE\n2. **Short Alarm Pulse**: Alarm_Active TRUE for <500ms → Alarm_Display remains FALSE\n3. **Emergency Stop Override**: Any alarm condition with Plant_E_Stop_NC FALSE → Alarm_Display FALSE\n4. **Non-Normal State**: Alarm condition during non-normal plant state → Alarm_Display FALSE\n\n## Change Log\n- **Alarm_Debounce_Timer**: TON / Purpose: Filter out brief alarm signal glitches / Compatibility: Maintains all existing functionality while adding noise immunity\n\n## Self-check Summary\n- **Minimalism**: 9/10 - Single TON addition for essential filtering\n- **Measurability**: 8/10 - Debounce time configurable and observable\n- **Safety-Preservation**: 10/10 - Safety logic completely unchanged\n- **Determinism**: 9/10 - Clear timing behavior with no side effects\n- **SEP-Compliance**: 10/10 - Only one new internal variable (TON)\n- **ST-Coverage**: 8/10 - Introduces TON timer functionality\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (inputs: 3→3, outputs: 1→1, internals: 0→1)\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := Plant_E_Stop_NC AND Alarm_Active AND Plant_State_Normal\n- **This Gen**: Alarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal\n- **Not Equivalent**: The new logic requires sustained alarm activation (500ms) vs immediate response\n\n**Domain Keywords**: [alarm management, debouncing, process control, emergency stop, filtering]",
  "output": "PROGRAM Chemical_Plant_Alarm_System\nVAR_INPUT\n    Alarm_Active : BOOL; (* Raw alarm input signal *)\n    Plant_State_Normal : BOOL; (* Normal operation state indicator *)\n    Plant_E_Stop_NC : BOOL; (* Emergency stop status (safe when TRUE) *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Filtered alarm display output *)\nEND_VAR\nVAR\n    Alarm_Debounce_Timer : TON; (* Timer instance for debouncing alarm input signals (500ms preset) *)\nEND_VAR\n\n(* Safety logic - emergency stop takes absolute precedence *)\n(* Debounce timer logic *)\nAlarm_Debounce_Timer(IN := Alarm_Active, PT := T#500MS);\n\n(* Main alarm display logic with filtering *)\nAlarm_Display := Plant_E_Stop_NC AND Alarm_Debounce_Timer.Q AND Plant_State_Normal;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_68_variant_6_contextual_complication_safety_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Plant Kiln Line 1\n- **Control Type**: Safety-Enhanced Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Safety\n- **Generation**: 1 (early)\n- **Branch**: safety\n- **Summary**: Thermal anomaly detection with emergency stop safety override for kiln refractory monitoring\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining and trigger maintenance alarms while ensuring immediate shutdown capability via emergency stop for operator safety\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact) for kiln area safety\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n\n### Counts Check\n`Inputs: 2 (+1) | Outputs: 1 (+0) | Internals: 1 (+1)`\n\n### New Items This Gen (must respect SEP)\n- (Input, BOOL) KILN_E_STOP_NC\n- (Internal, BOOL) KILN_E_STOP_OK\n\n## Control Logic Description\nThe system monitors thermal imaging inputs for abnormal patterns indicating refractory wear. When a thermal anomaly is detected, the maintenance alarm is activated only if the emergency stop system indicates safe operating conditions. The emergency stop button uses normally-closed contacts for fail-safe operation, where the input is TRUE when the emergency stop is not activated (safe condition). The KILN_E_STOP_OK internal variable directly reflects the emergency stop status for use in safety gating logic.\n\n**Formal Logic Expression**: \nKILN_E_STOP_OK := KILN_E_STOP_NC;\nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK;\n\n## Safety Requirements\n- Emergency stop must take absolute precedence over all functional logic\n- Safety permissives shall gate all operational outputs\n- Emergency stop circuit must use normally-closed contacts for fail-safe operation\n- No filtering or delay permitted on safety signal propagation\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status (NC) | On/Off | 50ms |\n| KILN_E_STOP_OK | BOOL | R | Safe to operate status | On/Off | 50ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alarm output | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY = FALSE, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = FALSE\n2. **Anomaly Detection**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = TRUE\n3. **Emergency Stop Active**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE\n4. **Emergency Stop Safe**: THERMAL_ANOMALY = FALSE, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = FALSE\n\n## Change Log\n- **KILN_E_STOP_NC**: BOOL / Purpose: Emergency stop input with NC contacts for fail-safe operation / Compatibility: Direct replacement for any NO emergency stop with external inversion\n- **KILN_E_STOP_OK**: BOOL / Purpose: Safety permissive derived from emergency stop status / Compatibility: Normalized safety signal for gating logic\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 1, Outputs: 1, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **SEP delta cap**: PASS\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY\n- **This Gen**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK\n- **Not Equivalent**: TRUE - Safety permissive changes output behavior during emergency stop conditions\n\n**Domain Keywords**: kiln, refractory, thermal, emergency stop, safety, maintenance, monitoring",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) for kiln area safety *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\nEND_VAR\n\n(* Safety logic - emergency stop status calculation *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Operational logic - maintenance alarm gated by safety permissive *)\nMAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen1_seed_70_variant_1_safety_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-REF-01\n- **Location**: Cement Plant Kiln Line 1\n- **Control Type**: Predictive Maintenance Monitoring\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Monitoring\n- **Generation**: 3 (mid)\n- **Branch**: performance\n- **Summary**: Thermal anomaly detection with debounce filtering to prevent false maintenance alerts while maintaining emergency stop safety override\n\n## Control Objective\nDetect sustained thermal anomalies in kiln refractory lining and trigger maintenance alerts with emergency stop override protection, while filtering transient thermal glitches to reduce false alarms.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (NC contact) status\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator and alert system\n- **KILN_ALARM_LIGHT**: BOOL - Visual status light indicating active alarm condition\n\n### Internals (CUMULATIVE)\n- **THERMAL_DEBOUNCE_TIMER**: TON - Timer for debouncing thermal anomaly detection (500ms preset)\n- **THERMAL_DEBOUNCE_DONE**: BOOL - Flag indicating sustained thermal anomaly\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 2 (+2)`\n\n### New Items This Gen (must respect SEP)\n- THERMAL_DEBOUNCE_TIMER (Internal, TON)\n- THERMAL_DEBOUNCE_DONE (Internal, BOOL)\n\n## Control Logic Description\nThe system monitors thermal imaging input for abnormal patterns indicating refractory wear. A 500ms debounce timer filters transient thermal glitches to prevent false maintenance alerts. When a sustained thermal anomaly is detected and the emergency stop is not activated, both maintenance alarm and visual indicator are activated. Emergency stop immediately overrides all functional logic for safety.\n\n**Formal Logic Expression**: \nTHERMAL_DEBOUNCE_DONE := THERMAL_DEBOUNCE_TIMER.Q\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE\nKILN_ALARM_LIGHT := MAINTENANCE_ALARM\n\n## Safety Requirements\n- Emergency stop must immediately override all functional logic\n- Debounce filtering must not delay emergency stop response\n- Thermal monitoring must not interfere with safety-critical functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Thermal anomaly detection status | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 50ms |\n| MAINTENANCE_ALARM | BOOL | R/W | Maintenance alert status | On/Off | 100ms |\n| KILN_ALARM_LIGHT | BOOL | R/W | Visual alarm indicator | On/Off | 100ms |\n| THERMAL_DEBOUNCE_DONE | BOOL | R | Sustained anomaly status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Valid Thermal Anomaly**: THERMAL_ANOMALY = TRUE for >500ms, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = TRUE, KILN_ALARM_LIGHT = TRUE\n2. **Transient Thermal Glitch**: THERMAL_ANOMALY = TRUE for <500ms, KILN_E_STOP_NC = TRUE → MAINTENANCE_ALARM = FALSE, KILN_ALARM_LIGHT = FALSE\n3. **Emergency Stop Override**: THERMAL_ANOMALY = TRUE, KILN_E_STOP_NC = FALSE → MAINTENANCE_ALARM = FALSE, KILN_ALARM_LIGHT = FALSE\n\n## Change Log\n- **THERMAL_DEBOUNCE_TIMER**: TON / Purpose: Filter transient thermal anomalies / Compatibility: Maintains existing safety interface\n- **THERMAL_DEBOUNCE_DONE**: BOOL / Purpose: Indicate sustained thermal anomaly / Compatibility: Adds debounce without affecting safety\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 0\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (2 new internals ≤ SEP limit)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_ANOMALY\n- **This Gen**: MAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE\n- **Not Equivalent**: True - new logic requires sustained anomaly\n\n**Domain Keywords**: [kiln, refractory, thermal, monitoring, debounce, maintenance, alarm]",
  "output": "PROGRAM KILN_REF_01_Control\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (NC contact) status *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator and alert system *)\n    KILN_ALARM_LIGHT : BOOL; (* Visual status light indicating active alarm condition *)\nEND_VAR\nVAR\n    THERMAL_DEBOUNCE_TIMER : TON; (* Timer for debouncing thermal anomaly detection (500ms preset) *)\n    THERMAL_DEBOUNCE_DONE : BOOL; (* Flag indicating sustained thermal anomaly *)\nEND_VAR\n\n(* Safety-critical emergency stop monitoring *)\n(* Debounce timer for thermal anomaly filtering *)\nTHERMAL_DEBOUNCE_TIMER(IN := THERMAL_ANOMALY, PT := T#500MS);\n\n(* Sustained thermal anomaly detection *)\nTHERMAL_DEBOUNCE_DONE := THERMAL_DEBOUNCE_TIMER.Q;\n\n(* Maintenance alarm logic with emergency stop override *)\nMAINTENANCE_ALARM := KILN_E_STOP_NC AND THERMAL_DEBOUNCE_DONE;\n\n(* Visual alarm indicator follows maintenance alarm status *)\nKILN_ALARM_LIGHT := MAINTENANCE_ALARM;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_1_safety_functionality_performance_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Chemical_Process_Unit_A\n- **Location**: Control_Room_Panel_12\n- **Control Type**: Alarm Management System\n- **Safety Level**: SIL 1\n- **Complexity**: Intermediate\n- **Industrial_Category**: Process Control\n- **Generation**: 5 (late)\n- **Branch**: functionality\n- **Summary**: Context-aware alarm suppression system that dynamically filters alarms based on plant operational state to prevent alarm floods during process transients\n\n## Control Objective\nImplement intelligent alarm filtering that suppresses lower-priority alarms during plant startup, emergency shutdown, and other transient conditions while maintaining critical alarm visibility to operators\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **Alarm_Active**: BOOL - Alarm activation signal from process sensor\n- **E_STOP_PROCESS_AREA_NC**: BOOL - Emergency stop button status (NC contact)\n- **CONTROL_ROOM_DOOR_NC**: BOOL - Control room safety door interlock status (NC contact)\n- **Plant_Operational_State**: ENUM(NORMAL_OPERATION, PLANT_STARTUP, EMERGENCY_SHUTDOWN, POWER_FAILURE) - Current plant operational state from main control system\n\n### Output Variables (CUMULATIVE)\n- **Alarm_Display**: BOOL - Alarm indicator light on operator console\n\n### Internals (CUMULATIVE)\n- **Alarm_Display_Runtime**: TIME - Total accumulated time alarm display has been active\n- **TON_Alarm_Ramp**: TON - Timer for alarm display soft-start ramp period\n- **Alarm_Suppression_Active**: BOOL - Internal flag indicating if current alarm should be suppressed based on plant state\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 1 (+0) | Internals: 3 (+1)`\n\n### New Items This Gen (must respect SEP)\n- Plant_Operational_State (Input, ENUM)\n- Alarm_Suppression_Active (Internal, BOOL)\n\n## Control Logic Description\nThe system now incorporates plant operational state awareness to dynamically suppress alarms that are not relevant during specific plant conditions. During normal operation, all alarms are displayed normally. During plant startup, alarms from equipment not yet in service are suppressed. During emergency shutdown, alarms that are direct consequences of the shutdown are suppressed to focus operator attention on root causes. During power failure, only critical power-related alarms are displayed.\n\nThe Alarm_Suppression_Active flag is set based on the current plant state and the type of alarm (implementation note: future enhancements would include alarm classification mapping). The alarm display logic now includes this suppression flag in the activation condition.\n\n**Formal Logic Expression**: \nAlarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND (Alarm_Active AND TON_Alarm_Ramp.Q AND NOT Alarm_Suppression_Active)\n\n## Safety Requirements\n- Emergency stop and door interlock must immediately override all alarm display functionality\n- Critical safety alarms must never be suppressed regardless of plant operational state\n- Alarm suppression logic must be fail-safe and default to displaying alarms if state information is lost\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| Alarm_Active | BOOL | R | Alarm activation status | On/Off | 100ms |\n| E_STOP_PROCESS_AREA_NC | BOOL | R | E-stop status | NC/Open | 100ms |\n| CONTROL_ROOM_DOOR_NC | BOOL | R | Door interlock status | NC/Open | 100ms |\n| Plant_Operational_State | ENUM | R/W | Plant operational state | State | 1s |\n| Alarm_Display | BOOL | R | Alarm display status | On/Off | 100ms |\n| Alarm_Suppression_Active | BOOL | R | Alarm suppression status | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation Alarm**: Plant_Operational_State = NORMAL_OPERATION, Alarm_Active = TRUE → Alarm_Display = TRUE\n2. **Startup State Suppression**: Plant_Operational_State = PLANT_STARTUP, Alarm_Active = TRUE → Alarm_Suppression_Active = TRUE, Alarm_Display = FALSE\n3. **Emergency Stop Override**: E_STOP_PROCESS_AREA_NC = FALSE → Alarm_Display = FALSE regardless of other conditions\n4. **State Transition**: Plant_Operational_State changes from NORMAL_OPERATION to EMERGENCY_SHUTDOWN during active alarm → Alarm_Display transitions based on new state\n\n## Change Log\n- **Plant_Operational_State**: ENUM / Purpose: Receive plant state information for context-aware alarm suppression / Compatibility: Backward compatible, defaults to NORMAL_OPERATION if not configured\n- **Alarm_Suppression_Active**: BOOL / Purpose: Internal flag for state-dependent alarm suppression logic / Compatibility: New internal variable\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 9/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 2\n- **This gen totals**: Inputs: 4, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (1 input + 1 internal)\n- **Non-decreasing**: PASS\n\n## Core Logic Equations\n- **Parent**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND (Alarm_Active AND TON_Alarm_Ramp.Q)\n- **This Gen**: Alarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND (Alarm_Active AND TON_Alarm_Ramp.Q AND NOT Alarm_Suppression_Active)\n- **Not Equivalent**: New logic includes state-dependent suppression term\n\n**Domain Keywords**: [alarm management, flood suppression, context-aware, operational state, chemical process, dynamic filtering]",
  "output": "PROGRAM Chemical_Process_Unit_A_Control\nVAR_INPUT\n    Alarm_Active : BOOL; (* Alarm activation signal from process sensor *)\n    E_STOP_PROCESS_AREA_NC : BOOL; (* Emergency stop button status (NC contact) *)\n    CONTROL_ROOM_DOOR_NC : BOOL; (* Control room safety door interlock status (NC contact) *)\n    Plant_Operational_State : (NORMAL_OPERATION, PLANT_STARTUP, EMERGENCY_SHUTDOWN, POWER_FAILURE); (* Current plant operational state from main control system *)\nEND_VAR\nVAR_OUTPUT\n    Alarm_Display : BOOL; (* Alarm indicator light on operator console *)\nEND_VAR\nVAR\n    Alarm_Display_Runtime : TIME; (* Total accumulated time alarm display has been active *)\n    TON_Alarm_Ramp : TON; (* Timer for alarm display soft-start ramp period *)\n    Alarm_Suppression_Active : BOOL; (* Internal flag indicating if current alarm should be suppressed based on plant state *)\nEND_VAR\n\n(* Safety chain evaluation - emergency stop and door interlock must override all *)\n(* Alarm suppression logic based on plant operational state *)\nCASE Plant_Operational_State OF\n    NORMAL_OPERATION:\n        Alarm_Suppression_Active := FALSE;\n    PLANT_STARTUP:\n        Alarm_Suppression_Active := TRUE;\n    EMERGENCY_SHUTDOWN:\n        Alarm_Suppression_Active := TRUE;\n    POWER_FAILURE:\n        Alarm_Suppression_Active := TRUE;\nEND_CASE;\n\n(* Timer for alarm display ramp period *)\nTON_Alarm_Ramp(IN := Alarm_Active, PT := T#2S);\n\n(* Main alarm display logic with safety overrides and state-dependent suppression *)\nAlarm_Display := E_STOP_PROCESS_AREA_NC AND CONTROL_ROOM_DOOR_NC AND (Alarm_Active AND TON_Alarm_Ramp.Q AND NOT Alarm_Suppression_Active);\n\n(* Accumulate alarm display runtime *)\nIF Alarm_Display THEN\n    Alarm_Display_Runtime := Alarm_Display_Runtime + T#100MS;\nEND_IF;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_68_variant_6_safety_safety_maintenance_contextual_complication_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Discrete Control with Safety Interlock\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Process Control\n- **Generation**: 2 (early)\n- **Branch**: functionality\n- **Summary**: Controls grate cooler fan based on clinker temperature with emergency stop and operator status light\n\n## Control Objective\nActivate cooling fan when clinker temperature exceeds threshold with emergency stop override and provide operator visual feedback\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL - Visual indicator showing fan running status\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+1) | Internals: 1 (+0)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_FAN_RUNNING_LIGHT (Output, BOOL)\n\n## Control Logic Description\nThe control system monitors clinker temperature using infrared pyrometers. When high temperature is detected, the cooling fan is activated to optimize the quenching process. An emergency stop button provides immediate shutdown capability with highest priority. A running light indicator mirrors the fan status to provide visual feedback to operators, confirming when the cooling system is active.\n\n**Formal Logic Expression**: \nKILN_E_STOP_OK := KILN_E_STOP_NC\nCOOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety permissive status must be derived directly from emergency stop input\n- All safety-critical inputs must use fail-safe (normally-closed) contacts\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High clinker temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Cooling fan control | On/Off | 100ms |\n| COOLER_FAN_RUNNING_LIGHT | BOOL | R | Fan running status indicator | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH = TRUE, KILN_E_STOP_NC = TRUE → COOLING_FAN = TRUE, COOLER_FAN_RUNNING_LIGHT = TRUE\n2. **Emergency Stop**: TEMPERATURE_HIGH = TRUE, KILN_E_STOP_NC = FALSE → COOLING_FAN = FALSE, COOLER_FAN_RUNNING_LIGHT = FALSE\n3. **Low Temperature**: TEMPERATURE_HIGH = FALSE, KILN_E_STOP_NC = TRUE → COOLING_FAN = FALSE, COOLER_FAN_RUNNING_LIGHT = FALSE\n\n## Change Log\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL / Purpose: Visual status indicator for operator feedback / Compatibility: Direct mirror of COOLING_FAN output\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 10/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **SEP delta cap**: PASS (1 new output)\n- **Non-decreasing**: PASS (inputs: 2→2, outputs: 1→2, internals: 1→1)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH\n- **This Gen**: COOLER_FAN_RUNNING_LIGHT := COOLING_FAN\n- **Not Equivalent**: Status indicator vs functional control output\n\n**Domain Keywords**: cement, kiln, cooler, clinker, temperature, fan, emergency stop, status light",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\n    COOLER_FAN_RUNNING_LIGHT : BOOL; (* Visual indicator showing fan running status *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\nEND_VAR\n\n(* Safety logic - highest priority *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Operational logic *)\nCOOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH;\n\n(* Status indicator logic *)\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen2_seed_70_variant_5_safety_functionality_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Kiln_Cooler_System_01\n- **Location**: Cement_Plant_Cooler_Area\n- **Control Type**: Process Optimization\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: performance\n- **Summary**: Cement kiln cooler control with temperature-based fan activation, emergency stop safety, and minimum run time settling to prevent rapid cycling\n\n## Control Objective\nOptimize clinker cooling process by activating grate cooler fan when temperature exceeds threshold while preventing rapid cycling that could cause thermal stress and energy inefficiency\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature (> target threshold)\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL - Visual indicator showing fan running status\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **COOLER_FAN_SETTLING_TIMER**: TON - Timer ensuring minimum fan run time to prevent rapid cycling\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- COOLER_FAN_SETTLING_TIMER (Internal, TON)\n\n## Control Logic Description\nThe system monitors clinker temperature and activates the cooling fan when temperature exceeds the threshold, provided the emergency stop is not activated. A settling timer ensures the fan runs for a minimum duration (30 seconds) once activated to prevent rapid cycling that could cause thermal stress to equipment and energy inefficiency. The running light provides visual feedback to operators.\n\n**Formal Logic Expression**: \nKILN_E_STOP_OK := KILN_E_STOP_NC\nCOOLER_FAN_SETTLING_TIMER(IN:=COOLING_FAN, PT:=T#30s)\nCOOLING_FAN := (KILN_E_STOP_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q\n\n## Safety Requirements\n- Emergency stop must override all functional logic (highest priority)\n- Minimum run time logic must not override emergency stop function\n- Temperature monitoring must be fail-safe\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | High temperature detected | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Fan control output | On/Off | 100ms |\n| COOLER_FAN_RUNNING_LIGHT | BOOL | R | Fan running indicator | On/Off | 100ms |\n| COOLER_FAN_SETTLING_TIMER.ET | TIME | R | Remaining settling time | Seconds | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=1 → COOLING_FAN=1 after 30s settling period\n2. **Emergency Stop**: KILN_E_STOP_NC=0 → COOLING_FAN=0 (immediate, overrides settling timer)\n3. **Settling Timer**: TEMPERATURE_HIGH transitions 1→0 during settling period → COOLING_FAN remains 1 until timer completes\n4. **Rapid Cycling Prevention**: Multiple TEMPERATURE_HIGH pulses within 30s → COOLING_FAN remains continuously active\n\n## Change Log\n- **COOLER_FAN_SETTLING_TIMER**: TON / Purpose: Prevent rapid fan cycling that causes thermal stress and energy waste / Compatibility: Maintains all existing safety functions\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 new internal)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := (KILN_E_STOP_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q\n- **Not Equivalent**: The new logic includes an OR condition that extends fan operation beyond the temperature condition\n\n**Domain Keywords**: cement, kiln, cooler, clinker, temperature, fan, settling, energy efficiency, thermal stress",
  "output": "PROGRAM Kiln_Cooler_System_01\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature (> target threshold) *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\n    COOLER_FAN_RUNNING_LIGHT : BOOL; (* Visual indicator showing fan running status *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    COOLER_FAN_SETTLING_TIMER : TON; (* Timer ensuring minimum fan run time to prevent rapid cycling *)\nEND_VAR\n\n(* Safety chain - emergency stop permissive *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Settling timer for minimum fan run time *)\nCOOLER_FAN_SETTLING_TIMER(IN := COOLING_FAN, PT := T#30s);\n\n(* Main control logic with safety override *)\nCOOLING_FAN := (KILN_E_STOP_OK AND TEMPERATURE_HIGH) OR COOLER_FAN_SETTLING_TIMER.Q;\n\n(* Running light indicator *)\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_5_safety_functionality_performance_child1",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: KILN-COOLER-01\n- **Location**: Cement Plant Kiln Back-End\n- **Control Type**: Process Optimization\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: performance\n- **Summary**: Debounced temperature monitoring for cooler fan control with emergency stop override\n\n## Control Objective\nOptimize clinker cooling process by activating grate cooler fans when debounced high temperature is detected, while maintaining emergency stop safety override and operator visual feedback.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **TEMPERATURE_HIGH**: BOOL - Infrared pyrometer detects high clinker temperature\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n\n### Output Variables (CUMULATIVE)\n- **COOLING_FAN**: BOOL - Grate cooler fan motor contactor control\n- **COOLER_FAN_RUNNING_LIGHT**: BOOL - Visual indicator showing fan running status\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop permissive status\n- **TEMP_HIGH_DEBOUNCE_TMR**: TON - Timer for debouncing temperature high signal\n\n### Counts Check\n`Inputs: 2 (+0) | Outputs: 2 (+0) | Internals: 2 (+1)`\n\n### New Items This Gen (must respect SEP)\n- TEMP_HIGH_DEBOUNCE_TMR (Internal, TON)\n\n## Control Logic Description\nThe system monitors the infrared pyrometer temperature high signal and applies a 200ms debounce filter to prevent false activations from transient glitches. The debounced temperature signal is then combined with the emergency stop permissive status to control the cooling fan. The emergency stop maintains absolute priority and immediately overrides all functional logic when activated. The fan running light provides operator feedback by mirroring the actual fan control output status.\n\nThe TON timer is configured with a 200ms preset time (PT) to ensure the temperature high signal must remain active for this duration before being considered valid. The timer starts when TEMPERATURE_HIGH becomes TRUE and resets when it becomes FALSE.\n\n**Formal Logic Expression**: \nKILN_E_STOP_OK := KILN_E_STOP_NC;\nTEMP_HIGH_DEBOUNCE_TMR(IN:=TEMPERATURE_HIGH, PT:=T#200ms);\nTEMPERATURE_HIGH_DEBOUNCED := TEMP_HIGH_DEBOUNCE_TMR.Q;\nCOOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH_DEBOUNCED;\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\n\n## Safety Requirements\n- Emergency stop must override all functional logic without exception\n- Safety permissive (KILN_E_STOP_OK) must gate all performance-related outputs\n- Debounce logic must not delay emergency stop functionality\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| TEMPERATURE_HIGH | BOOL | R | Raw temperature high signal | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 100ms |\n| COOLING_FAN | BOOL | R/W | Fan control output | On/Off | 100ms |\n| COOLER_FAN_RUNNING_LIGHT | BOOL | R | Fan running indicator | On/Off | 100ms |\n| TEMP_HIGH_DEBOUNCE_TMR.ET | TIME | R | Debounce timer elapsed time | ms | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: TEMPERATURE_HIGH=1 for >200ms, KILN_E_STOP_NC=1 → COOLING_FAN=1, COOLER_FAN_RUNNING_LIGHT=1\n2. **Short Glitch**: TEMPERATURE_HIGH=1 for <200ms, KILN_E_STOP_NC=1 → COOLING_FAN=0, COOLER_FAN_RUNNING_LIGHT=0\n3. **Emergency Stop**: TEMPERATURE_HIGH=1, KILN_E_STOP_NC=0 → COOLING_FAN=0, COOLER_FAN_RUNNING_LIGHT=0\n4. **Debounce Timing**: TEMPERATURE_HIGH=1 for exactly 200ms → Verify COOLING_FAN activates at 200ms mark\n\n## Change Log\n- **TEMP_HIGH_DEBOUNCE_TMR**: TON / Purpose: Debounce temperature signal to prevent false activations from transient glitches / Compatibility: Maintains all existing safety functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 2, Outputs: 2, Internals: 1\n- **This gen totals**: Inputs: 2, Outputs: 2, Internals: 2\n- **SEP delta cap**: PASS (1 internal added)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH\n- **This Gen**: COOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH_DEBOUNCED\n- **Not Equivalent**: True - debounced signal vs raw signal\n\n**Domain Keywords**: cement, kiln, cooler, temperature, debounce, fan, safety, clinker",
  "output": "PROGRAM KILN_COOLER_01_Control\nVAR_INPUT\n    TEMPERATURE_HIGH : BOOL; (* Infrared pyrometer detects high clinker temperature *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\nEND_VAR\nVAR_OUTPUT\n    COOLING_FAN : BOOL; (* Grate cooler fan motor contactor control *)\n    COOLER_FAN_RUNNING_LIGHT : BOOL; (* Visual indicator showing fan running status *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop permissive status *)\n    TEMP_HIGH_DEBOUNCE_TMR : TON; (* Timer for debouncing temperature high signal *)\n    TEMPERATURE_HIGH_DEBOUNCED : BOOL; (* Debounced temperature high signal *)\nEND_VAR\n\n(* Safety logic - emergency stop permissive *)\nKILN_E_STOP_OK := KILN_E_STOP_NC;\n\n(* Temperature debounce logic *)\nTEMP_HIGH_DEBOUNCE_TMR(IN := TEMPERATURE_HIGH, PT := T#200ms);\nTEMPERATURE_HIGH_DEBOUNCED := TEMP_HIGH_DEBOUNCE_TMR.Q;\n\n(* Main control logic *)\nCOOLING_FAN := KILN_E_STOP_OK AND TEMPERATURE_HIGH_DEBOUNCED;\nCOOLER_FAN_RUNNING_LIGHT := COOLING_FAN;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_5_safety_functionality_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: BIO-001\n- **Location**: Fermentation Suite A\n- **Control Type**: Cascade Control with Adaptive Dosing\n- **Safety Level**: SIL 1\n- **Complexity**: Advanced\n- **Industrial_Category**: Pharmaceutical Bioprocessing\n- **Generation**: 5 (late)\n- **Branch**: functionality\n- **Summary**: Bioreactor dissolved oxygen control with pH trend monitoring for early metabolic imbalance detection\n\n## Control Objective\nMaintain dissolved oxygen at 30% setpoint with safety interlocks while monitoring pH trends to detect metabolic imbalances that could trigger adaptive nutrient dosing responses.\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **DO_SENSOR_HIGH**: BOOL - Dissolved oxygen above 30% setpoint threshold\n- **Bioreactor_Enable**: BOOL - Master enable switch for system operation\n- **BioReactor_E_Stop_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **pH_SENSOR**: REAL - pH measurement value from bioreactor probe (6.0-8.0 range)\n\n### Output Variables (CUMULATIVE)\n- **OXYGEN_SPARGE_VALVE**: BOOL - Oxygen sparging control valve actuator\n- **Oxygen_Valve_Maintenance_Due**: BOOL - Maintenance required indicator\n\n### Internals (CUMULATIVE)\n- **BioReactor_Safe_To_Operate**: BOOL - Safety permissive indicating all safety conditions met\n- **Oxygen_Sparge_Min_On_Timer**: TON - Timer ensuring minimum 2-second valve on-time\n- **Oxygen_Valve_Cycle_Count**: UINT - Counter tracking total oxygen valve actuation cycles\n- **pH_OutOfRange_Timer**: TON - 2-minute timer tracking pH deviation duration\n\n### Counts Check\n`Inputs: 4 (+1) | Outputs: 2 (+0) | Internals: 4 (+1)`\n\n### New Items This Gen (must respect SEP)\n- pH_SENSOR (Input, REAL)\n- pH_OutOfRange_Timer (Internal, TON)\n\n## Control Logic Description\nThe system maintains dissolved oxygen control through the primary sparge valve while continuously monitoring pH levels. If pH deviates outside the optimal range (6.8-7.2) for more than 2 minutes, the pH_OutOfRange_Timer activates, indicating a potential metabolic imbalance that may require adaptive nutrient dosing intervention. The safety interlock system remains the highest priority, overriding all functional logic when the emergency stop is activated.\n\n**Formal Logic Expression**: \nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q)\npH_OutOfRange_Timer.IN := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2)\n\n## Safety Requirements\n- Emergency stop must immediately override all control outputs\n- Safety permissive must be validated before any automated operation\n- pH monitoring is for advisory purposes only and does not override safety functions\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| DO_SENSOR_HIGH | BOOL | R | DO above setpoint | On/Off | 100ms |\n| Bioreactor_Enable | BOOL | R/W | System master enable | On/Off | 100ms |\n| BioReactor_E_Stop_NC | BOOL | R | E-stop status | On/Off | 100ms |\n| pH_SENSOR | REAL | R | pH measurement | pH | 1s |\n| OXYGEN_SPARGE_VALVE | BOOL | R/W | Oxygen valve control | On/Off | 100ms |\n| Oxygen_Valve_Maintenance_Due | BOOL | R | Maintenance alert | On/Off | 1s |\n| pH_OutOfRange_Timer.Q | BOOL | R | pH deviation timeout | On/Off | 1s |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal pH Operation**: pH_SENSOR = 7.0 → pH_OutOfRange_Timer.Q remains FALSE\n2. **pH Deviation Short**: pH_SENSOR = 6.5 for 1 minute → pH_OutOfRange_Timer.Q remains FALSE\n3. **pH Deviation Extended**: pH_SENSOR = 6.5 for 3 minutes → pH_OutOfRange_Timer.Q becomes TRUE\n4. **Safety Override**: BioReactor_E_Stop_NC = FALSE → All outputs de-energized regardless of pH/DO status\n\n## Change Log\n- **pH_SENSOR**: REAL / Purpose: Continuous pH monitoring for metabolic imbalance detection / Compatibility: New analog input\n- **pH_OutOfRange_Timer**: TON / Purpose: 2-minute timer for sustained pH deviation detection / Compatibility: New timing function\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 9/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 8/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 2, Internals: 3\n- **This gen totals**: Inputs: 4, Outputs: 2, Internals: 4\n- **SEP delta cap**: PASS (1 input + 1 TON = 2 increments)\n- **Non-decreasing**: PASS (all counts maintained or increased)\n\n## Core Logic Equations\n- **Parent**: OXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q)\n- **This Gen**: pH_OutOfRange_Timer.IN := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2)\n- **Not Equivalent**: The new logic introduces pH trend monitoring independent of the oxygen control loop\n\n**Domain Keywords**: bioreactor, pH monitoring, metabolic imbalance, dissolved oxygen, cascade control, pharmaceutical, bioprocessing",
  "output": "PROGRAM BIO_001_Control\nVAR_INPUT\n    DO_SENSOR_HIGH : BOOL; (* Dissolved oxygen above 30% setpoint threshold *)\n    Bioreactor_Enable : BOOL; (* Master enable switch for system operation *)\n    BioReactor_E_Stop_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    pH_SENSOR : REAL; (* pH measurement value from bioreactor probe (6.0-8.0 range) *)\nEND_VAR\nVAR_OUTPUT\n    OXYGEN_SPARGE_VALVE : BOOL; (* Oxygen sparging control valve actuator *)\n    Oxygen_Valve_Maintenance_Due : BOOL; (* Maintenance required indicator *)\nEND_VAR\nVAR\n    BioReactor_Safe_To_Operate : BOOL; (* Safety permissive indicating all safety conditions met *)\n    Oxygen_Sparge_Min_On_Timer : TON; (* Timer ensuring minimum 2-second valve on-time *)\n    Oxygen_Valve_Cycle_Count : UINT; (* Counter tracking total oxygen valve actuation cycles *)\n    pH_OutOfRange_Timer : TON; (* 2-minute timer tracking pH deviation duration *)\nEND_VAR\n\n(* Safety chain - highest priority *)\nBioReactor_Safe_To_Operate := BioReactor_E_Stop_NC AND Bioreactor_Enable;\n\n(* pH trend monitoring for metabolic imbalance detection *)\npH_OutOfRange_Timer(IN := (pH_SENSOR < 6.8) OR (pH_SENSOR > 7.2), PT := T#2M);\n\n(* Oxygen control logic with safety override *)\nOXYGEN_SPARGE_VALVE := BioReactor_Safe_To_Operate AND (DO_SENSOR_HIGH OR Oxygen_Sparge_Min_On_Timer.Q);\n\n(* Minimum on-time timer for oxygen valve *)\nOxygen_Sparge_Min_On_Timer(IN := OXYGEN_SPARGE_VALVE, PT := T#2S);\n\n(* Valve cycle counting for maintenance prediction *)\nIF OXYGEN_SPARGE_VALVE AND NOT Oxygen_Sparge_Min_On_Timer.Q THEN\n    Oxygen_Valve_Cycle_Count := Oxygen_Valve_Cycle_Count + 1;\nEND_IF;\n\n(* Maintenance alert based on cycle count *)\nOxygen_Valve_Maintenance_Due := Oxygen_Valve_Cycle_Count >= 10000;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen5_seed_69_variant_0_functionality_safety_performance_maintenance_functionality_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
},
{
  "instruction": "Generate IEC 61131-3 Structured Text (ST) code for the given industrial control specification.",
  "input": "# Industrial Control Specification\n\n## System Metadata\n- **Asset**: Kiln-7-Refractory-Monitor\n- **Location**: Cement Plant Kiln Line 7\n- **Control Type**: Predictive Maintenance System\n- **Safety Level**: SIL 1\n- **Complexity**: Basic\n- **Industrial_Category**: Cement Manufacturing\n- **Generation**: 3 (mid)\n- **Branch**: performance\n- **Summary**: Thermal anomaly detection with debounce filtering for reliable refractory wear monitoring\n\n## Control Objective\nDetect thermal anomalies in kiln refractory lining with debounce filtering to prevent false alarms while maintaining safety override and enable control\n\n## I/O Requirements\n\n### Input Variables (CUMULATIVE)\n- **THERMAL_ANOMALY**: BOOL - Infrared camera detects abnormal temperature pattern\n- **KILN_E_STOP_NC**: BOOL - Emergency stop button (normally-closed contact)\n- **KILN_REFRACTORY_MONITOR_ENABLE**: BOOL - Master enable switch for refractory monitoring system\n\n### Output Variables (CUMULATIVE)\n- **MAINTENANCE_ALARM**: BOOL - Maintenance required indicator lamp and alert system\n\n### Internals (CUMULATIVE)\n- **KILN_E_STOP_OK**: BOOL - Emergency stop status (TRUE when safe to operate)\n- **THERMAL_ANOMALY_DEBOUNCED**: BOOL - Debounced thermal anomaly signal\n- **THERMAL_DEBOUNCE_TIMER**: TON - Timer instance for thermal anomaly debouncing\n\n### Counts Check\n`Inputs: 3 (+0) | Outputs: 1 (+0) | Internals: 3 (+2)`\n\n### New Items This Gen (must respect SEP)\n- THERMAL_ANOMALY_DEBOUNCED (Internal, BOOL)\n- THERMAL_DEBOUNCE_TIMER (Internal, TON)\n\n## Control Logic Description\nThe system monitors thermal imaging inputs for abnormal patterns indicating refractory wear. A debounce timer filters transient glitches from the thermal anomaly detection, requiring the signal to remain active for 200ms before triggering maintenance alerts. Safety logic ensures emergency stop immediately overrides all functional operations. The master enable switch controls overall system operation.\n\n**Thermal Debounce Logic**: The THERMAL_ANOMALY input drives a TON timer with 200ms preset. When the timer elapses, THERMAL_ANOMALY_DEBOUNCED becomes TRUE. If THERMAL_ANOMALY drops before timer elapse, the timer resets and THERMAL_ANOMALY_DEBOUNCED remains FALSE.\n\n**Main Logic**: MAINTENANCE_ALARM is activated when debounced thermal anomaly is detected AND emergency stop is not active AND the system is enabled.\n\n**Safety Logic**: Emergency stop immediately overrides all functional logic without exception.\n\n**Formal Logic Expression**: \nMAINTENANCE_ALARM := THERMAL_ANOMALY_DEBOUNCED AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE\n\n## Safety Requirements\n- Emergency stop must immediately override all functional logic\n- Debounce filtering must not delay safety-critical responses\n- System requires explicit enable for operational status\n\n## HMI/SCADA Mapping\n| Tag Name | Type | R/W | Description | Units | Update Rate |\n|----------|------|-----|-------------|-------|-------------|\n| THERMAL_ANOMALY | BOOL | R | Raw thermal anomaly detection | On/Off | 100ms |\n| THERMAL_ANOMALY_DEBOUNCED | BOOL | R | Debounced thermal anomaly | On/Off | 100ms |\n| KILN_E_STOP_NC | BOOL | R | Emergency stop status | On/Off | 50ms |\n| KILN_REFRACTORY_MONITOR_ENABLE | BOOL | R/W | System enable control | On/Off | 100ms |\n| MAINTENANCE_ALARM | BOOL | R | Maintenance required alarm | On/Off | 100ms |\n\n## Verification Requirements\n### Test Scenarios\n1. **Normal Operation**: THERMAL_ANOMALY=1 (stable 200ms+) → MAINTENANCE_ALARM=1 (when enabled and safe)\n2. **Transient Glitch**: THERMAL_ANOMALY=1 (150ms pulse) → MAINTENANCE_ALARM=0 (debounce filtered)\n3. **Safety Override**: THERMAL_ANOMALY=1 + KILN_E_STOP_NC=0 → MAINTENANCE_ALARM=0 (immediate)\n4. **System Disabled**: THERMAL_ANOMALY=1 + KILN_REFRACTORY_MONITOR_ENABLE=0 → MAINTENANCE_ALARM=0\n\n## Change Log\n- **THERMAL_ANOMALY_DEBOUNCED**: BOOL / Purpose: Debounced thermal anomaly signal for reliable detection / Compatibility: Backward compatible\n- **THERMAL_DEBOUNCE_TIMER**: TON / Purpose: 200ms debounce timer for thermal input / Compatibility: New functionality\n\n## Self-check Summary\n- **Minimalism**: 9/10\n- **Measurability**: 8/10\n- **Safety-Preservation**: 10/10\n- **Determinism**: 9/10\n- **SEP-Compliance**: 10/10\n- **ST-Coverage**: 7/10\n\n## Complexity Audit\n- **Parent totals**: Inputs: 3, Outputs: 1, Internals: 1\n- **This gen totals**: Inputs: 3, Outputs: 1, Internals: 3\n- **SEP delta cap**: PASS (mid phase allows 1 new variable, TON counts as variable)\n- **Non-decreasing**: PASS (3→3 inputs, 1→1 outputs, 1→3 internals)\n\n## Core Logic Equations\n- **Parent**: MAINTENANCE_ALARM := THERMAL_ANOMALY AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE\n- **This Gen**: MAINTENANCE_ALARM := THERMAL_ANOMALY_DEBOUNCED AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE\n- **Not Equivalent**: TRUE (debounce filtering changes timing behavior)\n\n**Domain Keywords**: refractory, kiln, thermal, infrared, debounce, maintenance, cement",
  "output": "PROGRAM Kiln_7_Refractory_Monitor\nVAR_INPUT\n    THERMAL_ANOMALY : BOOL; (* Infrared camera detects abnormal temperature pattern *)\n    KILN_E_STOP_NC : BOOL; (* Emergency stop button (normally-closed contact) *)\n    KILN_REFRACTORY_MONITOR_ENABLE : BOOL; (* Master enable switch for refractory monitoring system *)\nEND_VAR\nVAR_OUTPUT\n    MAINTENANCE_ALARM : BOOL; (* Maintenance required indicator lamp and alert system *)\nEND_VAR\nVAR\n    KILN_E_STOP_OK : BOOL; (* Emergency stop status (TRUE when safe to operate) *)\n    THERMAL_ANOMALY_DEBOUNCED : BOOL; (* Debounced thermal anomaly signal *)\n    THERMAL_DEBOUNCE_TIMER : TON; (* Timer instance for thermal anomaly debouncing *)\nEND_VAR\n\n(* Safety logic - emergency stop normalization *)\nKILN_E_STOP_OK := KILN_E_STOP_NC; (* Normally-closed contact: TRUE when safe *)\n\n(* Thermal anomaly debounce logic *)\nTHERMAL_DEBOUNCE_TIMER(IN := THERMAL_ANOMALY, PT := T#200MS);\nTHERMAL_ANOMALY_DEBOUNCED := THERMAL_DEBOUNCE_TIMER.Q;\n\n(* Main control logic *)\nMAINTENANCE_ALARM := THERMAL_ANOMALY_DEBOUNCED AND KILN_E_STOP_OK AND KILN_REFRACTORY_MONITOR_ENABLE;\nEND_PROGRAM",
  "metadata": {
    "spec_id": "gen3_seed_70_variant_1_safety_functionality_performance_child2",
    "matiec_passed": true,
    "generation_attempts": 1
  }
}
]
