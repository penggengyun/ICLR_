{"title": "BASE64 Decoder Function", "description": "BASE64_DECODE_STR encoded in BASE64 text can be converted\n\nback to plain text. With a positive edge of RUN the process starts. Here\n\nDONE is immediately reseted, if it has been set by a previous conversion.\n\nThe BASE64 encoded text is passed on STR1, and after the conversion the\n\nplain text is available in STR2, and DONE is set to TRUE.", "type": "FUNCTION", "name": "BASE64_DECODE_STR", "input": [{"name": "RUN", "type": "BOOL", "description": "A boolean value that when set to TRUE by a positive edge initiates the conversion process."}, {"name": "STR1", "type": "STRING(192)", "description": "The BASE64 encoded string that will be converted to plain text."}], "output": [{"name": "DONE", "type": "BOOL", "description": "A boolean value that indicates if the conversion has been completed. It is set to TRUE once the conversion finishes."}, {"name": "STR2", "type": "STRING(144)", "description": "The converted plain text output from the BASE64 encoded input string."}], "in/out": [], "return_value": null}
{"title": "BASE64 Decoder Function", "description": "BASE64_DECODE_STREAM arbitrarily long BASE64 byte streams are\n\ndecoded. In one pass, up to 64 bytes are decoded, which in turn emerged\n\nfrom a maximum of 48 bytes each. Here, the source data is passed to the\n\n73 Version 1.21\n\nChapter 8. Converter\n\ndecoder over BUF1 in the data-stream manner as individual blocks of\n\ndata, and in decoded form re-issued in BUF2. The user has to provide the\n\nfurther processing of the BUF2 data before the next block of data is con￾verted. The number of bytes in BUF2 is issued by SIZE2 from the module.", "type": "FUNCTION", "name": "BASE64_DECODE_STREAM", "input": [{"name": "SIZE1", "type": "INT", "description": "Number of bytes in BUF1 for decode."}, {"name": "BUF1", "type": "ARRAY [0..63] OF BYTES", "description": "BASE64 data for conversion."}], "output": [{"name": "SIZE2", "type": "INT", "description": "Number of bytes in BUF2 of the decoded results."}, {"name": "BUF2", "type": "ARRAY [0..47] OF BYTES", "description": "Converted data."}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value; it outputs results via parameters."}}
{"title": "BASE64 Encoding Function Module", "description": "BASE64_ENCODE_STR a standard text can be converted to a BASE64\n\nencoded text. With a positive edge of RUN the process starts. Here DONE\n\nis immediately reseted, if it has been set by a previous conversion. The\n\nBASE64 encoded text is passed on STR1, and after the conversion the BA￾SE64 text is available in STR2, and DONE is set to TRUE.", "type": "FUNCTION", "name": "BASE64_ENCODE_STR", "input": [{"name": "RUN", "type": "BOOL", "description": "A positive edge signal that initiates the BASE64 conversion."}, {"name": "STR1", "type": "STRING(144)", "description": "The standard text input that is to be converted to BASE64 format."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates if the BASE64 conversion has been completed successfully."}, {"name": "STR2", "type": "STRING(192)", "description": "The resulting BASE64 encoded text after the conversion."}], "in/out": [], "return_value": null}
{"title": "Base64 Encode Stream Function", "description": "BASE64_ENCODE_STREAM arbitrarily long byte data stream accor￾ding to BASE64 can be encoded. In one pass, up to 48 bytes are conver￾ted, in turn, result more than 64 bytes. Here, the source data is passed to\n\nthe encoder over BUF1 in the data-stream manner as individual blocks of\n\ndata, and in coded form re-issued in BUF2. The user has to provide the fur￾ther processing of the BUF2 data before the next block of data is conver￾ted. The number of bytes in BUF2 is issued by SIZE2 from the module.", "type": "FUNCTION", "name": "BASE64_ENCODE_STREAM", "input": [{"name": "SIZE1", "type": "INT", "description": "Number of bytes in the BUF1 to encode."}, {"name": "BUF1", "type": "ARRAY", "description": "Data to convert.", "fields": [{"name": "0..47", "type": "BYTES", "description": "Array of bytes containing the data to be Base64 encoded."}]}], "output": [{"name": "SIZE2", "type": "INT", "description": "Number of bytes in the encoded BUF2 results."}, {"name": "BUF2", "type": "ARRAY", "description": "BASE64 converted data.", "fields": [{"name": "0..63", "type": "BYTES", "description": "Array of bytes containing the Base64 encoded data."}]}], "in/out": [], "return_value": null}
{"title": "CSV Parser Buffer Function", "description": "CSV_PARSER_BUF enables the analysis of the elements \n\ncontained in the bufer. The number of data contained on PT.SIZE \n\nspecifed. The separator is specifed in parameter \"SEP\". The search for \n\nelements that always begins, depending on the given \"OFFSET\", so it is \n\nvery easy to look at certain points in order to not always have to search \n\nthe entire bufer. At the beginning should be started with by default the \n\nOFFSET 0 (but need not).\n\nAt the beginning of the default should be started OFFSET 0 (but need not). \n\nOf course this is dependent on the content or the structure of the data.\n\nEvaluate elements:\n\nWill specify in SEP 0, lines are always evaluated completely and parameter \n\n\"VALUE\" is issued. If the elements in the bufer are structured as CSV \n\n(Excel), so at SEP the separator ',' or something else can be specifed. RUN \n\n= 1 startes the evaluation. Since it is not foreseeable how long the search \n\n147 Version 1.21\n\nChapter 10. File-System\n\ntakes, a watchdog function is Integrated that stops the search for the \n\ncurrent cycle, then RESULT = 5 and RUN remains unchanged. In the next \n\ncycle, the analysis proceeds automatically. As soon as the next element is \n\ndetected, the element in VALUE is passed, and RESULT is 1. If the element \n\nis also the last in a line, then RESULT = 2 is the output. As soon as the end \n\nof the data has been reached at RESULT = 10 passed. Always if yet RUN = \n\n0 is output, RESULT defnes the result. If an item is longer than the \n\nmaximum length (string_length) so the characters are cut of \n\nautomatically. The parameter OFFSET is by the module automatically \n\npassed after each result, but can be defned individually before each \n\nevaluation.", "type": "FUNCTION", "name": "CSV_PARSER_BUF", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator used for parsing the buffer."}, {"name": "RUN", "type": "BYTE", "description": "Command code for the current action (0 for no function, 1 to evaluate elements)."}, {"name": "OFFSET", "type": "UDINT", "description": "Current file offset of the query, starting from 0 by default."}, {"name": "VALUE", "type": "STRING", "description": "Output value of the current key processed in the buffer."}, {"name": "PT", "type": "NETWORK_BUFFER", "description": "The read data buffer that contains the elements to be analyzed."}], "output": [{"name": "RESULT", "type": "BYTE", "description": "Result of the query indicating the evaluation status."}], "in/out": [], "return_value": null}
{"title": "CSV Parser File Module", "description": "CSV_PARSER_FILE enables the analysis of the elements of an \n\narbitrarily large fle which is read into the read data bufer block by block \n\nfor automatically processing. The separator is specifed in parameter \n\n\"SEP\". The name of the fle is passed in parameter \"FILENAME\". The search \n\nfor elements that always begins, depending on the given \"OFFSET\", so it is \n\nvery easy to look at certain points in order to not always have to search \n\nthe entire bufer. At the beginning should be started with by default the \n\nOFFSET 0 (but need not).\n\nWhen queried by elements of the fle, there are various procedures. Of \n\ncourse this is dependent on the content or the structure of the data.\n\nEvaluate elements:\n\nWill specify in SEP 0, lines are always evaluated completely and parameter \n\n\"VALUE\" is issued. If the elements in the fle are structured as CSV (Excel), \n\nso at SEP the separator ',' or something else can be specifed. RUN = 1 \n\nstartes the evaluation. Since it is not foreseeable how long the search \n\ntakes, a watchdog function is Integrated that stops the search for the \n\ncurrent cycle, then RESULT = 5 and RUN remains unchanged. In the next \n\ncycle, the analysis proceeds automatically. As soon as the next element is \n\ndetected, the element in VALUE is passed, and RESULT is 1. If the element \n\nis also the last in a line, then RESULT = 2 is the output. As soon as the end \n\nof the data has been reached at RESULT = 10 passed. Always if yet RUN = \n\n0 is output, RESULT defnes the result. If an item is longer than the \n\nmaximum length (string_length) so the characters are cut of \n\nautomatically. The parameter OFFSET is by the module automatically \n\npassed after each result, but can be defned individually before each \n\nevaluation.", "type": "FUNCTION", "name": "CSV_PARSER_FILE", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator used to delineate elements in the file."}, {"name": "FILE_NAME", "type": "STRING", "description": "The name of the file to be processed."}, {"name": "FSD", "type": "FILE_SERVER_DATA", "description": "The file interface for handling file operations."}, {"name": "RUN", "type": "BYTE", "description": "The command code to initiate actions (1 to evaluate elements, 0 when no function to perform)."}, {"name": "OFFSET", "type": "UDINT", "description": "The current file offset for the query."}, {"name": "VALUE", "type": "STRING", "description": "The value of a key that is parsed from the file."}, {"name": "PT", "type": "NETWORK_BUFFER", "description": "Buffer used for reading data from the file."}], "output": [{"name": "RESULT", "type": "BYTE", "description": "The result of the query indicating the status of the evaluation."}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return any value but modifies the parameters as necessary based on the evaluation process."}}
{"title": "DLOG_BOOL Function Module", "description": "DLOG_BOOL is for logging (recording) of a process value of type BOOL, \n\nand can only be used in combination with a DLOG_STORE_* module, as this \n\ncoordinates of the data structure X to record the data. At recording formats that \n\nsupport a process value name, such as at DLOG_STORE_FILE_CSV a name can be \n\nprovided at COLUMN\". Depending on the state of the STATE the TEXT of parameter \n\nOFF or ON is used. If with DELTA parameter a TRUE is specified, the automatic data \n\nlogging is enabled via differential monitoring. By changing the state of STATE \n\nautomatically a record is stored. This feature can be applied in parallel to the central \n\ntrigger on the DLOG_STORE_ * module.", "type": "FUNCTION", "name": "DLOG_BOOL", "input": [{"name": "X", "type": "DLOG_DATA", "description": "The DLOG data structure used for logging.", "fields": []}, {"name": "STATE", "type": "BOOL", "description": "Process value indicating TRUE or FALSE."}, {"name": "ON", "type": "STRING", "description": "Text to use when STATE is TRUE."}, {"name": "OFF", "type": "STRING", "description": "Text to use when STATE is FALSE."}, {"name": "COLUMN", "type": "STRING", "description": "The name of the process value, limited to 40 characters.", "fields": []}, {"name": "DELTA", "type": "DINT", "description": "Difference value for enabling automatic data logging via differential monitoring."}], "output": [], "in/out": [], "return_value": {}}
{"title": "DLOG_DINT Function Module", "description": "DLOG_DINT is for logging (recording) of a process value of type DINT, and \n\ncan only be used in combination with a DLOG_STORE_* module, as this coordinates \n\nof the data structure X to record the data. At recording formats that support a process \n\nvalue name, such as at DLOG_STORE_FILE_CSV a name can be provided at \n\nCOLUMN\". If with DELTA parameter a value not equal 0 is specified, the automatic \n\ndata logging is enabled via differential monitoring. Changing the value of VALUE to \n\n+ / - DELTA automatically stores a record. This feature can be applied in parallel to \n\nthe central trigger on the DLOG_STORE_ * module.", "type": "FUNCTION", "name": "DLOG_DINT", "input": [{"name": "X", "type": "DLOG_DATA", "description": "DLOG data structure for recording data."}, {"name": "VALUE", "type": "DINT", "description": "The process value to be logged."}, {"name": "COLUMN", "type": "STRING (40)", "description": "The name of the process value for logging, relevant for formats that support a process value name."}, {"name": "DELTA", "type": "DINT", "description": "The difference value that triggers automatic logging if it is not equal to 0."}], "output": [], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value."}}
{"title": "DLOG_DT Module for Data Logging", "description": "DLOG_DT is for logging (recording) of a date or time value of \n\ntype STRING, and can only be used in combination with a DLOG_STORE_* \n\nmodule, as this coordinates the record the data by the data structure X. \n\nUsing FMT parameter, the formatting will be set. In the FMT parameter can \n\nalso be combined with normal text formatting parameters. See \n\ndocumentation on the block DT_TO_STRF. If the FMT parameter is not \n\nspecifed, the default formatting\n\n'#A-#D-#H #N:#R:#T' is used.\n\nAt recording formats that support a process value name, such as at \n\nDLOG_STORE_FILE_CSV a name can be provided at COLUMN\".\n\nIf with DELTA parameter a value greater than 0 is specified, the automatic data \n\nlogging is enabled via differential monitoring. If time changes by the value of DELTA \n\nautomatically a record is stored. This feature can be applied in parallel to the central \n\ntrigger on the DLOG_STORE_ * module. If, for example DELTA is the value 30, \n\nautomatically every 30 seconds a record is saved.\n\n50 Version 1.21\n\nChapter 7. Data Logger", "type": "FUNCTION", "name": "DLOG_DT", "input": [{"name": "X", "type": "DLOG_DATA", "description": "DLOG data structure for recording data."}, {"name": "FMT", "type": "STRING", "description": "Formatting parameters for the date or time value. If not specified, defaults to '#A-#D-#H #N:#R:#T'."}, {"name": "COLUMN", "type": "STRING", "description": "Process value name, limited to 40 characters."}, {"name": "DELTA", "type": "UDINT", "description": "Difference in seconds for enabling automatic data logging via differential monitoring. If greater than 0, records will automatically be stored based on this time difference."}], "output": [], "in/out": [], "return_value": {"type": "STRING", "description": "The formatted date or time value recorded.", "fields": []}}
{"title": "DLOG_FILE_TO_FTP Module", "description": "DLOG_FILE_TO_FTP is used to automatically transfer the by \n\nDLOG_STORE_FILE_CSV generated from fles to an FTP-server. The FTP_URL \n\nparameter contains the name of the FTP server and optionally the user \n\nname and password, an access path and an additional port number for the \n\ndata channel. If no Username or password is transferred, the device \n\nautomatically tries to register as \"Anonymous\". The parameter FTP_ACTIV \n\ndetermined whether the FTP server is operated in active or passive mode. \n\nIn the ACTIV mode, the FTP server tries to establish the data channel for \n\ncontrol, however these may cause problems by security software, frewall, \n\netc. because it could block the connection request. For this purpose, in the \n\nfrewall a corresponding exception rule has to be defned. In the passive \n\nmode, this problem is alleviated since the controller establishes the \n\nconnection, and can easily pass through the frewall. The control channel is \n\nalways set up on port 20, and the data channel via standard PORT21, but \n\nthis is in turn is depending whether active or passive mode is used, or \n\noptional PORT number in the FTP-URL is specifed. With the parameter \n\nFILE_DELETE can be determined whether the source fle should be deleted \n\nafter successful transfer. This works on FTP and even on the control side. \n\nIn specifying FTP directories the behavior depends on FTP server, whether \n\nthey exist in this case or are created automatically. Normally, these should \n\nbe already available. The size of fles is no limit per se, but there are \n\npractical limits: Space on PLC, FTP storage and the transmission time. With \n\ndns_ip4 the IP address of the DNS server must be specifed, if in the FTP \n\nURL a DNS name is given, alternatively, an IP address can be entered in \n\nthe FTP URL. At parameters PLC_IP4 the own IP addresses has to be \n\nsupplied. If errors occur during transmission these are passed to the \n\noutput ERROR_C and ERROR_T. As long as the transfer is running, BUSY = \n\n64 Version 1.21\n\nChapter 7. Data Logger\n\nTRUE, and after an error-free completion of the operation, DONE = TRUE. \n\nOnce a new transfer is started, DONE, ERROR_T and ERROR_C are reseted.\n\nIf parameter RETRY = 0, then the FTP transfer was repeated until it \n\ncompletes successfully. If RETRY state at a value > 0, the FTP transfer is \n\njust as often repeated in transmission failure. Then this job is simply \n\ndiscarded and the process continues with the next fle. With RETRY-TIME \n\nthe waiting time between the repetitions can be defned.\n\nThe module has integrated the IP_CONTROL and must not be externally \n\nlinked to this, as it by default would be necessary.\n\nBackground: http://de.wikipedia.org/wiki/File_Transfer_Protocol \n\nURL examples:\n\nftp://username:password@servername:portnummer/directory/\n\nftp://username:password@servername\n\nftp://username:password @ servername / directory /\n\nftp://servername\n\nftp://username:password@192.168.1.1/directory/\n\nftp://192.168.1.1\n\n65 Version 1.21\n\nChapter 7. Data Logger\n\nERROR_T:\n\nValue Properties\n\n1 Problem: DNS_CLIENT\n\nThe exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 Problem: FTP control channel\n\nThe exact meaning of ERROR_C can be read at module IP_CONTROL\n\n3 Problem: FTP data channel\n\nThe exact meaning of ERROR_C can be read at module IP_CONTROL\n\n4 Problem: FILE_SERVER\n\nThe exact meaning of ERROR_C can be read at block FILE_SERVER\n\n5 Problem: END - TIMEOUT\n\nERROR_C contains the left WORD of the step number, and the right WORD has the re￾sponse code received by the FTP server.\n\nThe parameters must be considered first as a HEX value, divided into two WORDS, and\n\nthen be considered as a decimal value.", "type": "FUNCTION", "name": "DLOG_FILE_TO_FTP", "input": [{"name": "FTP_URL", "type": "STRING", "description": "FTP access path including optional username, password, and port number."}, {"name": "FTP_ACTIV", "type": "BOOL", "description": "Determines whether the FTP server operates in active (1) or passive (0) mode."}, {"name": "FILE_DELETE", "type": "BOOL", "description": "Specifies whether to delete the source file after successful transfer."}, {"name": "TIMEOUT", "type": "TIME", "description": "The timeout duration for the FTP connection."}, {"name": "RETRY", "type": "INT", "description": "The number of times to retry the FTP transfer in case of failure."}, {"name": "RETRY_TIME", "type": "TIME", "description": "The waiting time before each retry attempt."}, {"name": "Dns_ip4", "type": "DWORD", "description": "The IP address of the DNS server."}, {"name": "DLOG_DATA", "type": "STRUCT", "description": "The DLOG data structure that encapsulates the data to be logged.", "fields": []}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates if the transfer completed without error."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates if the transfer is currently active."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code representing the type of error encountered during transfer."}, {"name": "ERROR_T", "type": "BYTE", "description": "Indicates the specific problem encountered during the operation."}], "in/out": [], "return_value": {"type": "VOID", "description": "No return value as this function handles the FTP transfer process internally."}}
{"title": "DLOG_FILE_TO_SMTP", "description": "DLOG_FILE_TO_SMTP is used to automatically transfer the of \n\nDLOG_STORE_FILE_CSV generated fles as e-mail to an e-mail server.\n\nThe module uses internally the SMTP_CLIENT for sending.\n\nThe SERVER parameter contains the name of the SMTP server and \n\noptionally the user name and password and a port number. If you pass a \n\nuser name and password, the procedure is according to standard SMTP.\n\nSERVER: URL", "type": "FUNCTION", "name": "DLOG_FILE_TO_SMTP", "input": [{"name": "SERVER", "type": "STRING", "description": "URL of the SMTP server, option to include username, password, and port number."}, {"name": "MAIL_FROM", "type": "STRING", "description": "Return address of the email sender. Can include a display name."}, {"name": "MAILTO", "type": "STRING", "description": "Recipient addresses formatted into groups: To, Cc, Bc."}, {"name": "SUBJECT", "type": "STRING", "description": "Subject text of the email."}, {"name": "FILES", "type": "STRING", "description": "Files to be sent via email."}, {"name": "X", "type": "DLOG_DATA", "description": "DLOG data structure."}, {"name": "FILE_DELETE", "type": "BOOL", "description": "Indicates if the files should be deleted after transfer."}, {"name": "TIMEOUT", "type": "TIME", "description": "Monitoring time for the transfer."}, {"name": "DTI", "type": "DT", "description": "Current date-time when the email is sent."}, {"name": "DTI_OFFSET", "type": "INT", "description": "Time zone offset from UTC in minutes."}, {"name": "RETRY", "type": "INT", "description": "Number of repetitions for SMTP transfer on failure."}, {"name": "RETRY_TIME", "type": "TIME", "description": "Waiting period before repeating the SMTP transfer."}, {"name": "Dns_ip4", "type": "DWORD", "description": "IP4 address of the DNS server."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates if the transfer completed successfully without error."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates if the transfer is currently active."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code if an error occurs during transfer."}, {"name": "ERROR_T", "type": "BYTE", "description": "Type of problem that occurred during transfer."}], "in/out": [], "return_value": null}
{"title": "DLOG_REAL Module", "description": "DLOG_REAL is for logging (recording) of a process value of \n\ntype REAL, and can only be used in combination with a DLOG_STORE_* \n\nmodule, as this coordinates of the data structure X to record the data. \n\nUsing parameter N defnes the number of desired decimal places. See \n\ndocumentation on the module REAL_TO_STRF. The D input determines \n\nwhich character represents the decimal point. Passed with no sign of \n\nparameter D, automatically ',' is used. \n\nAt recording formats that support a process value name, such as at \n\nDLOG_STORE_FILE_CSV a name can be provided at COLUMN\". If with DELTA \n\nparameter a value not equal 0.0 is specified, the automatic data logging is enabled \n\nvia differential monitoring. Changing the value of VALUE to + / - DELTA automatically \n\nstores a record. This feature can be applied in parallel to the central trigger on the \n\nDLOG_STORE_ * module. \n\n51 Version 1.21\n\nChapter 7. Data Logger", "type": "FUNCTION", "name": "DLOG_REAL", "input": [{"name": "X", "type": "DLOG_DATA", "description": "DLOG data structure used for storing the logging data."}, {"name": "VALUE", "type": "REAL", "description": "The process value to be logged."}, {"name": "N", "type": "INT", "description": "The number of decimal places to use when logging the process value."}, {"name": "D", "type": "STRING(1)", "description": "The character representing the decimal point."}, {"name": "COLUMN", "type": "STRING(40)", "description": "The name of the process value, used in formats that support this feature."}, {"name": "DELTA", "type": "REAL", "description": "The difference value that enables automatic data logging via differential monitoring if not equal to 0.0."}], "output": [], "in/out": [], "return_value": {"type": "VOID", "description": "Indicates that the function does not return a value."}}
{"title": "DLOG_STORE_FILE_CSV Module", "description": "DLOG_STORE_FILE_CSV is for logging (recording) of the \n\nprocess values in a CSV formatted fle. The data can be passed with the \n\nmodules DLOG_DINT, DLOG_REAL, DLOG_STRING, DLOG_DT. The \n\nparameter TRIG_M (positive pulse) is used to manually trigger (start) the \n\nstorage of process data. With Parameters TRIG_T an automatic time￾controlled release can be realized. If the current date / time value divided \n\nby the parameterized TRIG_T value with residual value is 0, then a Save is \n\nperformed. \n\nThis also ensures that the store is always performed at the same time", "type": "FUNCTION", "name": "DLOG_STORE_FILE_CSV", "input": [{"name": "X", "type": "DLOG_DATA", "description": "The DLOG data structure containing the process values to be logged."}, {"name": "ENABLE", "type": "BOOL", "description": "A boolean flag to enable or disable data recording."}, {"name": "TRIG_M", "type": "BOOL", "description": "A manual trigger that starts the storage of process data upon receiving a positive pulse."}, {"name": "TRIG_T", "type": "UDINT", "description": "An automatic trigger for cyclic storage based on time intervals."}, {"name": "FILE NAME", "type": "STRING", "description": "The name of the file (including path if necessary) where the data will be stored."}, {"name": "DTI", "type": "DT", "description": "The current date and time value to be used in data processing."}, {"name": "SEP", "type": "BYTE", "description": "The ASCII code of the delimiter used to separate recorded elements in the CSV file."}], "output": [{"name": "ERROR_C", "type": "DWORD", "description": "An error code indicating the status of the logging operation."}, {"name": "ERROR_T", "type": "BYTE", "description": "A code indicating the type of problem encountered."}], "in/out": [], "return_value": null}
{"title": "Data Logger Module", "description": "DLOG_STORE_RRD serves for logging (recording) of the \n\nprocess values in an RRD database. The data can be passed with the \n\nmodules DLOG_DINT, DLOG_REAL, DLOG_STRING, DLOG_DT. The \n\nparameter TRIG_M (positive pulse) is used to manually trigger (start) the \n\nstorage of process data. With Parameters TRIG_T an automatic time￾controlled release can be realized. If the current date / time value divided \n\nby the parameterized TRIG_T value with residual value is 0, then a Save is \n\nperformed. \n\nThis also ensures that the store is always performed at the same time", "type": "FUNCTION", "name": "DLOG_STORE_RRD", "input": [{"name": "ENABLE", "type": "BOOL", "description": "Enable data recording"}, {"name": "TRIG_M", "type": "BOOL", "description": "Manual trigger for starting data storage"}, {"name": "TRIG_T", "type": "UDINT", "description": "Automatic trigger interval for time-controlled storage"}, {"name": "URL", "type": "STRING", "description": "URL address of the server where data will be sent"}, {"name": "DTI", "type": "DT", "description": "Current date-time value for data logging"}, {"name": "SEP", "type": "BYTE", "description": "ASCII code for the separator of the recorded elements"}, {"name": "Dns_ip4", "type": "DWORD", "description": "IP address of the DNS server"}, {"name": "TIMEOUT", "type": "TIME", "description": "Time to monitor for data transfer completion"}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates whether the data transfer completed without error"}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code indicating the nature of any issue encountered"}, {"name": "ERROR_T", "type": "BYTE", "description": "Type of problem encountered during data transfer"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "DLOG_STRING Function Module", "description": "DLOG_STRING is for logging (recording) of a process value of type DINT, \n\nand can only be used in combination with a DLOG_STORE_* module, as this \n\ncoordinates of the data structure X to record the data. At recording formats that \n\nsupport a process value name, such as at DLOG_STORE_FILE_CSV a name can be \n\nprovided at COLUMN\".", "type": "FUNCTION", "name": "DLOG_STRING", "input": [{"name": "STR", "type": "STRING", "description": "The string representation of the process value to be logged."}, {"name": "COLUMN", "type": "STRING(40)", "description": "The name of the process value for logging purposes."}], "output": [], "in/out": [{"name": "X", "type": "DLOG_DATA", "description": "The DLOG data structure used for recording."}], "return_value": null}
{"title": "DNS Client Function", "description": "DNS_CLIENT determine from the given qualifed DOMAIN name the \n\nassociated IPv4 address eg \"www.oscat.de\" . For this purpose, a DNS \n\nquery to a DNS server for confgured DOMAIN name with is made. With \n\npositive edge of ACTIVATE the specifed DOMAIN is stored so that they no \n\nlonger must be present. If the query provide more IP addresses, so always \n\nhe highest value of the TTL (Time To Live) is used. As IP4_DNS can be used \n\nany public DNS servers. If the PLC is sitting behind a DSL router, this \n\nrouter can be used through its gateway address as a DNS server. Which \n\nultimately leads to faster even with repeated requests response times \n\nbecause they are managed in the router cache. With positive results DONE \n\n= TRUE the IP4 contains the requested IP address until the start of the \n\nnext query by positive edge of ACTIVATE. If in the DOMAIN name a valid \n\nIPv4 address is detected, no more DNS query is made and it is passed in \n\nconverted type to IPv4 and DONE is set to TRUE. ERROR gives, if an error \n\noccurs, the exact cause. \n\n89 Version 1.21\n\nChapter 9. Network and Communication\n\nError Codes:\n\nValue Source Description\n\nB3 B2 B1 B0\n\nnn nn nn xx IP_CONTROL Error from module IP_CONTROL\n\nxx xx xx 00 DNS_CLIENT No error: The request completed successfully\n\nxx xx xx 01 DNS_CLIENT Format error: The name server was unable to interpret the query. \n\nxx xx xx 02 DNS_CLIENT Server failure: The name server was unable to process this query\n\ndue to a problem with the nameserver.\n\nxx xx xx 03 DNS_CLIENT Name Error: Meaningful only for responses from an authoritative\n\nname server, this code signifies that the domain name referenced in\n\nthe query does not exist\n\nxx xx xx 04 DNS_CLIENT Not Implemented: The name server does not support the requested\n\nkind of query\n\nxx xx xx 05 DNS_CLIENT Refused: The name server refuses to perform the specified opera￾tion for policy reasons\n\nxx xx xx 06 DNS_CLIENT YXDomain: Name Exists when it should not\n\nxx xx xx 07 DNS_CLIENT YXRRSet. RR: Set Exists when it should not\n\nxx xx xx 08 DNS_CLIENT Nxrrset. RR: Set that should exist does not\n\nxx xx xx 09 DNS_CLIENT Server Not Authoritative for zone\n\nxx xx xx 0A DNS_CLIENT Name not contained in zone\n\nxx xx xx FF DNS_CLIENT No ip-address found", "type": "FUNCTION", "name": "DNS_CLIENT", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the IP control"}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer to transmit data"}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer to receive data"}, {"name": "ACTIVATE", "type": "BOOL", "description": "Query start by positive edge"}, {"name": "DOMAIN", "type": "STRING", "description": "Domain name or IP as String"}, {"name": "IP4_DNS", "type": "DWORD", "description": "IPv4 address of the DNS server"}], "output": [{"name": "IP4", "type": "DWORD", "description": "IPv4 address of the requested domain"}, {"name": "DONE", "type": "BOOL", "description": "Indicates whether the IP of the domain has been queried successfully"}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating the issue encountered during the query"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Dynamic DNS Registration Module", "description": "DNS_DYN dynamic IP addresses are registered as domain names. \n\nMany Internet providers assign a dynamic IP address when dialing into the \n\nInternet. To be visible and accessible for Internet Participants, one of the \n\nways is to upgrade its current IP address via Dyn-DNS. The process is not \n\nstandardized, unfortunately, so for every Dyn-DNS provider has to be \n\ncreated a individual solution. The module can be used in conjunction with \n\nDynDNS.org and Selfhost.de. These providers ofer in addition to paid also \n\nfree DynDNS services.\n\nIf ENABLE is set to TRUE, then the module is active. Using a positive edge \n\nto UPDATE any time an update can be started. If at T_UPDATE a time is \n\nspecifed, always an update is done after that time.\n\nCaution, most DynDNS providers rates a frequent or unnecessary update \n\nas an attack, and block the account for a certain time.\n\nThe time T_UPDATE should not be set below an hour. If the parameter \n\nT_UPDATE is not connect it is assumed as an update time of 1 hour. If no \n\nupdate is needed on time, then T#0ms should be passed.\n\nThe MODE parameter allows the selection of DynDNS Provider\n\n(0 = DynDNS.org, 1 = SELFHOST.DE)\n\nThe own domain name must be passed by the hostname. For security \n\nreasons, USERNAME and PASSWORD as authorization data must be \n\nspecifed to the DynDNS provider. If the parameter IP4 is not used, so \n\nDynDNS provider automatically adopts the current registration-IP as WAN \n\nIP with which the update is performed. By specifying an IP address also an \n\nindividual IP address may be assigned.\n\nWith fawless execution the parameter DONE = TRUE, else ERROR_C and \n\nERROR_T passes the error code and error type. (See error codes).\n\nERROR_T:\n\nValue Properties\n\n93 Version 1.21\n\nChapter 9. Network and Communication\n\n1 The exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 The exact meaning of ERROR_C can be read at module HTTP_GET\n\n3 The DynDNS provider has refused registration", "type": "FUNCTION", "name": "DNS_DYN", "input": [{"name": "ENABLE", "type": "BOOL", "description": "Release of the module to activate its functionality."}, {"name": "UPDATE", "type": "BOOL", "description": "Triggers a new DNS registration immediately."}, {"name": "T_UPDATE", "type": "TIME", "description": "Waiting time for the new DNS registration. Defaults to 1 hour if not specified."}, {"name": "MODE", "type": "BYTE", "description": "Selection of the DynDNS provider (0 = DynDNS.org, 1 = SELFHOST.DE)."}, {"name": "HOST_NAME", "type": "STRING(30)", "description": "The domain name to be registered."}, {"name": "USER_NAME", "type": "STRING(20)", "description": "The username used for registration with the DynDNS provider."}, {"name": "PASSWORD", "type": "STRING(20)", "description": "The password used for registration with the DynDNS provider."}, {"name": "IP4", "type": "DWORD", "description": "Optional parameter to specify a custom IP address. If not provided, the current WAN IP will be used."}], "output": [{"name": "BUSY", "type": "BOOL", "description": "Indicates whether the module is currently active and processing a query."}, {"name": "DONE", "type": "BOOL", "description": "Indicates whether the DNS registration succeeded."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code returned if registration fails."}, {"name": "ERROR_T", "type": "BYTE", "description": "Error type indicator."}], "in/out": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for IP configuration."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}], "return_value": {"type": null, "description": null}}
{"title": "DNS Reverse Client", "description": "DNS_REV_CLIENT determine from the given IP address the ofcially \n\nregistered domain name. For this purpose a reverse DNS query on the \n\nconfgured IP address with a DNS server is made. With positive edge of \n\nACTIVATE the specifed IP is stored so that they no longer must be present. \n\nIf the query result in more matches, it will always use the last record. As \n\nIP4_DNS can be used any public DNS servers. If the PLC is sitting behind a \n\nDSL router, this router can be used as a DNS server through its gateway \n\naddress. Which ultimately leads to faster even with repeated requests \n\nresponse times because they are managed in the router cache. With \n\npositive results DONE = TRUE the DOMAIN contains the ofcially \n\nregistered domain name until the start of the next query by positive edge \n\nof ACTIVATE. ERROR gives ao error, the error code. (See error codes).\n\nError Codes:\n\nValue Source Description\n\nB3 B2 B1 B0\n\nnn nn nn xx IP_CONTROL Error from module IP_CONTROL\n\nxx xx xx 00 DNS_CLIENT No error: The request completed successfully\n\nxx xx xx 01 DNS_CLIENT Format error: The name server was unable to interpret the query. \n\nxx xx xx 02 DNS_CLIENT Server failure: The name server was unable to process this query\n\ndue to a problem with the nameserver.\n\nxx xx xx 03 DNS_CLIENT Name Error: Meaningful only for responses from an authoritative\n\n91 Version 1.21\n\nChapter 9. Network and Communication\n\nname server, this code signifies that the domain name referenced in\n\nthe query does not exist\n\nxx xx xx 04 DNS_CLIENT Not Implemented: The name server does not support the requested\n\nkind of query\n\nxx xx xx 05 DNS_CLIENT Refused: The name server refuses to perform the specified opera￾tion for policy reasons\n\nxx xx xx 06 DNS_CLIENT YXDomain: Name Exists when it should not\n\nxx xx xx 07 DNS_CLIENT YXRRSet. RR: Set Exists when it should not\n\nxx xx xx 08 DNS_CLIENT Nxrrset. RR: Set that should exist does not\n\nxx xx xx 09 DNS_CLIENT Server Not Authoritative for zone\n\nxx xx xx 0A DNS_CLIENT Name not contained in zone", "type": "FUNCTION", "name": "DNS_REV_CLIENT", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the IP address"}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data"}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data"}, {"name": "ACTIVATE", "type": "BOOL", "description": "Trigger to start the function on a positive edge"}, {"name": "DOMAIN", "type": "STRING", "description": "Domain name or IP address as a string"}, {"name": "IP4_DNS", "type": "DWORD", "description": "IPv4 address of the DNS server"}], "output": [{"name": "IP4", "type": "DWORD", "description": "IPv4 address of the requested domain"}, {"name": "DONE", "type": "BOOL", "description": "Indicates that the IP of the domain has been queried successfully"}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating the result of the query"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "ELEMENT_COUNT Function", "description": "ELEMENT_COUNT determines the number of items in a list.\n\nIf the parameter ELEMENT is an empty string 0 is passed as result. If at\n\nleast one character is in ELEMENT it is evaluated as a single element and\n\nELEMENT_COUNT = 1 is passed to output.", "type": "FUNCTION", "name": "ELEMENT_COUNT", "input": [{"name": "SEP", "type": "BYTE", "description": "Separation character of the elements"}, {"name": "ELEMENT", "type": "STRING", "description": "Input list of elements, where items are separated by the SEP character. The length of the string can vary."}], "output": [{"name": "result", "type": "INT", "description": "Number of items in the list. Returns 0 for empty input, and 1 for a single character."}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the count of elements in the input list."}}
{"title": "ELEMENT_GET Function", "description": "ELEMENT_GET passes the item at the position POS from a list. The list con￾sists of strings which are separated by the separation character SEP. The\n\nfrst element of the list has the position 0", "type": "FUNCTION", "name": "ELEMENT_GET", "input": [{"name": "SEP", "type": "BYTE", "description": "The separation character of the elements."}, {"name": "POS", "type": "INT", "description": "The zero-based index of the item to retrieve."}, {"name": "ELEMENT", "type": "STRING", "description": "The input list of elements, consisting of strings separated by the separation character."}], "output": [{"name": "STRING", "type": "STRING", "description": "The output string corresponding to the element at the specified position."}], "in/out": [], "return_value": {"type": "STRING", "description": "Returns the element found at the specified position in the input list.", "fields": []}}
{"title": "File Block Access Module", "description": "FILE_BLOCK provides access to fles of any size by a data \n\nblock that is always kept in a read bufer. If the requested byte of a fle is \n\nnot stored in last block of data, automatically a matching new data block is \n\nread and the desired byte is putted out. The greater the read bufer is the \n\nless frequently a block must be read again. Optimally it is a linear access \n\nto the bytes, so that as seldom as possible, a data block must be read \n\nanew.\n\n152 Version 1.21\n\nChapter 10. File-System\n\nProcedure:\n\nThe Parameter FILENAME specifes the name of the fle to be read, and \n\nwith PT_SIZE the size of the read bufer is specifed in bytes. The value for \n\nparameter POS is the exact data position within the fle, which has to be \n\nread. The process is triggered by setting MODE to 1. Then the system \n\nautomatically checks whether the desired data byte is already in the read \n\nbufer. If not, then a new matching block of data is copied into the read \n\nbufer, and the desired data byte is passed on the parameter DATA. As \n\nlong as this operation is not fnished yet, MODE remains at 1, and only \n\nafter completion of the operation of module is reset to MODE = 0. If a \n\nspecifed data position is larger than the current length of the fle or the \n\nfle has length 0, so the output at ERROR is 255 (See ERROR codes from \n\nblock FILE_SERVER).\n\nIf the fle access is no longer needed, the user must close the fle be either \n\nby use of AUTO_CLOSE or MODE 5 (close fle) of the FILE_SERVER.", "type": "FUNCTION_BLOCK", "name": "FILE_BLOCK", "input": [{"name": "PT_SIZE", "type": "UINT", "description": "Number of bytes in the buffer"}, {"name": "FILE_NAME", "type": "STRING", "description": "Name of the file to be read"}, {"name": "POS", "type": "UDINT", "description": "Current file reading position"}], "output": [{"name": "ERROR", "type": "BYTE", "description": "Error code - See module FILE_SERVER"}, {"name": "DATA", "type": "BYTE", "description": "Byte of the requested file position"}], "in/out": [{"name": "IN_OUT_MODE", "type": "BYTE", "description": "Current mode of the operation"}, {"name": "FD", "type": "FILE_SERVER_DATA", "description": "File Interface"}, {"name": "PT", "type": "NETWORK_BUFFER", "description": "Read data"}], "return_value": null}
{"title": "File Path Split Function", "description": "FILE_PATH_SPLIT The module split a fle path into its component elements. The drive, path \n\nand fle name are extracted and stored in the data structure X. As \n\ndirectory separator \"\\\" and \"/\" will be accepted. If the passed \"File name\" is \n\nnot empty and elements can be evaluated, the module returns TRUE, \n\notherwise FALSE.", "type": "FUNCTION", "name": "FILE_PATH_SPLIT", "input": [{"name": "INPUT_FILE_NAME", "type": "STRING", "description": "The input file path as a string."}], "output": [], "in/out": [{"name": "X", "type": "FILE_PATH_DATA", "description": "A data structure that stores the extracted components of the file path."}], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input file name is valid and elements can be evaluated, FALSE otherwise."}}
{"title": "FILE_SERVER Module for PLC", "description": "FILE_SERVER_DATA (fle interface)\n\nPT: NETWORK_BUFFER (read / write data)\n\nAvailable platforms and related dependencies\n\nCoDeSys:\n\nDoes the library \" SysLibFile.lib \"\n\nRuns on\n\nWAGO 750-841\n\nCoDeSys SP PLCWinNT V2.4\n\nand compatible platforms\n\n154 Version 1.21\n\nChapter 10. File-System\n\nPCWORX:\n\nNo library required\n\nRuns on all controllers with fle system from frmware >= 3.5x\n\nBECKHOFF:\n\nDevelopment Environment Target \n\nPlatform\n\nPLC libraries to include\n\nTwinCAT v2.8.0 or higher PC or CX \n\n(x86)\n\nTcSystem.Lib\n\nTwinCAT v2.10.0 Build >= 1301 or \n\nhigher\n\nCX (ARM) TcSystem.Lib\n\nThe module FILE_SERVER enables hardware and manufacturers a neutral \n\naccess to the fle system of PLC. Since at almost every hardware and \n\nsoftware platform, the accessibility to the fle system is sometimes very \n\ndiferent, it is necessary to use a uniform and simplifed functional \n\ninterface, which is reduced to the necessary functions. The module is \n\nhardware-dependent and therefore it must be available for that platform \n\nare the appropriate implementation.\n\nWIth FILE NAME the fle is determined. Depending on the platform may be \n\nslightly diferent syntax (with or without the path). With MODE parameter \n\nthe principle of access is given. At MODE 1,2 and 3 with \"OFFSET\" the \n\nposition can be specifed in the fle. In the fle system counting is always \n\nstarted with byte 0. The frst step is always to check whether this fle is \n\nalready (still) open, and if not they will open and the current fle size is \n\nobserved and passed to the \"FILE_SIZE\". When specifying a time \n\nAUTO_CLOSE > 0ms, the fle is automatically closed after each command \n\nand the expiration of the waiting time. Alternatively, using MODE = 5, the \n\nclosing of the fle is done manually. Each write command which change the \n\nsize of the fle automatically leads to a corrected \"FILE_SIZE\" entry, so it is \n\nalways visible how large the fle is right now. Once a fle is open, this is \n\nreported on FILE_OPEN = TRUE.\n\nEach write command at which the size of the fle changes automatically \n\nleads to a corrected \"FILE_SIZE\" entry, so you can always how large the \n\nfle is right now. In PT.SIZE is the actual amount of data automatically \n\ncorrected or entered.\n\nIf the MODE 1,2 or 3 called with PT.SIZE = 0, the fle is opened, the \n\nFILE_SIZE determined, but no read/write command is performed, and the \n\nfle will remain open until manually closed or AUTO_CLOSE.\n\n155 Version 1.21\n\nChapter 10. File-System\n\nIf data has to be written, the data has to be stored in PT.BUFFER and in \n\nPT.SIZE the bytes must exist. This data are written to the specifed relative \n\nofset in the fle. If a write mode is called with PT.SIZE = 0, then in turn the \n\nfle is opened (if not already open, and made no write command, and \n\nthese will remain open until a manual closing or AUTO_CLOSE is carried \n\nout.)\n\nAfter every executed command that changes the position of the virtual \n\nread / write pointer, the current position in the data structure is written in \n\nthe parameter \"OFFSET\". An automatic append function can be realized \n\nvery easy. The parameter FILE_SIZE has to be written to the OFFSET \n\nparameter after opening the fle. After that, all written bytes are appended \n\nto the end without changing the OFFSET parameter manually. The same \n\nprinciple can be applied of course when reading, the read pointer should \n\nbe positioned frst within the fle (usually starting at ofset 0).\n\nIf a command is executed and FILE NAME difers from the current FILE \n\nNAME, the old one, still open fle, is closed automatically and the new one \n\nis opened then, and continued with the normal command. This can easily \n\nperform a fying change of the fle without having to perform cumbersome \n\nand OPEN to CLOSE before.\n\nWhen you delete a fle with MODE 4 automatically a potentially \n\noutstanding fle is closed before, and then deleted in sequence.\n\nAfter a AUTO_CLOSE or manual closing by MODE 5 all data in \n\nFILE_SERVER_DATA is reseted.\n\nThe module FILE_SERVER should always be called periodically, at least as \n\nlong as not all requests are completed safely.\n\nSince some platforms perform a fle-lock (eg CoDeSys) and do not always \n\nallow an asynchronous use, FILE_SERVER should run in a separate task so \n\nthat the default application is not infuenced in the time behavior. . \n\nThe FILE_SERVER provides the following commands in \"MODE\":\n\nMODE Properties\n\n1 An existing file is opened for reading and reading data optional\n\n2 An existing file is opened for write access and optional data is written\n\n3 A file will be created for writing and data will be written optional\n\n4 Delete file\n\n5 Close file\n\nERROR: Error codes Beckhof\n\nValue trigger Description\n\n156 Version 1.21\n\nChapter 10. File-System\n\n0 No error\n\n19 SYSTEMSERVICE_FOPEN Unknown or invalid parameter\n\n28 SYSTEMSERVICE_FOPEN File not found. Invalid file name or file path\n\n38 SYSTEMSERVICE_FOPEN SYSTEMSERVICE_FOPEN\n\n51 SYSTEMSERVICE_FCLOSE unknown or invalid file handle.\n\n62 SYSTEMSERVICE_FCLOSE File was opened with the wrong method.\n\n67 SYSTEMSERVICE_FREAD unknown or invalid file handle.\n\n74 SYSTEMSERVICE_FREAD No memory for read buffer.\n\n78 SYSTEMSERVICE_FREAD File was opened with the wrong method.\n\n83 SYSTEMSERVICE_FWRITE unknown or invalid file handle\n\n94 SYSTEMSERVICE_FWRITE File was opened with the wrong method.\n\n99 SYSTEMSERVICE_FSEEK unknown or invalid file handle.\n\n110 SYSTEMSERVICE_FSEEK File was opened with the wrong method.\n\n115 SYSTEMSERVICE_FTELL unknown or invalid file handle.\n\n126 SYSTEMSERVICE_FTELL File was opened with the wrong method\n\n140 SYSTEMSERVICE_FDELETE File not found. Invalid file name or file path.\n\n255 Application Position is after the end of file\n\nERROR: Error codes PCWORX:\n\nValue trigger Description\n\n0 No error\n\n2 File_open The maximum number of files already open\n\n4 File_open The file is already open\n\n5 File_open The file is write-protected or access denied\n\n6 File_open File name not specified\n\n11 File_close Invalid file handle\n\n30 File_close File could not be closed\n\n41 FILE_READ Invalid file handle\n\n157 Version 1.21\n\nChapter 10. File-System\n\n50 FILE_READ End of file reached\n\n52 FILE_READ The number of characters to read is larger than the data buffer\n\n62 FILE_READ Data could not be read\n\n71 FILE_WRITE Invalid file handle\n\n81 FILE_WRITE There is no memory available to write the data \n\n82 FILE_WRITE The count of characters to write is larger than the data buffer\n\n93 FILE_WRITE There were no written data\n\n0 FILE_SEEK Invalid file handle\n\n113 FILE_SEEK Invalid positioning mode or the specified position is before the start of\n\nthe file\n\n124 FILE_SEEK The position could not be set\n\n131 FILE_TELL Invalid file handle\n\n142 FILE_REMOVE The maximum number of files already open\n\n143 FILE_REMOVE The file could not be found\n\n145 FILE_REMOVE The file is opened, readonly or access denied\n\n146 FILE_REMOVE File name not specified\n\n161 FILE_REMOVE File could not be deleted\n\n255 Application Position is after the end of file\n\nERROR: CoDeSys error codes:\n\nValue trigger Description\n\n0 No error\n\n1 SysFileOpen Error\n\n2 SysFileClose Error\n\n3 SysFileRead Error\n\n4 SysFileWrite Error\n\n5 SysFileSetPos Error\n\n6 SysFileGetPos Error\n\n7 SysFileDelete Error\n\n8 SysFileGetSize Error\n\n158 Version 1.21\n\nChapter 10. File-System\n\n255 Application Position is after the end of file", "type": "FUNCTION", "name": "FILE_SERVER", "input": [{"name": "FILENAME", "type": "STRING", "description": "The name of the file to be accessed. The syntax may vary by platform."}, {"name": "MODE", "type": "INT", "description": "Specifies the mode of operation: 1 for read, 2 for write, 3 for create, 4 for delete, 5 for close."}, {"name": "OFFSET", "type": "INT", "description": "Specifies the byte offset in the file to start reading or writing."}, {"name": "AUTO_CLOSE", "type": "INT", "description": "Specifies the auto close time in milliseconds. If greater than 0, the file will close automatically after each command."}, {"name": "PT", "type": "STRUCT", "description": "A structure containing buffer and size for read/write operations.", "fields": [{"name": "BUFFER", "type": "BYTE[]", "description": "The data buffer that holds data to be read from or written to the file."}, {"name": "SIZE", "type": "INT", "description": "The number of bytes in the buffer."}]}], "output": [{"name": "FILE_SIZE", "type": "INT", "description": "The current size of the file after a read/write operation."}, {"name": "FILE_OPEN", "type": "BOOL", "description": "Indicates whether the file is currently open."}, {"name": "ERROR_CODE", "type": "INT", "description": "An error code indicating the status of the file operation."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the file operation was successful, false otherwise."}}
{"title": "FTP Client Module", "description": "FTP_CLIENT is used to transfer fles from the PLC to an FTP \n\nserver and to transmitted from the FTP server to the PLC. A positive edge \n\n94 Version 1.21\n\nChapter 9. Network and Communication\n\nat ACTIVATE starts the transfer process. In FTP_DOWNLOAD the \n\ntransmission direction can be specifed. The parameter FTP_URL contains \n\nthe name of the FTP server and pass the optional user name and \n\npassword, an access path and an additional port number for the data \n\nchannel. If no username or password is passed, the module trys \n\nautomatically to register as \"Anonymous\" . The parameter FTP_ACTIV \n\ndetermines whether the FTP server is operated in active or passive mode. \n\nIn the ACTIV mode, the FTP server tries to establish the data channel for \n\ncontrol, however these may cause problems by security software, frewall, \n\netc. because these could block the connection request. For this purpose, in \n\nthe frewall a corresponding exception rule has to be defned. In the \n\npassive mode, this problem is alleviated since the controller establishes \n\nthe connection, and can easily pass through the frewall. The control \n\nchannel is always set up on port 20, and the data channel via standard \n\nPORT21, but this is in turn is depending whether active or passive mode is \n\nused, or optional PORT number in the FTP-URL is specifed. With the \n\nparameter FILE_DELETE can be determined whether the source fle should \n\nbe deleted after successful transfer. This works on FTP and even on the \n\ncontrol side. In specifying FTP directories the behavior depends on FTP \n\nserver, whether they exist in this case or are created automatically. \n\nNormally, these should be already available. The size of fles is no limit per \n\nse, but there are practical limits: Space on PLC, FTP storage and the \n\ntransmission time. With dns_ip4 the IP address of the DNS server must be \n\nspecifed, if in the FTP URL a DNS name is given, alternatively, an IP \n\naddress can be entered in the FTP URL. At parameters PLC_IP4 the own IP \n\naddresses has to be supplied. If errors occur during transmission these are \n\npassed to the output ERROR_C and ERROR_T. As long as the transfer is \n\nrunning, BUSY = TRUE, and after an error-free completion of the operation, \n\nDONE = TRUE. Once a new transfer is started, DONE, ERROR_T and \n\nERROR_C are reseted.\n\nThe module has integrated the IP_CONTROL and must not be externally \n\nlinked to this, as it by default would be necessary.\n\nBackground: http://de.wikipedia.org/wiki/File_Transfer_Protocol \n\nURL examples:\n\nftp://username:password@servername:portnummer/directory/\n\nftp://username:password@servername\n\nftp://username:password @ servername / directory /\n\nftp://servername\n\nftp://username:password@192.168.1.1/directory/\n\nftp://192.168.1.1\n\n95 Version 1.21\n\nChapter 9. Network and Communication\n\nERROR_T:\n\nValue Properties\n\n1 Problem: DNS_CLIENT\n\nThe exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 Problem: FTP control channel\n\nThe exact meaning of ERROR_C can be read at module IP_CONTROL\n\n3 Problem: FTP data channel\n\nThe exact meaning of ERROR_C can be read at module IP_CONTROL\n\n4 Problem: FILE_SERVER\n\nThe exact meaning of ERROR_C can be read at block FILE_SERVER\n\n5 Problem: END - TIMEOUT\n\nERROR_C contains the left WORD of the step number, and the right WORD has the re￾sponse code received by the FTP server.\n\nThe parameters must be considered first as a HEX value, divided into two WORDS, and\n\nthen be considered as a decimal value.", "type": "FUNCTION", "name": "FTP_CLIENT", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "A positive edge starts the query."}, {"name": "FILE_NAME", "type": "STRING", "description": "File path and filename for the transfer."}, {"name": "FTP_URL", "type": "STRING", "description": "FTP access path including optional username, password, and port."}, {"name": "FTP_DOWNLOAD", "type": "BOOL", "description": "0 for upload, 1 for download."}, {"name": "FTP_ACTIV", "type": "BOOL", "description": "0 for passive mode, 1 for active mode."}, {"name": "FILE_DELETE", "type": "BOOL", "description": "Indicates whether to delete files after transfer."}, {"name": "TIMEOUT", "type": "TIME", "description": "Time duration for the transfer process."}, {"name": "Dns_ip4", "type": "DWORD", "description": "IP4 address of the DNS server."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates transfer completion without error."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates the transfer is currently active."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code if an error occurred during transfer."}, {"name": "ERROR_T", "type": "BYTE", "description": "Indicates the type of the problem encountered."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Get WAN IP", "description": "GET_WAN_IP determines the IP address that the Internet router on the Wide \n\nArea Network (Internet) uses. This IP address is necessary for example to \n\nto make DynDNS declarations. With a positive edge of the ACTIVATE the \n\nrequest is started. After successful completion of the query DONE = TRUE, \n\nand the parameters WAN_IP the current WAN IP address displayed. If an \n\nerror occurs during the query it is reported in ERROR_C in combination \n\nwith ERROR_T.\n\nERROR_T:\n\nValue Properties\n\n1 The exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 The exact meaning of ERROR_C can be read at module HTTP_GET\n\n97 Version 1.21\n\nChapter 9. Network and Communication", "type": "FUNCTION", "name": "GET_WAN_IP", "input": [{"name": "IP_C", "type": "struct", "description": "Data structure for IP Control parameters.", "fields": []}, {"name": "S_BUF", "type": "struct", "description": "Data structure for the transmit network buffer.", "fields": []}, {"name": "R_BUF", "type": "struct", "description": "Data structure for the receive network buffer.", "fields": []}, {"name": "ACTIVATE", "type": "BOOL", "description": "Input to release the query."}], "output": [{"name": "WAN_IP", "type": "DWORD", "description": "Wide Area Network address."}, {"name": "DONE", "type": "BOOL", "description": "Indicates whether the query completed without errors."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code associated with the query."}, {"name": "ERROR_T", "type": "BYTE", "description": "Error type of the query."}], "in/out": [], "return_value": null}
{"title": "HTML Decode Function", "description": "HTML_DECODE converts reserved characters which are in the form\n\n&name; stored HTML code, in the original character. In addition, all coded\n\ncharacters are converted into the corresponding ASCII code. Special cha￾racters can be represented by the following string in HTML:\n\n- &#NN, where NN represents the position of the character within the cha￾racter map in decimal notation.\n\n- &#xNN, or &#XNN where NN represents the position of the character wi￾thin the character table in hexadecimal notation.\n\n&name; Special characters have names like &euro; for €.\n\nThe reserved characters in HTML are:\n\n& Is encoded as &amp;\n\n75 Version 1.21\n\nChapter 8. Converter\n\n> Is encoded as &gt;\n\n< Is encoded as &lt;\n\n\" is coded as &quot;", "type": "FUNCTION", "name": "HTML_DECODE", "input": [{"name": "String", "type": "STRING", "description": "The input string containing HTML encoded characters."}], "output": [{"name": "string_length", "type": "STRING", "description": "The decoded output string with reserved characters converted to their original form."}], "return_value": {"type": "STRING", "description": "The result of the HTML decode operation.", "fields": []}}
{"title": "HTML Encode Function", "description": "HTML_ENCODE converts in HTML reserved characters to form &Name;. If the\n\ninput M is set to TRUE also all the characters with the code 160-255 and\n\n128 are implemented in the &Name convention.\n\nCaution should be exercised in the use of character sets because they are\n\nnot the same on all systems and deviations are common in special charac￾ters. Thus, for example, not all systems the € character at position 128 in\n\nthe character map.\n\nThe reserved characters in HTML are:\n\n& Is encoded as &amp;\n\n> Is encoded as &gt;\n\n< Is encoded as &lt;\n\n\" is coded as &quot;\n\nHtml_encode converts the string '1 > than 0 'into '1 is &gt; than 0'.\n\n76 Version 1.21\n\nChapter 8. Converter", "type": "FUNCTION", "name": "HTML_ENCODE", "input": [{"name": "String", "type": "STRING", "description": "The input string to be encoded."}, {"name": "mode", "type": "BOOL", "description": "If TRUE, encodes additional characters (code 160-255 and 128) to HTML entities."}], "output": [{"name": "encoded_string", "type": "STRING", "description": "The encoded string with HTML reserved characters converted to HTML entities."}], "in/out": [], "return_value": {"type": "STRING", "description": "The result of the HTML encoding process.", "fields": []}}
{"title": "HTTP GET Function Module", "description": "HTTP_GET does at positive edge of Get a GET-command on an HTTP ser￾ver. IWith MODE the HTTP protocol version can be specifed. The reques￾ted URL (web link) must be submitted completely processed in the\n\nURL_DATA structure. The full URL should therefore be processed before the\n\nmodule call by \"STRING_TO_URL. After a successful query DONE = TRUE,\n\nand the parameters HTTP_START and HTTP_STOP point to the data area in\n\nwhich the message header data for further processing and evaluation are\n\nto be found. Normally, a message body is present, which in turn is trans-\n\n98 Version 1.21\n\nChapter 9. Network and Communication\n\nmitted via BODY_START and BODY_STOP. Also, on HTTP_STATUS is reported\n\nthe HTTP status code as a string. One of the difculties in receiving the\n\nHTTP data is the end of the data stream. This module pursued multiple\n\nstrategies. In the process of the HTTP/1.0 the end of receiving data is de￾tected by disconnection of the host. Furthermore, always the information\n\nin the header \"Content-Length\" is checked, and with this can be clearly re￾cognized, that all data is received. If none of the previous versions is true,\n\nso a simple Receive Timeout Error detectes the end of data transmission.\n\nThe only downside is, that this takes time. Sometimes, depending on the\n\ntimeout value longer than desired. Therefore it is not bad if a reasonable\n\ntimeout value is set at IP_CONTROL. ERROR gives at errors, the exact cau￾se (See module IP_CONTROL)\n\nThe following MODE can be used:\n\nMode Protocol Version Properties\n\n0 HTTP/1.0 The host terminates automatically the TCP connection, after the trans￾fer of data.\n\n1 HTTP/1.0 By applying \"Connection: Keep-Alive\", the host is instructed to use a\n\npersistent connection. The client should end of the connection after\n\nstopping activities.\n\n2 HTTP/1.1 The host uses a persistent connection and must be stopped by client.\n\n3 HTTP/1.1 By use of \"Connection: Close\" the host is instructed to stop transmissi￾on of data, the TCP connection.", "type": "FUNCTION", "name": "HTTP_GET", "input": [{"name": "URL_DATA", "type": "STRING_TO_URL", "description": "The complete URL string that has been processed into a URL structure."}, {"name": "IP_C", "type": "parameterization", "description": "Parameterization for IP configuration."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "IP4", "type": "DWORD", "description": "The IP address of the HTTP server."}, {"name": "GET", "type": "BOOL", "description": "Trigger to start the HTTP query."}, {"name": "MODE", "type": "BYTE", "description": "Determines the version of the HTTP GET query."}, {"name": "UNLOCK_BUF", "type": "BOOL", "description": "Indicates the release of the receive data buffer."}], "output": [{"name": "HTTP_STATUS", "type": "STRING", "description": "The HTTP status code returned from the server."}, {"name": "HTTP_START", "type": "UINT", "description": "The start position of the message header."}, {"name": "HTTP_STOP", "type": "UINT", "description": "The stop position of the message header."}, {"name": "BODY_START", "type": "UINT", "description": "The start position of the message body."}, {"name": "BODY_STOP", "type": "UINT", "description": "The stop position of the message body."}, {"name": "DONE", "type": "BOOL", "description": "Indicates if the task was performed without error."}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating the specific issue encountered."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value."}}
{"title": "INI Parser Buffer Module", "description": "INI_PARSER_BUF enables the analysis of elements of a INI fle \n\nstored in a Byte-Array . Before queries can be processed the user must fll \n\nthe byte array PT.BUFFER with the ini data, and the number of bytes has to \n\nbe stored in PT.SIZE. The search for elements always begins on the given \n\ndepended \"OFFSET\", and hence is very easy to look only at certain \n\npositions, or to repeat the search from a specifc section to browse not \n\nalways the entire byte array. At the initial search should start default to \n\nOFFSET 0 (but may not!). When querying sections and keys, there are \n\nvarious procedures. Either it is queried to a Section and evaluates all of \n\nthe following keys by individual queries, or to use in very large \n\ninitialization fle the classic enumeration (listing), which means it will be \n\nreport serially all the elements, and processed by the application.\n\nSection Search:\n\nTo determine the OFFSET of a specifc Section, STR must declare the name \n\nof the Section and the ofset can be set to a position that is located before \n\nof the searched section. Should only the nearest available section be \n\nfound, at STR an empty sting must be passed. The search query is started \n\nby RUN = 1. The search will take diferent time, depending on the \n\nstructure and size of the INI data, it takes an indefnite number of cycles \n\nuntil a positive or negative result is achieved. Once the search is fnished, \n\nthe INI_PARSER_BUF sets the parameters of RUN to 0. RESULT passes the \n\nresult of the search to output. Upon successful search the name of the \n\nsection is shown at parameters KEY. And then the OFFSET parameter \n\npoints to the end of the section line. Thus, immediately after that the key \n\nevaluation can be continued, without having to manually change the \n\nOFFSET. \n\nKey Search:\n\nBefore a Key is evaluated, the OFFSET must have a correct value, this can \n\nbe done by manual set of OFFSET or by a previously executed Section \n\nsearch. Before running the query at STR the name of the key must be are \n\npassed. If an empty string STR is handed over, the next key found is \n\nreturned. RUN = 2 means the query can be started. Once the search is \n\n162 Version 1.21\n\nChapter 10. File-System\n\nfnished, the INI_PARSER_BUF sets the parameters of RUN to 0. With \n\nRESULT the search results will be issued. When in a query the key \n\nidentifed a new Section, this is reported by RESULT = 11. Upon successful \n\nsearch the output of the parameter KEY is the name of the found key , and \n\nVALUE is the key value. And then the OFFSET parameter points to the end \n\nof the key line. Thus, immediately after the next Key evaluation be \n\ncontinued, without having to manually change the OFFSET. \n\nEnumeration - see next item:\n\nFor very large amount of data of an initialization fle to be evaluated, with \n\na enumeration (list) the user program can be build simple, and the \n\nevaluation be carried out more quickly because here no line must be used \n\nmore than once. Before the start OFFSET must have a reasonable value, \n\nthe default case to 0. With RUN = 3 the evaluation is started. Once a \n\nsection or a key is found, it is also issued immediately. In a section KEY \n\nprints the name of the Section and RESULT = 1. With a found KEY, KEY has \n\nthe key name and VALUE is the key value, and RESULT= 2.\n\nIf in a query, the end of the data array is reached, this will be reported by \n\nRESULT = 10. \n\nRUN: Feature List\n\nRUN Function\n\n0 No function to perform - and last function has finished\n\n1 Specific section or evaluate next found section \n\n2 evaluate specific Key or Key found next \n\n3 evaluate next found element (section or key) \n\nRESULT: Result - Feedback\n\nRESULT Description\n\n1 Section found\n\n2 Key found\n\n5 Current query is still running - call module further cyclical!\n\n10 Nothing found - reached the end of data\n\n163 Version 1.21\n\nChapter 10. File-System\n\n11 Key not found - reached the end of Section", "type": "FUNCTION", "name": "INI_PARSER_BUF", "input": [{"name": "RUN", "type": "BYTE", "description": "Command code for the current action. 1 for section search, 2 for key search, 3 for enumeration."}, {"name": "OFFSET", "type": "UDINT", "description": "Current file offset for the query."}, {"name": "STR", "type": "STRING(STRING_LENGTH)", "description": "Name of the section or key to search for."}, {"name": "PT", "type": "NETWORK_BUFFER", "description": "Read data buffer containing the INI file data."}], "output": [{"name": "RESULT", "type": "BYTE", "description": "The result of the query indicating success or failure."}, {"name": "KEY", "type": "STRING(STRING_LENGTH)", "description": "Name of the found section or key."}, {"name": "VALUE", "type": "STRING(STRING_LENGTH)", "description": "Value associated with the found key."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "INI Parser File Module", "description": "INI_PARSER_FILE enables the analysis of the elements of an \n\narbitrarily large INI fle which is read into the read data bufer block by \n\nblock for automatically processing. The name of the fle is passed in \n\nparameter \"FILENAME\". The search for elements always begins on the \n\ngiven depended \"OFFSET\", and hence is very easy to look only at certain \n\npositions, or to repeat the search from a specifc section to browse not \n\nalways the entire byte array. At the initial search should start default to \n\nOFFSET 0 (but may not!). When querying sections and keys, there are \n\nvarious procedures. Either it is queried to a Section and evaluates all of \n\nthe following keys by individual queries, or to use in very large \n\ninitialization fle the classic enumeration (listing), which means it will be \n\nreport serially all the elements, and processed by the application.\n\n164 Version 1.21\n\nChapter 10. File-System\n\nSection Search:\n\nTo determine the OFFSET of a specifc Section, STR must declare the name \n\nof the Section and the ofset can be set to a position that is located before \n\nof the searched section. Should only the nearest available section be \n\nfound, at STR an empty sting must be passed. The search query is started \n\nby RUN = 1. The search will take diferent time, depending on the \n\nstructure and size of the INI data, it takes an indefnite number of cycles \n\nuntil a positive or negative result is achieved. Once the search is fnished, \n\nthe INI_PARSER_BUF sets the parameters of RUN to 0. RESULT passes the \n\nresult of the search to output. Upon successful search the name of the \n\nsection is shown at parameters KEY. And then the OFFSET parameter \n\npoints to the end of the section line. Thus, immediately after that the key \n\nevaluation can be continued, without having to manually change the \n\nOFFSET. \n\nKey Search:\n\nBefore a Key is evaluated, the OFFSET must have a correct value, this can \n\nbe done by manual set of OFFSET or by a previously executed Section \n\nsearch. Before running the query at STR the name of the key must be are \n\npassed. If an empty string STR is handed over, the next key found is \n\nreturned. RUN = 2 means the query can be started. Once the search is \n\nfnished, it sets the parameters of RUN to 0. With RESULT the search \n\nresults will be issued. When in a query the key identifed a new Section, \n\nthis is reported by RESULT = 11. Upon successful search the output of the \n\nparameter KEY is the name of the found key , and VALUE is the key value. \n\nAnd then the OFFSET parameter points to the end of the key line. Thus, \n\nimmediately after the next Key evaluation be continued, without having to \n\nmanually change the OFFSET. \n\nEnumeration - see next item:\n\nFor very large amount of data of an initialization fle to be evaluated, with \n\na enumeration (list) the user program can be build simple, and the \n\nevaluation be carried out more quickly because here no line must be used \n\nmore than once. Before the start OFFSET must have a reasonable value, \n\nthe default case to 0. With RUN = 3 the evaluation is started. Once a \n\nsection or a key is found, it is also issued immediately. In a section KEY \n\nprints the name of the Section and RESULT = 1. With a found KEY, KEY has \n\nthe key name and VALUE is the key value, and RESULT= 2.\n\nIf in a query, the end of the data array is reached, this will be reported by \n\nRESULT = 10.\n\n165 Version 1.21\n\nChapter 10. File-System\n\nIf the fle access is no longer needed, the user must close the fle be either \n\nby use of AUTO_CLOSE or MODE 5 (close fle) of the FILE_SERVER.\n\nRUN: Feature List\n\nRUN Function\n\n0 No function to perform - and last function is complete\n\n1 Evaluate specific section or evaluate next found section \n\n2 evaluate specific Key or Key found next \n\n3 evaluate next found element (section or key) \n\nRESULT: Result - Feedback\n\nRESULT Description\n\n1 Section found\n\n2 Key found\n\n5 Current query is still running - call module further cyclical!\n\n10 Nothing found - reached the end of data\n\n11 Key not found - reached the end of Section\n\n166 Version 1.21\n\nChapter 11. Telnet-Vision\n\n 11. Telnet-Vision", "type": "FUNCTION", "name": "INI_PARSER_FILE", "input": [{"name": "FILENAME", "type": "STRING", "description": "The name of the INI file to be processed."}, {"name": "RUN", "type": "BYTE", "description": "Command code for the current action: 1 for section search, 2 for key search, 3 for enumeration."}, {"name": "OFFSET", "type": "UDINT", "description": "Current file offset for the query, indicating where to start searching within the INI file."}, {"name": "STR", "type": "STRING(STRING_LENGTH)", "description": "The string representing the name of the section or key to search for."}, {"name": "FSD", "type": "FILE_SERVER_DATA", "description": "The file interface for handling the INI file data."}, {"name": "PT", "type": "NETWORK_BUFFER", "description": "The buffer for reading data from the INI file."}], "output": [{"name": "RESULT", "type": "BYTE", "description": "The result of the search query, indicating the outcome of the operation."}, {"name": "KEY", "type": "STRING(STRING_LENGTH)", "description": "The name of the found section or key during the search."}, {"name": "VALUE", "type": "STRING(STRING_LENGTH)", "description": "The value associated with the found key."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Geographic Information Retrieval from IP Address", "description": "IP2GEO (Geographic Data)\n\n99 Version 1.21\n\nChapter 9. Network and Communication\n\nINPUT ACTIVATE: BOOL (release for query)\n\nOUTPUT BUSY: BOOL (Query is active)\n\nDONE: BOOL (Query completed without errors)\n\nERROR_C: DWORD (Error code)\n\nERROR_T: BYTE (error type)\n\nThe device supplies because of the wide-area network IP address, the \n\ngeographic information of the Internet access. As the WAN IP addresses \n\nare registered worldwide, therefore can be determined the approximate \n\ngeographical position of the PLC. Should access runs through a proxy \n\nserver, so its geographic position is determined and not the PLC. Usually, \n\nbut normally it is in the nearness of the PLC, and thus the deviation is not \n\nrelevant. This results in calculated positions difer only a few miles from \n\nthe true position, and is relatively accurate.\n\nIf the parameter \"IP\" specifes no IP address, automatically the current \n\nWAN IP is used, otherwise the information of the confgured IP delivered. \n\nWith a positive edge of the ACTIVATE the request is started. As long as the \n\nquery is not complete, BUSY = TRUE is passed. After successful completion \n\nof the query DONE = TRUE, and the parameters WAN_IP the current WAN \n\nIP address displayed. If an error occurs during the query it is reported in \n\nERROR_C in combination with ERROR_T.\n\nERROR_T:\n\nValue Properties\n\n1 The exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 The exact meaning of ERROR_C can be read at module HTTP_GET\n\nThe \"country_code is coded according to ISO 3166 country code ALPHA-2\".\n\nhttp://www.iso.org/iso/english_country_names_and_code_elements\n\nhttp://de.wikipedia.org/wiki/ISO-3166-1-Kodierliste\n\n100 Version 1.21\n\nChapter 9. Network and Communication\n\nThe \"REGION_CODE\" is coded to \"FIPS region code\". \n\nhttp://en.wikipedia.org/wiki/List_of_FIPS_region_codes", "type": "FUNCTION", "name": "IP2GEO", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization containing the IP address for which geographic data is requested."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data during the query process."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data after the query is completed."}, {"name": "GEO", "type": "IP2GEO", "description": "Structure containing the geographic data returned based on the provided IP address."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Flag that triggers the start of the query on a positive edge."}], "output": [{"name": "BUSY", "type": "BOOL", "description": "Indicates if the query is currently active."}, {"name": "DONE", "type": "BOOL", "description": "Indicates if the query has completed successfully without errors."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code generated if an error occurs during the query."}, {"name": "ERROR_T", "type": "BYTE", "description": "Error type that provides context about the error, refer to the DNS_CLIENT and HTTP_GET modules for exact meanings."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value directly. Instead, it populates the output parameters based on the query results."}}
{"title": "Subnet Check Function", "description": "IP4_CHECK checks if a network address of the NIP and the local address\n\nLIP are in the same Subnet lie. Both addresses will be frst masked with\n\nthe Subnet mask and then tested for equality. Only the bits which are in\n\nthe Subnet Mask TRUE are examined for equality. The network addresses\n\nmust correspond to the IPv4 format and presented as a DWORD. If IP ad￾dresses must be tested that are String they are to be converted to\n\nDWORD before. \n\nThe following example shows 2 IP addresses and a Subnet Mask as String\n\nare tested after appropriate conversion to DWORD there. The output is\n\nTRUE because both addresses are in the same Subnet .", "type": "FUNCTION", "name": "IP4_CHECK", "input": [{"name": "NIP", "type": "DWORD", "description": "Network IP address in DWORD format."}, {"name": "LIP", "type": "DWORD", "description": "Local IP address in DWORD format."}, {"name": "SM", "type": "DWORD", "description": "Subnet Mask in DWORD format."}], "output": [{"name": "Result", "type": "BOOL", "description": "TRUE if NIP and LIP are in the same Subnet; otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the NIP and LIP are in the same subnet, otherwise returns FALSE."}}
{"title": "IP Address Decoder", "description": "IP4_DECODE decodes the in STR stored string as a IP v4 address and re￾turns it as a DWORD. A return of 0 means an invalid address or an address\n\nof '0.0.0.0 ' was evaluated. IP4 may be used for evaluating a Subnet Mask\n\nof the IP v4 format.", "type": "FUNCTION", "name": "IP4_DECODE", "input": [{"name": "STR", "type": "STRING(15)", "description": "A string that contains the IPv4 address."}], "output": [{"name": "DWORD", "type": "DWORD", "description": "The decoded IPv4 address."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the decoded IPv4 address as a DWORD. A return value of 0 indicates that the address is invalid or '0.0.0.0'."}}
{"title": "IP4 to String Conversion", "description": "IP4_TO_STRING converts the IP4 address stored as DWORD in a string. The\n\nformat is 'NNN.NNN.NNN.NNN'.", "type": "FUNCTION", "name": "IP4_TO_STRING", "input": [{"name": "IP4", "type": "BOOL", "description": "A string that contains the IP address in DWORD format."}], "output": [{"name": "IPAddressString", "type": "STRING", "description": "The decoded IP v4 address in string format."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Decoded IP v4 address.", "fields": []}}
{"title": "IP_CONTROL Function Module", "description": "IP_CONTROL enables manufacturers and platform-neutral use of \n\nEthernet communications. In order to unite the many diferent interfaces \n\nof the PLC-companies that IP_CONTROL is used as an adapter \"wrapper\" . \n\nThis module UDP and TCP as well as active and passive connections can \n\nbe handled. As in some small controls the number of simultaneous open \n\nsockets is very limited, so this module also supports the sharing of \n\nsockets. An integrated automatic coordination of requests allows to divide \n\na socket to a number of client devices. Here is automatically recognized \n\nwhether a client uses a diferent connection parameters than its \n\npredecessor. An existing connection is automatically terminated, and \n\nestablished with the new connection parameters . The type of connection \n\ncan be set with C_MODE (see table). With C_PORT the desired port number \n\nis given, and by the C_IP the IP v4 address. With C_STATE can be \n\ndetermined whether the connection is established - closed, resp. the \n\nnegative and positive edge on change of state. C_ENABLE agent will \n\nrelease the connection (establish) or close (removed). The send and \n\nreceive data works independently of each another, which means it is also \n\npossible to send and receive asynchronous such as Telnet. In applications \n\nwhich only send data and no data receive is expected R_OBSERVE must be \n\nFALSE, so that no Timeout at receive occurs. At the start of transmit and \n\nreceive activities TIME_RESET is set by the user a to TRUE once, so that all \n\ntimeout start over with a defned start value. This is required due to the \n\nSharing functionality, because established connections remains connected \n\nand the access rights are passed here only. The parameter IP serves as a \n\npossible default IP address. To avoid repeating the same IP address \n\nparameters, a Default - IP can be used. One possible use would be to \n\nspecify the DNS server address. When the module recognizes as C_IP the \n\nIP 0.0.0.0, it automatically uses the default IP address. The same behavior \n\n102 Version 1.21\n\nChapter 9. Network and Communication\n\nis at the Port parameter. If at the port C_PORT a 0 is detected so the \n\nparameterized block port number of the module is used. The error code \n\nERROR consists of several parts (see table ERROR). With TIMEOUT the \n\noverall monitoring time can be specifed. This time value is independently \n\nused used for connection, send data and receive data. The transferred \n\nTIMEOUT value is automatically limited to 200 ms minimum. Thus, this \n\nparameter can remain free.\n\nThe data block is automatically sent if in a shared connection in the send \n\nbufer the transmit data and data length are entered. For data reveice, the \n\ndata is appended to the already existing data in the bufer. By setting SIZE \n\n= 0, the receive data pointer is reset and the next received data is then \n\nstored at position 0. \n\nThe module supports the blocking of data messages, that means the \n\nS_BUF resp. R_BUF can be arbitrarily large. Individual received data frames \n\nare collected in R_BUF in stream form. Just the same when process data \n\nare sent. The data in S_BUF is sent individually as Stream allowed block \n\nsize.\n\nApplication example: \n\n CASE state OF \n\n00: (* On Wait for release *) \n\n IF RELEASE THEN \n\n state := 10;\n\n IP_STATE: = 1; (* Sign on *) \n\n END_IF;\n\n10: (* Wait for clearance to access for connection and sending content *) \n\n IF IP_STATE = 3 THEN (* access permitted? *)\n\n (* IP set up data traffic *)\n\n IP_C.C_PORT: = 123; (* enter port number *) \n\n IP_C.C_IP = IP4; (* Enter IP *) \n\n IP_C.C_MODE:= 1; (* Mode: UDP+ACTIVE+Port+IP *) \n\n IP_C.C_ENABLE:= TRUE; (* Release connection *) \n\n IP_C.TIME_RESET: = TRUE; (Reset time monitoring * *) \n\n IP_C.R_OBSERVE: = TRUE; (* Monitor data receive *) \n\n R_BUF.SIZE:= 0; (* Reset Home length *) \n\n (* Send data register *)\n\n S_BUF.BUFFER[0] := BYTE#16#1B;\n\n (* Etc. ... *)\n\n S_BUF.SIZE: = xx; (* enter send length *) \n\n103 Version 1.21\n\nChapter 9. Network and Communication\n\n state := 30;\n\n30:\n\n IF IP_C.ERROR <> 0 THEN\n\n (* Perform error analysis *)\n\n ELSIF S_BUF.SIZE = 0 AND R_BUF.SIZE >= xxx THEN\n\n (* evaluate received data *)\n\n (* Logout - release access for other *)\n\n IP_STATE := BYTE#4;\n\n state: = 0 0; (* process end *) \n\n END_IF;\n\nEND_CASE;\n\n(* IP_FIFO call cyclic *)\n\nIP_FIFO(FIFO:=IP_C.FIFO,STATE:=IP_STATE,ID:=IP_ID);\n\nIP_C.FIFO:=IP_FIFO.FIFO;\n\nIP_STATE := IP_FIFO.STATE;\n\nIP_ID:=IP_FIFO.ID;\n\nfollowing C_MODE may be used:\n\nTYP\n\nE\n\nTCP / UDP Aktiv / Passiv Port number required IP address required\n\n0 TCP Active Yes Yes\n\n1 UDP Active Yes Yes\n\n2 TCP Passive Yes Yes (Address of the active part￾ner)\n\n3 UDP Passive Yes Yes (Address of the active part￾ner)\n\n4 TCP Passive Yes No (Any active partner will be ac￾cepted)\n\n5 UDP Passive Yes No (Any active partner will be ac￾cepted)\n\nC_STATE:\n\nValue State Message\n\n0 connection is down\n\n104 Version 1.21\n\nChapter 9. Network and Communication\n\n1 Connection has been broken down (negative edge) value exists only for one cycle, then re￾turns 0.\n\n254 Connection is established (positive edge) value exists for one cycle, then returns 255. \n\n255 Connection is established\n\n<127 query if connections is established\n\n>127 query if connection is established\n\n \n\nERROR:\n\nDWORD Message Type Description\n\nB3 B2 B1 B0\n\n00 xx xx xx Connection establish Value 00 - No errors found\n\nnn xx xx xx Connection establish Value 01-252 system-specific error\n\nFD xx xx xx Connection establish Value 253 - Connection closed by remote\n\nFF xx xx xx Connection establish value 255 - Timeout Error\n\nxx 00 xx xx Send data Value 00 - No errors found\n\nxx nn xx xx Send data Value 01-252 system-specific error\n\nxx FF xx xx Send data value 255 - Timeout Error\n\nxx xx 00 xx Receive data Value 00 - No errors found\n\nxx xx nn xx Receive data Value 01-252 system-specific error\n\nxx xx FF xx Receive data value 255 - Timeout Error\n\nxx xx FE xx Receive data Value 254 - Receive buffer is full (overflow) \n\n(Buffer size is automatically set to 0)\n\nxx xx xx nn Application- Error In IP_CONTROL always 00\n\nERROR is transferred originally from the client appli￾cation and optionally, at this point an application error\n\nis reported. This error code is entered, but only by the\n\nclient devices.\n\n System-specifc error: (PCWorx / MULTIPROG)\n\nValue State Message\n\n0x00 No error occurred.\n\n105 Version 1.21\n\nChapter 9. Network and Communication\n\n0x01 Creation of at least one task has failed.\n\n0x02 Initialization of the socket interface failed (only WinNT).\n\n0x03 Dynamic memory could not be reserved.\n\n0x04 FB can not be initialized because at start the asynchronous communication tasks, an error\n\nhas occurred.\n\n0x10 Socket initialization failed.\n\n0x11 Error at sending a message.\n\n0x12 Error when receiving a message.\n\n0x13 Unknown service code in the message header.\n\n0x21 Invalid state transition upon connection.\n\n0x30 No more free channels available.\n\n0x31 The connection was canceled.\n\n0x33 General timeout, receiver or transmitter does not answer or sender has not completed\n\ntransmission.\n\n0x34 Connection request has been negatively acknowledged.\n\n0x35 Recipient did not confirm transfer, possibly overloaded receivers (repeat transfer).\n\n0x40 Partner-string is too long (255 characters max).\n\n0x41 The specified IP address is not valid or could not be interpreted correctly.\n\n0x42 not valid port number.\n\n0x45 Unknown parameters to input \"PARTNER\".\n\n0x50 Transmission attempt on invalid connection (sender or receiver).\n\n0x53 All available connections are occupied.\n\n0x61 Neg. confirmation of the recipient. It was used an incorrect sequence number.\n\n0x62 Data type of transmitter and receiver are not equal.\n\n0x63 Receiver is at the moment not ready to receive (poss. Cause: The recipient is disabled or is\n\ncurrently in the data transfer (NDR = TRUE).\n\n0x64 Can not find a receiver module with the corresponding R_ID.\n\n0x65 Another module instance is already working on this connection.\n\n0x70 Partner control was not configured as a time server.\n\n \n\n106 Version 1.21\n\nChapter 9. Network and Communication\n\n System-specifc error: (CoDeSys)\n\n0x00 No error occurred.\n\n0x01 SysSockCreate unsuccessful\n\n0x02 SysSockBind unsuccessful\n\n0x03 SysSockListen unsuccessful\n\n \n\n System-specifc error: (Beckhof)\n\n0x00 No error occurred.\n\n0x01 SocketUdpCreate unsuccessful\n\n0x03 socket listen unsuccessful\n\n0x04 SocketAccept unsuccessful", "type": "FUNCTION", "name": "IP_CONTROL", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for connection control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "IP", "type": "DWORD", "description": "Encoded IP address as the default."}, {"name": "PORT", "type": "WORD", "description": "Port number of the IP address."}, {"name": "TIME_OUT", "type": "TIME", "description": "Monitoring time for connection, send, and receive operations."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "Error code representing the status of the function execution.", "fields": [{"name": "Error Code", "type": "DWORD", "description": "Code indicating the type of error or status where 0 signifies no errors."}]}}
{"title": "Network Communication Module", "description": "IP_CONTROL2 . The maximum \n\ndata size for transmission and reception depends on the hardware \n\nplatform and is in the range of < 1500 bytes. This module can always be \n\nused when no data stream mode is needed. The primary advantage is that \n\nless bufer memory is required, and data will not be copied between \n\ninternal and external data bufer. Thus, the module is more economical \n\nwith respect to memory consumption and system load.", "type": "FUNCTION", "name": "IP_CONTROL2", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization data for network control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for transmitting data."}, {"name": "IP", "type": "DWORD", "description": "Encoded IP address as the default."}, {"name": "PORT", "type": "WORD", "description": "Port number of the IP address."}, {"name": "TIME_OUT", "type": "TIME", "description": "Monitoring time for network operations."}], "output": [{"name": "R_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for receiving data."}], "in/out": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization that can be read or modified."}], "return_value": {"type": "DWORD", "description": "Indicates the status of the network operation.", "fields": []}}
{"title": "IP FIFO Management Module", "description": "IP_FIFO_DATA (IP-FIFO management data)\n\nID: BYTE (current ID assigned by IP_FIFO module)\n\nSTATE: BYTE (control commands and status messages)\n\n108 Version 1.21\n\nChapter 9. Network and Communication\n\n109 Version 1.21\n\nChapter 9. Network and Communication\n\nThis module is used in combination with IP_CONTROL for resource mana￾gement. This makes it possible that client applications request exclusive \n\naccess permissions and can also give back. By the FIFO is ensured that \n\neach participant equally often gets the resource access assigned.\n\nIn the frst call of the module automatically a new unique application ID is \n\nassigned, which one the administration in FIFO is managed. The STATE pa￾rameter is changed by the application as well as from IP_FIFO module. \n\nEach application may register by default only once in the FIFO.\n\nSTATE:\n\nValue State Message\n\n0 no action\n\n1 Privilege request\n\n2 Privilege request has been accepted in FIFO\n\n3 Privilege obtained (allowing resource access)\n\n4 Privilege remove\n\n5 Privilege was again removed from FIFO\n\nProcedure:\n\n1. application set the STATE to 1\n\n2. Access permission are required as is the STATE = 2\n\n3. if resource is free, and access rights are present, then \n\n STATE=3\n\n4. If the application has the resource resp. the access needs\n\n not anymore the application sets STATE to 4. Thereafter \n\n IP_FIFO releases the resource again and set STATE to 0.\n\n5. Process is repeated (same or other application)", "type": "FUNCTION", "name": "IP_FIFO", "input": [{"name": "IP_FIFO_DATA", "type": "struct", "description": "Management data for IP FIFO", "fields": [{"name": "ID", "type": "BYTE", "description": "Current ID assigned by IP_FIFO module"}, {"name": "STATE", "type": "BYTE", "description": "Control commands and status messages"}]}], "output": [], "in/out": [], "return_value": {"type": "struct", "description": "Return value indicating the state of the resource access", "fields": [{"name": "STATE_MESSAGE", "type": "BYTE", "description": "Message indicating the current state of the resource access"}]}}
{"title": "IRTRANS_DECODE Function Module", "description": "IRTRANS_DECODE receives the data from the module IRTRANS_SERVER\n\npresent in BUFFER, checks if a valid data package is available and deco￾des the name of the remote control and the name of the button form the\n\ndata packet. If a valid data packet has been decoded, the name of the re￾mote control is passed at the output DEV and the name of the button on\n\nthe output KEY. The output CMD signals that the new output data are pre￾sent. The ERROR output is then set when a data packet was received that\n\nis not in the correct format.\n\nThe format is defned as follows:\n\n'Name of the remote control', 'Name of the key code' $R$N\n\nA data packet consists of the name of the remote control, followed by a\n\ncomma and then the name of the key codes. The data packet is a comple￾ted by Carriage Return and a Line Feed . \n\nTo ensure that IRTRANS_DECODE works in the IRTrans confguration the\n\nCheck box BROADCAST IR RELAY must be checked and in the correspon￾ding Device database under the DEFAULT ACTION the String '%r%c\\r\\n'\n\nmust be registered. IRTRANS_DECODE evaluates just this String and deco￾des %r as the name and %c as pressed a button of the remote control.", "type": "FUNCTION", "name": "IRTRANS_DECODE", "input": [{"name": "IP_C", "type": "struct", "description": "Data structure for parameterization.", "fields": []}, {"name": "R_BUF", "type": "struct", "description": "Data structure for receiving data.", "fields": [{"name": "data", "type": "STRING", "description": "Buffer that contains the received data."}]}], "output": [{"name": "CMD", "type": "BOOL", "description": "TRUE if valid data are present at the output."}, {"name": "DEV", "type": "STRING", "description": "Name of the remote control."}, {"name": "KEY", "type": "STRING", "description": "Name of the key codes."}, {"name": "ERROR", "type": "BOOL", "description": "TRUE if an invalid data packet is present."}], "in/out": [], "return_value": null}
{"title": "IRTRANS_RCV_1 Function Module", "description": "IRTRANS_RCV_1 checkes when CMD = TRUE if the string matches the input\n\nDEV corresponds to DEV_CODE (device code) and the string at the input\n\n37 Version 1.21\n\nChapter 6. Device Driver\n\nKEY corresponds to the KEY_CODE. If the codes match and CMD = TRUE,\n\nthen the output Q for a cycle is set to TRUE.\n\nThe following example shows the application of IRTRANS_RCV_1:\n\nIn this example, the receive data bufer to IRTRANS_DECODE is passed.\n\nThe decoder determines from the valid data packets String DEV and KEY\n\nand passes them with CMD to IRTRANS_RCV_1 . \n\nIRTRANS_RCV_1 or alternatively IRTRANS_RCV_4 and IRTRANS_RCV_ checks\n\nwhether DEV and KEY match and then switches the output Q for a cycle to\n\nTRUE. in the example a DRIVER_1 is controlled which enables the remote\n\ncontrol to switch the output with each received log.\n\n If multiple Key Codes are to be evaluated alternatively the modules IR￾TRANS_RCV_4 or IRTRANS_RCV_8 can be used or more of these modules\n\ncan be used in parallel mode. \n\n38 Version 1.21\n\nChapter 6. Device Driver", "type": "FUNCTION", "name": "IRTRANS_RCV_1", "input": [{"name": "CMD", "type": "BOOL", "description": "TRUE if data for evaluating are available"}, {"name": "DEV", "type": "STRING", "description": "Name of the remote control"}, {"name": "KEY", "type": "STRING", "description": "Name of the button"}, {"name": "DEV_CODE", "type": "STRING", "description": "Device code to be decoded from the remote control name"}, {"name": "KEY_CODE", "type": "STRING", "description": "Key code to be decoded"}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating if conditions are met (set to TRUE for a cycle)"}], "in/out": [], "return_value": null}
{"title": "IRTRANS_RCV_4 Function Module", "description": "IRTRANS_RCV_4 checkes when CMD = TRUE if the string matches the input\n\nDEV corresponds to DEV_CODE (device code) and the string at the input\n\nKEY corresponds to the KEY_CODE. If the codes match and CMD = TRUE,\n\nthen the output Q for a cycle is set to TRUE. For more information about\n\nthe function of the device are under IRTRANS_RCV_1.", "type": "FUNCTION", "name": "IRTRANS_RCV_4", "input": [{"name": "CMD", "type": "BOOL", "description": "Indicates whether data for evaluating are available (TRUE if available)."}, {"name": "DEV", "type": "STRING", "description": "The name of the remote control."}, {"name": "KEY", "type": "STRING", "description": "The name of the button."}, {"name": "DEV_CODE", "type": "STRING", "description": "Device code that corresponds to the remote control."}, {"name": "KEY_CODE_0", "type": "STRING", "description": "Key code 0 to be decoded."}, {"name": "KEY_CODE_1", "type": "STRING", "description": "Key code 1 to be decoded."}, {"name": "KEY_CODE_2", "type": "STRING", "description": "Key code 2 to be decoded."}, {"name": "KEY_CODE_3", "type": "STRING", "description": "Key code 3 to be decoded."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal 0 indicating if the conditions are met."}, {"name": "Q1", "type": "BOOL", "description": "Output signal 1 indicating if the conditions are met."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2 indicating if the conditions are met."}, {"name": "Q3", "type": "BOOL", "description": "Output signal 3 indicating if the conditions are met."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value."}}
{"title": "IRTRANS_RCV_8 Function Module", "description": "IRTRANS_RCV_8 checkes when CMD = TRUE if the string matches the input\n\nDEV corresponds to DEV_CODE (device code) and the string at the input\n\nKEY corresponds to the KEY_CODE. If the codes match and CMD = TRUE,\n\n39 Version 1.21\n\nChapter 6. Device Driver\n\nthen the output Q for a cycle is set to TRUE. For more information about\n\nthe function of the device are under IRTRANS_RCV_1.", "type": "FUNCTION", "name": "IRTRANS_RCV_8", "input": [{"name": "CMD", "type": "BOOL", "description": "TRUE if data for evaluating are available."}, {"name": "DEV", "type": "STRING", "description": "Name of the remote control."}, {"name": "KEY", "type": "STRING", "description": "Name of button."}, {"name": "DEV_CODE", "type": "STRING", "description": "To be decoded remote control name."}, {"name": "KEY_CODE_0", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_1", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_2", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_3", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_4", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_5", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_6", "type": "STRING", "description": "Key code to be decoded."}, {"name": "KEY_CODE_7", "type": "STRING", "description": "Key code to be decoded."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal for key code 0."}, {"name": "Q1", "type": "BOOL", "description": "Output signal for key code 1."}, {"name": "Q2", "type": "BOOL", "description": "Output signal for key code 2."}, {"name": "Q3", "type": "BOOL", "description": "Output signal for key code 3."}, {"name": "Q4", "type": "BOOL", "description": "Output signal for key code 4."}, {"name": "Q5", "type": "BOOL", "description": "Output signal for key code 5."}, {"name": "Q6", "type": "BOOL", "description": "Output signal for key code 6."}, {"name": "Q7", "type": "BOOL", "description": "Output signal for key code 7."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "IRTRANS Server Function Module", "description": "IRTRANS_SERVER can be used as both a receiver and a transmitter of IR￾TRANS commands. Is UDP_TCP = TRUE is a passive TCP connection, other￾wise set up a passive UDP connection. The type of operation must also be\n\nconfgured with IRTRANS device. Once a data connection is available and\n\nsending commands is allowed, S_ENABLE = TRUE. In UDP mode, after the\n\ninitial data received from IRTRANS, data can be sent, since in the passive\n\nmode, the UDP-IP parameter is initially not known. The receiving mode is\n\nindicated with R_ENABLE. If data are received they are available in R_BUF\n\nfor further processing for other modules. Send data has to be entered by\n\nthe modules in the S_BUF, so they are then sent automatically from IR-\n\n40 Version 1.21\n\nChapter 6. Device Driver\n\nTRANS_SERVER. If transmission errors occurs, they are issued with \"ER￾ROR\" (see module IP_CONTROL2). Existing errors are acknowledged auto￾matically every 5 seconds by the module.\n\nUDP server mode:\n\nIn the IRTRANS Web confguration, the IP address of the PLC is entered as\n\na broadcast address.\n\nIRTRANS Web Confguration:\n\nThe following example shows the application of IRTRANS Devices\n\n41 Version 1.21\n\nChapter 6. Device Driver", "type": "FUNCTION", "name": "IRTRANS_SERVER", "input": [{"name": "UDP_TCP", "type": "BOOL", "description": "Selects the communication mode; FALSE for UDP and TRUE for TCP."}, {"name": "IP_C", "type": "IP_CONTROL", "description": "Data structure for parameterization of the IP control settings.", "fields": [{"name": "ipAddress", "type": "STRING", "description": "IP address for the communication."}, {"name": "port", "type": "UINT", "description": "Port number for the communication."}]}, {"name": "S_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Data structure for transmitting data.", "fields": [{"name": "data", "type": "STRING", "description": "The actual data to be transmitted."}, {"name": "length", "type": "UINT", "description": "Length of the data to be sent."}]}, {"name": "R_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Data structure for receiving data.", "fields": [{"name": "data", "type": "STRING", "description": "The received data."}, {"name": "length", "type": "UINT", "description": "Length of the received data."}]}], "output": [{"name": "S_ENABLE", "type": "BOOL", "description": "Indicates whether IRTRANS data can be sent."}, {"name": "R_ENABLE", "type": "BOOL", "description": "Indicates whether IRTRANS data reception is enabled."}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating issues with the IP control settings."}], "in/out": [], "return_value": null}
{"title": "IRTrans Remote Command Sender", "description": "IRTRANS_SND_1 allows you to send a remote command to the IRTrans. If IN\n\nTRUE the specifed device and key code in setup is sent to the IRTrans\n\nwhich outputs in turn as a real remote control commands. With T_REPEAT\n\nthe repeat time for sending can be specifed . If IN remains constant to\n\nTRUE so always this key code sent repeated after the time T_REPEAT. At\n\noutput KEY in active control \"1\" is passed. KEY = 0 means that the IN is\n\nnot active.", "type": "FUNCTION", "name": "IRTRANS_SND_1", "input": [{"name": "IN", "type": "BOOL", "description": "Indicates whether to send the key code (TRUE to send key code)"}, {"name": "T_REPEAT", "type": "TIME", "description": "The time interval for re-sending the key code"}, {"name": "IP_C", "type": "struct", "description": "Data structure for parameterization", "fields": []}, {"name": "S_BUF", "type": "struct", "description": "Data structure for network buffer to transmit data", "fields": []}, {"name": "DEV_CODE", "type": "STRING", "description": "The name of the remote control to be decoded"}, {"name": "KEY_CODE", "type": "STRING", "description": "The key code to be decoded"}], "output": [{"name": "KEY", "type": "BYTE", "description": "The output of the currently active key codes. KEY = 0 means that the IN is not active."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "IRTRANS_SND_4 Function Module", "description": "IRTRANS_SND_4 allows users to send remote control commands to the IR￾Trans. If IN_x is TRUE the specifed device and key code in setup is sent to\n\nthe IRTrans which outputs in turn as a real remote control commands. With\n\nT_REPEAT the repeat time for sending can be specifed . If IN_0 remains\n\nconstant to TRUE so always this key code sent repeated after the time\n\nT_REPEAT. If a change to a diferent IN_x occures this code will send imme￾diately and then again delayed with T_REPEAT, if it remains a long period\n\nof time. At output KEY the currently controlled KEY will be displayed. KEY\n\n= 0 means that no IN_x is active. The values 1-3 are the IN_0 - IN_3.", "type": "FUNCTION", "name": "IRTRANS_SND_4", "input": [{"name": "IN_0", "type": "BOOL", "description": "If TRUE, sends the key code x to the IRTrans."}, {"name": "IN_1", "type": "BOOL", "description": "If TRUE, sends the key code x to the IRTrans."}, {"name": "IN_2", "type": "BOOL", "description": "If TRUE, sends the key code x to the IRTrans."}, {"name": "IN_3", "type": "BOOL", "description": "If TRUE, sends the key code x to the IRTrans."}, {"name": "T_REPEAT", "type": "TIME", "description": "Time interval to re-send the key code."}, {"name": "IP_C", "type": "struct", "description": "Data structure containing parameterization information for IP control.", "fields": []}, {"name": "S_BUF", "type": "struct", "description": "Data structure to transmit network buffer.", "fields": []}, {"name": "DEV_CODE", "type": "STRING", "description": "The name of the remote control to be decoded."}, {"name": "KEY_CODE_0", "type": "STRING", "description": "Key code to be sent when IN_0 is active."}, {"name": "KEY_CODE_1", "type": "STRING", "description": "Key code to be sent when IN_1 is active."}, {"name": "KEY_CODE_2", "type": "STRING", "description": "Key code to be sent when IN_2 is active."}, {"name": "KEY_CODE_3", "type": "STRING", "description": "Key code to be sent when IN_3 is active."}], "output": [{"name": "KEY", "type": "BYTE", "description": "Displays the currently controlled key. KEY = 0 means no IN_x is active; values 1-3 represent states of IN_0 to IN_3."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "IRTRANS_SND_8", "description": "IRTRANS_SND_8 allows users to send remote control commands to the IR￾Trans. If IN_x is TRUE the specifed device and key code in setup is sent to\n\nthe IRTrans which outputs in turn as a real remote control commands. With\n\nT_REPEAT the repeat time for sending can be specifed . If IN_0 remains\n\nconstant to TRUE so always this key code sent repeated after the time\n\nT_REPEAT. If a change to a diferent IN_x occures this code will send imme￾diately and then again delayed with T_REPEAT, if it remains a long period\n\nof time. At output KEY the currently controlled KEY will be displayed. KEY\n\n= 0 means that no IN_x is active. The values 1-3 are the IN_0 - IN_7.\n\n45 Version 1.21\n\nChapter 7. Data Logger\n\n 7. Data Logger", "type": "FUNCTION", "name": "IRTRANS_SND_8", "input": [{"name": "IN_0", "type": "BOOL", "description": "Input flag to send keycode x (TRUE = send keycode). This applies to IN_0 through IN_7."}, {"name": "T_REPEAT", "type": "TIME", "description": "Time interval for re-sending the key code when the respective input remains TRUE."}, {"name": "IP_C", "type": "struct IP_CONTROL", "description": "Data structure for parameterization.", "fields": []}, {"name": "S_BUF", "type": "struct NETWORK_BUFFER_SHORT", "description": "Data structure for transmitting the key code.", "fields": []}, {"name": "DEV_CODE", "type": "STRING", "description": "String representing the remote control name to be decoded."}, {"name": "KEY_CODE_0", "type": "STRING", "description": "Key code to be sent (for IN_0). This applies to KEY_CODE_0 through KEY_CODE_7."}], "output": [{"name": "KEY", "type": "BYTE", "description": "Output representing the currently active key codes. KEY = 0 means no inputs are active."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "IP Address Validation Function", "description": "IS_IP4 checks if the string str contains a valid IP v4 address, if not FALSE is\n\nreturned. A valid IP v4 address consists of 4 numbers from 0 - 255 and\n\nthey are separated each with one point. The address 0.0.0.0 is there clas￾sifed as wrong.\n\nIS_IP4(0.0.0.0) = FALSE\n\nIS_IP4(255.255.255.255) = TRUE\n\nIS_IP4(256.255.255.255) = FALSE\n\nIS_IP4(0.1.2.) = FALSE\n\nIS_IP4(0.1.2.3.) = FALSE\n\n78 Version 1.21\n\nChapter 8. Converter", "type": "FUNCTION", "name": "IS_IP4", "input": [{"name": "STR", "type": "STRING", "description": "The string to be tested for a valid IPv4 address."}], "output": [{"name": "BOOL", "type": "BOOL", "description": "Returns TRUE if STR contains a valid IPv4 address, otherwise returns FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating the validity of the IPv4 address."}}
{"title": "IP Address Validation Function", "description": "IS_URLCHR checks if the string contains only valid characters for a URL en￾coding. If the string contains reserved characters it returns FALSE, otherwi￾se TRUE.\n\nFor a URL following characters are valid:\n\n[A..Z]\n\n[a..z]\n\n[0..9]\n\n[-._~]\n\nall other characters are reserved or not allowed.", "type": "FUNCTION", "name": "IS_URLCHR", "input": [{"name": "string_to_test", "type": "STRING", "description": "The string that needs to be tested for a valid IPv4 address."}], "output": [{"name": "is_valid_ip", "type": "BOOL", "description": "Returns TRUE if the input string contains a valid IPv4 address, otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The result of the validation indicating whether the input is a valid IP v4 address.", "fields": []}}
{"title": "Log Control Function Module", "description": "LOG_MSG messages (STRINGS) are stored in a ring bufer. The \n\nmessages can be provided with additional parameters such as the front \n\ncolor and back color for the output to TELNET and a flter by specifying an \n\nentry-level news. Is the level of the message larger than the default log \n\nlevel, the message is discarded. Furthermore,with Enable the logging will \n\nbe disabled in general. Thus, it is not a problem to archive many messages \n\nper PLC cycle. The message bufer can be passed to a telnet client with \n\nthe module TELNET_LOG. Details on the interface are shown in the table \n\nbelow.\n\nIf messages are applied from various module instances to the same \n\nLOG_BUFFER, then the \"LOG_CL\" data structure has to be created Global.", "type": "FUNCTION", "name": "LOG_MSG", "input": [{"name": "LOG_MSG", "type": "STRING", "description": "Messages to be stored in the log."}, {"name": "FrontColor", "type": "STRING", "description": "Color of the front text in the output to TELNET."}, {"name": "BackColor", "type": "STRING", "description": "Color of the background in the output to TELNET."}, {"name": "LogLevel", "type": "INT", "description": "Filtering log messages based on the entry-level news."}, {"name": "Enable", "type": "BOOL", "description": "If true, logging is enabled; if false, logging is disabled."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the log message was successfully processed.", "fields": []}}
{"title": "LOG_VIEWPORT Module", "description": "LOG_VIEWPORT\n\nThe module LOG_VIEWPORT is used to index a list of LOG_CONTROL \n\nmessages, which are currently in the virtual view. To move around within \n\nthe message list (scroll), a scroll ofset can be specifed by LV.MOVE_TO_X. \n\nA positive value scroll in direction of newer reports and a negative value \n\nin the direction of the earlier messages. The number of lines in the \n\n111 Version 1.21\n\nChapter 9. Network and Communication\n\nmessage list of the virtual view is given by LV.COUNT. The current \n\nmessages in the virtual view are stored in LV.LINE_ARRAY [x], and are \n\navailable for further processing. A change in the message list is always \n\nannounced with LV.UPDATE:= TRUE, and the user has to reset.\n\n The following LV.MOVE_TO_X values produce a special behavior.\n\n+30000 = display previous Messages (beginning of the ring bufer)\n\n+30001 = display latest messages (end of the ring bufer)\n\n+30002 = one full page in direction of recent messages.\n\n+30003 = One full page in direction of older messages", "type": "FUNCTION", "name": "LOG_VIEWPORT", "input": [{"name": "LC", "type": "LOG_CONTROL", "description": "Control data for logging messages."}, {"name": "LV", "type": "us_LOG_VIEWPORT", "description": "Viewport data structure for managing display of log messages.", "fields": [{"name": "MOVE_TO_X", "type": "INTEGER", "description": "Scroll offset to navigate through log messages."}, {"name": "COUNT", "type": "INTEGER", "description": "Total number of lines in the message list of the virtual view."}, {"name": "LINE_ARRAY", "type": "ARRAY", "description": "Array containing the current messages in the virtual view.", "fields": [{"name": "x", "type": "STRING", "description": "Individual message text."}]}, {"name": "UPDATE", "type": "BOOLEAN", "description": "Flag to indicate whether the message list has changed."}]}], "output": [], "in/out": [], "return_value": {"type": "VOID", "description": "No return value for the LOG_VIEWPORT function."}}
{"title": "MODBUS Client Function Module", "description": "MB_CLIENT The module provides access to Ethernet devices, the MODBUS TCP or \n\nMODBUS UDP supported, or MODBUS RS232/485 devices are connected \n\nvia Ethernet Modbus gateway. There commands from Classes 0,1,2 are \n\nsupported. The parameters IP_C, S_BUF, R_BUF this form the interface to \n\nthe module IP_CONTROL and used here for processing and coordination. \n\nThe desired IP address and port number (for MODBUS default is 502) must \n\nbe specifed on IP_CONTROL centrally. The DATA structure is designed as a \n\nWORD array and contains the MODBUS data for reading and writing. The \n\nsize of the WORD_ARRAY is given by DATA_SIZE. By ENABLE, the module is \n\nreleased, and by remove of the release a possibly still active query is \n\nended. For devices that support MODBUS with UDP = TRUE this mode can \n\nbe activated. The parameter UNIT_ID must only at use of Ethernet Modbus \n\nprovided. The desired function is specifed by FC (see function code table). \n\nDepending on the function, the R_xxx and W_xxx parameters has to be \n\nsupplied with data. By specifying the DELAY the repetition time can be \n\nspecifed. If not specify the time an attempt is made as often as possible \n\nto execute the command. The integrated access management \n\nautomatically guarantees to get the other module instances also to the \n\nseries. A negative command execution is reported by ERROR (see ERROR￾table). If the module actively performs a query, then BUSY = TRUE will be \n\npassed during this time.\n\nSupported function codes and parameters used:\n\n113 Version 1.21\n\nChapter 9. Network and Communication\n\n1 x Coils Read Coils x x x x\n\n2 x Input Discrete Read Discrete Inputs x x x x\n\n3 x Holding Register Read Holding Registers x x x\n\n4 x Input Register Read Input Register x x\n\n5 x Coils Write Single Coil x x x\n\n6 x Holding Register Write Single Register x x\n\n15 x Coils Write Multiple Coils x x x x\n\n16 x Holding Register Write Multiple Register x x x\n\n22 x Holding Register Mask Write Register x x\n\n23 x Holding Register Read/Write Multiple Register x x x x x x\n\nERROR:\n\nValue Source Description\n\nB3 B2 B1 B0\n\nnn nn nn xx IP_CONTROL Error from module IP_CONTROL\n\nxx xx xx 00 MB_CLIENT No Error\n\nxx xx xx 01 MB_CLIENT ILLEGAL FUNCTION:\n\nThe function code received in the query is not an allowable action\n\nfor the server (or slave). This may be because the function code is\n\nonly applicable to newer devices, and was not implemented in the\n\nunit selected. It could also indicate that the server (or slave) is in the\n\nwrong state to process a request of this type, for example because it\n\nis unconfigured and is being asked to return register values.\n\nxx xx xx 02 MB_CLIENT ILLEGAL DATA ADDRESS:\n\nThe data address received in the query is not an allowable address\n\nfor the server (or slave). More specifically, the combination of refer￾ence number and transfer length is invalid. For a controller with 100\n\n114 Version 1.21\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nC\n\no\n\nd\n\ne\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns\n\n16\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns (R\n\ne\n\ngister)\n\nGro\n\nu\n\np\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nD\n\ne\n\ns\n\ncriptio\n\nn\n\nR_A\n\nD\n\nD\n\nR\n\nR_\n\nP\n\nOIN\n\nT\n\nS\n\nR_\n\nD\n\nATA_A\n\nD\n\nR\n\nR_\n\nD\n\nATA_\n\nBIT\n\nP\n\nO\n\nS\n\nW_A\n\nD\n\nD\n\nR\n\nW_\n\nP\n\nOIN\n\nT\n\nS\n\nW_\n\nD\n\nATA_A\n\nD\n\nR\n\nW_\n\nD\n\nATA_\n\nBIT\n\nP\n\nO\n\nS\n\nChapter 9. Network and Communication\n\nregisters, the PDU addresses the first register as 0, and the last one\n\nas 99. If a request is submitted with a starting register address of 96\n\nand a quantity of registers of 4, then this request will successfully\n\noperate (address-wise at least) on registers 96, 97, 98, 99. If a re￾quest is submitted with a starting register address of 96 and a quan￾tity of registers of 5, then this request will fail with Exception Code\n\n0x02 “Illegal Data Address” since it attempts to operate on registers\n\n96, 97, 98, 99 and 100, and there is no register with address 100.\n\nxx xx xx 03 MB_CLIENT ILLEGAL DATA VALUE:\n\nA value contained in the query data field is not an allowable value\n\nfor server (or slave). This indicates a fault in the structure of the re￾mainder of a complex request, such as that the implied length is in￾correct. It specifically does NOT mean that a data item submitted for\n\nstorage in a register has a value outside the expectation of the appli￾cation program, since the MODBUS protocol is unaware of the sig￾nificance of any particular value of any particular register.\n\nxx xx xx 04 MB_CLIENT SLAVE DEVICE FAILURE:\n\nAn unrecoverable error occurred while the server (or slave) was at￾tempting to perform the requested action.\n\nxx xx xx 05 MB_CLIENT ACKNOWLEDGE:\n\nSpecialized use in conjunction with programming commands. The\n\nserver (or slave) has accepted the request and is processing it, but\n\na long duration of time will be required to do so. This response is re￾turned to prevent a timeout error from occurring in the client (or\n\nmaster). The client (or master) can next issue a Poll Program Com￾plete message to determine if processing is completed.\n\nxx xx xx 06 MB_CLIENT SLAVE DEVICE BUSY:\n\nSpecialized use in conjunction with programming commands. The\n\nserver (or slave) is engaged in processing a long–duration program\n\ncommand. The client (or master) should retransmit the message\n\nlater when the server (or slave) is free.\n\nxx xx xx 8 MB_CLIENT MEMORY PARITY ERROR:\n\nSpecialized use in conjunction with function codes 20 and\n\n21 and reference type 6, to indicate that the extended file area\n\nfailed to pass a consistency check.The server (or slave) attempted\n\nto read record file, but detected a parity error in the memory.The\n\nclient (or master) can retry the request, but service may be required\n\non the server (or slave) device.\n\nxx xx xx 0A MB_CLIENT GATEWAY PATH UNAVAILABLE:\n\nSpecialized use in conjunction with gateways, indicates that the\n\ngateway was unable to allocate an internal communication path\n\nfrom the input port to the output port for processing the request.\n\nUsually means that the gateway is misconfigured or overloaded.\n\nxx xx xx 0B MB_CLIENT GATEWAY TARGET DEVICE FAILED TO RESPOND:\n\nSpecialized use in conjunction with gateways, indicates that no re￾sponse was obtained from the target device. Usually means that the\n\n115 Version 1.21\n\nChapter 9. Network and Communication\n\ndevice is not present on the network.", "type": "FUNCTION", "name": "MB_CLIENT", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the IP control interface."}, {"name": "S_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for receiving data."}, {"name": "DATA", "type": "ARRAY[0..255] OF WORD", "description": "Array containing MODBUS register data."}, {"name": "DATA_SIZE", "type": "INT", "description": "Number of data words in the structure MB_DATA."}, {"name": "ENABLE", "type": "BOOL", "description": "Enables or disables the module."}, {"name": "UDP", "type": "BOOL", "description": "Selects TCP (FALSE) or UDP (TRUE) mode."}, {"name": "FC", "type": "INT", "description": "Function code for the MODBUS command."}, {"name": "UNIT_ID", "type": "BYTE", "description": "Device ID for the MODBUS communication."}, {"name": "R_ADDR", "type": "INT", "description": "Read command: MODBUS data point address."}, {"name": "R_POINTS", "type": "INT", "description": "Read command: number of MODBUS data points."}, {"name": "R_DATA_ADR", "type": "INT", "description": "Read command: DATA data point address."}, {"name": "R_DATA_BITPOS", "type": "INT", "description": "Read command: DATA data point bit position."}, {"name": "W_ADDR", "type": "INT", "description": "Write command: MODBUS data point address."}, {"name": "W_POINTS", "type": "INT", "description": "Write command: number of MODBUS data points."}, {"name": "W_DATA_ADR", "type": "INT", "description": "Write command: DATA data point address."}, {"name": "W_DATA_BITPOS", "type": "INT", "description": "Write command: DATA data point bit position."}, {"name": "DELAY", "type": "TIME", "description": "Repetition time for command execution."}], "output": [{"name": "ERROR", "type": "DWORD", "description": "Error code returned from the command execution."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates if the module is currently processing a command."}], "in/out": [], "return_value": {"type": "void", "description": "No return value, as this is a function that executes commands."}}
{"title": "MODBUS Ethernet Server Function Module", "description": "MB_SERVER The module provides access from external to local MODBUS data tables via \n\nEthernet. It supports commands in categories 0,1,2. The parameters IP_C, \n\nS_BUF, R_BUF this form the interface to the module IP_CONTROL and used \n\nhere for processing and coordination. The desired port number (for \n\nMODBUS default is 502) must be specifed on IP_CONTROL centrally. The IP \n\naddress is not required on IP_CONTROL, as this one operates in the \n\nPASSIVE mode. The DATA structure is designed as a WORD array and \n\ncontains the MODBUS data. DATA_SIZE specifes the size of DATA . By \n\nENABLE, the module is released, and by remove of the release a possibly \n\nstill active query is ended. For devices that support MODBUS with UDP = \n\nTRUE this mode can be activated. A negative command execution is \n\nreported by ERROR (see ERROR table).\n\nWIth entries in the data structure VMAP, virtual data areas are created, \n\nand the access to certain function codes and data regions is \n\nparameterized. Thus, it is very easy to map virtual address spaces into a \n\n116 Version 1.21\n\nChapter 9. Network and Communication\n\ncoherent Data block (DATA), or write data areas. Or provide areas, that \n\nare connected to output peripherals, with a watchdog.\n\nThe handling of the VMAP data is described in more detail in the module \n\nMB_VMAP.\n\nERROR:\n\nValue Source Description\n\nB3 B2 B1 B0\n\nnn nn nn xx IP_CONTROL Error from module IP_CONTROL\n\nxx xx xx 00 MB_SERVER NO ERROR:\n\nxx xx xx 01 MB_SERVER ILLEGAL FUNCTION:\n\nxx xx xx 02 MB_SERVER ILLEGAL DATA ADDRESS:\n\nxx xx xx 03 MB_SERVER ILLEGAL DATA VALUE:\n\nSupported function codes and parameters used:\n\n1 x Coils Read Coils\n\n2 x Input Discrete Read Discrete Inputs\n\n3 x Holding Register Read Holding Registers\n\n4 x Input Register Read Input Register\n\n5 x Coils Write Single Coil\n\n6 x Holding Register Write Single Register\n\n117 Version 1.21\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nC\n\no\n\nd\n\ne\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns\n\n16\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns (R\n\ne\n\ngister)\n\nGro\n\nu\n\np\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nD\n\ne\n\ns\n\ncriptio\n\nn\n\nChapter 9. Network and Communication\n\n15 x Coils Write Multiple Coils\n\n16 x Holding Register Write Multiple Register\n\n22 x Holding Register Mask Write Register\n\n23 x Holding Register Read/Write Multiple Register", "type": "FUNCTION", "name": "MB_SERVER", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for IP control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER_SHORT", "description": "Buffer for receiving data."}, {"name": "VMAP", "type": "ARRAY", "description": "Virtual address table containing VMAP_DATA.", "fields": [{"name": "VMAP_DATA", "type": "VMAP_DATA", "description": "Data structure representing virtual mappings."}]}, {"name": "DATA", "type": "ARRAY", "description": "Array of MODBUS registers.", "fields": [{"name": "WORD", "type": "WORD", "description": "MODBUS data words."}]}, {"name": "DATA_SIZE", "type": "INT", "description": "Number of data words in DATA."}, {"name": "ENABLE", "type": "BOOL", "description": "Flag to release the module."}, {"name": "UDP", "type": "BOOL", "description": "Indicates whether to use UDP mode (TRUE for UDP)."}], "output": [{"name": "ERROR", "type": "DWORD", "description": "Error code indicating the status of command execution."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Modbus Virtual Address Mapping", "description": "MB_VMAP The module allows the conversion of virtual addresses at a real address \n\nspace in the MODBUS DATA Structure. Virtual address ranges are defned \n\nin the VMAP data array. If the module is called and found that nothing in \n\nthe VMAP data is entered, automatically a block is created, allowing full \n\naccess to all the MODBUS data. In each address block also a watchdog \n\ntimer is maintained that sets each time you access this block on the timer \n\nto zero. Thus, simply by comparing the TIME_OUT value to a cutof value, \n\nat communication error (no update) can be responded.\n\nBy the parameter FC is detected the functional code and whether the \n\nregister (16 bit) or individual bits must be processed. The bit number \n\ncorresponds to the function code. This means that Bit5 = 1 in FC the \n\nfunction code 5 (Write Single Coil) enables. By V_ADR by the virtual start \n\naddress is specifed (At 16bit commands this is a register address and at \n\n118 Version 1.21\n\nChapter 9. Network and Communication\n\nbit commands an absolute bit number within a defned block.) The \n\nparameter V_CNT defnes the number of data points (unit 16-bit or bits \n\ndepending on the function code). The overall size is given by \n\nMODBUS_ARRAY SIZE (number WORDS). By using these parameters, the \n\nmodule searched the VMAP data table for a matching block of data, and \n\npasses from the correct data block P_ADR as a result. The value \n\ncorresponds to the real index for MODBUS_DATA array. At a function code \n\nwith bit access in addition the bit position within P_ADR is passed as well. \n\nA potential error occurring in the analysis is reported for the parameter \n\n\"error\" (see error table). The watchdog timer is reseted at each access to a \n\nfunction code from the group of write commands. \n\nIf no special treatment required, so in VMAP are not settings \n\nrequired, and then MODBUS_ARRAY is mapped 1:1 with the \n\naccess.\n\nERROR:\n\nValue Description\n\n0 No error\n\n1 Invalid function code\n\n2 Invalid Data Address\n\n! Note the special treatment of function code 23!\n\nThe Modbus Function Code 23 is a combined command, because it \n\nconsists of two actions. First register are written and then the register are \n\nread. Found that the write or read parameter is not allowed, so neither of \n\nthese actions is performed.\n\nTo distinguish between reading and writing by VMAP, the read command is \n\nchecked in VMAP at FC 23 as BIT23 (Read/Write Multiple registers), and the \n\nwrite command on the other hand, is tested in Bit16 (Write multiple \n\nregisters).", "type": "FUNCTION", "name": "MB_VMAP", "input": [{"name": "FC", "type": "INT", "description": "Function number that determines the operation to be performed."}, {"name": "V_ADR", "type": "INT", "description": "Virtual address range start address."}, {"name": "V_CNT", "type": "INT", "description": "Number of data points in the virtual address space."}, {"name": "SIZE", "type": "INT", "description": "Number of MODBUS registers in the DATA structure."}], "output": [{"name": "P_ADR", "type": "INT", "description": "Real address space: start address."}, {"name": "P_BIT", "type": "INT", "description": "Real address range: bit position."}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating the result of the operation."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "MD5 Hash Function", "description": "MD5_AUX. This module has only in\n\nconjunction with the block MD5_STREAM a useful application.\n\n79 Version 1.21\n\nChapter 8. Converter", "type": "FUNCTION", "name": "MD5_AUX", "input": [{"name": "N", "type": "INT", "description": "An integer for internal use."}, {"name": "A", "type": "DWORD", "description": "A DWORD parameter for internal use."}, {"name": "B", "type": "DWORD", "description": "A DWORD parameter for internal use."}, {"name": "C", "type": "DWORD", "description": "A DWORD parameter for internal use."}, {"name": "D", "type": "DWORD", "description": "A DWORD parameter for internal use."}, {"name": "X", "type": "DWORD", "description": "A DWORD parameter for internal use."}, {"name": "U", "type": "INT", "description": "An integer for internal use."}, {"name": "T", "type": "DWORD", "description": "A DWORD parameter for internal use."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting MD5 hash value as a DWORD.", "fields": []}}
{"title": "MD5 Hash Calculation Module", "description": "MD5_STR a string of the MD5 hash can be calculated by. In the STR a\n\nstring is passed to the module, and a positive edge at input \"RUN\", the\n\ncalculation starts. DONE is immediately reset at startup, and after the pro￾cess is DONE is set to TRUE. Then, at the parameter HASH the actual cal￾culated HASH value is available. (See module MD5-STREAM).", "type": "FUNCTION", "name": "MD5_STR", "input": [{"name": "RUN", "type": "BOOL", "description": "Positive edge starts the calculation"}, {"name": "STR", "type": "STRING", "description": "Text for HASH creation"}], "output": [{"name": "DONE", "type": "BOOL", "description": "TRUE if calculations are complete"}, {"name": "MD5", "type": "ARRAY[0..15] OF BYTE", "description": "Current MD5 hash"}], "in/out": [], "return_value": null}
{"title": "MD5 Stream Calculation", "description": "MD5_STREAM allows the calculation of the MD5 ( Mes￾sage-Digest Algorithm 5 ) of a cryptographic hash function. \n\nThis can be created from any data stream a unique check value. It is vir￾tually impossible to fnd two diferent messages with the same test value,\n\nthis is referred to as collisions free. This can be used to check a confgura￾tion fle for change or manipulation.\n\nWith the hash algorithm (MD5) a hash value is generated from 128 bits in\n\nlength for any data. The maximum length of the stream is on this module\n\nis limited to 2^32 (4 gigabyte). The result is a 16 bytes hash value at pa￾rameters MD5.", "type": "FUNCTION", "name": "MD5_STREAM", "input": [{"name": "mode", "type": "INT", "description": "The mode of operation for the MD5_STREAM function. Use 1 for initialization, 2 for data block processing, and 3 for completion."}, {"name": "BUF", "type": "ARRAY[0..63] OF BYTES", "description": "The buffer containing the source data to be hashed."}, {"name": "SIZE", "type": "UDINT", "description": "The number of bytes in the data to process."}], "output": [{"name": "MD5", "type": "ARRAY[0..15] OF BYTE", "description": "The calculated MD5 hash value as a 16-byte array."}, {"name": "POS", "type": "UDINT", "description": "The start address of the requested data block."}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value. The results are provided via output parameters."}}
{"title": "MD5 to Hex String Converter", "description": "MD5_TO_STRH converts the MD5 byte array to a hex\n\nstring.", "type": "FUNCTION", "name": "MD5_TO_STRH", "input": [{"name": "MD5", "type": "ARRAY[0..15] OF BYTE", "description": "An array representing the MD5 hash value in byte format."}], "output": [{"name": "hexString", "type": "STRING(32)", "description": "The hexadecimal string representation of the MD5 hash."}], "in/out": [], "return_value": null}
{"title": "Moon Phase Calculation", "description": "MOON_PHASE is used to calculate the moon phase pf the specified \n\ndate. At parameter XDT the current date and time is passed, and always recalculated \n\nafter delay of the time parameter \"UPDATE\". The default value for UPDATE is 1 hour \n\nand the scaling factor is 12.\n\nA moon phase takes about 29.53 days, and goes through the typical conditions of \n\nthis new moon to full moon (resp. increasing and decreasing moon). This cycle can \n\nbe scaled by SCALE to a desired value between 0 and 255.", "type": "FUNCTION", "name": "MOON_PHASE", "input": [{"name": "XDT", "type": "DT", "description": "The date and time for which the moon phase is to be calculated."}, {"name": "SCALE", "type": "BYTE", "description": "The scaling factor used to adjust the output moon phase value."}, {"name": "UPDATE", "type": "TIME", "description": "The time interval after which the moon phase is recalculated. Default value is 1 hour."}], "output": [{"name": "PHASE", "type": "BYTE", "description": "The scaled value representing the current moon phase."}], "return_value": {"type": "void", "description": "This function does not return a value; it updates the output parameter 'PHASE'."}}
{"title": "Network Version Function", "description": "NETWORK_VERSION provides if IN = FALSE the current version number as\n\nDWORD. If IN is set to TRUE then the release date of the current version as\n\na DWORD is returned.", "type": "FUNCTION", "name": "NETWORK_VERSION", "input": [{"name": "IN", "type": "BOOL", "description": "If TRUE, the function returns the release date; if FALSE, it returns the current version number."}], "output": [{"name": "Version", "type": "DWORD", "description": "The current version number or release date as a DWORD."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the library version number or the release date as a DWORD.", "fields": []}}
{"title": "Bidirectional Transmission of Binary Signals Using NET_VAR_BOOL8", "description": "NET_VAR_BOOL8 8 binary \n\nsignals from the master to slave and vice versa. The signals IN 1..8 are collected and \n\npassed to the other side (control) on the same module at the same position as \n\nOUT1..8 again.\n\nSimultaneously, the on the opposite side (other control) passed input data passed \n\nhere as a OUT1..8 again.\n\n200 Version 1.21\n\nChapter 12. Network Variables\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.", "type": "FUNCTION", "name": "NET_VAR_BOOL8", "input": [{"name": "IN1", "type": "BOOL", "description": "Signal input 1"}, {"name": "IN2", "type": "BOOL", "description": "Signal input 2"}, {"name": "IN3", "type": "BOOL", "description": "Signal input 3"}, {"name": "IN4", "type": "BOOL", "description": "Signal input 4"}, {"name": "IN5", "type": "BOOL", "description": "Signal input 5"}, {"name": "IN6", "type": "BOOL", "description": "Signal input 6"}, {"name": "IN7", "type": "BOOL", "description": "Signal input 7"}, {"name": "IN8", "type": "BOOL", "description": "Signal input 8"}], "output": [{"name": "OUT1", "type": "BOOL", "description": "Signal output 1"}, {"name": "OUT2", "type": "BOOL", "description": "Signal output 2"}, {"name": "OUT3", "type": "BOOL", "description": "Signal output 3"}, {"name": "OUT4", "type": "BOOL", "description": "Signal output 4"}, {"name": "OUT5", "type": "BOOL", "description": "Signal output 5"}, {"name": "OUT6", "type": "BOOL", "description": "Signal output 6"}, {"name": "OUT7", "type": "BOOL", "description": "Signal output 7"}, {"name": "OUT8", "type": "BOOL", "description": "Signal output 8"}], "in/out": [{"name": "X", "type": "NET_VAR_DATA", "description": "NET_VAR data structure for bidirectional signal transmission"}], "return_value": {"type": "BYTE", "description": "Identification number of the module instance. It indicates faults if there's a mismatch in configuration.", "fields": [{"name": "ID", "type": "BYTE", "description": "The ID parameter for the module instance."}]}}
{"title": "NET_VAR_BUFFER Module", "description": "NET_VAR_BUFFER is used for bidirectional transmission of 64 bytes \n\nfrom the master to slave and vice versa. The data from BUF_IN be recorded and \n\npassed on the other side (other plc) on the same module at the same position as \n\nBUF_OUT.\n\nSimultaneously, the input data on the opposite side (other control) is passed here as \n\nBUF_OUT again.\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.\n\n201 Version 1.21\n\nChapter 12. Network Variables", "type": "FUNCTION", "name": "NET_VAR_BUFFER", "input": [{"name": "X", "type": "NET_VAR_DATA", "description": "Data structure used for configuration and transmission.", "fields": []}, {"name": "BUF_IN", "type": "ARRAY [1..64] OF BYTE", "description": "Input data buffer for receiving data.", "fields": []}], "output": [{"name": "BUF_OUT", "type": "ARRAY [1..64] OF BYTE", "description": "Output data buffer for sending data.", "fields": []}, {"name": "OUTPUT ID", "type": "BYTE", "description": "Identification number of the module instance.", "fields": []}], "in/out": [], "return_value": {"type": "void", "description": "No return value as the operation is purely based on input/output data transmission.", "fields": []}}
{"title": "NET_VAR_CONTROL", "description": "NET_VAR_CONTROL coordinates the data exchange between the two \n\ncontrollers and the satellite components NET_VAR_*. With ACTIVATE = TRUE, the \n\ndata exchange will be released. The module must be invoked on both controllers, \n\nwith the parameter MASTER must be assigned once with TRUE and once must be \n\nFALSE. Thus determines which side the active connection will establish. With UDP \n\n(FALSE / TRUE) can be specified whether a UDP or TCP connection is used. The the \n\nIP address of the other side must be specified in REMOTE-IP4, and alternatively, the \n\nport address (default port is 10000). The SCAN TIME determines a data refresh \n\ninterval (default is T # 1s). WIth WATCHDOG the monitoring time is set (default is T # \n\n2s). When data exchange runs, the parameter RUN = TRUE. If the data exchange is \n\nlonger than the watchdog time not possible, RUN = FALSE and an error is passed. \n\nThe error will not be acknowledged, because the module automatically tries to \n\nrestore the data exchange. Once no more error exists, RUN = TRUE and the error \n\ncode is cleared.\n\nERROR: (regarded as a HEX value!)\n\nDWORD Message Type Description\n\n199 Version 1.21\n\nChapter 12. Network Variables\n\nB3 B2 B1 B0\n\nXX .. .. .. Connection establish Connect Error - See module IP_CONTROL\n\n.. XX .. .. Send data Transmission error - See module IP_CONTROL\n\n.. .. XX .. Receive data Receive Error - See module IP_CONTROL\n\n.. .. .. XX Configuration error ID number of the module", "type": "FUNCTION", "name": "NET_VAR_CONTROL", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "Enables the exchange of data."}, {"name": "MASTER", "type": "BOOL", "description": "Determines if this side is the master (TRUE) or slave (FALSE)."}, {"name": "UDP", "type": "BOOL", "description": "Specifies the connection type: FALSE for TCP, TRUE for UDP."}, {"name": "REMOTE_IP4", "type": "DWORD", "description": "IP4-address of the other SPS."}, {"name": "REMOTE_PORT", "type": "WORD", "description": "PORT number of the other PLC (default port is 10000)."}, {"name": "SCAN_TIME", "type": "TIME", "description": "Update time for data refresh (default is T#1s)."}, {"name": "WATCHDOG", "type": "TIME", "description": "Monitoring time (default is T#2s)."}], "output": [{"name": "RUN", "type": "BOOL", "description": "Indicates active data exchange - no error."}, {"name": "ERROR", "type": "DWORD", "description": "Error code regarding the data exchange as a HEX value."}], "in/out": [], "return_value": null}
{"title": "NET_VAR_DWORD8 Module", "description": "NET_VAR_DWORD8 is used for bidirectional transmission of eight \n\nDWORD from the master to slave and vice versa. The signals DWORD IN1..8 are \n\ncollected and passed to the other side (control) on the same module at the same \n\nposition as OUT1..8 again.\n\nSimultaneously, the on the opposite side (other control) passed input datawords \n\npassed here as a OUT1..8 again.\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.", "type": "FUNCTION", "name": "NET_VAR_DWORD8", "input": [{"name": "X", "type": "NET_VAR_DATA", "description": "NET_VAR data structure for bidirectional data transmission"}, {"name": "IN1", "type": "DWORD", "description": "Input DWORD value 1"}, {"name": "IN2", "type": "DWORD", "description": "Input DWORD value 2"}, {"name": "IN3", "type": "DWORD", "description": "Input DWORD value 3"}, {"name": "IN4", "type": "DWORD", "description": "Input DWORD value 4"}, {"name": "IN5", "type": "DWORD", "description": "Input DWORD value 5"}, {"name": "IN6", "type": "DWORD", "description": "Input DWORD value 6"}, {"name": "IN7", "type": "DWORD", "description": "Input DWORD value 7"}, {"name": "IN8", "type": "DWORD", "description": "Input DWORD value 8"}, {"name": "ID", "type": "BYTE", "description": "Identification number of the module instance"}], "output": [{"name": "OUT1", "type": "DWORD", "description": "Output DWORD value 1 corresponding to input IN1"}, {"name": "OUT2", "type": "DWORD", "description": "Output DWORD value 2 corresponding to input IN2"}, {"name": "OUT3", "type": "DWORD", "description": "Output DWORD value 3 corresponding to input IN3"}, {"name": "OUT4", "type": "DWORD", "description": "Output DWORD value 4 corresponding to input IN4"}, {"name": "OUT5", "type": "DWORD", "description": "Output DWORD value 5 corresponding to input IN5"}, {"name": "OUT6", "type": "DWORD", "description": "Output DWORD value 6 corresponding to input IN6"}, {"name": "OUT7", "type": "DWORD", "description": "Output DWORD value 7 corresponding to input IN7"}, {"name": "OUT8", "type": "DWORD", "description": "Output DWORD value 8 corresponding to input IN8"}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value."}}
{"title": "NET_VAR_REAL8 Function Module", "description": "NET_VAR_REAL8 is used for bidirectional transmission of eight REAL￾values from the master to slave and vice versa. The REAL values IN1..8 are \n\ncollected and passed to the other side (control) on the same module at the same \n\nposition as OUT1..8 again.\n\nSimultaneously, the on the opposite side (other control) passed input REAL values \n\nare passed here as a OUT1..8 again.\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.", "type": "FUNCTION", "name": "NET_VAR_REAL8", "input": [{"name": "IN1", "type": "REAL", "description": "First input REAL value"}, {"name": "IN2", "type": "REAL", "description": "Second input REAL value"}, {"name": "IN3", "type": "REAL", "description": "Third input REAL value"}, {"name": "IN4", "type": "REAL", "description": "Fourth input REAL value"}, {"name": "IN5", "type": "REAL", "description": "Fifth input REAL value"}, {"name": "IN6", "type": "REAL", "description": "Sixth input REAL value"}, {"name": "IN7", "type": "REAL", "description": "Seventh input REAL value"}, {"name": "IN8", "type": "REAL", "description": "Eighth input REAL value"}], "output": [{"name": "OUT1", "type": "REAL", "description": "First output REAL value"}, {"name": "OUT2", "type": "REAL", "description": "Second output REAL value"}, {"name": "OUT3", "type": "REAL", "description": "Third output REAL value"}, {"name": "OUT4", "type": "REAL", "description": "Fourth output REAL value"}, {"name": "OUT5", "type": "REAL", "description": "Fifth output REAL value"}, {"name": "OUT6", "type": "REAL", "description": "Sixth output REAL value"}, {"name": "OUT7", "type": "REAL", "description": "Seventh output REAL value"}, {"name": "OUT8", "type": "REAL", "description": "Eighth output REAL value"}], "in/out": [{"name": "X", "type": "NET_VAR_DATA", "description": "NET_VAR data structure for bidirectional communication"}], "return_value": {"type": "BYTE", "description": "ID indicating the current identification number of the module instance"}}
{"title": "NET_VAR_STRING Function Module", "description": "NET_VAR_STRING is used for bidirectional transmission of STRING \n\nfrom the master to slave and vice versa. The STRING in the parameters IN will be \n\n203 Version 1.21\n\nChapter 12. Network Variables\n\nrecorded and passed on the other side (control) on the same module at the same \n\nposition as OUT parameter.\n\nAt the same time the input String on the opposite side of the (other control) is passed \n\nhere as a OUT value again.\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.", "type": "FUNCTION", "name": "NET_VAR_STRING", "input": [{"name": "X", "type": "NET_VAR_DATA", "description": "A NET_VAR data structure for variable data transmission."}, {"name": "STRING", "type": "STRING", "description": "The input string that will be transmitted."}], "output": [{"name": "OUT", "type": "STRING", "description": "The output string that is received on the opposite side."}, {"name": "ID", "type": "BYTE", "description": "The current identification number of the module instance."}], "in/out": [], "return_value": {}}
{"title": "NET_VAR_X8 Function Module", "description": "NET_VAR_X8 is used for bidirectional transmission of each two REAL, \n\nDINT, UINT, DWORD values from the master to slave and vice versa. The signals \n\nIN1..8 are collected and passed to the other side (control) on the same module at the \n\nsame position as OUT1..8 again.\n\n204 Version 1.21\n\nChapter 12. Network Variables\n\nSimultaneously, the input data on the opposite side (other control) is passed here as \n\nBUF_OUT again.\n\nID parameter indicates the current identification number of the module instance. If the \n\nconfiguration of the master and the slave program is differently (incorrectly) that ID \n\nnumber is passed as a fault in the module NET_VAR_CONTROL.\n\n205 Version 1.21\n\nChapter 13. Weather Data\n\n 13. Weather Data", "type": "FUNCTION", "name": "NET_VAR_X8", "input": [{"name": "IN_REAL1", "type": "REAL", "description": "First input REAL value"}, {"name": "IN_REAL2", "type": "REAL", "description": "Second input REAL value"}, {"name": "IN_DINT1", "type": "DINT", "description": "First input DINT value"}, {"name": "IN_DINT2", "type": "DINT", "description": "Second input DINT value"}, {"name": "IN_UDINT1", "type": "DINT", "description": "First input UDINT value"}, {"name": "IN_UDINT2", "type": "DINT", "description": "Second input UDINT value"}, {"name": "IN_DWORD1", "type": "DINT", "description": "First input DWORD value"}, {"name": "IN_DWORD2", "type": "DINT", "description": "Second input DWORD value"}, {"name": "ID", "type": "BYTE", "description": "Identification number of the module instance"}], "output": [{"name": "OUT_REAL1", "type": "REAL", "description": "First output REAL value"}, {"name": "OUT_REAL2", "type": "REAL", "description": "Second output REAL value"}, {"name": "OUT_DINT1", "type": "DINT", "description": "First output DINT value"}, {"name": "OUT_DINT2", "type": "DINT", "description": "Second output DINT value"}, {"name": "OUT_UDINT1", "type": "DINT", "description": "First output UDINT value"}, {"name": "OUT_UDINT2", "type": "DINT", "description": "Second output UDINT value"}, {"name": "OUT_DWORD1", "type": "DINT", "description": "First output DWORD value"}, {"name": "OUT_DWORD2", "type": "DINT", "description": "Second output DWORD value"}], "in/out": [{"name": "X", "type": "NET_VAR_DATA", "description": "NET_VAR data structure for bidirectional data transmission"}], "return_value": {"type": null, "description": null}}
{"title": "Dynamic String Formatting", "description": "PRINT_SF a STRING can be added dynamically with a part of a string. \n\nThe position of the substring to be inserted is indicated by '~' tilde \n\ncharacter and the subsequent number defnes the parameter number. '~ \n\n1' to '~ 9' are thus processed automatically. If the insert of the substring \n\n121 Version 1.21\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nD\n\ne\n\ns\n\ncriptio\n\nn\n\nF\n\nu\n\nn\n\nctio\n\nn\n\nC\n\no\n\nd\n\ne\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns\n\n16\n\nBit A\n\nc\n\nc\n\ne\n\ns\n\ns (R\n\ne\n\ngister)\n\nR\n\ne\n\na\n\nd / Write\n\nDigital In\n\np\n\nut\n\nA\n\nn\n\nalo\n\ng In\n\np\n\nut\n\nDigital O\n\nutp\n\nut\n\nA\n\nn\n\nalo\n\ng\n\nO\n\nutp\n\nut\n\nChapter 9. Network and Communication\n\nreached the maximum number of characters, so instead of the substring \n\n'..' is inserted.\n\nVAR\n\n LITER : REAL := 545.4;\n\n FUELLZEIT : INT := 25;\n\n NAME: STRING: = 'tank content';\n\n PARA: ARRAY[1..11] OF STRING(string_length);\n\n PS: PRINT_SF;\n\nEND_VAR\n\nPARA[1]: = REAL_TO_STRING(liters); (* Parameter 1: string to convert *) \n\nPARA[2]: = INT_TO_STRING(filling time); (* Parameter 2: string to convert\n\n*) \n\nPARA[3]: = NAME; (* Parameter 3: *) \n\nPS.STR: = ' ~3: ~1 Liter, flling time: ~2 Min.' ; (* Text output-mask *) \n\nPS.PRINTF_DATA := PARA; (* Pass parameter data structure *) \n\nPS(); (* Module version *) \n\nThe string PS. STR then has the following content \n\n'Tank Capacity: 545.4 liters, filling time: 25 min'", "type": "FUNCTION", "name": "PRINT_SF", "input": [{"name": "PRINTF_DATA", "type": "ARRAY[1..11] OF STRING", "description": "An array of strings that will be used in the dynamic string formatting."}], "output": [], "in/out": [], "return_value": {"type": "STRING", "description": "The formatted string after inserting the specified parameters.", "fields": []}}
{"title": "RC4 Data Encryption Stream Module", "description": "RC4_CRYPT_STREAM uses the RC4 data encryption to process\n\nan almost arbitrarily long data stream. This standard is used for example\n\nin an SSH, HTTPS, and WEP or WPA, and is thus widely used. The algorithm\n\ncan in principle operate at up to 2048 bit key, but this is limited to the mo-\n\n82 Version 1.21\n\nChapter 8. Converter\n\ndule on a 40-character key (but it can always be adjusted to up to 250\n\ncharacters). Thus, it presents a key length of 320 bits, which are designed\n\nfor applications on a PLC more than adequate. The maximum length of the\n\nstream is on this module is limited to 2^32 (4 gigabyte). The module can\n\nbe used for encryption as well as to decrypt RC4 data. 64 bytes per cycle\n\ncan still be processed, they will be processed in serial block mode. The\n\ndata been encrypted or decrypted, remains in the module BUF for further\n\nprocessing, and must, of course, processed previously by the user before\n\neach new block of data.", "type": "FUNCTION", "name": "RC4_CRYPT_STREAM", "input": [{"name": "mode", "type": "INT", "description": "Operation mode: 1 for initialization, 2 for data block processing, 3 for completion."}, {"name": "KEY", "type": "STRING(40)", "description": "A 320-bit long secret key for the encryption/decryption process."}, {"name": "BUF", "type": "ARRAY[0..63] OF BYTES", "description": "Data block to process (maximum size of 64 bytes per cycle)."}, {"name": "SIZE", "type": "UDINT", "description": "Number of data bytes to process."}], "output": [{"name": "POS", "type": "UDINT", "description": "Start address (base 0) of the requested data block after processing."}], "in/out": [], "return_value": null}
{"title": "READ_HTTP Function Module", "description": "READ_HTTP the HTTP header information can be analyzed. The \n\nmodule searches any array of bytes on the contents of a string and then \n\nevaluates the following parameters, and returns that string as its result. \n\nThe data in the bufer are automatically converted to upper case, so all \n\nsearch string at SRC has to be too, given in capital letters. With POS it can \n\nbegin its search at any position. The frst element in the array is at position \n\nnumber 1", "type": "FUNCTION", "name": "READ_HTTP", "input": [{"name": "INPUT SIZE", "type": "UINT", "description": "The size of the buffer that contains the HTTP header."}, {"name": "POS", "type": "INT", "description": "The position in the buffer from where the search operation starts. The first element in the array is at position number 1."}, {"name": "SRC", "type": "STRING", "description": "The search string, which must be provided in uppercase to match the converted data in the buffer."}, {"name": "IN_OUT PT", "type": "POINTER", "description": "The address of the buffer containing the HTTP header and body."}], "output": [{"name": "OUTPUT VALUE", "type": "STRING", "description": "The evaluated result from the HTTP header based on the search term provided in SRC, or the default HTTP version and status code if SRC is empty."}], "in/out": [], "return_value": {"type": "STRING", "description": "Returns the value found in the HTTP header based on the search criteria. If no search term is provided, returns the HTTP version and status code.", "fields": []}}
{"title": "SHA1 Hash Calculation", "description": "SHA1_STR the SHA1 hash can be calculated in a string. In the STR a\n\nstring is passed to the module, and a positive edge at input \"RUN\", the\n\ncalculation starts. DONE is immediately reset at startup, and after the pro￾cess is DONE is set to TRUE. Then, at the parameter HASH the actual cal￾culated HASH value is available. (See module SHA1-STREAM).", "type": "FUNCTION", "name": "SHA1_STR", "input": [{"name": "RUN", "type": "BOOL", "description": "Positive edge input that starts the calculation."}, {"name": "STR", "type": "STRING", "description": "The string input for which the SHA1 hash will be created."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates TRUE if calculations are complete."}, {"name": "HASH", "type": "ARRAY[0..19] OF BYTE", "description": "The actual SHA1 hash value calculated from the input string."}], "in/out": [], "return_value": null}
{"title": "SHA1 Stream Function Module", "description": "SHA1_STREAM allows the calculation of standard cryptogra￾phic hash function SHA-1 (Secure Hash Algorithm).\n\n84 Version 1.21\n\nChapter 8. Converter\n\nThis can be created from any data stream a unique check value. It is vir￾tually impossible to fnd two diferent messages with the same test value,\n\nthis is referred to as collisions free. This can be used to check a confgura￾tion fle for change or manipulation.\n\nWith the secure hash algorithm (SHA1) a hash value is generated from\n\n160 bits in length for any data. The maximum length of the stream is on\n\nthis module is limited to 2^32 (4 gigabyte). The result is a 20-byte hash\n\nvalue, issued as ARRAY [0..19] OF BYTE.", "type": "FUNCTION", "name": "SHA1_STREAM", "input": [{"name": "MODE", "type": "INT", "description": "Operating mode for the module (1 = init, 2 = Data Block, 3 = Complete)"}, {"name": "BUF", "type": "ARRAY[0..63] OF BYTES", "description": "Source data buffer for current input data stream"}, {"name": "SHA1", "type": "ARRAY[0..19] OF BYTE", "description": "Current SHA1-HASH value"}, {"name": "SIZE", "type": "UDINT", "description": "Number of data bytes in BUF"}], "output": [{"name": "POS", "type": "UDINT", "description": "Start address of the requested data block"}], "in/out": [], "return_value": {"type": "void", "description": "No return value, the function operates in-place"}}
{"title": "SHA1 to Hex String Converter", "description": "SHA1_TO_STRH SHA1 byte array to a hex string.", "type": "FUNCTION", "name": "SHA1_TO_STRH", "input": [{"name": "input_md5", "type": "ARRAY[0..19] OF BYTE", "description": "An array containing the SHA1 hash in byte format."}], "output": [{"name": "output_string", "type": "STRING (40)", "description": "A hexadecimal string representation of the SHA1 byte array."}], "in/out": [], "return_value": {"type": "STRING (40)", "description": "The resulting hexadecimal string converted from the input SHA1 byte array."}}
{"title": "SMTP Client Module", "description": "SMTP_CLIENT is used to send of classic emails.\n\nFollowing features are supported:\n\nSMTP protocol\n\nExtended SMTP protocol\n\nSending the subject line, text and content\n\nIndication of email sender address (From:), including \"Display Name\"\n\nIndication of the recipient (s) (To:)\n\nIndication of carbon copy recipient (s) (Cc:)\n\nIndication of blind copy recipient (s) (bc:)\n\nSending fle (s) as an attachment\n\nAuthentication method: NO, PLAIN, LOGIN, CRAM-MD5\n\nSpecifying the port number\n\nWhen positive edge at ACTIVATE the transfer process is started. The \n\nSERVER parameter contains the name of the SMTP server and optionally \n\nthe user name and password and a port number. If you pass a user name \n\nand password, the procedure is according to standard SMTP.\n\n124 Version 1.21\n\nChapter 9. Network and Communication\n\nSERVER: URL", "type": "FUNCTION", "name": "SMTP_CLIENT", "input": [{"name": "SERVER", "type": "STRING", "description": "URL of the SMTP server, can include username, password, and port number."}, {"name": "MAIL FROM", "type": "STRING", "description": "The return address for the email."}, {"name": "MAILTO", "type": "STRING", "description": "Recipient addresses, can include To, Cc, Bc addresses separated by '#' and ';'."}, {"name": "SUBJECT", "type": "STRING", "description": "The subject text for the email."}, {"name": "FILES", "type": "STRING", "description": "List of files to be attached to the email. Multiple files separated by ';'."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Positive edge starts the email transfer process."}, {"name": "TIMEOUT", "type": "TIME", "description": "Timeout duration for the transfer process."}, {"name": "DTI", "type": "DT", "description": "Current date-time value."}, {"name": "DTI_OFFSET", "type": "INT", "description": "Time zone offset from UTC in minutes."}, {"name": "Dns_ip4", "type": "DWORD", "description": "IP4 address of the DNS server."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates whether the email transfer completed without error."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates whether the transfer is currently active."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code associated with the transfer process."}, {"name": "ERROR_T", "type": "BYTE", "description": "Problem type or identifier for the error that occurred."}], "in/out": [], "return_value": null}
{"title": "SNTP Client", "description": "SNTP_CLIENT is used to synchronize local time with an SNTP server. \n\nFor this, the Simple Network Time Protocol is used which is designed to \n\nprovide a reliable time information over networks with variable packet \n\ndelay. The SNTP is technically completely identical with NTP, which here \n\nmeans no diferences. Therefore, all known SNTP and NTP server can be \n\nused, whether it be on the local network or via the Internet. For IP4 a IP￾address of a SNTP / NTP server is specifed. A positive edge at ACTIVATE \n\nstarts the query. The elapsed time between sending and receiving of the \n\ntime is measured and a time correction is calculated. Then, the received \n\ntime will be corrected by this value. Upon successful completion DONE_P is \n\none positive edge, and the current time is passed at UDT. On XMS the \n\nassociated fractional seconds as milliseconds are passed. The values of \n\n127 Version 1.21\n\nChapter 9. Network and Communication\n\nUDT and XMS are only valid when DONE_P = TRUE, since this is a static \n\ntime value, and is only used for setting of pulse-controlled time. ERROR \n\ngives at error the exact cause (See block IP_CONTROL).", "type": "FUNCTION", "name": "SNTP_CLIENT", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for IP Control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "IP4", "type": "DWORD", "description": "IP address of the SNTP server."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Starts the query when a positive edge is detected."}], "output": [{"name": "ERROR", "type": "DWORD", "description": "Error code indicating the cause of any failure."}, {"name": "DONE_P", "type": "BOOL", "description": "Positive edge indicating successful completion without error."}, {"name": "UDT", "type": "DT", "description": "Date and time output as Universal Time."}, {"name": "XMS", "type": "INT", "description": "Milliseconds of the Universal Time UDT."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "SNTP Server Module", "description": "SNTP_SERVER The module provides the functionality of an SNTP (NTP) server. With \n\nENABLE = TRUE the module logs in at IP_CONTROL and waits for the \n\nrelease of the resource, if it occupied by other subscribers for now. Then \n\nthe module is waiting for requests from other SNTP clients and answers it \n\nwith the current time of UDT and XMS. As long as ENABLE = TRUE, the \n\nEthernet access of this resource is permanently locked for other users \n\n(Exclusive Access - due to passive UDP mode). SNTP uses a hierarchical \n\nsystem of diferent strata. As stratum 0 is defned as the exact time \n\nstandard. The directly coupled systems, such as NTP, GPS or DCF77 time \n\nsignals are called Stratum 1.Each additional dependent unit causes an \n\nadditional time lag of 10-100ms and is designate with a higher number \n\n(Stratum 2, Stratum 3 to 255). If no STRATUM is specifed at the module, \n\nSTRATUM = 1 is used as a standard.\n\n128 Version 1.21\n\nChapter 9. Network and Communication\n\nIf an SNTP client itself has a time with a higher stratum than an SNTP \n\nserver, the time of this is sometimes rejected because it is less accurate \n\nthan their own reference. It is therefore important to specify a logically \n\ncorrect STRATUM. The module SNTP_CLIENT ignores deliberately the \n\nSTRATUM and synchronizes in each case with the SNTP server, because \n\npretty much everyone SNTP server as a more precise time than a PLC.", "type": "FUNCTION", "name": "SNTP_SERVER", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the IP address control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer used to transmit data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer used to receive data."}, {"name": "ENABLE", "type": "BOOL", "description": "Starts the SNTP server. When TRUE, the server will log in and wait for requests."}, {"name": "STRATUM", "type": "BYTE", "description": "Specifies the hierarchical level or accuracy of the SNTP server."}, {"name": "UDT", "type": "DT", "description": "Date and time input as Universal Time."}, {"name": "XMS", "type": "INT", "description": "Millisecond of the Universal Time UDT."}], "output": [], "in/out": [], "return_value": null}
{"title": "Spider Access Function Module", "description": "SPIDER_ACCESSvariables can be read wnd written from the PLC, \n\nwhich are provided by visualizations of web servers based on \"spider \n\ncontrol\" from the company iniNet integrated Solution GmbH, \n\nFor the following PLC is this web server integration available:\n\nSimatic S7 200/300/400 \n\nSAIA-Burgess PCD \n\nWago (750-841)\n\nBeckhof (CX series)\n\nPhoenix Contact (ILC Reihe)\n\nSelectron\n\nBerthel\n\nTbox\n\nBeck IPC\n\nIn the PLC program of target PLC, the desired variables must be released \n\nfor web access. Since the communication is performed via HTTP (port 80), \n\nthe data exchange is no problem, even across frewalls. Global and \n\ninstance variables can be processed.\n\nFormat of variables:\n\nAt global variables, only the regular variable names has to be given. An \n\ninstance variable must be specifed below. \n\n\"instance name. variable name\"\n\nMode: Read\n\nIf the MODE parameter is set to \"1\" and the variable name is quoted in \n\n\"NAME\", so cyclically a request to the HTTP to Web Server (PLC) is \n\nperformed and the result is displayed the \"VLAUE\" as a string. \n\n130 Version 1.21\n\nChapter 9. Network and Communication\n\nMode: Write\n\nIf the parameter MODE is set to \"2\" and at \"VALUE\" the variable value and \n\nin \"NAME\" the variable name as string, then cyclically an HTTP request to \n\nthe Web Server (PLC) is performed \n\nThe mode resp. the variable name can be changed in the cyclic mode at \n\nany time. If several variables have to be processed, thus only a many \n\nmodule instances as needed must be called.", "type": "FUNCTION", "name": "SPIDER_ACCESS", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for network communication."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "VALUE", "type": "STRING", "description": "Value of the variable to be written, or the fetched value when reading."}, {"name": "NAME", "type": "STRING(40)", "description": "Variable name, which can be a global or instance variable."}, {"name": "INPUT MODE", "type": "BYTE", "description": "Operating mode: 1 for read operation, 2 for write operation."}, {"name": "ERROR", "type": "DWORD", "description": "Error code indicating the status of the operation."}], "output": [{"name": "ERROR", "type": "DWORD", "description": "Error code indicating the status of the operation."}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value but performs a network operation."}}
{"title": "STRING_TO_URL Function", "description": "STRING_TO_URL split a URL ( Uniform Resource Locator ) into its com￾ponents and stores it in the data type URL. If in STR no path or protocoll is\n\nspecifed, so the function sets the missing values automatically with the\n\nspecifed replacement values. \n\nA URL is as follows:\n\nProtocol : / / user : Password @ domain : port / path ? query # anchor", "type": "FUNCTION", "name": "STRING_TO_URL", "input": [{"name": "STR", "type": "STRING", "description": "The input URL string that is to be split into its components."}, {"name": "DEFAULT_PROTOCOL", "type": "STRING", "description": "The replacement protocol to use if none is specified in the input URL."}, {"name": "DEFAULT_PATH", "type": "STRING", "description": "The alternate path to use if none is specified in the input URL."}], "output": [{"name": "URL", "type": "URL", "description": "The data type that holds the components of the split URL."}], "return_value": {"type": "URL", "description": "The resulting split components of the URL.", "fields": [{"name": "protocol", "type": "STRING", "description": "The protocol used in the URL."}, {"name": "user", "type": "STRING", "description": "The user name component of the URL, if specified."}, {"name": "password", "type": "STRING", "description": "The password component of the URL, if specified."}, {"name": "domain", "type": "STRING", "description": "The domain name of the URL."}, {"name": "port", "type": "INTEGER", "description": "The port number specified in the URL, if any."}, {"name": "path", "type": "STRING", "description": "The path component of the URL."}, {"name": "query", "type": "STRING", "description": "The query component of the URL, if any."}, {"name": "anchor", "type": "STRING", "description": "The anchor component of the URL, if any."}]}}
{"title": "SYSLOG Message Transmission", "description": "SYS_LOG is a standard for transmitting messages in an IP computer net￾work. The protocol is very simple - the client sends a short text message\n\nto the syslog receiver. The receiver is also called \"syslog daemon\" or \"sys￾log server\". The messages are sent using UDP port 514 or TCP port 1468\n\nand includes the message in plain text. SYSLOG is typical used for compu￾ter systems management and security surveillance. This enables the easy\n\nintegration of various log sources to a central syslog server. The server\n\nsoftware is available for all platforms, sometimes known as free / sharewa￾re. Unix or Linux systems have a syslog server already integrated.\n\nThrough a positive edge at ACTIVATE from the parameters of LDT, FACILI￾TY, SEVERITY, TAG, HOST NAME, MESSAGE a syslog message is generated\n\nand sent to the SERVER_IP4 mail address. With OPTION various properties\n\ncan still be controlled (See Table OPTION). After successfully sending\n\nDONE gets TRUE, otherwise ERROR is issued when the actual error messa￾ge (See ERROR of module IP_CONTROL).\n\nA syslog message has the following structure\n\nFACILITY,SEVERITY,TIMESTAMP,HOSTNAME,TAG,MESSAGE", "type": "FUNCTION", "name": "SYS_LOG", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the communication interface."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Positive edge starts the query."}, {"name": "LDT", "type": "DT", "description": "Local time for timestamping the message."}, {"name": "SERVER_IP4", "type": "DWORD", "description": "IP address of the syslog server."}, {"name": "PORT", "type": "WORD", "description": "Port number for the syslog server."}, {"name": "FACILITY", "type": "BYTE", "description": "Specifies the service or component."}, {"name": "SEVERITY", "type": "BYTE", "description": "Classification of severity for the message."}, {"name": "TAG", "type": "STRING(32)", "description": "Process name or ID associated with the syslog message."}, {"name": "HOST_NAME", "type": "STRING", "description": "Name or IP address of the sender of the message."}, {"name": "MESSAGE", "type": "STRING", "description": "The message content to be sent."}, {"name": "OPTION", "type": "BYTE", "description": "Various options to control message properties."}], "output": [{"name": "DONE", "type": "BOOL", "description": "Indicates if the query completed without errors."}, {"name": "ERROR", "type": "DWORD", "description": "Error code if the transmission fails."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "TELNET_LOG Function Module", "description": "TELNET_LOG is used to pass all the messages in the ring LOG_CONTROL￾bufer over TELNET. By \"ENABLE\", the module can be activated. At \n\nparameter PORT the desired port number can be defned. If the parameter \n\nis not defned the default port is 23.\n\nWith OPTION various properties can still be controlled (See Table OPTION). \n\nIf the parameter OPTION is not connected the following default is \n\nassumed:\n\nOPTION = BYTE#2#1000_1100;\n\nAs soon as a Telnet client connects this is indicated by parameter \"READY\". \n\nThen be automatically all messages are passed to TELNET. Once occurred \n\nnew reports in the course in LOG_CONTROL they are always passed \n\nautomatically. When a new connection from/to rebuilds, all messages will \n\nbe passed again. Most TELNET clients ofer the opportunity to redirect the \n\ndata stream to a fle, just to make a long-term data archiving.\n\nOPTION:\n\nBIT Function Description\n\n0 SCREEN_INIT After connecting to the TELNET console the entire screen is\n\ncleared. If the COLOR OPTION is selected, the screen\n\nBACK_COLOR will be deleted.\n\n1 AUTOWRAP In AUTOWRAP = 1, the write cursor is on reaching the end\n\nof line is automatically set to a next line. If the text output\n\nthe X,Y positions are always specifed with, it is better when\n\nAUTOWRAP = 0.\n\n2 COLOR Enables the color mode, it will apply BACK_COLOR and\n\nFRONT_COLOR to the output.\n\n3 NEW_LINE In NEW_LINE = 1 is automatically a carriage return and line\n\nfeed added to the end of the text. So the next text output\n\nstarts a new line. But this is only useful if no X_pos and\n\nY_pos be specifed.\n\n4 RESERVE\n\n5 RESERVE\n\n136 Version 1.21\n\nChapter 9. Network and Communication\n\n6 RESERVE\n\n7 NO_BUF_FLUSH Prevents the data in the bufer to be sent immediately. Only\n\nif the bufer is completely full, or this option is disabled, the\n\ndata is sent. Allows fast sending many texts in the same\n\ncycle", "type": "FUNCTION", "name": "TELNET_LOG", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for IP configuration."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "S_BUF_SIZE", "type": "UINT", "description": "Size of S_BUF."}, {"name": "ENABLE", "type": "BOOL", "description": "Toggle for activating the TELNET server."}, {"name": "OPTION", "type": "BYTE", "description": "Send options controlling various properties (default is BYTE#2#1000_1100)."}, {"name": "PORT", "type": "WORD", "description": "Desired port number for TELNET connection (default is 23 if not defined)."}], "output": [{"name": "READY", "type": "BOOL", "description": "Indicates that the TELNET client has established a connection."}], "in/out": [], "return_value": null}
{"title": "TELNET_PRINT Function Module", "description": "TELNET_PRINT The module enables easy output of text to a TELNET console. At the \n\nparameter TEXT is passed the desired string. To unlock the module for \n\ncommunication, ENABLE = 1 must be set, so that the registration takes \n\nplace at IP_CONTROL. With parameter PORT can be defned the port \n\nnumber you want, if not value is specifed the default port 23 is activated. \n\nWith BACK_COLOR and FRONT_COLOR can be defned the colors you want, \n\nif the function parameter OPTION is activated. The parameters X_pos and \n\nY_pos pass the desired coordinates of the text. If indicated in X_pos and \n\nY_pos the value \"0\", the text position is inactive, and the text are always \n\nappended at the current cursor position. The standard Telnet console \n\nallows X_pos (horizontal) from 1 to 80 and a Y_pos (Vertical) 1 to 25. The \n\nbehavior here can in turn be modifed by OPTION (Autowrap, carriage \n\nreturn, line feed, Buf_Flush etc..). If a large quantity of text will be issued, \n\nthere may be a bufering enabled, so the data are written if either the \n\nbufer is full (this is from the module induced independently) or this is \n\nsignaled by the amended OPTION parameter. By SEND = 1, the data is \n\nwritten into the bufer. The parameters may only be changed again if \n\nREADY is 1, and with DONE the data acquisition was displayed as a \n\npositive edge.\n\nOPTION:\n\nBIT Function Description\n\n0 SCREEN_INIT After connecting to the TELNET console the entire screen is\n\ncleared. If the COLOR OPTION is selected, the screen\n\nBACK_COLOR will be deleted.\n\n1 AUTOWRAP In AUTOWRAP = 1, the write cursor is on reaching the end\n\nof line is automatically set to a next line. If the text output\n\nthe X,Y positions are always specifed with, it is better when\n\nAUTOWRAP = 0.\n\n2 COLOR Enables the color mode, it will apply BACK_COLOR and\n\nFRONT_COLOR to the output.\n\n3 NEW_LINE In NEW_LINE = 1 is automatically a carriage return and line\n\nfeed added to the end of the text. So the next text output\n\nstarts a new line. But this is only useful if no X_pos and\n\nY_pos be specifed.\n\n4 RESERVE\n\n5 RESERVE\n\n6 RESERVE\n\n7 NO_BUF_FLUSH Prevents the data in the bufer to be sent immediately. Only\n\nif the bufer is completely full, or this option is disabled, the\n\ndata is sent. Allows fast sending many texts in the same\n\ncycle\n\n138 Version 1.21\n\nChapter 9. Network and Communication\n\nFRONT_COLOR:\n\nByte Color Byte Color\n\n0 Black 16 Flashing Black\n\n1 Light Red 17 Flashing Light Red\n\n2 Light Green 18 Flashing Light Green\n\n3 Yellow 19 Flashing Yellow\n\n4 Light Blue 20 Flashing Light Blue\n\n5 Pink / Light Magenta 21 Flashing Pink / Light Magenta\n\n6 Light Cyan 22 Flashing Light Cyan\n\n7 White 23 Flashing White\n\n8 Black 24 Flashing Black\n\n9 Red 25 Flashing Red\n\n10 Green 26 Flashing Green\n\n11 Brown 27 Flashing Brown\n\n12 Blue 28 Flashing Blue\n\n13 Purple / Magenta 29 Purple / Magenta\n\n14 Cyan 30 Flashing Cyan\n\n15 Gray 31 Flashing Gray\n\nBACK_COLOR:\n\nByte Color\n\n0 Black\n\n1 Red\n\n2 Green\n\n3 Brown\n\n4 Blue\n\n5 Purple / Magenta\n\n6 Cyan\n\n139 Version 1.21\n\nChapter 9. Network and Communication\n\n7 Gray", "type": "FUNCTION", "name": "TELNET_PRINT", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for IP control."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "INPUT TEXT", "type": "STRING", "description": "The string that you want to output to the TELNET console."}, {"name": "S_BUF_SIZE", "type": "UINT", "description": "Size of the buffer S_BUF."}, {"name": "ENABLE", "type": "BOOL", "description": "Enable communication; set to 1 to unlock the module."}, {"name": "SEND", "type": "BOOL", "description": "Positive edge to initiate sending of data."}, {"name": "OPTION", "type": "BYTE", "description": "Send options to configure the behavior of text output."}, {"name": "BACK_COLOR", "type": "BYTE", "description": "Background color for text output."}, {"name": "FRONT_COLOR", "type": "BYTE", "description": "Foreground color for text output."}, {"name": "X_pos", "type": "BYTE", "description": "X-coordinate of the cursor position (horizontal)."}, {"name": "Y_pos", "type": "BYTE", "description": "Y-coordinate of the cursor position (vertical)."}, {"name": "PORT", "type": "WORD", "description": "Port number for the TELNET connection; defaults to port 23 if not specified."}], "output": [{"name": "READY", "type": "BOOL", "description": "Indicates if the module is ready for operation."}, {"name": "DONE", "type": "BOOL", "description": "Positive edge indicating that the transmission is completed."}], "in/out": [], "return_value": null}
{"title": "Telnet-Vision Framework Function Module", "description": "TN_FRAMEWORK is a frame structure, which provides a \n\nfnished maturity model for TELNET-Vision .\n\nThe following tasks and functions are treated.\n\nConnection setup and breakdown with Telnet Client\n\nSend and receive data\n\nData structures for graphics functions\n\nINPUT_CONTROL elements\n\nIntelligent automatic updating of the Telnet display\n\nMenu bar display\n\nDirect access to all data structures for user program\n\n173 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_FRAMEWORK", "input": [{"name": "Xus_TN_INPUT_CONTROL", "type": "Us_TN_INPUT_CONTROL", "description": "Input control elements to manage Telnet operations."}, {"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure for displaying the Telnet interface."}, {"name": "Xus_TN_MENU", "type": "us_TN_MENU", "description": "Menu structure for user navigation and options."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data over the network."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data from the network."}, {"name": "IP_C", "type": "IP_CONTROL", "description": "Parameters for IP configuration and control."}], "output": [], "in/out": [], "return_value": {"type": "void", "description": "No return value as this function performs operations without returning data."}}
{"title": "Input Control Management", "description": "TN_INPUT_CONTROL: us_TN_INPUT_CONTROL\n\nThe module TN_INPUT_CONTROL is used to manage the INPUT_CONTROL \n\nelements. If Xus_TN_INPUT_CONTROL.bo_Reset_Fokus = TRUE then the \n\nFOCUS is disabled on all elements and the frst item gets to the focus. \n\nUsing the cursor up / down buttons and tab, the individual elements can \n\nbe selected or changed. The current element loses focus and then the next \n\nfollowing item gets the input focus reallocated. At the focus change of the \n\nelements automatically a redraw of the respective elements is triggered. \n\nThe image/fashing cursor is always positioned at each active element and \n\nis displayed. It always automatically displays and updates the ToolTip text, \n\nas this has been confgured.\n\nIt supports the following elements.\n\nTN_INPUT_EDIT_LINE\n\nTN_INPUT_SELECT_TEXT \n\nTN_INPUT_SELECT_POPUP", "type": "FUNCTION", "name": "TN_INPUT_CONTROL", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen information for the input control interface."}, {"name": "Xus_TN_INPUT_CONTROL", "type": "us_TN_INPUT_CONTROL", "description": "Control structure for managing input elements."}], "output": [], "in/out": [], "return_value": null}
{"title": "Telnet Input Line Management", "description": "TN_INPUT_EDIT_LINE is used to manage a command line. This \n\nmust be set *. in_TYPE = 1.\n\nThe item will be provided as *.in_X and *.in_Y. Every entry line can be \n\nprovided with a title text. With *.in_Title_Y_Ofset and *.in_Title_X_Ofset \n\nthe position relative to the element coordinates is expressed. The color \n\ncan be determined with *.by_Title_Attr, and the text by *.st_Title_String. If \n\na tool tip should appear at the element *. st_Input_ToolTip the text hast to \n\nbe specifed.\n\nIf the item has focus, using the keyboard cursor left / right the fashing \n\ncursor can be moved within the line. The backspace key can delete \n\nentered character. By pressing the Enter / Return key the input text is \n\nissued at *.st_Input_String and *.bo_Input_Entered ist set to TRUE. The \n\ninput fag must be reset after receive by the user. Using *.bo_Input_Hidden \n\n= TRUE the hidden input is activated, thus, all input characters \n\nrepresented with a '*'.\n\nUsing *.st_Input_Mask determines at which position and how many \n\ncharacters can be entered. At each position which a space, character can \n\nbe entered. During initialization *.st_Input_Mask must be copied once to \n\n*.st_Input_Data.\n\nIs *.bo_Input_Only_Num = TRUE only numeric keys are accepted and \n\nadopted.", "type": "FUNCTION", "name": "TN_INPUT_EDIT_LINE", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "User interface screen structure used for managing the input line."}, {"name": "Xus_TN_INPUT_CONTROL", "type": "us_TN_INPUT_CONTROL", "description": "Control structure for handling input operations and statuses."}, {"name": "in_Type", "type": "INT", "description": "Set type of the input, should be set to 1."}, {"name": "in_Y", "type": "INT", "description": "Y-coordinate position for the input line."}, {"name": "in_X", "type": "INT", "description": "X-coordinate position for the input line."}, {"name": "by_Attr_mF", "type": "BYTE", "description": "Attribute for the foreground color of the input line."}, {"name": "by_Attr_oF", "type": "BYTE", "description": "Attribute for the background color of the input line."}, {"name": "in_Cursor_Pos", "type": "INT", "description": "Current position of the cursor in the input line."}, {"name": "bo_Input_Only_Num", "type": "BOOL", "description": "Flag indicating if only numeric input is allowed."}, {"name": "bo_Input_Hidden", "type": "BOOL", "description": "Flag indicating if the input should be hidden; input characters are shown as '*' when true."}, {"name": "st_Input_Mask", "type": "STRING", "description": "Mask defining the allowed input characters and their positions."}, {"name": "st_Input_Data", "type": "STRING", "description": "Data input buffer initialized from the input mask."}, {"name": "st_Input_ToolTip", "type": "STRING", "description": "Tooltip text displayed when hovering over the input line."}, {"name": "in_Input_Option", "type": "INT", "description": "Control option for the input line."}, {"name": "in_Title_Y_Ofset", "type": "INT", "description": "Y-offset for the title relative to its position."}, {"name": "in_Title_X_Ofset", "type": "INT", "description": "X-offset for the title relative to its position."}, {"name": "by_Title_Attr", "type": "BYTE", "description": "Attribute for the title's text color."}, {"name": "st_Title_String", "type": "STRING", "description": "Text string for the title associated with the input line."}], "output": [{"name": "st_Input_String", "type": "STRING", "description": "The text input received from the user."}, {"name": "bo_Input_Entered", "type": "BOOL", "description": "Flag indicating if the input has been submitted by the user."}], "in/out": [], "return_value": null}
{"title": "Menu Bar Management Module", "description": "TN_INPUT_MENU_BAR is used to manage and view the \n\nMenu_Bar. The element is shown in *.in_X and *.in_Y. The menu items are \n\nstored as elements within verschachelte *.st_MENU_TEXT. Two diferent \n\nseparators are used. A '$' separates the diferent menu lists, and each \n\nmenu list is further divided by '#' into individual menu items. The frst \n\nmenu list is the actual menu bar, this implies the number of sub-menus, \n\nand the titles of the elements. Then all the sub-menu lists are follow and \n\nare separated by '%'. To devide individual sub-menu items from each other \n\nor providing them with a cut line, an '-' has to submitted as text menu￾element.\n\nBy pressing the Escape key, the menu bar activated and the respective \n\nsub-menu is displayed using the module TN_INPUT_MENU_POPUP. Within \n\nthe sub-menu can be navigated with up / down key. Within the sub-menu \n\ncan be navigated with up / down cursor. If a sub-menu item is confrmed \n\nby pressing Enter / Return key, then in *.in_Menu_Selected the number of \n\nthe selected menu-point is passed. The calculation of the menu item \n\nnumber is as following: Main menu index * 10 + Submenu-index. The entry \n\nin *.in_Menu_Selected needs set again to 0 after acceptance by users.\n\nThus, a maximum of 9 main menu items and each 9-Submenu items are \n\nexecutable. Means of escape key at any time the menu can be hided \n\nagain.\n\n176 Version 1.21\n\nChapter 11. Telnet-Vision\n\nActive Menu automatically backs up the background before it is drawn, \n\nand restores the background after ending.\n\nAs long as a menu is display, the user program may not make graphical \n\nchanges. This can be checked by TN_SCREEN.bo_Menue_Bar_Dialog = \n\nTRUE.", "type": "FUNCTION", "name": "TN_INPUT_MENU_BAR", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen parameters for the menu bar."}, {"name": "Xus_TN_MENU", "type": "us_TN_MENU", "description": "Menu parameters that drive the menu bar functionality."}, {"name": "in_X", "type": "INT", "description": "The X position on the screen where the menu bar will be displayed."}, {"name": "in_Y", "type": "INT", "description": "The Y position on the screen where the menu bar will be displayed."}, {"name": "by_Attr_mF", "type": "BYTE", "description": "Attributes for the menu foreground color."}, {"name": "by_Attr_oF", "type": "BYTE", "description": "Attributes for the menu background color."}, {"name": "st_MENU_TEXT", "type": "STRING", "description": "The string containing the text for the menu and its sub-menus."}, {"name": "bo_Create", "type": "BOOL", "description": "Flag to indicate whether the menu bar should be created."}], "output": [{"name": "in_Menu_Selected", "type": "INT", "description": "The index of the selected menu item."}], "in/out": [], "return_value": {"type": "VOID", "description": "No return value, function operates through output parameters."}}
{"title": "TN_INPUT_MENU_POPUP Function Module", "description": "TN_INPUT_MENU_POPUP is used to manage and display the \n\nMenu_Bar Submenu and for the representation of \n\nTN_INPUT_SELECT_POPUP elements. The element is shown in *.in_X and \n\n*.in_Y. The menu items are stored as elements within *.st_Menu_Text. The \n\nindividual element are devided from each other using '#'. To devide \n\nindividual sub-menu items from each other or providing them with a cut \n\nline, an '-' has to submitted as text menu-element.\n\nWithin the sub-menu can be navigated with up / down key. If a sub-menu \n\nitem is confrmed by pressing Enter / Return key, then in \n\n*.in_Menu_Selected the number of the selected menu-point is passed.\n\nAn active Menu automatically backs up the background before it is drawn, \n\nand restores the background after ending.\n\nAs long as a menu is display, the user program may not make graphical \n\nchanges. This can be checked by TN_SCREEN.bo_Menue_Bar_Dialog = \n\nTRUE or TN_SCREEN.bo_Modal_Dialog = TRUE.\n\nThe module is primarily from TN_INPUT_MENU_BAR and \n\nTN_INPUT_SELECT_POPUP used internally, and need not be executed \n\ndirectly by the user.", "type": "FUNCTION", "name": "TN_INPUT_MENU_POPUP", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "The screen structure containing display properties and state management for the menu."}, {"name": "Xus_TN_MENU", "type": "us_TN_MENU", "description": "The menu structure containing the text and organization of menu items, divided by '#'. Each sub-menu item can be divided by '-' for visual separation."}], "output": [], "in/out": [{"name": "in_X", "type": "Integer", "description": "The X-coordinate for where the menu is displayed on the screen."}, {"name": "in_Y", "type": "Integer", "description": "The Y-coordinate for where the menu is displayed on the screen."}, {"name": "in_Menu_Selected", "type": "Integer", "description": "The number of the selected menu item after user confirmation."}], "return_value": null}
{"title": "TN_INPUT_SELECT_POPUP", "description": "TN_INPUT_SELECT_POPUP is used to manage a selection of \n\ntexts, by displaying a pop-up dialogue. This must be set *.IN_TYPE = 3.\n\nThe item will be provided as *.in_X and *.in_Y. Every entry line can be \n\nprovided with a title text. With *.in_Title_Y_Ofset and *.in_Title_X_Ofset \n\nthe position relative to the element coordinates is expressed. The color \n\ncan be determined with *.by_Title_Attr, and the text by *.st_Title_String. If \n\na tool tip should appear at the element *. st_Input_ToolTip the text hast to \n\nbe specifed.\n\nThe selection of texts will be handed over in *.st_Input_Data. The text \n\nelement should be separated from each other by the character '#'.\n\nIf the focus is on an element, using the Enter / Return key selection dialog \n\ncan be activated.\n\nWith the cursor up/down can be changed between the individual elements. \n\nIf the beginning or the end of the list will be reachted, it continues at the \n\nopposite side.\n\nThe text-element is connected by means *.st_Input_Mask, meaning that \n\nthe output text length are afected later.\n\nBy pressing the Enter / Return key is the text of the selected element is \n\npassed to *. st_Input_String and *. bo_Input_Entered = TRUE. The input \n\nfag must be reset after receive by the user.\n\nAn active selection (selection dialog) can always be canceled with the \n\nEscape key.", "type": "FUNCTION", "name": "TN_INPUT_SELECT_POPUP", "input": [{"name": "in_Type", "type": "INT", "description": "Type of the input selection dialog. Must be set to 3."}, {"name": "in_Y", "type": "INT", "description": "Vertical position of the input dialog."}, {"name": "in_X", "type": "INT", "description": "Horizontal position of the input dialog."}, {"name": "by_Attr_mF", "type": "STRING", "description": "Color attributes for the selected state, separated by '#'."}, {"name": "by_Attr_oF", "type": "STRING", "description": "Color attributes for the unselected state, separated by '#'."}, {"name": "st_Input_ToolTip", "type": "STRING", "description": "Tooltip text that appears when the element is focused."}, {"name": "in_Input_Option", "type": "INT", "description": "Option settings for the input."}, {"name": "in_Title_Y_Ofset", "type": "INT", "description": "Vertical offset for the title text position."}, {"name": "in_Title_X_Ofset", "type": "INT", "description": "Horizontal offset for the title text position."}, {"name": "by_Title_Attr", "type": "STRING", "description": "Color attributes for the title text."}, {"name": "st_Title_String", "type": "STRING", "description": "Title text displayed on the dialog."}, {"name": "st_Input_Mask", "type": "STRING", "description": "Mask that affects the output text length."}, {"name": "st_Input_Data", "type": "STRING", "description": "The text elements to be selected, separated by '#'."}], "output": [{"name": "st_Input_String", "type": "STRING", "description": "The string output of the selected element."}, {"name": "bo_Input_Entered", "type": "BOOL", "description": "Indicates whether an input has been selected (TRUE) or not (FALSE)."}], "in/out": [], "return_value": {"type": "VOID", "description": "This function does not return a value."}}
{"title": "Text Selection Management", "description": "TN_INPUT_SELECT_TEXT is used to manage a selection of \n\ntexts. This must be set *.IN_TYPE = 2.\n\n180 Version 1.21\n\nChapter 11. Telnet-Vision\n\nThe item will be provided as *.in_X and *.in_Y. Every entry line can be \n\nprovided with a title text. With *.in_Title_Y_Ofset and *.in_Title_X_Ofset \n\nthe position relative to the element coordinates is expressed. The color \n\ncan be determined with *.by_Title_Attr, and the text by *.st_Title_String. If \n\na tool tip should appear at the element *. st_Input_ToolTip the text hast to \n\nbe specifed.\n\nThe selection of texts will be handed over in *.st_Input_Data. The text \n\nelement should be separated from each other by the character '#'.\n\nIf the Element has the focus, by using the spacebar (space) can be \n\nchanged between the individual texts. The text-element is connected by \n\nmeans *.st_Input_Mask, meaning that the output text length are afected \n\nlater.\n\nBy pressing the Enter / Return key the input text is issued at \n\n*.st_Input_String and *.bo_Input_Entered ist set to TRUE. The input fag \n\nmust be reset after receive by the user.", "type": "FUNCTION", "name": "TN_INPUT_SELECT_TEXT", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen interface for the text selection."}, {"name": "Xus_TN_INPUT_CONTROL", "type": "us_TN_INPUT_CONTROL", "description": "Control structure for managing input options."}, {"name": "in_Type", "type": "INT", "description": "Type of the input selection; must be set to 2."}, {"name": "in_Y", "type": "INT", "description": "Y-coordinate positioning for the input selection."}, {"name": "in_X", "type": "INT", "description": "X-coordinate positioning for the input selection."}, {"name": "by_Attr_mF", "type": "INT", "description": "Attribute value for the foreground color."}, {"name": "by_Attr_oF", "type": "INT", "description": "Attribute value for the background color."}, {"name": "st_Input_ToolTip", "type": "STRING", "description": "Tooltip text for the input element."}, {"name": "in_Input_Option", "type": "INT", "description": "Option for input selection."}, {"name": "in_Title_Y_Ofset", "type": "INT", "description": "Y-offset for the title text relative to the input element."}, {"name": "in_Title_X_Ofset", "type": "INT", "description": "X-offset for the title text relative to the input element."}, {"name": "by_Title_Attr", "type": "INT", "description": "Attribute for the title text."}, {"name": "st_Title_String", "type": "STRING", "description": "Title text to display for this input."}, {"name": "st_Input_Mask", "type": "STRING", "description": "Mask for the input string."}, {"name": "st_Input_Data", "type": "STRING", "description": "Selection of texts separated by '#'."}], "output": [{"name": "st_Input_String", "type": "STRING", "description": "Output string of the current input selection."}, {"name": "bo_Input_Entered", "type": "BOOL", "description": "Boolean indicating if the input was entered (set to TRUE when Enter/Return is pressed)."}, {"name": "st_Input_Mask", "type": "STRING", "description": "The mask affecting the output text length."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Telnet Receive Function", "description": "TN_RECEIVE receives input data from the Telnet client, and \n\nevaluates the key codes.\n\nIf the key code in the range 32-126 it shall be stored as ASCII code under \n\nXus_TN_SCREEN, by_Input_ASCII_Code. In addition, \n\nXus_TN_SCREEN.bo_Input_ASCII_IsNum = TRUE if this corresponds to a \n\nnumber between 0 and 9.\n\nIf the key code is of the following extended code then this is fled under \n\nXus_TN_SCREEN,by_Input_Exten_Code.\n\nExten_code Button name\n\n65 Cursor up\n\n66 Cursor down\n\n67 Cursor RIGHT\n\n68 Cursor left\n\n72 Pos1\n\n75 End\n\n80 F1\n\n81 F2\n\n82 F3\n\n83 F4\n\n8 Backspace\n\n182 Version 1.21\n\nChapter 11. Telnet-Vision\n\n9 Tabulator\n\n13 Return (Enter)\n\n27 Escape", "type": "FUNCTION", "name": "TN_RECEIVE", "input": [{"name": "Xus_TN_SCREEN", "type": "us_TN_SCREEN", "description": "Structure to hold the result of the Telnet input processing.", "fields": [{"name": "by_Input_ASCII_Code", "type": "int", "description": "The ASCII code received from the Telnet client."}, {"name": "bo_Input_ASCII_IsNum", "type": "bool", "description": "Indicates if the received ASCII code corresponds to a numeric value (0-9)."}, {"name": "by_Input_Exten_Code", "type": "int", "description": "An extended code representing specific function keys."}]}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer that holds the data received from the Telnet client."}], "output": [], "in/out": [], "return_value": null}
{"title": "TN_SC_ADD_SHADOW Function Module", "description": "TN_SC_ADD_SHADOW allows you to add optical shadow to \n\nrectangular glyphs. By specifying a rectangular area by means of the \n\nparameters X1, Y1 and X2, Y2, a basic framework is defned, at which at \n\nthe right and bottom color darkened lines are drawn (shadow). The \n\nshadow coordinates X1, Y1 and X2, Y2 are always given +1 for proper \n\nprimitive. OPTION means you can choose between two shadow variations. \n\nIf OPITION = 0 then the shadow is reached by pure color adjustment \n\n(darkening of the character) . If an OPTION > 0, in the area of the shadow \n\nall the characters replaced by black flled characters.", "type": "FUNCTION", "name": "TN_SC_ADD_SHADOW", "input": [{"name": "Iin_Y1", "type": "INT", "description": "Y1 coordinate of the area"}, {"name": "Iin_X1", "type": "INT", "description": "X1 coordinate of the area"}, {"name": "Iin_Y2", "type": "INT", "description": "Y2 coordinate of the area"}, {"name": "Iin_X2", "type": "INT", "description": "X2 coordinate of the area"}, {"name": "Iin_OPTION", "type": "INT", "description": "Kind of the shadow"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "The output screen structure where shadows will be applied."}], "return_value": {"type": "VOID", "description": "This function does not return a value."}}
{"title": "Telnet-Vision Area Restore Function", "description": "TN_SC_AREA_RESTORE enables recovery of previously saved \n\nscreen area. The screen data in Xus_TN_SCREEN.bya_BACKUP [x] is \n\nrestored using the stored coordinates. This is done mainly done after the \n\ncall from the module MENU-BAR amd MENU-POPUP, to restore the modifed \n\nscreen.", "type": "FUNCTION", "name": "TN_SC_AREA_RESTORE", "input": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Input parameter representing the screen data containing the backup to be restored."}], "output": [], "in/out": [], "return_value": {"type": "void", "description": "No return value. The function performs restoration on the provided screen data."}}
{"title": "TN_SC_AREA_SAVE Function Module", "description": "TN_SC_AREA_SAVE allows you to save of rectangular areas of \n\nthe screen before it is modifed by other drawing operations. This is mainly \n\ndone before the call from the module BAR-MENU and MENU-POPUP , \n\nbecause these are the elements as an overlay graphic. Means X1, Y1 and \n\nX2, Y2 are given the coordinates of the secured area of the screen. The \n\ndata are saved in the data area Xus_TN_SCREEN.bya_BACKUP [x]. Here the \n\ncoordinates and the actual characters and color information is stored. The \n\nbufer can hold up half the area of the screen.\n\n185 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_SC_AREA_SAVE", "input": [{"name": "Iin_Y1", "type": "INT", "description": "Y1 coordinate of the area"}, {"name": "Iin_X1", "type": "INT", "description": "X1 coordinate of the area"}, {"name": "Iin_Y2", "type": "INT", "description": "Y2 coordinate of the area"}, {"name": "Iin_X2", "type": "INT", "description": "X2 coordinate of the area"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Data structure that contains information about the secured screen area including coordinates, characters, and colors."}], "output": [], "return_value": {"type": "VOID", "description": "No return value, the function operates by saving the specified screen area."}}
{"title": "TN_SC_BOX Function Module", "description": "TN_SC_BOX is used to draw a rectangular area, that is flled \n\nwith the specifed character in Iby_FILL. With parameter Iby_ATTR fll color \n\ncan be specifed. The fll area is drawn with a border that is given by \n\nIin_BORDER.\n\nBorder types:\n\n0 = no border\n\n1 = frame with a single line\n\n2 = frame double line\n\n3 = frame with spaces", "type": "FUNCTION", "name": "TN_SC_BOX", "input": [{"name": "Iin_Y1", "type": "INT", "description": "Y1 coordinate of the area"}, {"name": "Iin_X1", "type": "INT", "description": "X1 coordinate of the area"}, {"name": "Iin_Y2", "type": "INT", "description": "Y2 coordinate of the area"}, {"name": "Iin_X2", "type": "INT", "description": "X2 coordinate of the area"}, {"name": "Iby_FILL", "type": "BYTE", "description": "Fill character of the area"}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code to fill the area"}, {"name": "Iby_BORDER", "type": "BYTE", "description": "Type of frame"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure for displaying the drawn box"}], "return_value": null}
{"title": "TN_SC_FILL Function Module", "description": "TN_SC_FILL is used to draw a rectangular area, that is flled \n\nwith the specifed character in Iby_FILL.", "type": "FUNCTION", "name": "TN_SC_FILL", "input": [{"name": "Iin_Y1", "type": "INT", "description": "Y1 coordinate of the area"}, {"name": "Iin_X1", "type": "INT", "description": "X1 coordinate of the area"}, {"name": "Iin_Y2", "type": "INT", "description": "Y2 coordinate of the area"}, {"name": "Iin_X2", "type": "INT", "description": "X2 coordinate of the area"}, {"name": "Iby_CHAR", "type": "BYTE", "description": "Character to fill the area"}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code to fill the area"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "In/out parameter representing the screen object to be updated with the filling"}], "return_value": null}
{"title": "Draw Line Function", "description": "TN_SC_LINE is used to draw horizontal and vertical lines. By \n\nmeans of the X1/Y1 and X2/Y2 coordinates defnes the beginning and the \n\nend of the line. The line type is passed by Iin_BORDER and the color code \n\nwith Iby_ATTR. If when drawing a line and another line of this type cut, \n\nautomatically the appropriate crossing sign is used. \n\n188 Version 1.21\n\nChapter 11. Telnet-Vision\n\nBorder types:\n\n1 = line with single line\n\n2 = line with double line\n\n> 2 = line is drawn with the specifed character in Iin_BORDER", "type": "FUNCTION", "name": "TN_SC_LINE", "input": [{"name": "Iin_Y1", "type": "INT", "description": "Y1 coordinate of the line"}, {"name": "Iin_X1", "type": "INT", "description": "X1 coordinate of the line"}, {"name": "Iin_Y2", "type": "INT", "description": "Y2 coordinate of the line"}, {"name": "Iin_X2", "type": "INT", "description": "X2 coordinate of the line"}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code of the line"}, {"name": "Iby_BORDER", "type": "BYTE", "description": "Type of line"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Structure for screen representation that may be modified during the drawing process", "fields": []}], "return_value": {"type": "VOID", "description": "Indicates successful execution of line drawing operation"}}
{"title": "TN_SC_READ_ATTR", "description": "TN_SC_READ_ATTR is used to read the current color of the \n\ncharacter at the specifed location X / Y.", "type": "FUNCTION", "name": "TN_SC_READ_ATTR", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate"}, {"name": "Iin_X", "type": "INT", "description": "X coordinate"}], "output": [{"name": "Oby_ATTR", "type": "BYTE", "description": "Color information at position X / Y"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure with display attributes"}], "return_value": null}
{"title": "Read Character Function Module", "description": "TN_SC_READ_CHAR is used to read the current character at \n\nthe specifed location X / Y.\n\n190 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_SC_READ_CHAR", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate"}, {"name": "Iin_X", "type": "INT", "description": "X coordinate"}], "output": [{"name": "Oby_CHAR", "type": "BYTE", "description": "Character at position X / Y"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure containing terminal information"}], "return_value": {"type": "N/A", "description": "This function does not return a value."}}
{"title": "Convert Light Color to Dark Color", "description": "TN_SC_SHADOW_ATTR converts a light color to a dark color.", "type": "FUNCTION", "name": "TN_SC_SHADOW_ATTR", "input": [{"name": "Iby_ATTR", "type": "BYTE", "description": "Color Information representing the light color to be converted."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting dark color corresponding to the input light color."}}
{"title": "TN_SC_VIEWPORT", "description": "TN_SC_VIEWPORT is used to display messages from the data \n\nstructure LOG_CONTROL within a rectangular area on the screen. The \n\ndesired messages are processed before using with Block LOG_VIEWPORT, \n\nand if necessary, with Xus_LOG_VIEWPORT.UPDATE an update is triggered. \n\nMeans Iin_X and Iin_Y defnes the upper-left corner of the window, and with \n\nIin_Width the width if of the viewing window is defned. The number of \n\nrows to be displayed is determined by Xus_LOG_VIEWPORT.COUNT. The \n\ncolor information is stored in Xus_LOG_CONTROL.MSG_OPTION [x] per \n\nmessage. It is converted to the confgured color codes from Idw_ATTR_1 \n\nand Idw_ATTR2 automatically, so the colors in the presentation can always \n\nbe adjusted individually. The messages are always automatically reduced \n\nto the width of the window or cut of.", "type": "FUNCTION", "name": "TN_SC_VIEWPORT", "input": [{"name": "Iin_Y", "type": "INT", "description": "(Y coordinate)"}, {"name": "Iin_X", "type": "INT", "description": "(X coordinate)"}, {"name": "Iin_Width", "type": "INT", "description": "(width of the window - the number of characters)"}, {"name": "Idw_ATTR_1", "type": "DWORD", "description": "(color 1,2,3 and 4)"}, {"name": "Idw_ATTR_2", "type": "DWORD", "description": "(color 5,6,7 and 8)"}, {"name": "Iti_TIME", "type": "TIME", "description": "(update time)"}], "in/out": [{"name": "Xus_LOG_VIEWPORT", "type": "LOG_VIEWPORT", "description": "Viewport for displaying log messages"}, {"name": "Xus_LOG_CONTROL", "type": "LOG_CONTROL", "description": "Control structure for log messages"}, {"name": "Xus_TN_SCREEN", "type": "us_TN_SCREEN", "description": "Screen structure for telnet vision"}], "output": [], "return_value": null}
{"title": "TN_SC_WRITE Function Module", "description": "TN_SC_WRITE passes the text Ist_STRING at the coordinates \n\nIin_Y, Iin_Y and the color of Iby_ATTR.\n\nIs specifed color code = 0, then the string is displayed without change the \n\nexisting old color information at he respective character positions.\n\n192 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_SC_WRITE", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate"}, {"name": "Iin_X", "type": "INT", "description": "X coordinate"}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code - font color"}, {"name": "Ist_STRING", "type": "STRING", "description": "Text to be displayed"}, {"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure where the text will be written"}], "output": [], "in/out": [], "return_value": null}
{"title": "TN_SC_WRITE_ATTR Function Module", "description": "TN_SC_WRITE_ATTR changes at the given coordinates Iin_Y, \n\nIin_Y the colorcode to change without changing the existing character at \n\nthat position.", "type": "FUNCTION", "name": "TN_SC_WRITE_ATTR", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate where the color code will be changed."}, {"name": "Iin_X", "type": "INT", "description": "X coordinate where the color code will be changed."}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code to apply at the specified coordinates."}], "output": [], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen data structure that holds the current screen state."}], "return_value": {"type": "VOID", "description": "The function does not return any value."}}
{"title": "Telnet Vision Write Function", "description": "TN_SC_WRITE_C is at the given coordinates Iin_Y, Iin_Y \n\nIst_STRING the text with the color of Iby_ATTR. The text is adapted before \n\noutput on the length Iin_LENGTH, and by Iin_OPTION, the text position is \n\ndetermined.\n\nIin_OPTION\n\n0 = right fll with spaces eg 'TEST '\n\n1 = left fll with blanks eg ' TEST '\n\n2 = center and fll with blanks eg ' TEST '", "type": "FUNCTION", "name": "TN_SC_WRITE_C", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate for text position"}, {"name": "Iin_X", "type": "INT", "description": "X coordinate for text position"}, {"name": "Iby_ATTR", "type": "BYTE", "description": "Color code for the text"}, {"name": "Ist_STRING", "type": "STRING", "description": "Text string to be displayed"}, {"name": "Iin_LENGTH", "type": "INT", "description": "Length to which the text will be adjusted"}, {"name": "Iin_OPTION", "type": "INT", "description": "Option for text positioning: 0 for right, 1 for left, 2 for center"}], "output": [], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen object that may be modified by the function"}], "return_value": null}
{"title": "TN_SC_WRITE_CHAR Function Module", "description": "TN_SC_WRITE_CHAR passes the character Iby_CHAR at the \n\ngiven coordinates Iin_Y, Iin_X, and does not change the color information \n\nat the specifed position.\n\n194 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_SC_WRITE_CHAR", "input": [{"name": "Iin_Y", "type": "INT", "description": "Y coordinate where the character will be written"}, {"name": "Iin_X", "type": "INT", "description": "X coordinate where the character will be written"}], "output": [{"name": "Iby_CHAR", "type": "BYTE", "description": "The character that is passed to the specified coordinates"}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure that contains the display information"}], "return_value": null}
{"title": "TN_SC_WRITE_EOS Function Module", "description": "TN_SC_WRITE_EOS passes at the end position of the last, with \n\nTN_SC_WRITE or TN_SC_WRITE_EOS issued text, the text Ist_STRING with \n\nthe color of Iby_ATTR.\n\nThis allows to continuous passes texts without the need to always pass the \n\nnew coordinates.", "type": "FUNCTION", "name": "TN_SC_WRITE_EOS", "input": [{"name": "Iby_ATTR", "type": "BYTE", "description": "Color code representing the font color."}, {"name": "Ist_STRING", "type": "STRING", "description": "The text to be written to the screen."}], "in/out": [{"name": "Xus_TN_SCREEN", "type": "Us_TN_SCREEN", "description": "Screen structure that holds the current state of the display."}], "return_value": null}
{"title": "Coordinate Checking Function", "description": "TN_SC_XY2_ERROR checks whether the specifed coordinates \n\nare within the screen area. The area may not cross of the screen. If the \n\ncheck fails, as result is passes TRUE.\n\n196 Version 1.21\n\nChapter 12. Network Variables\n\n 12. Network Variables", "type": "FUNCTION", "name": "TN_SC_XY2_ERROR", "input": [{"name": "X1", "type": "INT", "description": "X1 coordinate of the area"}, {"name": "Y1", "type": "INT", "description": "Y1 coordinate of the area"}, {"name": "X2", "type": "INT", "description": "X2 coordinate of the area"}, {"name": "Y2", "type": "INT", "description": "Y2 coordinate of the area"}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the specified coordinates are out of the screen area, otherwise FALSE."}}
{"title": "Coordinate Screen Area Check", "description": "TN_SC_XY_ERROR checks whether the specifed coordinate is \n\nwithin the screen area. If the check fails, as result is passes TRUE.", "type": "FUNCTION", "name": "TN_SC_XY_ERROR", "input": [{"name": "X", "type": "INT", "description": "X coordinate"}, {"name": "Y", "type": "INT", "description": "Y coordinate"}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the specified coordinate is outside the screen area, otherwise FALSE."}}
{"title": "TN_SEND_ROWS", "description": "TN_SEND_ROWS is used to automatically update the graphical \n\nchanges to the Telnet screen, by send the modifed lines to the Telnet \n\nclient.\n\nIf you change the Telnet screen a color or a character in a line, this line is \n\nalways automatically selected for update. The module checks if marked at \n\nXus_TN_SCREEN.bya_Line_Update [0..23] one or more lines, and generates \n\nan ANSI-code byte-stream which is sent to the Telnet client. Furthermore, \n\nwhen Xus_TN_SCREEN.bo_Clear_Screen = TRUE a clear screen is triggered. \n\nUpon detection of a new Telnet client connection automatically all the rows \n\nare marked for update, so that the whole screen content is rendered. If the \n\nrequired amount of data greater than S_BUF.BUFFER the data is \n\nautomatically output in blocks.\n\n \n\n183 Version 1.21\n\nChapter 11. Telnet-Vision", "type": "FUNCTION", "name": "TN_SEND_ROWS", "input": [{"name": "S_BUF_SIZE", "type": "UINT", "description": "Number of bytes in the S_BUF.BUFFER"}, {"name": "IP_C", "type": "IP_CONTROL", "description": "Connection data for the Telnet client"}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Transmit data to the Telnet client"}, {"name": "Xus_TN_SCREEN", "type": "us_TN_SCREEN", "description": "Structure containing information on the Telnet screen update"}], "output": [], "in/out": [], "return_value": {"type": "VOID", "description": "No return value for this function"}}
{"title": "UNI_CIRCULAR_BUFFER Function Module", "description": "UNI_CIRCULAR_BUFFER_DATA (data storage)\n\n69 Version 1.21\n\nChapter 7. Data Logger\n\nThe module UNI_CIRCULAR_BUFFER is a ring buffer in the FIFO (first in - first out) \n\nprinciple, and can process any data as a byte stream.\n\nFor this purpose, in the data structure UNI_CIRCULAR_BUFFER_DATA all can be \n\nprocessed. \n\nThe following commands are supported on DATA.D_MODE.\n\n01 Element to write to bufer\n\n10 Element of Bufer read but not to remove\n\n11 The above command 10 read with item is removed.\n\n12 read element from bufer and remove\n\n99 Bufer is reset. All data is deleted\n\nWith DATA.D_HEAD (WORD) in the right byte can be provided the element \n\ntype, and in the left byte optional an additional user ID.\n\nD_HEAD = LEFT-BYTE (ADD-Ino), RIGHT-BYTE (Type ID)\n\nType codes:\n\n1 = STRING (For DATA.D_STRING, the string must be provided)\n\n2 = REAL (For DATA.D_REAL, the REAL value is passed)\n\n3 = DWORD ( In the DWORD the DATA.D_DWORD must be passed) \n\nX = header information without data\n\nIn DATA.BUF_SIZE the number of bytes output, to show the dropped items in total. \n\nWith DATA.BUF_COUNT the number of in Buffer contained elements is provided. \n\nAnd on BUF_USED will issue the occupancy of the buffer as a percentage value.\n\nWhen an item is written in the buffer, and the required free space (memory) does not \n\nexist, after calling the module, the DATA.D_MODE remains unchanged. The \n\ncommand was successfu only if D_MODE contains 0 after module call.\n\nWhen reading elements, the same operation is essential.\n\n70 Version 1.21\n\nChapter 7. Data Logger\n\nOnly if D_MODE subsequently is 0, in D_HEAD the data type can be found, and if \n\nnecessary, the data from D_STRING, D_REAL, D_DWORD can be read. After \n\nsuccessful reading step, the deletion of the element to be performed with command \n\n11.", "type": "FUNCTION", "name": "UNI_CIRCULAR_BUFFER", "input": [{"name": "DATA", "type": "UNI_CIRCULAR_BUFFER_DATA", "description": "The data storage structure that holds the current status of the buffer operations.", "fields": [{"name": "D_MODE", "type": "WORD", "description": "Determines the action to be performed on the buffer (write, read, delete, reset)."}, {"name": "D_HEAD", "type": "WORD", "description": "Contains element type and an optional user ID."}, {"name": "D_STRING", "type": "STRING", "description": "The string data to write to the buffer; only used if the type is STRING."}, {"name": "D_REAL", "type": "REAL", "description": "The real value to write to the buffer; only used if the type is REAL."}, {"name": "D_DWORD", "type": "DWORD", "description": "The DWORD data to write to the buffer; only used if the type is DWORD."}, {"name": "BUF_SIZE", "type": "DWORD", "description": "The total size of the buffer in bytes."}, {"name": "BUF_COUNT", "type": "DWORD", "description": "The number of elements currently stored in the buffer."}, {"name": "BUF_USED", "type": "REAL", "description": "The occupancy of the buffer expressed as a percentage."}]}], "output": [{"name": "DATA", "type": "UNI_CIRCULAR_BUFFER_DATA", "description": "The updated data storage structure after performing the buffer operation.", "fields": [{"name": "D_MODE", "type": "WORD", "description": "Indicates if the last operation was successful (0 if successful)."}, {"name": "D_HEAD", "type": "WORD", "description": "Contains the data type of the element read from the buffer, if applicable."}, {"name": "D_STRING", "type": "STRING", "description": "The string data read from the buffer, if the type was STRING."}, {"name": "D_REAL", "type": "REAL", "description": "The real value read from the buffer, if the type was REAL."}, {"name": "D_DWORD", "type": "DWORD", "description": "The DWORD data read from the buffer, if the type was DWORD."}, {"name": "BUF_SIZE", "type": "DWORD", "description": "The total size of the buffer in bytes."}, {"name": "BUF_COUNT", "type": "DWORD", "description": "The number of elements currently stored in the buffer after the operation."}, {"name": "BUF_USED", "type": "REAL", "description": "The updated occupancy of the buffer as a percentage after the operation."}]}], "in/out": [], "return_value": {"type": "STRUCT", "description": "Contains the status of the operation performed on the buffer.", "fields": [{"name": "status", "type": "BOOL", "description": "Indicates the success of the buffer operation."}]}}
{"title": "URL Decode Function", "description": "URL_DECODE converts the in %HH encoded special characters in the\n\nstring IN in the appropriate ASCII code. In a URL encoding only the charac￾ters [A.. Z, a.. Z found, 0 .9, -._~] can occur. Other characters with a %\n\ncharacter, followed by 2 characters long Hexadecimal of the character are\n\nshown. The reserved character '#' is encoded as a '%23'.", "type": "FUNCTION", "name": "URL_DECODE", "input": [{"name": "String", "type": "STRING", "description": "The URL-encoded string to be decoded."}], "output": [{"name": "string_length", "type": "STRING", "description": "The decoded string after processing the input URL-encoded string."}], "in/out": [], "return_value": {"type": "STRING", "description": "The result of the URL decoding process, containing the ASCII representation of the input string.", "fields": []}}
{"title": "URL Encode Function", "description": "URL_ENCODE converts reserved characters in the string IN in the string\n\n'%HH'. In a URL encoding only the characters [A.. Z, a.. Z found, 0 .9, -._~]\n\ncan occur. Other characters with a % sign followed by the two-character\n\nhexadecimal code of the character are shown. The reserved character '#'\n\nis encoded as a '%23'.", "type": "FUNCTION", "name": "URL_ENCODE", "input": [{"name": "STRING", "type": "STRING", "description": "The input string that contains reserved characters to be encoded."}], "output": [{"name": "STRING_LENGTH", "type": "STRING", "description": "The URL-encoded output string with reserved characters converted."}], "in/out": [], "return_value": {"type": "STRING", "description": "The URL-encoded string representing the input with reserved characters encoded.", "fields": []}}
{"title": "URL to String Converter", "description": "URL_TO_STRING generates from stored data in IN with type URL a Unifed\n\nResource Locator as String . \n\nA URL is as follows:\n\nprotokoll://user:passwort @ domain :port/path?query#anchor", "type": "FUNCTION", "name": "URL_TO_STRING", "input": [{"name": "IN", "type": "STRING", "description": "Unified Resource Locator to be converted into a string."}], "output": [{"name": "URL", "type": "URL", "description": "Converted Unified Resource Locator as a string."}], "in/out": [], "return_value": {"type": "STRING", "description": "The converted Unified Resource Locator as a string."}}
{"title": "Weather Data Retrieval", "description": "WORLD_WEATHER_DATA (Weather data)\n\nINPUT ACTIVATE: BOOL (positive edge starts the query)\n\nLATITUDE: REAL (latitude of the reference location)\n\n LONGITUDE : REAL (longitude of the reference location) \n\n211 Version 1.21\n\nChapter 13. Weather Data\n\nKEY: STRING (30) (API-Key)\n\nOUTPUT BUSY: BOOL (Query is active)\n\nDONE: BOOL (Query completed without errors)\n\nERROR_C: DWORD (Error code)\n\nERROR_T: BYTE (error type)\n\nThe module loads the current weather data for the specifed location of \n\nhttp://worldweather.com down, analyzes the data and stores the essential \n\ndata processed in the WORLD_WEATHER_DATA data structure.\n\nFollowing values are stored from the current day.\n\nObservation time (UTC) Temperature (°C), Unique Weather code \n\nWeather description text, wind speed in miles per hour, wind speed in kilometer per \n\nhour, wind direction in degree, 16-point wind direction compass, precipitation amount \n\nin millimeter, Humidity (%), Visibility (km) Atmospheric pressure in milibars \n\n, Cloud cover (%)\n\nFrom the current day and the next four days the following values \n\nare stored.\n\nDate For which the weather is forecasted, \n\nDay and night temperature in °C (Celsius) and °F (Fahrenheit) \n\nWind speed in mph (miles per hour) and kmph (kilometers per hour) \n\n16-point compass wind direction, A unique weather condition code; \n\nWeather description text , Precipitation Amount (millimetre)\n\nWith a positive edge of ACTIVATE, the query started and process a DNS \n\nquery with the following HTTP-GET. After successful receiving all data \n\nelements are processed and if necessary stored in the data structure in \n\nconverted form. By the parameters of latitude and longitude the exact \n\nplace (geographical position) of the weather is indicated. While the query \n\nis active, BUSY = TRUE is passed. After successful completion of the query \n\n212 Version 1.21\n\nChapter 13. Weather Data\n\nDONE = TRUE is shown. If an error occurs during the query it is reported in \n\nERROR_C in combination with ERROR_T.\n\nERROR_T:\n\nValue Properties\n\n1 The exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 The exact meaning of ERROR_C can be read at module HTTP_GET\n\nCreating a new API KEY:\n\nUse your Internet browser and call the page http://www.worldweatheronline.-\n\ncom, call the \"Free sign up\" registration dialog, and fill out the required fields. After\n\nregistering, an email is sent, in turn, has to be confirmed, and subsequently secon ad\n\ne-mail is sent with the personal API key. This API Key must be passed to the module￾KEY API parameters.\n\nDetermine Latitude and longitude of a specific place:\n\nUse your Internet browser to access http://www.mygeoposition.com/ page, \n\nand enter the name of the desired location and search the location using \n\n\"calculate the spatial data\" . Then the desired location is shown on the \n\nmap, including the latitude and longitude needed in decimal notation. The \n\ndetermined position has to be passed to the block parameters, latitude \n\nand longitude. \n\n213 Version 1.21\n\nChapter 13. Weather Data", "type": "FUNCTION", "name": "WORLD_WEATHER", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the function module."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Network buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Network buffer for receiving data."}, {"name": "WW", "type": "WORLD_WEATHER_DATA", "description": "Data structure to store the processed weather data."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Trigger to start the query on a positive edge."}, {"name": "LATITUDE", "type": "REAL", "description": "Latitude of the reference location."}, {"name": "LONGITUDE", "type": "REAL", "description": "Longitude of the reference location."}, {"name": "KEY", "type": "STRING(30)", "description": "API-Key for accessing the weather data."}], "output": [{"name": "BUSY", "type": "BOOL", "description": "Indicates if the query is currently active."}, {"name": "DONE", "type": "BOOL", "description": "Indicates if the query completed successfully without errors."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code indicating the type of error encountered."}, {"name": "ERROR_T", "type": "BYTE", "description": "Type of error encountered during the query."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "World Weather Data Description Replacement", "description": "WORLD_WEATHER_DESC_DE The module replaces the original English texts by German weather \n\ndescriptions. Following a positive edge at ACTIVATE the elements (texts) in \n\nthe WORLD_WEATHER_DATA data structure is replaced. After querying the \n\n214 Version 1.21\n\nChapter 13. Weather Data\n\nweather data using WORLD_WEATHER this module should be called \n\nsubsequently. It is simply the parameter DONE from the module \n\nWORLD_WEATHER that is interconnected with ACTIVATE.\n\nThe following elements will be adapted:\n\nWW.WORLD_WEATHER_CUR.WEATHER_DESC\n\nWW.WORLD_WEATHER_DAY[0..4].WEATHER_DESC", "type": "FUNCTION", "name": "WORLD_WEATHER_DESC_DE", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "A boolean input that initiates the weather description replacement upon a positive edge."}], "in/out": [{"name": "WW", "type": "WORLD_WEATHER_DATA", "description": "The weather data structure that contains elements to be replaced."}], "output": [], "return_value": {"type": "void", "description": "This function does not return a value."}}
{"title": "World Weather Icon Replacement Module", "description": "WORLD_WEATHER_ICON_OSCAT The module replaces the original vendor-specifc numbers on the weather \n\nicons by OSCAT standard icon numbers. Following a positive edge at \n\nACTIVATE the elements (icon numbers) in the WORLD_WEATHER_DATA \n\ndata structure is replaced. After querying the weather data using \n\nWORLD_WEATHER this module should be called subsequently. It is simply \n\nthe parameter DONE from the module WORLD_WEATHER that is \n\ninterconnected with ACTIVATE.\n\nThe following elements will be adapted:\n\nWW.WORLD_WEATHER_CUR.WEATHER_ICON\n\nWW.WORLD_WEATHER_DAY[0..4].WEATHER_ICON\n\n215 Version 1.21", "type": "FUNCTION", "name": "WORLD_WEATHER_ICON_OSCAT", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "A positive edge on this input starts the query to replace weather icon numbers."}], "output": [], "in/out": [{"name": "WW", "type": "WORLD_WEATHER_DATA", "description": "Weather data structure containing weather icons to be replaced.", "fields": [{"name": "WORLD_WEATHER_CUR", "type": "CURRENT_WEATHER", "description": "Current weather data including an icon number.", "fields": [{"name": "WEATHER_ICON", "type": "INT", "description": "Icon number representing the current weather condition."}]}, {"name": "WORLD_WEATHER_DAY", "type": "ARRAY[5] OF DAILY_WEATHER", "description": "Array containing forecasted weather data including icon numbers for the next 5 days.", "fields": [{"name": "WEATHER_ICON", "type": "INT", "description": "Icon number representing the weather condition for the day."}]}]}], "return_value": null}
{"title": "XML_READER Function Module", "description": "XML_READER means it is possible to parse so-called 'well-formed' XML do￾cuments. Here, not as usual at high-level languages, the whole XML data\n\nis read as a data structure and stored in memory, but a very resource-fri￾endly version is used. The XML_READER reads XML data as a sequential\n\ndata stream from the bufer and signals the in COMMAND defned element\n\ntypes automatically back.\n\nWith XML is a strict distinction between upper and lower case. An XML do￾cument consists of just elements, attributes, their assignments, and the\n\ncontents of the elements that can be text or child elements, which in turn\n\ncan have attributes with assigned values and content. There are elements\n\nwith and without attributes, elements can consist of many other elements,\n\nand those that may occur within the text only, and even empty elements\n\nthat may have no content. The structure that emerges from these ele￾ments and their principles, can be understood as a tree structure. Ele￾ments always consist of tags and end tags. Attributes are additional infor￾mation about items. There are also comment elements allowed, however,\n\nthese may not between the start and end tags are of elements in\n\nXML_READER. The possible DTD - Document Type Defnition only be repor￾ted as DTD, but not further evaluated and applied by XML_READER. With a\n\nCDATA section a parser is told that no markup follows, but normal text\n\nwhich is reported by start-end block.\n\nBefore the frst call of the XML_READER a few parameters in the CTRL data\n\nstructure needs to be initialized. CTRL.START_POS and CTRL.STOP_POS\n\ndefnes the beginning and the end of the XML data in the bufer. CTRL.-\n\nCOMMAND with one hand, can be an initialization (Bit15 = TRUE) and\n\nwith bit 0-14 can be defned which element / data types are reported. Here\n\nthe type codes in the following table corresponds just the bit number,\n\nwhich has to be set to True in CTRL.COMMAND.\n\nIt is tried to pass the text of element, attribute, Value and Path in total\n\nlength to the accompanying STRINGS. In STRINGS greater than 255 cha￾racters this will be cut of fush left, but with block-start and block-end pa￾rameters is reported back, so that they can subsequently be evaluated yet\n\ncomplete. The BLOCK-START/STOP index are is always passed parallel to\n\nthe STRINGS. If the PATH STRING is greater than 255 characters so the\n\nPATH tracking is disabled and only \"OVERFLOW\" is entered as text.\n\nSince for very large and complex XML data is not clear, how long it takes\n\nuntil the module fnd data to report back, an WATCHDOG function is inte￾grated. A maximum processing time can be parameterized. When rea￾ching the time limit the module call is automatically canceled, and the\n\nnext cycle resumes at the same point. The type code 98 is returned.\n\nThe following type codes are defned.\n\nType\n\n(Code)\n\nData Type Description\n\n141 Version 1.21\n\nChapter 9. Network and Communication\n\n00 Unknown Undefned item found\n\n01 TAG (element) Start - of Element\n\nData pointer for the element of BLOCK1\n\n02 END-TAG (Element) End - of the element\n\n03 TEXT Content of an element\n\nData pointer for value on BLOCK1\n\n04 ATTRIBUTE Attributes of an element\n\nData pointer for attributes of BLOCK1\n\nData pointer for value on BLOCK2\n\n05 TAG ( Processing Instruction ) Instructions for processing\n\nData pointer for the element of BLOCK1\n\n12 CDATA not analyzed content TEXT\n\nData pointer for value on BLOCK1\n\n13 COMMENT COMMENT\n\nData pointer for value on BLOCK1\n\n14 DTD Document Type Declaration\n\nData pointer for value on BLOCK1\n\n98 WATCHDOG Maximum processing time reached - cancel\n\n99 END No more items available\n\nSample XML\n\nfat display\n\n<?xml version=\"1.0\" ?><rss version=\"2.0\"><channel><!-- XML-Demo\n\n--><![CDATA[<b>CurrentConditions:</b><br\n\n/>]]><title>XML_Reader</title>\n\n<link>http://oscat.de</link></channel></rss>\n\nRepresentation of the levels (without processing Instruction )\n\n142 Version 1.21\n\nChapter 9. Network and Communication\n\nView as tree of item types\n\nLegend:\n\nApplication example:\n\n CASE STATE OF\n\n00:\n\n STATE := 10;\n\n CTRL.START_POS := HTTP_GET.BODY_START; (Index des ersten Zeichen *)\n\n CTRL.STOP_POS := HTTP_GET.BODY_STOP; (Index of last character *)\n\n CTRL.COMMAND := WORD#2#11111111_11111111; (* Init + report all elements *)\n\n10:\n\n (* XML * data read serial)\n\n XML_READER.CTRL := CTRL;\n\n XML_READER.BUF := BUFFER;\n\n XML_READER();\n\n CTRL := XML_READER.CTRL;\n\n BUFFER := XML_READER.BUF;\n\n IF CTRL.TYP = 99 THEN \n\n STATE := 20; (* Exit – no further elements available *)\n\n ELSIF CTRL.TYP < 98 THEN (* do nothing at timeout(Code 98) *)\n\n (* Evaluation of the XML elements by pressing CTRL-data structure *)\n\n END_IF; \n\n20: \n\n143 Version 1.21\n\nChapter 9. Network and Communication\n\n (* sonstiges...... *)\n\nEND_CASE; \n\nThe following information is passed via the CTRL-data structure\n\n--------First pass -------- \n\nCOUNT: 1 \n\nTYPE: 5 (OPEN ELEMENT - PROCESSING \n\nINSTRUCTION)\n\nLEVEL: 1\n\nELEMENT: 'xml'\n\nPATH: '/xml'\n\n--------Next cycle-------- \n\nCOUNT: 2 \n\nTYPE: 4 (ATTRIBUTE) \n\nLEVEL: 1\n\nELEMENT: 'xml'\n\nATTRIBUTE: 'version'\n\nVALUE: '1.0'\n\nPATH: '/xml'\n\n--------Next cycle-------- \n\nCOUNT: 3 \n\nTYPE: 2 (CLOSE ELEMENT)\n\nLEVEL: 0\n\nELEMENT: 'xml'\n\nPATH: ''\n\n--------Next cycle-------- \n\nCOUNT: 4 \n\nTYPE: 1 (OPEN ELEMENT - Standard)\n\nLEVEL: 1\n\nELEMENT: 'rss'\n\nPATH: '/rss'\n\n--------Next cycle-------- \n\nCOUNT: 5 \n\nTYPE: 4 (ATTRIBUTE) \n\nLEVEL: 1\n\nELEMENT: 'rss'\n\nATTRIBUTE: 'version'\n\nVALUE: '2.0'\n\nPATH: '/rss'\n\n--------Next cycle-------- \n\nCOUNT: 6 \n\nTYPE: 1 (OPEN ELEMENT - Standard)\n\nLEVEL: 2\n\nELEMENT: 'channel'\n\nPATH: '/rss/channel'\n\n--------Next cycle-------- \n\nCOUNT: 7 \n\n144 Version 1.21\n\nChapter 9. Network and Communication\n\nTYPE: 13 (COMMENT-ELEMENT)\n\nLEVEL: 2\n\nVALUE: ' XML-Demo '\n\nPATH: '/rss/channel'\n\n--------Next cycle-------- \n\nCOUNT: 8 \n\nTYPE: 12 (CDATA)\n\nLEVEL: 2\n\nVALUE: '<b>Current Conditions:</b><br />'\n\nPATH: '/rss/channel'\n\n--------Next cycle-------- \n\nCOUNT: 9 \n\nTYPE: 1 (OPEN ELEMENT - Standard)\n\nLEVEL: 3\n\nELEMENT: 'title'\n\nPATH: '/rss/channel/title'\n\n--------Next cycle-------- \n\nCOUNT: 10\n\nTYPE: 3 (TEXT)\n\nLEVEL: 3\n\nELEMENT: 'title'\n\nVALUE: ' XML_Reader'\n\nPATH: '/rss/channel/title'\n\n--------Next cycle-------- \n\nCOUNT: 11 \n\nTYPE: 2 (CLOSE ELEMENT)\n\nLEVEL: 2\n\nELEMENT: 'title'\n\nPATH: '/rss/channel'\n\n--------Next cycle-------- \n\nCOUNT: 12 \n\nTYPE: 1 (OPEN ELEMENT - Standard)\n\nLEVEL: 3\n\nELEMENT: 'link'\n\nPATH: '/rss/channel/link'\n\n--------Next cycle-------- \n\nCOUNT: 13\n\nTYPE: 3 (TEXT)\n\nLEVEL: 3\n\nELEMENT: 'link'\n\nVALUE: 'http://oscat.de'\n\nPATH: '/rss/channel/link'\n\n--------Next cycle-------- \n\nCOUNT: 14 \n\nTYPE: 2 (CLOSE ELEMENT)\n\nLEVEL: 2\n\nELEMENT: 'link'\n\nPATH: '/rss/channel'\n\n145 Version 1.21\n\nChapter 9. Network and Communication\n\n--------Next cycle-------- \n\nCOUNT: 15 \n\nTYPE: 2 (CLOSE ELEMENT)\n\nLEVEL: 1\n\nELEMENT: 'channel'\n\nPATH: '/rss'\n\n--------Next cycle-------- \n\nCOUNT: 16 \n\nTYPE: 2 (CLOSE ELEMENT)\n\nLEVEL: 0\n\nELEMENT: 'rss'\n\nPATH: ''\n\n--------Next cycle-------- \n\nCOUNT: 17 \n\nTYPE: 99 (EXIT – END OF DATA)\n\n146 Version 1.21\n\nChapter 10. File-System\n\n 10. File-System", "type": "FUNCTION", "name": "XML_READER", "input": [{"name": "CTRL", "type": "XML_CONTROL", "description": "Control and status data required for XML reading operation. Must be initialized before the first call.", "fields": [{"name": "START_POS", "type": "INT", "description": "Position of the first character of the XML data in the buffer."}, {"name": "STOP_POS", "type": "INT", "description": "Position of the last character of the XML data in the buffer."}, {"name": "COMMAND", "type": "WORD", "description": "Command flags for initialization and reporting element data types."}, {"name": "TYP", "type": "BYTE", "description": "Type code indicating the status or data type read from the XML."}]}, {"name": "BUF", "type": "NETWORK_BUFFER", "description": "Buffer containing the XML data to be parsed."}], "output": [{"name": "CTRL", "type": "XML_CONTROL", "description": "Updated control and status data after processing the XML data.", "fields": [{"name": "COUNT", "type": "INT", "description": "Counter for the number of elements processed."}, {"name": "TYPE", "type": "BYTE", "description": "Type code for the current XML element being processed."}, {"name": "LEVEL", "type": "INT", "description": "Depth level of the current element in the XML tree structure."}, {"name": "ELEMENT", "type": "STRING", "description": "Name of the current XML element being processed."}, {"name": "PATH", "type": "STRING", "description": "Path to the current XML element within the structure."}]}, {"name": "BUF", "type": "NETWORK_BUFFER", "description": "Updated buffer after processing XML data, which may include additional parsed data."}], "in/out": [], "return_value": {"type": "VOID", "description": "The function does not return a value; it updates the CTRL and BUF structures."}}
{"title": "Yahoo Weather Data Retrieval", "description": "YAHOO_WEATHER (weather data)\n\nINPUT ACTIVATE: BOOL (positive edge starts the query)\n\nUNITS: BOOL (FALSE = Celsius, TRUE = Fahrenheit)\n\nLOCATION: STRING (20) (location specifed by LOCATION-ID)\n\nOUTPUT BUSY: BOOL (Query is active)\n\nDONE: BOOL (Query completed without errors)\n\nERROR_C: DWORD (Error code)\n\nERROR_T: BYTE (error type)\n\nThe module loads the current weather data for the specifed location using \n\nan RSS feed (XML data structure) of http://weather.yahooapis.com down, \n\nanalyzes the XML data and provides the essential data processed from the \n\nYAHOO_WEATHER data structure. With a positive edge of ACTIVATE, the \n\nquery started and process a DNS query with the following HTTP-GET. After \n\nsuccessful receipt of data by XML_READER all elements are processed and \n\nif necessary stored in the data structure in converted form. With UNITS \n\nmay still be selected between Fahrenheit and Celsius as a unit. By \n\nspecifying the precise LOCATION_ID the location of the weather is \n\nindicated. While the query is active, BUSY = TRUE is passed. After \n\nsuccessful completion of the query DONE = TRUE is shown. If occur in the \n\nquery, then this error is reported under ERROR_C in combination with \n\nERROR_T.\n\nERROR_T:\n\n207 Version 1.21\n\nChapter 13. Weather Data\n\nValue Properties\n\n1 The exact meaning of ERROR_C can be read at module DNS_CLIENT\n\n2 The exact meaning of ERROR_C can be read at module HTTP_GET\n\nFind the Location ID of a specifc place:\n\nUse your Internet browser the page http://weather.yahoo.com/ and in the \n\nfeld: \"Enter city or zip code\" and enter the name of the desired location \n\nand search. \n\nAfter being selected in the browser window displays the current weather \n\ninformation of the specifed location. In the URL (web link) line is now the \n\nlocation ID can be seen.\n\nThus, the desired settlement \"Wien (Vienna)\" returns the Location ID \n\n\"551801\". \n\nThis code must be passed on the module as parameters.", "type": "FUNCTION", "name": "YAHOO_WEATHER", "input": [{"name": "IP_C", "type": "IP_C", "description": "Parameterization for the connection."}, {"name": "S_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for transmitting data."}, {"name": "R_BUF", "type": "NETWORK_BUFFER", "description": "Buffer for receiving data."}, {"name": "YW", "type": "YAHOO_WEATHER", "description": "Data structure for holding the weather data."}, {"name": "ACTIVATE", "type": "BOOL", "description": "Positive edge that starts the query."}, {"name": "UNITS", "type": "BOOL", "description": "Unit selection for temperature (FALSE for Celsius, TRUE for Fahrenheit)."}, {"name": "LOCATION", "type": "STRING(20)", "description": "Location specified by LOCATION-ID."}], "output": [{"name": "BUSY", "type": "BOOL", "description": "Indicates if the query is active."}, {"name": "DONE", "type": "BOOL", "description": "Indicates if the query has completed without errors."}, {"name": "ERROR_C", "type": "DWORD", "description": "Error code associated with any query issues."}, {"name": "ERROR_T", "type": "BYTE", "description": "Error type associated with the operation."}], "in/out": [], "return_value": {"type": "VOID", "description": "No return value expected from the function."}}
{"title": "Yahoo Weather Data Translation", "description": "YAHOO_WEATHER_DESC_DE The module replaces the original English texts by German weather \n\ndescriptions. Following a positive edge at ACTIVATE the elements (texts) in \n\nthe YAHOO_WEATHER_DATA data structure is replaced. After querying the \n\nweather data using YAHOO_WEATHER this module should be called \n\nsubsequently. It is simply the parameter DONE from the module \n\nYAHOO_WEATHER that is interconnected with ACTIVATE.\n\nThe following elements will be adapted:\n\nYW.CUR_CONDITIONS_TEXT\n\nYW.FORCAST_TODAY_TEXT\n\nYW.FORCAST_TOMORROW_TEXT\n\n210 Version 1.21\n\nChapter 13. Weather Data", "type": "FUNCTION", "name": "YAHOO_WEATHER_DESC_DE", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "A boolean input that triggers the translation of weather descriptions when set to a positive edge."}], "in/out": [{"name": "YW", "type": "YW_TYPE", "description": "Weather data structure containing original weather descriptions.", "fields": [{"name": "CUR_CONDITIONS_TEXT", "type": "STRING", "description": "Current weather condition text."}, {"name": "FORCAST_TODAY_TEXT", "type": "STRING", "description": "Weather forecast text for today."}, {"name": "FORCAST_TOMORROW_TEXT", "type": "STRING", "description": "Weather forecast text for tomorrow."}]}], "output": [], "return_value": {}}
{"title": "YAHOO_WEATHER_ICON_OSCAT Function Module", "description": "YAHOO_WEATHER_ICON_OSCAT The module replaces the original vendor-specifc numbers on the weather \n\nicons by OSCAT standard icon numbers. Following a positive edge at \n\nACTIVATE the elements (icon numbers) in the YAHOO_WEATHER_DATA data \n\nstructure is replaced. After querying the weather data using \n\nYAHOO_WEATHER this module should be called subsequently. It is simply \n\nthe parameter DONE from the module YAHOO_WEATHER that is \n\ninterconnected with ACTIVATE.\n\nThe following elements will be adapted:\n\nYW.CUR_CONDITIONS_ICON\n\nYW.FORCAST_TODAY_ICON\n\nYW.FORCAST_TOMORROW_ICON", "type": "FUNCTION", "name": "YAHOO_WEATHER_ICON_OSCAT", "input": [{"name": "ACTIVATE", "type": "BOOL", "description": "A positive edge signal to start the query."}], "output": [], "in/out": [{"name": "YW", "type": "YAHOO_WEATHER_DATA", "description": "Weather data structure that contains the current and forecast icon numbers."}], "return_value": null}
{"title": "2-Point Actuator Control", "description": "ACTUATOR_2P is an interface for 2-point actuators such as solenoid val￾ves. The 2-point actuator can only be on / of switching and therefore, the\n\ninput value IN is canged in a pulse / pause signal at the output OUT. The\n\ncycle time (CYCLE_TIME) determines the switching times of the output.\n\nThe sticking of the valve because of a long rest period is prevented by\n\nusing the self act time (SELF_ACT_TIME) and the count of self act cycles\n\n(SELF_ACT_CYCLES) and the pulse duration (SELF_ACT_PULSE). The cycles\n\nruns automatically and a stick of the valve can be avoided. After the inter￾val, the module checks whether SELF_ACT_TIME ARE = TRUE and = ARX is\n\nFALSE, then switches ARO for the duration of self-activation to TRUE. At\n\nthe same time ARX set to TRUE to prevent that other modules which are\n\nconnected to the same ARX go to the Autorun. The input IN value can be\n\nvaried from 0..255 If the input signal IN < SENS, the valve remains per￾manently closed (OUT = FALSE) and IN > 255 - SENS means the valve is\n\npermanently open (OUT = TRUE).\n\n12 Version 1.00\n\nChapter 4. Actuators", "type": "FUNCTION", "name": "ACTUATOR_2P", "input": [{"name": "IN", "type": "BYTE", "description": "Control input, ranging from 0 to 255."}, {"name": "TEST", "type": "BOOL", "description": "Starts autorun when set to TRUE."}, {"name": "ARE", "type": "BOOL", "description": "Enable for Autorun."}, {"name": "CYCLE_TIME", "type": "TIME", "description": "Clock speed of the valve."}, {"name": "SENS", "type": "BYTE", "description": "Minimum and maximum input values."}, {"name": "SELF_ACT_TIME", "type": "TIME", "description": "Duration of self-activation."}, {"name": "SELF_ACT_PULSE", "type": "TIME", "description": "Switching time during autorun."}, {"name": "SELF_ACT_CYCLES", "type": "INT", "description": "Number of cycles for autorun."}], "output": [{"name": "OUT", "type": "BOOL", "description": "Switching signal for the valve."}, {"name": "ARO", "type": "BOOL", "description": "TRUE if autorun is currently active."}], "in/out": [{"name": "ARX", "type": "BOOL", "description": "Autorun signal bus."}], "return_value": {"type": null, "description": null}}
{"title": "3-Point Actuator Control Module", "description": "ACTUATOR_3P is a 3-point actuator interface for controlling actuators with\n\nup / down input. The signal at the input IN is converted into pulses at the\n\noutputs OUT1 and OUT2 which drives the motor accordingly. The input si￾gnal IN is processed and the two control outputs (OUT1 and OUT2) are\n\ncontrolled so that an input value of 0 closes the fap, 255 opens the fap,\n\nand 127 half-open the fap. The module can also process a limit switch.\n\nThe limit switches must be connected so that no matter whether upper or\n\nlower end have been reached, the input END_POS gets TRUE, and thus in￾dicating that the fap has reached one of the two end positions. To set the\n\nlimit switch into operation, the setup variable SWITCH_AVAIL has to be\n\n13 Version 1.00\n\nChapter 4. Actuators\n\nTRUE, otherwise the limit switch is ignored. The diagnostic input TEST can\n\nstart at any time a fap and engine diagnostics. The module then goes\n\nthrough a diagnostic cycle and report any errors at the output ERROR. A\n\ndiagnostic cycle drives back the fap to 0%, then measures the running\n\ntime from 0% - 100% and drives back to 0%. It also checks if the limit\n\nswitches work properly (if it is activated by the setup variable\n\nSWITCH_AVAIL ). After the diagnostic cycle, the valve moves back to its po￾sition defned by the input IN. The measured runtimes during the diagno￾stic are used in the operation to drive the fap very closely to each requi￾red position. With the setup variable T_DIAG is specifed after which time a\n\ndiagnosis independently is activated without going through the input Test.\n\nAfter power on automatically a diagnosis cycle runs. If the value T_DIAG =\n\nT#0s, an automatic diagnosis is not performed. \n\nA fap is usually moved up and down to set diferent volume fows. The\n\nmore a fap moves, the more it deviates from the ideal absolute position,\n\nbecause with every move a small position error and is added up over\n\nmany movements. To prevent this error with the setup variables T_CAL af￾ter a defned period (The accumulated time of all fap movements), a cali￾bration can be performed automatically. With this calibration the motor\n\nmoves in the zero position and the fap is then returned to the value speci￾fed by IN. A value of T#0s for CAL_RUNTIME means that no automatic ca￾libration is carried out.\n\nWhen calibration and diagnostics without limit for adding a full motion, the\n\ntime T_EXT runtime T_RUN to ensure that reached its fnal position without\n\nthe fap limit switch safely.\n\nAt the output POS of the module, the current fap position is simulated by\n\nset the time T_RUN. At this output can also be determined, when the fap\n\nhas reached the position requested the input. If the input TEST = TRUE,\n\nthe device performs a diagnostic cycle. With the external variable ARX any\n\nmodules communicate with each other and ensure for the self-diagnostic\n\ncycles (after power on) to do not run parallel. The user thereby determines\n\nhow many and which modules are connected to the same variable and\n\nthus can be tuned. If a module is connected to an own variable ARX, no\n\ncoordination of the diagnostic cycles is done. More information about the\n\ninputs TEST, ARE and ARX can be read at module Autorun.\n\nStatus messages the module:\n\nSTATUS ARE ARX\n\n100 Normal operation - -\n\n101 Calibration - -\n\n103 Diagnostic UP TRUE TRUE\n\n104 Diagnostic UP TRUE TRUE\n\n14 Version 1.00\n\nChapter 4. Actuators", "type": "FUNCTION", "name": "ACTUATOR_3P", "input": [{"name": "IN", "type": "BYTE", "description": "Input control signal ranging from 0 (close) to 255 (open)."}, {"name": "TEST", "type": "BOOL", "description": "Initiates diagnostics when TRUE."}, {"name": "ARE", "type": "BOOL", "description": "Enables automatic diagnostics when TRUE."}, {"name": "END_POS", "type": "BOOL", "description": "Indicates if the actuator has reached a limit switch position."}, {"name": "T_RUN", "type": "TIME", "description": "Run-time to achieve full movement (0 - 255)."}, {"name": "T_EXT", "type": "TIME", "description": "Duration extension during diagnostics."}, {"name": "T_CAL", "type": "TIME", "description": "Period for calibration of the actuator."}, {"name": "T_DIAG", "type": "TIME", "description": "Time interval for triggering automatic diagnostics."}, {"name": "SWITCH_AVAIL", "type": "BOOL", "description": "Indicates if the limit switch is connected (TRUE)."}], "output": [{"name": "OUT1", "type": "BOOL", "description": "Control signal for opening the fap."}, {"name": "OUT2", "type": "BOOL", "description": "Control signal for closing the fap."}, {"name": "POS", "type": "BYTE", "description": "Current simulated position of the fap."}, {"name": "ERROR", "type": "BOOL", "description": "Indicates the presence of diagnostic errors (TRUE if errors exist)."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}, {"name": "ARX", "type": "BOOL", "description": "Auto-communications status."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "ACTUATOR_A Function Module", "description": "ACTUATOR_A is used to control actuators with analog input. The module\n\nhas two inputs (I1 and I2) that cover the range 0..255 the entire output\n\nrange of Y. The output Y is of type WORD, and its operating range is prede￾termined by the setup values OUT_MIN and OUT_MAX. An input value of 0\n\nproduces the output value OUT_MIN and an input value of 255 creates the\n\nvalue OUT_MAX, diferent input values produce corresponding output va￾lues between OUT_MIN and OUT_MAX. The module can be directly used to\n\ncontrol DA converters with 16 bit input. The input IS selects between two\n\ninputs I1 and I2, thus can, for example, switch between manual and auto￾matic operation. Another input DX switches when a rising edge immedia￾tely to self-activation. If SELF_ACT_TIME > t # 0s then the self-activation\n\nafter the time SELF_ACT_TIME is repeated automatically, while the output\n\nY is switched for the time RUNTIME to OUT_MIN, then for the same time on\n\nOUT_MAX and then returns back to the normal control value. The input RV\n\ncan invert the output, Y = OUT_MAX if I = 0 and Y = OUT_MIN when I =\n\n255. In this way, simply the direction of the servo motor to be reversed.\n\nIS IS IS Y\n\n0 0 0 Y = (OUT_MAX-OUT_MIN) * I1 /\n\n255 +OUT_MIN\n\n1 0 0 Y = (OUT_MAX-OUT_MIN) * I2 /\n\n15 Version 1.00\n\nChapter 4. Actuators\n\n255 +OUT_MIN\n\n0 1 0 Y = OUT_MAX - (OUT_MAX￾OUT_MIN) * I1 /255\n\n1 1 0 Y = OUT_MAX - (OUT_MAX￾OUT_MIN) * I2 /255\n\n- -  starts a self activation cycle", "type": "FUNCTION", "name": "ACTUATOR_A", "input": [{"name": "I1", "type": "BYTE", "description": "Control signal 1"}, {"name": "IS", "type": "BOOL", "description": "Input selection"}, {"name": "I2", "type": "BYTE", "description": "Control signal 2"}, {"name": "RV", "type": "BOOL", "description": "Reversal of direction for output Y"}, {"name": "DX", "type": "BOOL", "description": "Self-activation"}, {"name": "RUNTIME", "type": "TIME", "description": "Runtime of the servo motor"}, {"name": "SELF_ACT_TIME", "type": "TIME", "description": "Time for automatic movement"}, {"name": "OUT_MIN", "type": "DWORD", "description": "Output value at I = 0"}, {"name": "OUT_MAX", "type": "DWORD", "description": "Output value at I = 255"}], "output": [{"name": "Y", "type": "WORD", "description": "Control signal for the servo motor"}], "in/out": [], "return_value": {"type": "WORD", "description": "Control signal for the servo motor"}}
{"title": "Automatic Valve Control Function", "description": "ACTUATOR_COIL is used to control simple valves. The output OUT follows\n\nthe input signal IN. If the setup variable SELF_ACT_CYCLE set to a value\n\ngreater than 0, the valve is automatically activated for the duration of\n\nSELF_ACT_TIME if it was of for the time SELF_ACT_CYCLE. An ESR compli￾ant status output indicates state changes of the valve for further proces￾sing or Data Logging. The status messages are defned as follows:\n\nSTATUS = 100, Standby. \n\nSTATUS = 101, valve was activated by TRUE at the input IN.\n\nSTATUS = 102, valve was activated automatically.", "type": "FUNCTION", "name": "ACTUATOR_COIL", "input": [{"name": "IN", "type": "BOOL", "description": "Control signal for the valve."}, {"name": "SELF_ACT_CYCLE", "type": "TIME", "description": "Automatic activation time for the valve."}, {"name": "SELF_ACT_TIME", "type": "TIME", "description": "Duration for which the valve will be activated automatically."}], "output": [{"name": "OUT", "type": "BOOL", "description": "Control signal for the pump, follows the input signal."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output indicating state changes of the valve."}], "return_value": {"type": null, "description": null}}
{"title": "Actuator Pump Control", "description": "ACTUATOR_PUMP is a pump interface with operating hours counter. The\n\npump can be turned on with both IN or Manual. The setup variables\n\nMIN_ONTIME and MIN_OFFTIME set a minimum ON time and minimum OFF\n\ntime. If the input IN reaches TRUE quicker than MIN_ONTIME, then the\n\npump continues to run until the minimum run time is reached. If the input\n\nIN is set longer than MIN_ONTIME to TRUE, the pump runs until IN is FALSE\n\nagain.\n\nIf the pump is turned on in quick succession, the pump waits until the\n\nelapsed time MIN_OFFTIME, until they turn on the pump. With the setup\n\nvariables RUN_EVERY the time is defned after that the pump runs auto￾matically when it is standing still for more than RUN_EVERY time, so a\n\nstuck of the pump can be avoided. The pump turns itself on in this case,\n\nand runs for MIN_ONTIME. By RUN_EVERY = T # 0s, the automatic activati￾on can be switched of.\n\nAn internal counter counts the pump operating hours and the number of\n\nswitching cycles. Both values can be reset to zero with TRUE at input RST.\n\nThe hour meter is permanently and gets not lost neither at power failure\n\nor reset. RUNTIME and CYCLES are both REAL values, so not the usual\n\nOverfow happens, as happened with TIME values after 50 days.", "type": "FUNCTION", "name": "ACTUATOR_PUMP", "input": [{"name": "IN", "type": "BOOL", "description": "Control signal for the pump to turn on"}, {"name": "MANUAL", "type": "BOOL", "description": "Manual control signal to override automatic controls and turn on the pump"}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the operational hours and cycles"}], "output": [{"name": "PUMP", "type": "BOOL", "description": "Control signal indicating whether the pump is currently active"}, {"name": "RUNTIME", "type": "REAL", "description": "Total engine running time in hours"}, {"name": "CYCLES", "type": "REAL", "description": "Total number of on/off cycles of the pump"}], "in/out": [{"name": "MIN_ONTIME", "type": "TIME", "description": "Minimum runtime for the pump before it can be turned off"}, {"name": "MIN_OFFTIME", "type": "TIME", "description": "Minimum time that the pump must remain off before it can be turned on again"}, {"name": "RUN_EVERY", "type": "TIME", "description": "Time after which the pump will automatically activate if it has been idle"}], "return_value": {"type": "void", "description": "No return value as this function directly controls the pump based on input conditions"}}
{"title": "Actuator Control Module", "description": "ACTUATOR_UD is a reversing contactor interface with locking and confgu￾rable timing. With additional return inputs a activation was prevented as\n\nlong as a relais stuck. The module has an automatic and a manual mode.\n\nIn automatic mode (ON = TRUE and Manual = FALSE), the input of the UD\n\ndecides about the direction and ON/OFF. As soon as the manual input is\n\nTRUE starts the Manual mode and outputs will follow only the inputs UP\n\nand DN. UP and DN may never be both TRUE, if happens both outputs gets\n\nFALSE. With a safety-switch-of input OFF the outputs are switched of in\n\nboth the manual and in automatic mode at any time. \n\nTwo return inputs YUP_IN and YDN_IN serve as separate inputs for the\n\nstate of the relays due to the avoid activating the output of a other relais\n\nin case of a failure of one relay module. This error is reported through er￾ror messages at the output STATUS. The feedback function is only availa￾ble if the confg variable OUT_RETURN is set to TRUE. Status reports all ac￾tivities of the module in order to provide them for a data record. The sta￾tus output is ESR compatible and combinable with other ESR modules\n\n18 Version 1.00\n\nChapter 4. Actuators\n\nfrom our library. \n\nThe output status reports two errors: \n\n1: YUP can not be set because YDN_IN TRUE.\n\n2: YDN can not be set because YUP_IN TRUE.\n\nThe Confg variables TON and TOFF defne a minimum ontime and a dead\n\ntime between two output impulses and therefore large motors or transmis￾sions can be switched, even if they needs a start and stop time.\n\nManual UP DN ON UD OFF YUP YDN Status\n\n1 0 0 - - 0 0 0 102\n\n1 1 0 - - 0 1 0 103\n\n1 0 1 - - 0 0 1 104\n\n1 1 1 - - 0 0 0 102\n\n0 - - 1 1 0 1 0 111\n\n0 - - 1 0 0 0 1 112\n\n- - - - - 1 0 0 101\n\n1 0 0 0 - 0 0 0 110\n\n0 - - 0 - - 0 0 110", "type": "FUNCTION", "name": "ACTUATOR_UD", "input": [{"name": "UD", "type": "BOOL", "description": "Direction input in Auto Mode (UP = TRUE)"}, {"name": "ON", "type": "BOOL", "description": "Indicates if the module is in Auto Mode (TRUE when in Auto Mode)"}, {"name": "MANUAL", "type": "BOOL", "description": "TRUE if Manual Mode is selected"}, {"name": "UP", "type": "BOOL", "description": "Enable UP direction in Manual Mode"}, {"name": "DN", "type": "BOOL", "description": "Enable DN direction in Manual Mode"}, {"name": "OFF", "type": "BOOL", "description": "Safety switch input (TRUE = outputs FALSE)"}, {"name": "YUP_IN", "type": "BOOL", "description": "Return input for UP relay"}, {"name": "YDN_IN", "type": "BOOL", "description": "Return input for DN relay"}], "output": [{"name": "YUP", "type": "BOOL", "description": "Output for direction UP"}, {"name": "YDN", "type": "BOOL", "description": "Output for direction DN"}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status and error output"}], "in/out": [{"name": "SOUND", "type": "TIME", "description": "Minimum on-time configuration"}, {"name": "TOFF", "type": "TIME", "description": "Minimum off-time configuration"}, {"name": "OUT_RETURN", "type": "BOOL", "description": "Switches the return inputs YUP_IN and YDN_IN"}], "return_value": {"type": "VOID", "description": "The function does not return a value."}}
{"title": "Air Density Calculation", "description": "AIR_DENSITY calculates the density of air in kg / m³ depending on pressu￾re, humidity and temperature. The temperature is given in ° C, pressure in\n\nPascal and the humidity in % (50 = 50%).", "type": "FUNCTION", "name": "AIR_DENSITY", "input": [{"name": "T", "type": "REAL", "description": "Air temperature in °C."}, {"name": "P", "type": "REAL", "description": "Air pressure in Pascal."}, {"name": "RH", "type": "REAL", "description": "Humidity in %."}], "output": [{"name": "Density of air", "type": "REAL", "description": "Calculated density of air in kg/m³."}], "return_value": {"type": "REAL", "description": "The density of air in kg/m³ based on the provided inputs."}}
{"title": "AIR_ENTHALPY Function", "description": "AIR_ENTHALPY calculates the enthalpy of moist air from the statements T\n\nfor temperature in degrees Celsius and relative humidity RH in % (50 =\n\n50%). The enthalpy is calculated in joules/gram.\n\n22 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "AIR_ENTHALPY", "input": [{"name": "T", "type": "REAL", "description": "Air temperature in degrees Celsius."}, {"name": "RH", "type": "REAL", "description": "Relative humidity of the air in percentage."}], "output": [{"name": "Enthalpy", "type": "REAL", "description": "The enthalpy of moist air calculated in joules/gram."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated enthalpy of air in J/g.", "fields": []}}
{"title": "AUTORUN Function Module", "description": "AUTORUN monitors the duration of a load and ensures that the load at\n\nOUT is on, after the time TOFF at least for the time TRUN. AUTORUN stores\n\nthe run time and switches the output only on, if a minimum TRUN within\n\nthe period TOFF is not reached. The input IN is the switching input for the\n\noutput OUT. The output ARO indicates that just Autorun is activ. The input\n\nARE must be TRUE to enable autorun, at ARE a Timer can be connected to\n\nstart autorun at certain times. The I/O ARX prevents if TRUE an autorun,\n\nautorun can only be active if ARI = FALSE. If ARI = FALSE and the internal\n\nTimer have expired, the module switches ARO and OUT to TRUE and at the\n\nsame time ARI to TRUE. This mechanism can be used in several ways:\n\na) A TRUE on the I/O ARX can prevent an autorun, it can, for example be\n\ncontrolled by an external Timer and allow the autorun only during a cer￾tain period of time.\n\nb) The ARI ports of multiple modules can be connected together and thus\n\nprevents that several modules simultaneously switch in the autorun mode.\n\nThe modules wait until the frst module is fnished with Autorun and then\n\nthe next module will begin. This is very useful to prevent that a larger\n\nnumber of loads perform simultaneously the autorun and therefore create\n\nunnecessarily high current load.\n\nThe operating states of AUTORUN:\n\nIN T\n\nE\n\nS\n\nT\n\nA\n\nR\n\nE\n\nA\n\nR\n\nX\n\nA\n\nR\n\nO\n\nO\n\nU\n\nT\n\nX 0 - - - X Normal operation\n\n- 1 - 1 1 1 TEST starts the Au￾torun cycle\n\n- 0 1 1 0\n\n>\n\n>\n\n1\n\n1 Autorun cycle is ac￾tive\n\nA simple application of Autorun with input and output:\n\n20 Version 1.00\n\nChapter 4. Actuators\n\nIn the next example, the inputs ARE (Autorun Enable ) will be released by\n\na Timer so that autorun will run only at certain times. The autorun of the\n\nmodules X1 and X2 will start at the same time.\n\nThe following example shows three autorun modules that are locked on\n\nARI each other, so that only one device can go into the autorun and the\n\nother has to wait.\n\n21 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\n 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "AUTORUN", "input": [{"name": "IN", "type": "BOOL", "description": "Switching input for the output"}, {"name": "TEST", "type": "BOOL", "description": "Enables the Autorun cycle"}, {"name": "ARE", "type": "BOOL", "description": "Enable Autorun"}, {"name": "TRUN", "type": "TIME", "description": "Minimum duration of the load"}, {"name": "TOFF", "type": "TIME", "description": "Maximum lifetime of the load"}, {"name": "ARX", "type": "BOOL", "description": "Autorun Enable Signal"}], "output": [{"name": "OUT", "type": "BOOL", "description": "Output to load"}, {"name": "ARO", "type": "BOOL", "description": "TRUE if Autorun is active"}], "in/out": [], "return_value": null}
{"title": "Blind Actuator Function Module", "description": "BLIND_ACTUATOR is a blind / shutter actuator to simulate the position and\n\nthe angle of the slats. The inputs UP and DN are mutually interlocked, so\n\nthat QU and QD can never be active at the same time. With time T_LOCK￾OUT the minimum pause is set between a change of direction. Additionally\n\nBLIND_ACTUATOR provides two outputs with the type Byte which simulate\n\nthe position of fn and the position of the shutter. For accurate simulation,\n\nadjust the setup times and T_UD T_ANGLE accordingly. T_UD sets the time\n\nto drive from \"closed\" needed to \"open\" (up position). T_ANGLE specifes\n\nthe time for adjusting the fn from \"vertical\" to horizontal. The actuator en￾sures that frst the fn be placed horizontally and then starting the \"open\"\n\naction of the shutter. Conversely, when \"close\" the shutter the fn set ver￾tically before the down movement begins. POS = 0 means blinds shut\n\ndown, and POS means = 255 blind is up. Intermediate positions are in ac￾cordance with intermediate values 0 ..255 The angle of the blades is issu￾ed by the output ANG, with mean ANG = 0 is invertical position and ANG\n\n= 255 is the horizontal position, values 0-255 indicate the appropriate an-\n\n74 Version 1.00\n\nChapter 7. Blind Modules\n\ngle. By outputs POS and ANG the information on the position of the shut￾ter control is provided. ANG and POS may only provide useful results if the\n\ntimes T_UD and T_ANGLE are precisely adapted to the corresponding\n\nblind. The actuator may, if T_ANGLE is set to T#0s, be used for all types of\n\nroller shutters. The inputs T_UD, T_ANGLE T_LOCKOUT and have the follo￾wing default values: \n\nT_UD = T#10S\n\nT_ANGLE = T#3S\n\nT_LOCKOUT = T#100MS\n\nThe input and output S_IN STATUS are ESR compliant outputs and inputs.\n\nIn Input S_IN the upstream functions report their status to the module, this\n\nstatus will be forwarded to the output of STATUS, and own status messa￾ges also issued on STATUS. If a status message is present at the input it\n\nwill overwrite the own status messages, an error will be put out with hig￾hest priority.\n\nSTATUS Meaning\n\n0 no message\n\n1 Error, UP and DN active simultaneously\n\n101 Manual UP\n\n102 Manual DN\n\nNNN forwarded message\n\nThe following graphic shows the internal structure and function of the mo￾dule:", "type": "FUNCTION", "name": "BLIND_ACTUATOR", "input": [{"name": "UP", "type": "BOOL", "description": "Input signal to move the shutter up."}, {"name": "DN", "type": "BOOL", "description": "Input signal to move the shutter down."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input."}, {"name": "T_UD", "type": "TIME", "description": "Runtime for moving the shutter up/down."}, {"name": "T_ANGLE", "type": "TIME", "description": "Duration for adjusting the angle of the slats."}, {"name": "T_LOCKOUT", "type": "TIME", "description": "Delay time between changes in direction."}], "output": [{"name": "POS", "type": "BYTE", "description": "Position of the shutter; 0 = bottom, 255 = top."}, {"name": "ANG", "type": "BYTE", "description": "Angle of the slats; 0 = vertical, 255 = horizontal."}, {"name": "QU", "type": "BOOL", "description": "Motor signal to move up."}, {"name": "QD", "type": "BOOL", "description": "Motor signal to move down."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}], "in/out": [], "return_value": null}
{"title": "BLIND_CONTROL Function Module", "description": "BLIND_CONTROL controls the shutter and the fn angle according to set￾tings in PI and AI if UP and DN is both TRUE (automatik modue). POS und\n\nANG are herein the values of the shutter. At this outputs the simulated po￾sition and angle of the shutter are bypassed. BLIND_CONTROL switch the\n\noutputs MU or MD to TRUE in a corresponding order until the values in POS\n\nand ANG correspond to default of PI and AI. A internal sequencer controls\n\nthat while shutter moves up and down the fn angle is adjusted before the\n\nup and down movement happens. So when the shutter moves up or down,\n\nthe fn angle is adjusted and after the movement it restores it's angle. The\n\ninput SNES defnes at which diference the control module is active and\n\nadjusts the output in a way to correspond to the inputs PI and AI. IF SENS\n\n= 0 every diference is controlled, if SENS = 5 (default) after a diference\n\nof 5 between the setup values and the actual values controlling is done. If\n\nUP and DN is not TRUE, BLIND_CONTROL leaves the automatic mode and\n\nthe outputs QU and QD are controled by manual mode of UP and DN.\n\nBLIND_CONTROL does not need BLIND_ACTUATOR to control a shutter be￾cause BLIND_ACTUATOR is integrated in BLIND_CONTROL already. If no au-\n\n76 Version 1.00\n\nChapter 7. Blind Modules\n\ntomatic mode for a shutter is needed, BLIND_ACTUATOR only is recom￾mended. Use of BLIND_CONTROL must be carefully and must set the cycle\n\ntime for the module smaller than T_ANGLE / 512 * SENS. With a double￾click to the SENS symbol the setup values can be adjusted (default 5). If\n\nthe cycle time is to long, the shutter moves up and down in a not periodi￾cally manner. If a smaller cycle time is not possible, the SENS value can be\n\nincreased.\n\nThe graph shows the shutter geometry.\n\nThe table shows the working states of the module.\n\nUP DN PI AI MU MD\n\nL L - - L L no action\n\nH L - - H L shutter moves up\n\nL H - - L H shutter moves down\n\nH H P A X X Position P and angle A are driven automatically.\n\nThe input and output S_IN STATUS are ESR compliant outputs and inputs.\n\nIn Input S_IN the upstream functions report their status to the module, this\n\nstatus will be forwarded to the output of STATUS, and own status messa￾ges also issued on STATUS.\n\n77 Version 1.00\n\nChapter 7. Blind Modules\n\nSTATUS Meaning\n\n0 no message\n\n101 manually up\n\n102 manually down\n\n121 position up\n\n122 position down\n\n123 fn setting horizontally\n\n124 fn setting vertically\n\nNNN forwarded messages", "type": "FUNCTION", "name": "BLIND_CONTROL", "input": [{"name": "UP", "type": "BOOL", "description": "Input signal to move the shutter up."}, {"name": "DN", "type": "BOOL", "description": "Input signal to move the shutter down."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input."}, {"name": "PI", "type": "BYTE", "description": "Default position for the shutter."}, {"name": "AI", "type": "BYTE", "description": "Default angle for the shutter."}, {"name": "T_UD", "type": "TIME", "description": "Time to move the shutter up."}, {"name": "T_ANGLE", "type": "TIME", "description": "Time to move to the function angle."}, {"name": "SENS", "type": "BYTE", "description": "Resolution of the control module."}, {"name": "T_LOCKOUT", "type": "TIME", "description": "Lockout time when reversing motor direction."}], "output": [{"name": "POS", "type": "BYTE", "description": "Simulated shutter position."}, {"name": "ANG", "type": "BYTE", "description": "Simulated function angle."}, {"name": "MU", "type": "BOOL", "description": "Motor up signal output."}, {"name": "MD", "type": "BOOL", "description": "Motor down signal output."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Blind Control System", "description": "BLIND_CONTROL_S manages and controls the position of blinds. The out￾puts MU and MD control the up and down direction of the motors. The time\n\nT_LOCKOUT is the waiting time for a change of direction between MU and\n\nMD and the times T_UP and T_DN determine how long the engine need for\n\na full movement downwards or upwards. As the run time of the engine can\n\nvary, on reaching a fnal position (Above or below) the corresponding mo￾tor is in addition to the time T_EXT controlled to ensure that the fnal posi￾tion is attained, which provides a continuous calibration of the system. For\n\nthe frst start and after a power failure, a calibration run is done automati￾cally upwards. The variable EXT_TRIG indicates from what distance from\n\nthe fnal value the run time will be extended. In automatic mode the set￾ting R_POS_TOP limits the maximum position of the blinds if RD = TRUE.\n\nFor example the blind remain at 240 if RD = TRUE and R_POS_TOP = 240,\n\nwhich may prevent freezing in winter in the up position. Similarly,\n\nR_POS_BOT and RU = TRUE are for the lowest possible position in charge,\n\nwhich can place during the summer for forced ventilation. The output of\n\nPOS is the simulated position of the blinds, 0 = down and 255 = up. S_IN\n\nand STATUS are the ESR compatible status inputs and outputs.\n\nUP DN STATUS MU MD\n\nH H 103 POS is regulated to PI auto aut\n\no\n\nL H 102 Manual operation down L H\n\nH L 101 Manual mode up H L\n\nL L - Manual Timeout L L\n\n- - 107 Lockout Time L L\n\n- - 108 Auto calibration H L\n\n- - 109 Time extension X X\n\nThe module is interconnected with other components of the shutter con￾trol:\n\n79 Version 1.00\n\nChapter 7. Blind Modules\n\nBLIND_CONTROL_S is specially designed for the control of blinds and has\n\nin contrast to shutters no angle, so the device also has no input AI and no\n\noutput ANG. BLIND_CONTROL_S can be connected of course with the other\n\nBLIND components of the library.\n\nThe module supports automatic calibration, which can cause, after a\n\npower failure, to move up all blinds, which is undesired some times in your\n\nabsence. Therefore, in case of your absence the desired position of the\n\nblinds should be given to the input PI. The blinds move to up position for\n\ncalibration, and then automatically move into the desired position. The au￾tomatic calibration however can be prevented if both inputs UP and DN\n\nare FALSE.", "type": "FUNCTION", "name": "BLIND_CONTROL_S", "input": [{"name": "UP", "type": "BOOL", "description": "Input signal to move the blinds up."}, {"name": "DN", "type": "BOOL", "description": "Input signal to move the blinds down."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input."}, {"name": "PI", "type": "BYTE", "description": "Default position of the blinds."}, {"name": "T_UP", "type": "TIME", "description": "Duration for the blinds to move upwards."}, {"name": "T_DN", "type": "TIME", "description": "Duration for the blinds to move downwards."}, {"name": "RU", "type": "BOOL", "description": "Release signal for upward movement."}, {"name": "RD", "type": "BOOL", "description": "Release signal for downward movement."}, {"name": "T_LOCKOUT", "type": "TIME", "description": "Lockout time before the motor direction can be reversed."}, {"name": "T_EXT", "type": "TIME", "description": "Extension time to ensure motor stops at the final position."}, {"name": "EXT_TRIG", "type": "BYTE", "description": "Trigger indicating the distance from the final position for extension time."}, {"name": "R_POS_TOP", "type": "BYTE", "description": "Maximum position of the blinds when RD = TRUE."}, {"name": "R_POS_BOT", "type": "BYTE", "description": "Minimum position of the blinds when RU = TRUE."}], "output": [{"name": "POS", "type": "BYTE", "description": "Simulated position of the blinds, where 0 = down and 255 = up."}, {"name": "MU", "type": "BOOL", "description": "Motor up signal to control upward movement."}, {"name": "MD", "type": "BOOL", "description": "Motor down signal to control downward movement."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Blind Input Control Module", "description": "BLIND_INPUT serves as a key interface for operating blinds. The module\n\nsupports three modes, manual, automatic and controlled operation. if IN =\n\nFALSE (manual mode), the inputs S1 and S2 are used to control the out￾puts of QU and QD. If the Setup Variable SINGLE_SWITCH = TRUE, then the\n\ninput S2 is ignored and the entire control is on the S1 switch. S1 will\n\nswitch alternately QU and QD so as followed by pressing the button S1\n\nchange between up and down motion in succession. The internal default is\n\nFALSE (2 button confguration). The setup variable MANUAL_TIMEOUT def￾ned rest period after which (time with no signal at S1 or S2), the device\n\nautomatically switches to automatic mode. If this value is not specifed\n\nthen the internal default value of 1 hour used. When the input IN = TRUE,\n\nthe outputs of QU and QD goes to automatic (both are set TRUE), and\n\nswitched the inputs PI and AI to the outputs PO and AO. IN can be pulsed\n\nto take on the values in short, the module controls these values for the\n\ntime MAX_RUNTIME and then switches back to automatic mode. As long as\n\nIN = TRUE the automatic mode is pushed to the values of AI and PI. The\n\ninputs POS and ANG are the return receipts for the current position of the\n\nshutter. These values are provided by the module BLIND_CONTROL. With\n\n81 Version 1.00\n\nChapter 7. Blind Modules\n\nthe variable SETUP CLICK_MODE a click operation is set, a short press\n\nstarts on the direction up for S1 and down for S2 and a second short press\n\nstops the appropriate direction or reverses the direction. This setting make\n\nsense for blinds with a long run time, or to move with a button press to\n\none end. if the key is pressed longer as the setup time CLICK_TIME so the\n\nCLICK mode will be leaved and the shutter moves as long as the button is\n\nheld down in manual mode. If a key press is shorter than CLICK_TIME, the\n\nblinds moves further until a further click stops the drive or a fnal position\n\nis achieved. The default value is 500 milliseconds for CLICK_TIME and the\n\ndefault for CLICK_MODE is TRUE. If both variables CLICK_MODE Setup and\n\nSINGLE_SWITCH are TRUE at the same time, a button operation with only\n\none button on S1 is possible. With the time set of MAX_RUNTIME the run\n\ntime is limited, which ist started by a simple one Click started but not ter￾minated with another Click . The value of MAX_ RUNTIME defaults to\n\nT#60s and should be as long as the blind safely reach the end position\n\nfrom any position. Two outputs D1 and D2 can be used to evaluate a dou￾ble-click on S1 or S2, if D?_Toggle = TRUE a double-clicking switch an ap￾propriate output and a further double-click again of, if D?_Toggle = FALSE\n\nso with each double-click a pulse is generated at the corresponding out￾put. \n\nAfter a manual operation command is the module is for the time\n\nMANUAL_TIMEOUT in the mode \"Manual Standby\" (STATUS = 131), the\n\nmanually hit position is maintained so well for this time and the automatic\n\nfunctions of all downstream components are suppressed. By a long (longer\n\nthan CLICK_TIME) pressure on both buttons, the \"Manual standby\" mode is\n\nterminated prematurely and returned to automatic mode.\n\nThe following table shows the operating states of the module:\n\nPOS\n\nANG\n\nS1 S2 IN PI\n\nAI\n\nQU QD PO\n\nAO\n\nD1 D2\n\nX L L L - H H X * 5 - - Standy / automatic operation\n\n- - - H Y H H Y - - controlled operation, PI and AI are\n\nserved\n\nX H L L - H L X - - Manual mode up\n\nX L H L - L H X - - Manual operation down\n\nX H H L - H H X - - Manual Mode Exit prematurely\n\nX L L L - L L X - - Manual operation standby until ti￾meout expires\n\nX * 4 L L - H L X - - CLICK_EN = TRUE\n\nX L * 4 L - L H X - - CLICK_EN = TRUE\n\n- * 2 L L - H H - / D1 - D1_TOGGLE = TRUE\n\n- * 2 L L - H H - * 3 - D1_TOGGLE = FALSE\n\n82 Version 1.00\n\nChapter 7. Blind Modules\n\n- L * 2 L - H H - - / D2 D2_TOGGLE = TRUE\n\n- L * 2 L - H H - - * 3 D2_TOGGLE = FALSE\n\n*1 in transition in the automatic mode, the outputs PO and AO are set to the last value of POS and AN.\n\n*2 Double click\n\n*3 Output pulse for one cycle\n\n*4 Single click, is blind moves in one direction for MAX_RUNTIME\n\n*5 angle and position are not transferred if the variable MASTER_MODE = TRUE.\n\nThe output of STATUS is compatible and ESR are status messages about\n\nstate changes.\n\nSTATUS Meaning\n\n130 Standby mode\n\n131 Manual Standby\n\n132 manually up\n\n133 manually down\n\n134 Single-clicking up\n\n135 single-click down\n\n136 IN = TRUE forces values\n\n137 Double-clicking position 1 is hit\n\n138 Double-click position 2 is hit\n\n139 Force Automatic Mode\n\nThe following example shows the structure of a blind controller with the\n\nmodule BLIND_INPUT and BLIND_CONTROL:\n\n83 Version 1.00\n\nChapter 7. Blind Modules\n\nThe use of other BLIND modules is optional and is used to extend the func￾tionality. BLIND_INPUT and BLIND_CONTROL gives a full blind control.\n\nBLIND_INPUT can decode a double click at the two inputs S1 and S2 and\n\nturn the two outputs D1 and D2. These outputs can be used downstream\n\nfunction blocks or to control any other event.\n\nMaster Mode:\n\nWith the variable MASTER_MODE = TRUE, the master mode is turned on.\n\nThe master mode prevents that the angle ANG and position POS will be\n\ntransfered to the outputs AO and PO in Standby Mode 130. Blind modules\n\nwhich are between the input and Control modules can switch the position\n\nof the shutter and the shutter remains after the change in the new positi￾on (if MASTER_MODE = FALSE). However, if the variable MASTER_MODE =\n\nTRUE ensures that after an automatic stop by downstream modules the\n\nBlind Input resets again to the old position. If MASTER_MODE = FALSE in\n\nthe state 130 the POS and ANG is transmitted in on the outputs of PO and\n\nAO. Is MASTER_MODE = TRUE the last valid value remains at the STATUS\n\n130 on the outputs PO and AO and the inputs of POS and ANG are not\n\ntransferred. The module BLIND_INPUT thus retains the last valid BLIND_IN￾PUT position.", "type": "FUNCTION", "name": "BLIND_INPUT", "input": [{"name": "POS", "type": "BYTE", "description": "Return of the blind position"}, {"name": "ANG", "type": "BYTE", "description": "Return of the slat angle"}, {"name": "S1", "type": "BOOL", "description": "Input for UP command"}, {"name": "S2", "type": "BOOL", "description": "Input for DOWN command"}, {"name": "IN", "type": "BOOL", "description": "Controlled operations if TRUE"}, {"name": "PI", "type": "BYTE", "description": "Position if IN = TRUE"}, {"name": "AI", "type": "BYTE", "description": "Angle if IN = TRUE"}, {"name": "SINGLE_SWITCH", "type": "BOOL", "description": "TRUE for single button operation"}, {"name": "CLICK_EN", "type": "BOOL", "description": "TRUE for single-click mode"}, {"name": "CLICK_TIME", "type": "TIME", "description": "Timeout for Click Detection"}, {"name": "MAX_RUNTIME", "type": "TIME", "description": "Timeout for one movement"}, {"name": "MANUAL_TIMEOUT", "type": "TIME", "description": "Timeout of manual operation"}, {"name": "DEBOUNCE_TIME", "type": "TIME", "description": "Debounce time for the inputs S"}, {"name": "DBL_CLK1", "type": "BOOL", "description": "Move to double-click position if TRUE"}, {"name": "DBL_POS1", "type": "BYTE", "description": "Position at S1 double-click"}, {"name": "DBL_ANG1", "type": "BYTE", "description": "Angle at S1 double-click"}, {"name": "DBL_CLK2", "type": "BOOL", "description": "Move to double-click position if TRUE"}, {"name": "DBL_POS2", "type": "BYTE", "description": "Position at S2 double-click"}, {"name": "DBL_ANG2", "type": "BYTE", "description": "Angle at S2 double-click"}, {"name": "D1_TOGGLE", "type": "BOOL", "description": "Toggle mode for D1"}, {"name": "D2_TOGGLE", "type": "BOOL", "description": "Toggle mode for D2"}, {"name": "MASTER_MODE", "type": "BOOL", "description": "Enable the master mode if TRUE"}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal"}, {"name": "QD", "type": "BOOL", "description": "Motor down signal"}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output"}, {"name": "PO", "type": "BYTE", "description": "Output position"}, {"name": "AO", "type": "BYTE", "description": "Output angular position"}, {"name": "D1", "type": "BOOL", "description": "Command output for double-click function 1"}, {"name": "D2", "type": "BOOL", "description": "Command output for double-click function 2"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Blind Control Module", "description": "BLIND_NIGHT serves to close the shutters or blinds at night. The module\n\nautomatically closes the blind after sunset with a delay of SUNSET_OFFSET\n\nand the blind goes up after sunrise with a delay of SUNRISE_OFFSET again.\n\n85 Version 1.00\n\nChapter 7. Blind Modules\n\nThe opening and closing can be unlocked separately with E_NIGHT for clo￾se and E_DAY for open. If, for example E_NIGHT set to TRUE and E_DAY\n\nnot, so in the evening at dusk the blinds shuts down, but it must be ope￾ned the next morning manually. If E_NIGHT and E_DAY are not connected\n\nso both set internally to TRUE. To identify the corresponding periods, the\n\nmodule requires an external data structure of type CALENDAR. UP, DN and\n\nS_IN the inputs from other BLIND modules and are passed in the day mode\n\nto the outputs QU, QD and STATUS. The signals PI, AI and PO, AO pass the\n\nvalues for the position and angle of the blind to the following modules. In\n\nthe night mode at the outputs of PO and AO the values for night mode are\n\npassed, any manual operation deletes the automatic night mode. If E_DAY\n\n= TRUE, at the end of the night the defned day mode with DAY_POSITION\n\nand DAY_ANGLE is restored. The time RESTORE_TIME is the maximum\n\ntime to reach the day position.\n\nThe input and output S_IN STATUS are ESR compliant outputs and inputs.\n\nIn Input S_IN the upstream functions report their status to the module, this\n\nstatus will be forwarded to the output of STATUS, and own status messa￾ges also issued on STATUS.\n\nSTATUS Meaning\n\n0 no message\n\n141 Night mode\n\n142 day position will be reached\n\nNNN forwarded messages\n\nThe following graphic shows the interconnection with other modules of\n\nBLIND_NIGHT for blind control:\n\nBLIND_NIGHT Timing Diagram\n\n86 Version 1.00\n\nChapter 7. Blind Modules\n\nThe timing diagram shows a course of a day. The times T1 and T2 defne\n\nthe allowed range for the beginning of the night shade, T3 and T4 defne\n\nthe appropriate area for the restoration of the day position. The day and\n\nnight position is predetermined by the setup values DAY_POSITION,\n\nDAY_ANGLE, NIGHT_POSITION and NIGHT_ANGLE. Using two release inputs\n\nE_DAY and E_NIGHT, the night shade and the days position are unlocked\n\nseparately. Thus, for example if E_NIGHT = FALSE and TRUE = E_DAY the\n\nmodule can be used in the morning to bring the blinds in the specifed\n\ndays position.", "type": "FUNCTION", "name": "BLIND_NIGHT", "input": [{"name": "UP", "type": "BOOL", "description": "Input for raising the blinds."}, {"name": "DN", "type": "BOOL", "description": "Input for lowering the blinds."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input from other modules."}, {"name": "PI", "type": "BYTE", "description": "Input value of the blind position in automatic mode."}, {"name": "AI", "type": "BYTE", "description": "Input value of the blade angle in automatic mode."}, {"name": "E_NIGHT", "type": "BOOL", "description": "Trigger for automatic night service."}, {"name": "E_DAY", "type": "BOOL", "description": "Trigger for automatic day service."}, {"name": "SUNRISE_OFFSET", "type": "INT", "description": "Offset from sunrise in minutes."}, {"name": "SUNSET_OFFSET", "type": "INT", "description": "Offset from sunset in minutes."}, {"name": "T1", "type": "TOD", "description": "Earliest point in time for night-shade."}, {"name": "T2", "type": "TOD", "description": "Latest point in time for night-shade."}, {"name": "T3", "type": "TOD", "description": "Earliest point in time for day position."}, {"name": "T4", "type": "TOD", "description": "Latest point in time for day position."}, {"name": "NIGHT_POSITION", "type": "BYTE", "description": "Position for night service."}, {"name": "NIGHT_ANGLE", "type": "BYTE", "description": "Angle for night service."}, {"name": "DAY_POSITION", "type": "BYTE", "description": "Position for day position."}, {"name": "DAY_ANGLE", "type": "BYTE", "description": "Angle for day position."}, {"name": "RESTORE_TIME", "type": "TIME", "description": "Maximum time to reach the day position."}, {"name": "CX", "type": "CALENDAR", "description": "Data structure for local time."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}, {"name": "PO", "type": "BYTE", "description": "Output value of the blind in automatic mode."}, {"name": "AO", "type": "BYTE", "description": "Output value of the blade angle in automatic mode."}, {"name": "NIGHT", "type": "BOOL", "description": "Indicates whether it is night time (TRUE between sunset and sunrise)."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Blind Control Module", "description": "BLIND_SCENE stores up to 16 scenes consisting of relevant current blind\n\nposition and angle, and can restore these scenes during retrieval. Every\n\nscene can be active or inactive, depending on whether saving the scene\n\nthe input ENABLE was TRUE or not (ENABLE = TRUE means active). A sce￾ne is retrieved by the number of the scene (0 .. 15) is applied at the input\n\nSCENE and simultaneously ENABLE is set to TRUE. A scene can only be ac￾cessed if both the inputs UP and DN are the same TRUE (automatic mode).\n\nThis ensures that an active scene always overridden by the manual mode\n\nof operation is.\n\nThe following table illustrates the operation of BLIND_SCENE:\n\nUP DN ENABLE SWRITE SCENE QU QD PO AO\n\n1 1 0 0 - 1 1 PI AI no scene\n\n- - 1 1 y - - - - write scene number y\n\n- - 0 1 y - - - - disable scene number y\n\n1 1 1 0 y 1 1 - - recall scene number y\n\nThe input S_IN and output STATUS are ESR compliant inputs and outputs,\n\nthrough input S_IN upstream modules report their status to the module,\n\nthis status will be forwarded to the output of STATUS, and own status mes￾sages issued also on STATUS.\n\nSTATUS Meaning\n\n160 .. 175 scenes 0..15 active\n\n176 Scene written\n\n88 Version 1.00\n\nChapter 7. Blind Modules\n\nNNN forwarded messages\n\nThe following graphic shows the application of BLIND_SCENE with other\n\nmodules to control a blind:", "type": "FUNCTION", "name": "BLIND_SCENE", "input": [{"name": "UP", "type": "BOOL", "description": "Input UP signal to enable the upward movement of the blind."}, {"name": "DN", "type": "BOOL", "description": "Input DOWN signal to enable the downward movement of the blind."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input from upstream modules."}, {"name": "PI", "type": "BYTE", "description": "Input value of the blind position in automatic mode."}, {"name": "AI", "type": "BYTE", "description": "Input value of the blade angle in automatic mode."}, {"name": "ENABLE", "type": "BOOL", "description": "Enable input for saving the scene."}, {"name": "SWRITE", "type": "BOOL", "description": "Write input to save the current scene."}, {"name": "SCENE", "type": "BYTE", "description": "Number of the scene to be saved or recalled."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal indicating the blind is moving up."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal indicating the blind is moving down."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output representing the status of the module."}, {"name": "PO", "type": "BYTE", "description": "Output value of the blind position in automatic mode."}, {"name": "AO", "type": "BYTE", "description": "Output value of the blade angle in automatic mode."}], "in/out": [], "return_value": null}
{"title": "BLIND_SECURITY Function Module", "description": "BLIND_SECURITY makes sure the blinds drive either up or down when cer￾tain events occur. The inputs UP and DN control a downstream module\n\nBLIND_ACTUATOR over the outputs of QU and QD. With the inputs FIRE,\n\nWIND, RAIN ALARM the inputs UP and DN are overwritten and the blinds\n\ndrive either completely up or completely down. This FIRE has the highest\n\npriority followed by WIND, Alarm and with the lowest priority RAIN. Rain\n\ncan be overridden as the only one by manual inputs UP and DN. Therefore,\n\nif the user should decide to remain open the blind despite the rain, he\n\nmust interrupt the rain mode only by a short press of the UP or DN. FIRE\n\ndrives the shutter to the top while RAIN, Wind and Alarm are confgurable\n\nfor up or down. ALARM is confgured using the setup variables ALARM_UP\n\nfor both high and down drive, the setup variable WIND_UP specifes whe￾ther to run in Wind up or down. The variable RAIN_UP determine what po￾sition will be approached at Rain. The default values are UPfor Alarm, UP\n\nfor Wind and DNfor Rain. The setup variables can be changed by dou￾ble-clicking the icon at any time. \n\nThe input and output S_IN STATUS are ESR compliant outputs and inputs.\n\nIn Input S_IN the upstream functions report their status to the module, this\n\nstatus will be forwarded to the output of STATUS, and own status messa￾ges also issued on STATUS.\n\nSTATUS Meaning\n\n0 no message\n\n111 Fire\n\n112 Wind\n\n113 Burglar alarm\n\n114 Door alarm\n\n90 Version 1.00\n\nChapter 7. Blind Modules\n\n115 Rain\n\nNNN forwarded messages\n\nThe following graphic shows the application of BLIND_SECURITY with\n\nBLIND_ACTUATOR for controlling a blind:\n\nBLIND_SECURITY must necessarily used directly on BLIND_CONTROL. If\n\nother modules are installed between BLIND_SECURITY and BLIND_CON￾TROL the security functions can not be guaranteed.", "type": "FUNCTION", "name": "BLIND_SECURITY", "input": [{"name": "UP", "type": "BOOL", "description": "Input UP control signal for raising the blind."}, {"name": "DN", "type": "BOOL", "description": "Input DOWN control signal for lowering the blind."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input indicating upstream function status."}, {"name": "PI", "type": "BYTE", "description": "Blind position in automatic mode."}, {"name": "AI", "type": "BYTE", "description": "Slat angle in automatic mode."}, {"name": "FIRE", "type": "BOOL", "description": "Input signal for fire alarm."}, {"name": "WIND", "type": "BOOL", "description": "Input signal for wind alarm."}, {"name": "ALARM", "type": "BOOL", "description": "Input signal for intrusion detection alarm."}, {"name": "DOOR", "type": "BOOL", "description": "Input signal from door contact."}, {"name": "RAIN", "type": "BOOL", "description": "Input signal from rain sensor."}, {"name": "Setup ALARM_UP", "type": "BOOL", "description": "Configuration for default direction at alarm (Default = Up)."}, {"name": "WIND_UP", "type": "BOOL", "description": "Configuration for default direction at wind (Default = Up)."}, {"name": "RAIN_UP", "type": "BOOL", "description": "Configuration for default direction at rain (Default = Down)."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal for driving the blind up."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal for driving the blind down."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output indicating the module's status."}, {"name": "PO", "type": "BYTE", "description": "Output value of the blind in automatic mode."}, {"name": "AO", "type": "BYTE", "description": "Output value of the blade angle in automatic mode."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value."}}
{"title": "BLIND_SET Function Module", "description": "BLIND_SET can be used anywhere in a BLIND application to accelerate a\n\ndefned position (PX, AX). Using the setup variable OVERRIDE_MANUAL de￾fnes if the module may override a manual operation. If the variable RE￾STORE_POSITION is set to TRUE, the module remembers the last position\n\nand drive to this position automatically after a forced operation. The varia￾ble RESTORE_TIME determines how long the module remains active to re￾store the last Position again. If not set RESTORE_POSITION the forced\n\nstate remains when switch back in the automatic mode.\n\nState table of BLIND_SET:\n\nUP DN PI\n\nAI\n\nIN AX\n\nAX\n\nQU QD STATUS PO\n\nAO\n\nMANUAL_\n\nOVERRIDE\n\n1 1 X 0 - 1 1 S_IN X - Standby\n\n1 1 - 1 Y 1 1 178 Y - Forced position\n\n- - - 1 Y 1 1 178 Y 1 Forced position\n\n- - - - - 1 1 179 Z - Restoreoldposition\n\n0 1 X - - 0 1 S_IN X - Manual operation\n\n1 0 X - - 1 0 S_IN X - Manual operation\n\n0 0 X - - 0 0 S_IN X - Manual operation\n\n92 Version 1.00\n\nChapter 7. Blind Modules", "type": "FUNCTION", "name": "BLIND_SET", "input": [{"name": "UP", "type": "BOOL", "description": "Input signal for raising the blind."}, {"name": "DN", "type": "BOOL", "description": "Input signal for lowering the blind."}, {"name": "S_IN", "type": "BYTE", "description": "Status input compliant with ESR."}, {"name": "PI", "type": "BYTE", "description": "Blind position in automatic mode."}, {"name": "AI", "type": "BYTE", "description": "Slat angle in automatic mode."}, {"name": "IN", "type": "BOOL", "description": "Input signal for fire alarm."}, {"name": "PX", "type": "BYTE", "description": "Input signal for wind alarm."}, {"name": "AX", "type": "BYTE", "description": "Input signal for intrusion detection."}, {"name": "OVERRIDE_MANUAL", "type": "BOOL", "description": "Allows manual override if TRUE."}, {"name": "RESTORE_POSITION", "type": "BOOL", "description": "If TRUE, restores the old position."}, {"name": "RESTORE_TIME", "type": "TIME", "description": "Duration for the restoration of the last position (default = T#60s)."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}, {"name": "PO", "type": "BYTE", "description": "Start value of the blind."}, {"name": "AO", "type": "BYTE", "description": "Start value of the slat angle."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Blind Shade Control", "description": "BLIND_SHADE calculate the appropriate angle of the slats from the current\n\nposition of the sun to guarantee an optimum shading. The slats are\n\ntracked to the sun, th ensure over the course of the day always shading.\n\n93 Version 1.00\n\nChapter 7. Blind Modules\n\nWith the input ENABLE the function is activated when UP and DN (automa￾tic mode) are active. The module evaluate the INPUT SUN, which displays\n\nsunshine when TRUE. If SUN or ENABLE gets FALSE then the device swit￾ches of automatically. SUNRISE_OFFSET defne after which time lag after\n\nsunrise, the shading is active. SUNSET_PRESET determines a what time\n\nbefore sunset the shading is stopped. The shading is active if SUN = TRUE,\n\nENABLE = TRUE, UP = TRUE, DN = TRUE, and the horizontal sun angle is\n\nwithin the range DIRECTION - ANGLE_OFFSET and DIRECTION +\n\nANGLE_OFFSET, and the day time is within the area defned by SUNRISE,\n\nSUNRISE_OFFSET, SUNSET SUNSET_PRESET. DIRECTION specifes the ori￾entation of the facade, 180° means façade is south, 90° in the east and\n\n270° in the west. With the setup variable SHADE_DELAY is determined\n\nhow long after SUN is FALSE the shading remains active. The default value\n\nis 60 seconds. SHADE_DELAY prevents the case of constantly running up\n\nand down while partial cloud cover the blind. When using BLIND_SHADE\n\nmake sure that the cycle time for the module is smaller as T_ANGLE / 512\n\n* SENS. SENS is here the SENS value of the BLIND_CONTROLLERS. If the\n\ncycle time is too large, the blind will start irregular driving. The setup va￾riable BLIND_POS specifes how far the blind can drive down when shado￾wing.\n\nThe following graphic describes the geometry of blind:\n\n94 Version 1.00\n\nChapter 7. Blind Modules\n\nThe following chart shows an east to south-facing facade with DIRECTION\n\n= 135° and ANGLE_OFFSET = 65°:\n\nThe shading function calculates the angle of slats so that the slats only\n\nclose as far as the sun is shaded, but still as much light as possible enters\n\nthe room. With the values DIRECTION and ANGLE_OFFSET the horizontal\n\nangle of the sun which requires a shading is calculated. Depending on the\n\nthickness of the wall and the width of the window the ANGLE_OFFSET can\n\nbe set so that unnecessary shading is avoided. By DIRECTION of the direc￾tion of the facade is specifed. Using the dimensions of the slats, width and\n\ndistance in millimeters (SLAT_WIDTH and SLAT_SPACING) the module cal￾cuates how far the slats should be tilted to avoid the sun. The target is to\n\ntilt the slats as far as absolutely necessary in order to guarantee optimal\n\nlighting conditions. To not infuence the mood and light conditions at sunri￾se and sunset, an OFFSET of the sunrise and a PRESET before the sunset\n\ncan be adjusted. With an ofset of 30 minutes and a preset of 60 minutes,\n\nfor example, the shading started 30 minutes after sunrise and already f￾nished 60 minutes before sunset. The input SUN of the module is to\n\nconnect a solar intensity sensor or any suitable sensor which interrupts the\n\nfunction if there is no solar radiation. \n\nThe following graphic illustrates the shading:\n\nThe input and output S_IN STATUS are ESR compliant outputs and inputs.\n\nIn Input S_IN the upstream functions report their status to the module, this\n\nstatus will be forwarded to the output of STATUS, and own status messa￾ges also issued on STATUS. BLIND_SHADE report on the output STATUS the\n\nSTATUS 151 when the shade is active.\n\nThe following example shows the application of BLIND_SHADE within a\n\nblind control:\n\n95 Version 1.00\n\nChapter 7. Blind Modules", "type": "FUNCTION", "name": "BLIND_SHADE", "input": [{"name": "UP", "type": "BOOL", "description": "Input signal indicating if the motor should move up."}, {"name": "DN", "type": "BOOL", "description": "Input signal indicating if the motor should move down."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input."}, {"name": "PI", "type": "BYTE", "description": "Blind position in automatic mode."}, {"name": "AI", "type": "BYTE", "description": "Slat angle in automatic mode."}, {"name": "SUN", "type": "BOOL", "description": "Input signal from the solar sensor, indicating sunshine presence."}, {"name": "CX", "type": "CALENDAR", "description": "Current time and calendar data."}, {"name": "SUNRISE_OFFSET", "type": "TIME", "description": "Delay after sunrise before shading is activated."}, {"name": "SUNSET_PRESET", "type": "TIME", "description": "Time before sunset when shading stops."}, {"name": "DIRECTION", "type": "REAL", "description": "Facade orientation, with 180° being the south facade."}, {"name": "ANGLE_OFFSET", "type": "REAL", "description": "Horizontal aperture shading angle offset."}, {"name": "SLAT_WIDTH", "type": "REAL", "description": "Width of the slats in millimeters."}, {"name": "SLAT_SPACING", "type": "REAL", "description": "Distance between the slats in millimeters."}, {"name": "SHADE_DELAY", "type": "TIME", "description": "Delay time for the shading after solar presence ends."}, {"name": "SHADE_POS", "type": "BYTE", "description": "Position for shading."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal indicating the motor should move up."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal indicating the motor should move down."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}, {"name": "PO", "type": "BYTE", "description": "Blind position in automatic mode after function execution."}, {"name": "AO", "type": "BYTE", "description": "Slat angle in automatic mode after function execution."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "BLIND_SHADE_S Function Module", "description": "BLIND_SHADE_S is a much simpler function of BLIND_SHADE specifcally\n\nfor use with roller blind. Here no slat angle for shading must be calculated,\n\nbut simply ensure that when the sun shines the blind closes far enough.\n\nIn the inactive state of the module the inputs UP, DN, and PI S_IN passed\n\nunchanged through to the outputs QU, QD, PO and STATUS.\n\nThe module is activated, if UP = TRUE, DN = TRUE, ENABLE = TRUE and\n\nSUN (for at least SHADE_DELAY) = TRUE. If these conditions are met, the\n\nmodule checks whether the current horizontal sun angle is in the range\n\nbetween HORZ1 and HORZ2 and the vertical sun angle is lower than VERT.\n\nIs now also the current time between sunrise + SUNRISE_OFFSET and sun￾set - SUNSET_PRESET, then the module moves in the STATUS 151 (sha￾ding) and is ensuring that the value issued at output PO, not greater value\n\nthan SHADE_POS (PO is then the minimum of PI and SHADE_POS).\n\nFor the angle HORZ1 and HORZ2 is valid: 90° = East, 180° = South, 270°\n\n= West.\n\nSHADE_DELAY prevents a permanent up and down move when partly\n\ncloud cover the blinds.\n\nWith the input ALERT for example, can be achieved (in a simple manner)\n\nthat the roller blind goes up when the door opens. The ALERT input has\n\nthe highest priority in the module, forces STATUS = 152 independent of\n\nthe inputs and sets QU = TRUE, FALSE = QD, drives therefore manually UP.\n\nWithin a blind control the BLIND_SHADE are used as follows:\n\n97 Version 1.00\n\nChapter 7. Blind Modules\n\nindex of modules\n\nACTUATOR_2P............................................ 12\n\nACTUATOR_3P............................................ 13\n\nACTUATOR_A..............................................15\n\nACTUATOR_COIL.........................................16\n\nACTUATOR_PUMP.......................................16\n\nACTUATOR_UD...........................................17\n\nAIR_DENSITY.............................................. 22\n\nAIR_ENTHALPY...........................................22\n\nAUTORUN...................................................19\n\nBLIND_ACTUATOR......................................74\n\nBLIND_CONTROL........................................ 75\n\nBLIND_CONTROL_S....................................78\n\nBLIND_INPUT.............................................. 80\n\nBLIND_NIGHT.............................................84\n\nBLIND_SCENE.............................................87\n\nBLIND_SECURITY........................................ 89\n\nBLIND_SET.................................................91\n\nBLIND_SHADE............................................93\n\nBLIND_SHADE_S......................................... 96\n\nBOILER....................................................... 23\n\nBUILDING_VERSION....................................11\n\nBURNER.....................................................25\n\nCLICK......................................................... 47\n\nCLICK_MODE..............................................49\n\nDEBOUNCE.................................................49\n\nDEW_CON..................................................29\n\nDEW_RH..................................................... 29\n\nDEW_TEMP................................................. 31\n\nDIMM_2...................................................... 50\n\nDIMM_I....................................................... 52\n\nF_LAMP.......................................................54\n\nHEAT _TEMP...............................................33\n\nHEAT_INDEX............................................... 32\n\nHEAT_METER.............................................. 32\n\nLEGIONELLA............................................... 35\n\nPULSE_LENGTH..........................................56\n\nPULSE_T..................................................... 56\n\nSDD............................................................38\n\nSDD_NH3...................................................39\n\nSDT_NH3.................................................... 39\n\nSW_RECONFIG............................................57\n\nSWITCH_I....................................................58\n\nSWITCH_X..................................................59\n\nT_AVG24....................................................39\n\nTANK_LEVEL............................................... 41\n\nTANK_VOL1................................................42\n\nTANK_VOL2................................................42\n\nTEMP_EXT..................................................43\n\nTIMER _ 1................................................... 60\n\nTIMER_2..................................................... 60\n\nTIMER_EVENT_DECODE.............................. 62\n\nTIMER_EXT................................................. 63\n\nTIMER_P4...................................................65\n\nWATER_CP.................................................. 45\n\nWATER_DENSITY.........................................45\n\nWATER_ENTHALPY......................................46\n\nWCT........................................................... 46\n\n98 Version 1.00", "type": "FUNCTION", "name": "BLIND_SHADE_S", "input": [{"name": "UP", "type": "BOOL", "description": "Input UP signal to indicate upward motor action."}, {"name": "DN", "type": "BOOL", "description": "Input DOWN signal to indicate downward motor action."}, {"name": "S_IN", "type": "BYTE", "description": "ESR compliant status input."}, {"name": "PI", "type": "BYTE", "description": "Default position of the blind."}, {"name": "ENABLE", "type": "BOOL", "description": "Indicates if shading is enabled."}, {"name": "SUN", "type": "BOOL", "description": "Input signal from the solar sensor indicating sunlight presence."}, {"name": "HORZ1", "type": "REAL", "description": "Horizontal sun angle for shading start."}, {"name": "HORZ2", "type": "REAL", "description": "Horizontal sun angle for shading end."}, {"name": "VERT", "type": "REAL", "description": "Vertical shading angle."}, {"name": "ALERT", "type": "BOOL", "description": "Forced opening of the blinds if triggered."}, {"name": "CX", "type": "CALENDAR", "description": "Current time and calendar data."}, {"name": "SUNRISE_OFFSET", "type": "TIME", "description": "Delay at sunrise."}, {"name": "SUNSET_PRESET", "type": "TIME", "description": "Delay at sunset."}, {"name": "SHADE_DELAY", "type": "TIME", "description": "Delay of shading."}, {"name": "SHADE_POS", "type": "BYTE", "description": "Maximum position for shading."}], "output": [{"name": "QU", "type": "BOOL", "description": "Motor up signal."}, {"name": "QD", "type": "BOOL", "description": "Motor down signal."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output."}, {"name": "PO", "type": "BYTE", "description": "Blind position in automatic mode."}], "in/out": [], "return_value": {"type": "void", "description": "No return value for this function."}}
{"title": "BOILER Control Module", "description": "BOILER is a Controllerfor bufers such as warm water bufer. With two se￾parate temperature sensor inputs also storage layers can be controlled.\n\nWith the setup variable T_LOWER_ENABLE the lower temperature sensor\n\ncan be switched on and of. When the input ENABLE = TRUE, the boiler is\n\nheated (HEAT = TRUE) until the preset temperature T_LOWER_MAX rea￾ches the lower area of the bufer and then turn of the heater, until the\n\nlower limit temperature of the upper region (T_UPPER_MIN) is reached. If\n\nT_LOWER_ENABLE is set to FALSE, the lower sensor is not evaluated and it\n\ncontrol the temperature between T_UPPER_MIN and T_UPPER_MAX at the\n\ntop. A PRESSURE-input protects the boiler and prevents the heating, if not\n\nenough water pressure in the boiler is present. If a pressure sensor is not\n\npresent, the input is unconnected. As further protection are the default va￾lues T_PROTECT_LOW (antifreeze) and T_PROTECT_HIGH are available and\n\nprevent the temperature in the bufer to not exceed an upper limit and\n\nalso a lower limit. If an error occurs, the output ERROR is set to TRUE, whi￾le a status byte is reported at output STATUS, which can be further evalua￾ted by modules such as ESR_COLLECT. By a rising edge at input BOOST\n\nthe bufer temperature is directly heated to T_UPPER_MAX (T_LOWER_ENA￾BLE = FALSE) or T_LOWER_MAX (T_LOWER_ENABLE = TRUE). BOOST can\n\nbe used to impairment heating up the boiler when ENABLE is set to FALSE.\n\nThe heating by BOOST is edge-triggered and leads during each rising edge\n\nat BOOST to exactly one heating process. Due to a rising edge on BOOST\n\nwhile ENABLE = TRUE the heating is started immediately until the maxi￾mum temperature is reached. The boiler will be loaded to provide maxi￾mum heat capacity. The inputs REQ_1 and REQ_2 serve any time to provi￾de a preset temperature (or T_REQUEST_1 T_REQUEST_2). REQ can be\n\nused for example to provide a higher temperature for legionella disinfecti￾on or for other purposes. The provision of the request temperatures is\n\nmade by measuring at the upper temperature sensor and with a 2-point\n\ncontrol whose hysteresis is set by T_REQUEST_HYS.\n\nStatus\n\n1 upper temperature sensor has exceeded the upper limit temperature\n\n2 upper temperature sensor has fallen below the lower limit temperature\n\n3 lower temperature sensor has exceeded the upper limit temperature\n\n4 lower temperature sensor has fallen below the lower limit temperature\n\n24 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\n5 Water pressure in the bufer is too small\n\n100 Standby\n\n101 BOOST recharge\n\n102 Standard recharge\n\n103 Recharge on Request Temperature 1\n\n104 Recharge on Request Temperature 2\n\nThe following", "type": "FUNCTION", "name": "BOILER", "input": [{"name": "T_UPPER", "type": "REAL", "description": "Input upper temperature sensor"}, {"name": "T_LOWER", "type": "REAL", "description": "Lower input temperature sensor"}, {"name": "PRESSURE", "type": "REAL", "description": "Input pressure sensor"}, {"name": "ENABLE", "type": "BOOL", "description": "Indicates hot water requirement"}, {"name": "REQ_1", "type": "BOOL", "description": "Input requirements for predefined temperature 1"}, {"name": "REQ_2", "type": "BOOL", "description": "Input requirements for predefined temperature 2"}, {"name": "BOOST", "type": "BOOL", "description": "Input requirement for immediate deployment"}], "output": [{"name": "HEAT", "type": "BOOL", "description": "Output loading circuit"}, {"name": "ERROR", "type": "BOOL", "description": "Error signal indicating operational issues"}, {"name": "STATUS", "type": "Byte", "description": "ESR compliant status output based on sensor readings and operational state"}], "in/out": [], "return_value": {"type": "NONE", "description": "This function does not return a value."}, "setup": [{"name": "T_UPPER_MIN", "type": "REAL", "description": "Minimum temperature at the top, default is 50"}, {"name": "T_UPPER_MAX", "type": "REAL", "description": "Maximum temperature at the top, default is 60"}, {"name": "T_LOWER_ENABLE", "type": "BOOL", "description": "Indicates if lower temperature sensor exists (FALSE if not available)"}, {"name": "T_LOWER_MAX", "type": "REAL", "description": "Maximum temperature of bottom, default is 60"}, {"name": "T_REQUEST_1", "type": "REAL", "description": "Temperature requirement 1, default is 70"}, {"name": "T_REQUEST_2", "type": "REAL", "description": "Temperature requirement 2, default is 50"}, {"name": "T_REQUEST_HYS", "type": "REAL", "description": "Hysteresis control, default is 5"}, {"name": "T_PROTECT_HIGH", "type": "REAL", "description": "Upper limit temperature protection, default is 80"}, {"name": "T_PROTECT_LOW", "type": "REAL", "description": "Lower limit temperature protection, default is 10"}]}
{"title": "Building Version Function", "description": "BUILDING_VERSION provides if IN = FALSE the current version number as\n\nDWORD. If IN is set to TRUE then the release date of the current version as\n\na DWORD is returned.", "type": "FUNCTION", "name": "BUILDING_VERSION", "input": [{"name": "IN", "type": "BOOL", "description": "If TRUE, the module provides the release date; if FALSE, it provides the current version number."}], "output": [{"name": "Version", "type": "DWORD", "description": "The version number or release date of the library, depending on the input parameter IN."}], "return_value": {"type": "DWORD", "description": "Returns the version number or release date as a DWORD."}}
{"title": "Oil and Gas Burner Control Module", "description": "BURNER is a control interface for oil or gas burner operating at kilowatt\n\nhour meter and counter. The module controls a two-stage burner with op￾tional fuel oil warming. The input IN is the control input that starts the bur￾ner only when the input OVER_TEMP is FALSE. OVER_TEMP is the boiler\n\nthermostat protection, which gets TRUE, if the boiler temperature has rea￾ched the maximum temperature. A burner start begins with the fuel oil\n\n26 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\nwarming, by PRE_HEAT gets TRUE. Then it waits for a signal at the input\n\nOIL_TEMP. If the signal OIL_TEMP is within the PRE_HEAT_TIME not TRUE\n\nand the oil temperature is not reached, the start sequence is interrupted\n\nand the output FAIL is set to TRUE. At the same time the error is spent at\n\nthe Output STATUS. After fuel oil warming the motor gets on and sets the\n\nfan in operation. Then after a defned time the ignition is switched and the\n\noil valve is opened. If no response of the fame sensor after specifed time\n\n(SAFETY_TIME), the module shows a failure. A fault is signaled even if the\n\nfame sensor responds before the ignition. If after a successful ignition, the\n\nfame breaks of and the set-variable MULTIPLE_IGNITION = TRUE, imme￾diately a ignition is started. A second stage is activated automatically after\n\nthe time STAGE2_DELAY when the input STAGE2 is TRUE.\n\nIf a fault occurs, then the module is locked for a fxed time LOCKOUT_TIME \n\nand only after this time a RST can start the operation again. During the \n\nLOCKOUT_TIME, the RST Input must be FALSE. A TRUE at input OVER_TEMP \n\nstops immediately every action and reports the error 9.\n\nThe status output indicates the current state of the module:\n\n 110 = Wait for Start signal ( Standby ) \n\n111 = startup sequence is executed\n\n112 = burner runs on stage 1\n\n113 = burner runs at stage 2\n\nA number of error conditions are provided at the output STATUS, if an error \n\nis present:\n\n1 = fuel oil warming has not responded within the PRE_HEAT_TIME\n\n2 = fame sensor is active during fuel oil warming (PRE_HEAT_TIME)\n\n3 = fame sensor is active during the aeration period \n\n(PRE_VENTILATION_TIME)\n\n4 = safety time ( Safety_Time) was passed without a fame \n\n5 = fame stops in operation\n\n9 = boiler overheating contact has tripped\n\nTrace recording of a normal boot sequence:\n\n27 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\nThe signal IN starts the sequence with the output PRE_HEAT. After rea￾ching the oil temperature (OIL_TEMP = TRUE), the engine started and the\n\nPRE_VENTILATION_TIME (time from engine start until oil valve is open)\n\nawaited. After an adjustable time (PPR_IGNITION_TIME) before opening the\n\noil valve, the ignition is turned on. The ignition is then on until the\n\nPOST_IGNITION_TIME has expired. The operating time per stage is measu￾red independently in seconds.\n\nIN over\n\ntem\n\np\n\nOil\n\ntem\n\np\n\nFlam\n\ne\n\nRst mo￾tor\n\nOil\n\ncoil\n\nPre\n\nhea\n\nt\n\nig￾nite\n\nSta￾tus\n\nfail\n\n0 0 - - 0 0 0 0 0 110 0 Wait mode\n\n1 0 0 0 0 0 0 1 0 111 0 fuel oil warming period\n\n1 0 1 0 0 1 0 1 0 111 0 aeration period\n\n1 0 1 0 0 1 0 1 1 111 0 pre ignition period\n\n1 0 1 0 0 1 1 1 1 111 0 Open valve stage 1\n\n1 0 1 1 0 1 1 1 1 112 0 Flame burns post ignition period\n\n1 0 1 1 0 1 1 1 0 112 0 Burner is running\n\n1 0 1 0 0 1 1 1 1 111 0 Post-ignition after fame stops\n\n- 1 - - - - - - - 9 1 Boiler overheating\n\n1 0 1 1 0 1 0 1 0 3 1 foreign light failure\n\nThe following time diagram explains the various setup times and the \n\nsequence:\n\nThe timing diagram refects the exact time line:\n\nt1 = pre-heating (PRE_HEAT_TIME)\n\nt2 = prepurge (PRE_VENT_Time)\n\nt3 = pre ignition time (PRE_IGNITE_TIME)\n\n28 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\nt4 = safety time (SAFETY_TIME)\n\nt5 = post ignition time (POST_IGNITE_TIME)\n\nt6 = delay for stage 2 (STAGE2_DELAY)", "type": "FUNCTION", "name": "BURNER", "input": [{"name": "IN", "type": "BOOL", "description": "Control input that starts the burner; must be TRUE to begin the sequence."}, {"name": "Stage2", "type": "BOOL", "description": "Control input for activating stage 2 of the burner."}, {"name": "OVER_TEMP", "type": "BOOL", "description": "Temperature limit of the boiler; TRUE if the boiler temperature has reached the maximum."}, {"name": "OIL_TEMP", "type": "BOOL", "description": "Thermostat signal indicating the readiness of fuel oil warming."}, {"name": "FLAME", "type": "BOOL", "description": "Flame sensor signal; TRUE if the flame is detected."}, {"name": "RST", "type": "BOOL", "description": "Reset input for failure reset; used to clear faults."}, {"name": "RST_TIMER", "type": "BOOL", "description": "Reset input for the service counter."}], "output": [{"name": "MOTOR", "type": "BOOL", "description": "Control signal for the motor to start the fan."}, {"name": "COIL1", "type": "BOOL", "description": "Control signal for oil valve level 1."}, {"name": "COIL2", "type": "BOOL", "description": "Control signal for oil valve stage 2."}, {"name": "PRE_HEAT", "type": "BOOL", "description": "Indicates that fuel oil warming is in progress."}, {"name": "IGNITE", "type": "BOOL", "description": "Signal that triggers the ignition process."}, {"name": "KWH", "type": "REAL", "description": "Kilo watt hour meter indicating the energy usage."}, {"name": "STATUS", "type": "BYTE", "description": "Status output indicating the current state of the burner module."}, {"name": "FAIL", "type": "BOOL", "description": "Indicates fault presence; TRUE if an error has occurred."}], "in/out": [{"name": "RUNTIME1", "type": "UDINT", "description": "Operating time level 1 measured in seconds."}, {"name": "RUNTIME2", "type": "UDINT", "description": "Operating time level 2 measured in seconds."}, {"name": "CYCLES", "type": "UDINT", "description": "Number of burner starts measured."}], "return_value": {"type": "VOID", "description": "No return value; the function modifies the outputs based on the inputs and internal state."}}
{"title": "CLICK Button Interface", "description": "CLICK is a button interface which automatically adjusts to the connected\n\nswitch. If a switch is connected, CLICK recognize themselves whether it is\n\nan opener or closer, and then evaluates each case only the frst fank.\n\nWith the setup variable T_DEBOUNCE the debounce of the buttons is set.\n\nIt is set by default to 10 ms. The time T_RESetup is used to decide whe￾ther a make or break is connected to the input IN. If the input is for more\n\nthan this time in a state, it is assumed as rest mode. The default value is 1\n\nminute for T_RESetup. With short successive pulses a single, double or tri￾ple pulse evaluated and switches according to the output SINGLE, DOUBLE\n\nor TRIPLE. If the pulse is longer than the setup time T_SHORT or a pause\n\nbetween two pulses is longer than T_PAUSE, then the pulse sequence is in￾terrupted and the corresponding output is set, until the contrary input pul￾se is inactive. The output Q corresponds to the input pulse. However, it is\n\nalways High- active. An ESR compliant status output indicates state chan￾ges to subsequent ESR compliant evaluation modules. With short pulses,\n\nthe output SINGLE (one pulse), DOUBLE (2 pulses) or TRIPLE (3 pulses) is\n\n47 Version 1.00\n\nChapter 6. Electrical Engineering\n\nselected. The corresponding output remains at least one cycle active and\n\nas a maximum of as long as the input IN remains active. \n\nStatus\n\n110 Inactive input\n\n111 Output SINGLE activated\n\n112 Output DOUBLE activated\n\n113 TRIPLE output enabled", "type": "FUNCTION", "name": "CLICK", "input": [{"name": "IN", "type": "BOOL", "description": "Control input for buttons."}, {"name": "T_DEBOUNCE", "type": "TIME", "description": "Debounce time for buttons. Default is 10 ms."}, {"name": "T_SHORT", "type": "TIME", "description": "Maximum time for short pulse."}, {"name": "T_PAUSE", "type": "TIME", "description": "Maximum interval between two pulses."}, {"name": "T_RESetup", "type": "TIME", "description": "Reconfiguration time. Default is 1 minute."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output corresponding to the input pulse, always High-active."}, {"name": "SINGLE", "type": "BOOL", "description": "Output for a single key press."}, {"name": "DOUBLE", "type": "BOOL", "description": "Output for a double key press."}, {"name": "TRIPLE", "type": "BOOL", "description": "Output for a triple key press."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output indicating state changes."}], "in/out": [], "return_value": null}
{"title": "CLICK_MODE Function Block", "description": "CLICK_MODE is a push button interface which decodes both simple click,\n\ndouble click or long keystrokes. With short pulses a single or double-click\n\nis decoded switches the according outputs SINGLE or DOUBLE, each for a\n\none cycle. If the pulse is longer than the T_LONG, then the output TP_OUT\n\nis set for one cycle to TRUE and the output LONG remains TRUE until the\n\ninput IN goes back to FALSE.", "type": "FUNCTION", "name": "CLICK_MODE", "input": [{"name": "IN", "type": "BOOL", "description": "Control input for buttons."}], "output": [{"name": "SINGLE", "type": "BOOL", "description": "Output for simple key press."}, {"name": "DOUBLE", "type": "BOOL", "description": "Output for double key press."}, {"name": "LONG", "type": "BOOL", "description": "Output for a long key press."}, {"name": "TP_LONG", "type": "BOOL", "description": "Pulse when long key press starts."}], "in/out": [], "return_value": {"type": "void", "description": "No return value as this is a procedure based function."}, "parameters": [{"name": "T_LONG", "type": "TIME", "description": "Decoding time for long key press."}]}
{"title": "Debounce Function Module", "description": "DEBOUNCE can debounce the signal from a switch or button and pass it\n\ndebounced to the output Q . If PM = FALSE, the output Q follows the input\n\nsignal IN debounced, if PM = TRUE at the input IN a leading edge is detec-\n\n49 Version 1.00\n\nChapter 6. Electrical Engineering\n\nted and the output Q remains only for one cycle to TRUE. The debounce\n\ntime for the input IN is set by the time TD.", "type": "FUNCTION", "name": "DEBOUNCE", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal from the switch or push button."}, {"name": "TD", "type": "TIME", "description": "Debounce time for the input signal."}, {"name": "PM", "type": "BOOL", "description": "Operation mode: TRUE for pulse mode operation, FALSE for standard debounced output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Debounced output signal."}], "in/out": [], "return_value": null}
{"title": "Water Vapor Concentration Calculation", "description": "DEW_CON calculates from the relative humidity (RH) and \n\ntemperature (T in °C) water vapor concentration in the air. The result is \n\ncalculated in grams/m³. RH is shown in % (50 = 50%) and indicates the \n\ntemperature in °C.\n\nThe module is suitable for temperatures from -40°C to +90°C.", "type": "FUNCTION", "name": "DEW_CON", "input": [{"name": "RH", "type": "REAL", "description": "Relative Humidity in percentage (e.g., 50 for 50%)"}, {"name": "T", "type": "REAL", "description": "Temperature in degrees Celsius"}], "output": [{"name": "REAL", "type": "REAL", "description": "Water vapor concentration in grams per cubic meter (g/m³)"}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the calculated water vapor concentration in g/m³"}}
{"title": "Relative Humidity Calculation", "description": "DEW_RH calculates the relative humidity in % (50 = 50%)\n\nfrom the water vapor concentration (VC) and temperature (T in ° C) . The\n\nwater vapor concentration is measured in grams / m³. DEW_CON can be\n\nused for calculations in both directions (heat up and cool down). If cooled\n\ntoo much, then the maximum relative humidity limited to 100%. For calcu￾lation of the dew point of the module DEW_TEMP is recommended.\n\nIn the following example, the case will be calculated when air is cooled\n\nfrom 30°C and relative humidity of 50% by 6 degrees. The module\n\nDEW_CON provides the moisture concentration in the outlet air of 30° and\n\nDEW_RH calculates the resulting relative humidity RH of 69.7%. These cal￾culations are important when air is cooled or heated. In air conditioning\n\nsystems a resulting relative humidity of 100% hast to be avoided due to\n\ncondensation and the resulting problems.\n\nSee also the modules DEW_CON and DEW_TEMP.", "type": "FUNCTION", "name": "DEW_RH", "input": [{"name": "VC", "type": "REAL", "description": "Water vapor concentration in air, measured in grams/m³."}, {"name": "T", "type": "REAL", "description": "Temperature in degrees Celsius."}], "output": [{"name": "REAL", "type": "REAL", "description": "Relative humidity in percentage (%)."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated relative humidity.", "fields": []}}
{"title": "Dew Point Calculation", "description": "DEW_TEMP calculate the dew point temperature from the re￾lative humidity (RH) and temperature (T in ° C). The relative humidity is gi￾ven in % (50 = 50%).\n\n31 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "DEW_TEMP", "input": [{"name": "RH", "type": "REAL", "description": "Relative Humidity in percentage (e.g., 50 represents 50%)"}, {"name": "T", "type": "REAL", "description": "Temperature in degrees Celsius"}], "output": [{"name": "dewPoint", "type": "REAL", "description": "Calculated dew point temperature"}], "return_value": {"type": "REAL", "description": "The dew point temperature calculated from the input parameters"}}
{"title": "DIMM_2 Intelligent Dimmer Function Module", "description": "DIMM_2 is an intelligent Dimmer for 2-button operation. The Dimmer can\n\nbe set via the setup variables. The time T_DEBOUNCE is used to debounce\n\nthe switch and is set by default to 10ms. A start limitation T_ON_MAX swit￾ches the output of when it is exceeded. The times T_DIMM_Start and\n\nT_DIMM set the timing cycle of the Dimmers . \n\nWith the inputs of SET and RST, the output Q can be switched on or of at\n\nany time. SET sets the output OUT to the predetermined value VAL, RST\n\nsets OUT to 0 if the setup variable RST_OUT is set to TRUE. RST switches\n\nD1 and D2 in addition to FALSE. SET and RST may be used for connection\n\nof Fire alarm systems or Alarm systems. In case of fre or burglary all the\n\nlights can be set to On with SET or switched to of with RST when exit of\n\nthe building. \n\nWhile switch on and of the last output value of the dimmer remains at the\n\noutput OUT, only a FALSE at output Q switches the light of and a TRUE at\n\nQ switch the lamp on again. While switching on by a short press the mpo￾dule limits the output OUT for a minimum MIN_ON and a maximum of at\n\nleast MAX_ON. If, for example, the dimmer set to 0 then the module is au￾tomatically set the output OUT to 50 and vice versa, the output OUT if it is\n\nhigher than MAX_ON is limited to MAX_ON. These parameters are to pre￾vent that after switching-on a very small value at the output OUT occures\n\nand despite active Q no light is switched on. By the parameter MIN_ON a\n\nminimum value of light is defned when switched on. Conversely, for ex￾ample: the light in the bedroom is prevented to apply full brightness im￾mediately. If the parameter SOFT_DIMM set to TRUE, the DIM starts at\n\npower on with a long button press every time at 0. In addition to the func￾tion of the dimmer, at the inputs I1 and I2 a doubleclick is decoded and\n\nputs the outputs of D1 resp. D2 for one cycle to TRUE. If the setup variable\n\nD?_TOGGLE is set to TRUE then the output D? is inverted by dou￾ble-clicking. The outputs D1 and D2 can be used to to switch additional\n\nconsumer or events with a double-click. An output of D? may be attributed\n\nto the SET input and the dimmer also be set to a predefned value defn￾ded by VAL using a double-click. If the setup variable DBL?_SET set to\n\nTRUE, so a corresponding double-click does not modify the associated out￾put D? but the value of the variable DBL?_POS is passed through to the\n\noutput OUT and the output Q is switched on if necessary. OUT is the value\n\nof the dimmer and is defned as an I/O variable external. This has the ad￾vantage that the value of the dimmer can be infuenced externally at any\n\ntime and can be reconstructed even after a power failure. OUT can be de￾fned if desired retentive and persistent.\n\nThe following table shows the operating status of the dimmer:\n\n51 Version 1.00\n\nChapter 6. Electrical Engineering\n\nI1 I2 SET RST Q D1 D2 OUT\n\nsingle - 0 0 1 - - LIMIT(MIN_ON,OUT,MAX_ON)\n\n- single 0 - -\n\ndouble - 0 0 TOG\n\nPULSE\n\n- double 0 0 TOG\n\nPULSE\n\nlong - 0 0 1 - dimm up\n\nstart from 1 if SOFT_DIMM = TRUE\n\n- long 1 dimm down and turn of at 0\n\n- - 1 0 ON - VAL\n\n- - 0 1 OFF OFF 0 wenn RST_OUT = TRUE", "type": "FUNCTION", "name": "DIMM_2", "input": [{"name": "SET", "type": "BOOL", "description": "Input for switching the output to VAL"}, {"name": "VAL", "type": "BYTE", "description": "Value for the SET operation"}, {"name": "I1", "type": "BOOL", "description": "Tax receipt for Taster1, On"}, {"name": "I2", "type": "BOOL", "description": "Tax receipt for switch2, down"}, {"name": "RST", "type": "BOOL", "description": "Entrance to switch of the output"}, {"name": "T_DEBOUNCE", "type": "TIME", "description": "Debounce time for buttons"}, {"name": "T_ON_MAX", "type": "TIME", "description": "Start limitation"}, {"name": "T_DIMM_START", "type": "TIME", "description": "Reaction time to dim"}, {"name": "T_DIMM", "type": "TIME", "description": "Time for a dimming ramp"}, {"name": "MIN_ON", "type": "BYTE", "description": "Minimum value of OUT at startup"}, {"name": "MAX_ON", "type": "BYTE", "description": "Maximum value of OUT at startup"}, {"name": "RST_OUT", "type": "BOOL", "description": "If Reset is true, OUT is set to 0"}, {"name": "SOFT_DIMM", "type": "BOOL", "description": "Soft start at power-up"}, {"name": "DBL1_TOG", "type": "BOOL", "description": "Enable Toggle for D1"}, {"name": "DBL2_TOG", "type": "BOOL", "description": "Enable Toggle for D2"}, {"name": "DBL1_SET", "type": "BOOL", "description": "Enable Value for doubleclick I1"}, {"name": "DBL2_SET", "type": "BOOL", "description": "Enable Value for doubleclick I2"}, {"name": "DBL1_POS", "type": "BYTE", "description": "Value for doubleclick at I1"}, {"name": "DBL2_POS", "type": "BYTE", "description": "Value for doubleclick at I2"}], "output": [{"name": "Q", "type": "BOOL", "description": "Output control for the dimmer"}, {"name": "D1", "type": "BOOL", "description": "Output for doubleclick at I1"}, {"name": "D2", "type": "BOOL", "description": "Output for doubleclick at I2"}], "in/out": [{"name": "OUT", "type": "BYTE", "description": "Dimmer Output"}], "return_value": {"type": null, "description": null}}
{"title": "Intelligent Dimmer Function Module", "description": "DIMM_I is an intelligent Dimmer which automatically adjusts itself to ope￾ning or closing switches without reconfgure. The Dimmer can be set via\n\nthe setup variables. Over time T_DEBOUNCE the button is debounced. It is\n\nset by default to 10ms. The time variable T_RECONFIG decide whether a\n\nopen or close switch is connected at the Input IN. If the input is longer\n\nthan that defned T_RECONFIG defned time in a state, this is assumed to\n\nrest position. If the start limitation T_ON_MAX is exceeded, it switches the\n\noutput automatically of. The times and T_DIMM_Start T_DIMM sets the ti￾ming of the Dimmers fxed. \n\nWith the inputs of SET and RST, the output Q can be switched on or of at\n\nany time. SET relies on the output OUT through the by VAL predetermined\n\nvalue , RST sets OUT to 0 if the setup RST_OUT variable is set to TRUE.\n\nRST also switch DBL to FALSE. SET and RST may be used to connect fre\n\nalarm systems or alarm systems. WIth SET all the lights in an emergency\n\ncase can be centrally enabled or disabled with RST when leaving the buil￾ding. \n\nWhile switch on and of the last output value of the dimmer remains at the\n\noutput OUT, only a FALSE at output Q switches the light of, and a TRUE at\n\nQ switch the lamp on again. When switching from a short press limits the\n\nmodule the output OUT to at least MIN_ON and maximal MAX_ON. If, for\n\nexample, the dimmer to 0, the device automatically sets the output OUT\n\nto 50 and vice versa, the output OUT gets, if it is higher than MAX_ON, is\n\nlimited to MAX_ON.\n\nThese parameters are intended to prevent present after turning a very\n\nsmall value at the output OUT and Q active terms despite no light. By the\n\nparameter MIN_ON a minimum value of light is defned when switched on.\n\n53 Version 1.00\n\nChapter 6. Electrical Engineering\n\nConversely, for example: the light in the bedroom is prevented by\n\nMAX_ON to apply full brightness immediately after switch on. If the para￾meter SOFT_DIMM set to TRUE, the dimming starts at power on with a\n\nlong button press every time at 0. In addition to the function of the dim￾mer a double-click on the input IN is decoded to the output DBL for one\n\ncycle to TRUE. If the setup variable DBL_TOGGLE is set to TRUE, the out￾put DBL is inverted each time at a double click.\n\nThe output DBL can be used to switch additional load or events with a\n\ndouble-click. The output DBL can be switched to the input SET and the\n\ndimmer can be set to a predefned value VAL using a double-click. OUT is\n\nthe value of the dimmer and is defned as an I/O variable external. This\n\nhas the advantage that the value of the dimmer can be changed external￾ly at any time and can be reconstructed even after a power failure. OUT\n\ncan be defned if desired retentive and persistent.\n\nThe following table shows the operating status of the dimmer:\n\nIN SET RST Q DIR DBL OUT\n\nsingle 0 0 NOT Q OUT<127 - LIMIT(MIN_ON,OUT,MAX_ON)\n\ndouble 0 0 - - TOG\n\nPULSE\n\nlong 0 0 ON NOT DIR - Ramp up or down depending on DIR\n\nstart at 0 when soft_dimm = TRUE and Q = 0\n\nreverse direction if 0 or 255 is reached\n\n- 1 0 ON OUT<127 - VAL\n\n- 0 1 OFF UP OFF 0 wenn RST_OUT = TRUE", "type": "FUNCTION", "name": "DIMM_I", "input": [{"name": "SET", "type": "BOOL", "description": "Input for switching the output to the value specified by VAL."}, {"name": "VAL", "type": "BYTE", "description": "Value for the SET operation."}, {"name": "IN", "type": "BOOL", "description": "Control input for buttons."}, {"name": "RST", "type": "BOOL", "description": "Entrance to switch off the output."}, {"name": "T_DEBOUNCE", "type": "TIME", "description": "Debounce time for buttons, default set to 10ms."}, {"name": "T_RESETUP", "type": "TIME", "description": "Reconfiguration time to determine switch state."}, {"name": "T_ON_MAX", "type": "TIME", "description": "Start limitation time to prevent immediate output activation."}, {"name": "T_DIMM_START", "type": "TIME", "description": "Reaction time to initiate dimming."}, {"name": "T_DIMM", "type": "TIME", "description": "Time for a dimming ramp."}, {"name": "MIN_ON", "type": "BYTE", "description": "Minimum value of OUT at startup, default is 50."}, {"name": "MAX_ON", "type": "BYTE", "description": "Maximum value of OUT at startup, default is 255."}, {"name": "SOFT_DIMM", "type": "BOOL", "description": "If TRUE, dimming begins after switch on at 0."}, {"name": "DBL_TOGGLE", "type": "BOOL", "description": "If TRUE, the output DBL is inverted at each double-click."}, {"name": "RST_OUT", "type": "BOOL", "description": "If TRUE, OUT is set to 0 when reset is activated."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the state of the dimmer."}, {"name": "DBL", "type": "BOOL", "description": "Output for the double-click signal."}, {"name": "OUT", "type": "BYTE", "description": "Dimmer output value which can be adjusted."}], "in/out": [], "return_value": {"type": "VOID", "description": "The function executes its operations without returning a value."}}
{"title": "Fluorescent Lamp Control Module", "description": "F_LAMP is an interface for fuorescent lamp. The output LAMP follows the\n\ninput DIMM and SWITCH. If DIMM is not connected, the default is of 255 is\n\nused and the output LAMP passes 0-255 depending on SWITCH. The out￾puts ONTIME and CYCLES count the operating time of the light bulb in se￾conds and the switching cycles. Both values are externally stored and can\n\nbe saved permanent or persistent , more info, see the module ONTIME. A\n\nTRUE at the input RST resets both values to 0. The setup variables\n\nT_NO_DIMM determines after which length of time a new lamp the dim￾ming may be done. This value, when not otherwise set by the user,\n\ndefaults to 100 hours. Fluorescent lamps may not use reduced levels of\n\nbrightness, during the frst 100 hours , otherwise your life is shortened\n\ndramatically. By a RST at replace of the lamp module it prevents the dim￾ming in the initial phase. The output state is ESR compatible, and can re￾port operating conditions, but also pass a message to change the bulb.\n\nThe default time T_MAINTENANCE is, if not modifed by the user, 15000\n\nhours. If T_Maintenance set to 0 so no message is generated for lamp re￾placement. \n\nStatus\n\n110 Lamp of\n\n111 Lamp on, no dimming allowed\n\n112 Lamp on, dim allowed\n\n120 Call for lamp replacement\n\nThe following example shows the use of the module F_LAMP in conjunction\n\nwith DIMM_I:\n\n55 Version 1.00\n\nChapter 6. Electrical Engineering", "type": "FUNCTION", "name": "F_LAMP", "input": [{"name": "SWITCH", "type": "BOOL", "description": "Input from the dimmer switch."}, {"name": "DIMM", "type": "BYTE", "description": "Input from the dimmer that determines the output level."}, {"name": "RST", "type": "BOOL", "description": "Input to reset the operating time and cycles counter."}], "output": [{"name": "LAMP", "type": "BYTE", "description": "Dimmer output based on the input DIMM and SWITCH."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output indicating the operational conditions of the lamp."}], "in/out": [{"name": "ONTIME", "type": "UDINT", "description": "Operating time of the lamp in seconds."}, {"name": "ONTIME", "type": "UDINT", "description": "Count of the operating time in seconds."}], "return_value": {"type": "void", "description": "No return value as this is a function that controls outputs based on inputs."}, "setup": [{"name": "T_NO_DIMM", "type": "UINT", "description": "Time in hours after which dimming may commence for a new lamp, default is 100 hours."}, {"name": "T_Maintenance", "type": "UINT", "description": "Reporting time for lamp replacement in hours, default is 15000 hours."}]}
{"title": "Heat Index Calculation", "description": "HEAT_INDEX calculates at high temperatures and high humidity wind chill.\n\nThe function is defned for temperatures above 20 ° C and relative humidi￾ty > 10%. For values outside the defned range, the input temperature is\n\npassed out.", "type": "FUNCTION", "name": "HEAT_INDEX", "input": [{"name": "T", "type": "REAL", "description": "Temperature in degrees Celsius (°C)"}, {"name": "RH", "type": "REAL", "description": "Relative Humidity percentage (%)"}], "output": [{"name": "Heat Temperature Index", "type": "REAL", "description": "The calculated Heat Temperature Index based on the provided temperature and humidity inputs."}], "return_value": {"type": "REAL", "description": "The Heat Temperature Index or the input temperature if the conditions are not met."}}
{"title": "HEAT_METER", "description": "HEAT_METER is a calorimeter. The amount of heat Y is measured in joules.\n\nThe inputs of TF and TR are the forward and return temperature of the me￾dium. At the input LPH the fow rate in liters/hour, resp. the fow rate per\n\npulse of E is specifed. The property of E is determined by the Setup Varia￾ble PULSE_MODE. PULSE_MODE = FALSE means the amount of heat is ad￾ded continuously as long as E is set to TRUE. PULSE_MODE = TRUE means\n\nthe amount of heat with each rising edge of E is added up. The\n\nPULSE_MODE is turned on the use of heat meters, while indicating the fow\n\nrate in liters per pulse at the input LPH and the heat meter is connected\n\nat the input E. If no fow meter is present, the the pump signal is connec￾ted at input E and at the input LPH given the pump capacity in liters per\n\nhour. When using a fow meter with analog output is the output to be con￾verted to liters per hour and sent to the input LPH, the input E will be set\n\nto TRUE. With the setup variables CP, DENSITY and CONTENT the 2nd\n\ncomponent of the medium is specifed. For operation with pure water no\n\ndetails of CP, DENSITY and CONTENT are necessary. [fzy] If a mixture of\n\nwater and a 2nd media is present, with CP the specifc heat capacity in\n\nJ/KgK, with DENSITY the density in KG/l and with CONTENT the portion of\n\nthe 2nd component is specifed. A proportion of 0.5 means 50% and 1\n\nwould be equivalent to 100%. The setup variables RETURN_METER is spe￾cifed whether the fow meter sits in forward or reverse. RETRUN_METER =\n\nTRUE for return measurement and FALSE for fow measurement. The out￾put C of the module represents the current consumption. The current con￾sumption is measured in joules/hour, and is determined at the intervals of\n\nAVG_TIME. \n\nThe module has the following default values that are active when the cor￾responding values are not set by the user:\n\nPULSE_MODE = FALSE\n\nRETURN_METER = FALSE\n\nAVG_TIME = T#5s", "type": "FUNCTION", "name": "HEAT_METER", "input": [{"name": "TF", "type": "REAL", "description": "Forward temperature in °C"}, {"name": "TR", "type": "REAL", "description": "Return temperature in °C"}, {"name": "LPH", "type": "REAL", "description": "Flow in L/h or L/pulse"}, {"name": "E", "type": "BOOL", "description": "Enable Signal"}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset input"}, {"name": "CP", "type": "REAL", "description": "Specific heat capacity of the second component"}, {"name": "DENSITY", "type": "REAL", "description": "Density of the second component"}, {"name": "CONTENT", "type": "REAL", "description": "Share of the second component, where 1 = 100%"}, {"name": "PULSE_MODE", "type": "BOOL", "description": "Pulse counter if TRUE"}, {"name": "RETURN_METER", "type": "BOOL", "description": "Flow meter in the return if TRUE"}, {"name": "AVG_TIME", "type": "TIME", "description": "Time interval for current consumption"}], "output": [{"name": "C", "type": "REAL", "description": "Current consumption in joules/hour"}, {"name": "Y", "type": "REAL", "description": "Amount of heat in joules"}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the current consumption calculated based on the inputs", "fields": []}}
{"title": "Heating Curve Calculation", "description": "HEAT_TEMP calculates the fow temperature of the outside temperature by\n\nthe following formula:\n\nTY = TR + T_DIFF / 2 * TX + (TY_Setup - T_DIFF / 2 - TR) * TX ^ (1 / C)\n\nwith: TR = T_INT + OFFSET\n\nTX := (TR - T_EXT) / (T_INT_Setup - T_EXT_Setup);\n\nThe parameters of the heating curve are given by the setup variables\n\nTY_C (design fow temperature), T_INT_C (room temperature at the design\n\npoint), T_EXT_C (outside temperature at the design point) and T_DIFF_C\n\n(diference between forward / reverse at the design point). With the input\n\nofset, the heating curve of room reduction (negative ofset) or room\n\nboost (positive ofset) can be adjusted. With the setup variables TY_MIN\n\nand TY_MAX the fow temperature can be kept to a minimum and maxi￾mum value. The input T_REQ is used to support requirements such as ex￾ternal temperature from the boiler. If T_REQ is larger than the calculated\n\nvalue of the heating curve for TY so TY is set to T_REQ. The limit of\n\nTY_MAX does not apply to the request by T_REQ. The setup variable H de￾fne at what outside temperature the heating curve is calculated, as long\n\nas T_EXT + H >= T_INT +OFFSET the TY stays at 0 and HEAT is FALSE. If\n\nT_EXT + H < T_INT + OFFSET the HEAT is TRUE and TY outputs the calcu-\n\n34 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\nlated fow temperature. The setup variable C determines the curvature of\n\nthe heating curve. The curvature is dependent on the heating system.\n\nConvectors: C = 1.25 – 1.45\n\nPanel radiators: C = 1.20 – 1.30\n\nRadiators: C = 1.30\n\nPipes: C = 1.25\n\nFloor heating:C = 1.1\n\nThe larger the value of C, the stronger the heating curve is curved. A va￾lue of 1.0 gives a straight line as the heating curve. Typical heating sys￾tems are between 1.0 and 1.5.\n\nThe graph shows Heating curves for the design temperatures of 30 - 80°C\n\nfow temperature at -20 ° C outside temperature and at a C of 1.33:", "type": "FUNCTION", "name": "HEAT_TEMP", "input": [{"name": "T_EXT", "type": "REAL", "description": "Outside temperature (TAT)"}, {"name": "T_INT", "type": "REAL", "description": "Nominal room temperature"}, {"name": "OFFSET", "type": "REAL", "description": "Lowering or raising the room temperature"}, {"name": "T_REQ", "type": "REAL", "description": "Temperature requirement"}], "output": [{"name": "TY", "type": "REAL", "description": "Heating circuit flow temperature"}, {"name": "HEAT", "type": "BOOL", "description": "Heating requirement indicator"}], "in/out": [], "return_value": {"type": "NONE", "description": "The function does not return any value, but outputs are provided in the output parameters."}}
{"title": "Legionella Disinfection Control Function", "description": "LEGIONELLA has an integrated timer, which starts on a certain day (DAY)\n\nto a specifc time of day (T_START) the desinfection. For this purpose, the\n\nexternal interface of the local time is needed (DT_IN). Each time can be\n\nstarted the desinfection by hand with a rising edge at MANUAL.\n\n36 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\nThe process of a disinfection cycle is started with an internal start due to\n\nDT_IN, DAY and T_START, or by a rising edge at MANUAL. The output HEAT\n\nis TRUE and controls the heating of the boiler. Within the heating time\n\nT_MAX_HEAT the input signal TEMP_BOILER must go then to TRUE. If the\n\ntemperature is not reported within T_MAX_HEAT, the output STATUS pas￾ses fault. The disinfection then continues anyway. After the heating, the\n\nheater temperature is measured and reheated if necessary by TRUE at the\n\noutput HEAT. When the boiler temperature is reached, PUMP gets TRUE\n\nand the circulation pump is turned on. Then the individual valves are ope￾ned one after the other and measured, whether within the time\n\nT_MAX_RETURN the temperature war reached at the return of the circulati￾on line. If a return fow thermometer is not present, the input T_MAX_RE￾TURN remains open.\n\nThe output STATE is compatible with ESR, and may give the following mes￾sages:\n\n110 On hold \n\n111 Sequence run\n\n1 Boiler temperature was not reached\n\n2 Return temperature at Ventil0 was not reached\n\n3..8 Return temperature at valve1..7 was not reached\n\nSchematic internal structure of Legionella:\n\nThe following example shows a simulation for 2 disinfection circuits with \n\ntrace recording. In this structure, VALVE2 connected to the input RST and \n\nthus disrupts the sequence after of two circles:\n\n37 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "LEGIONELLA", "input": [{"name": "MANUAL", "type": "BOOL", "description": "Manual Start Input to initiate the disinfection process"}, {"name": "TEMP_BOILER", "type": "REAL", "description": "Current temperature of the boiler"}, {"name": "TEMP_RETURN", "type": "REAL", "description": "Current temperature of the circulation pipe"}, {"name": "DT_IN", "type": "DATE_TIME", "description": "Current date and time for disinfection scheduling"}, {"name": "RST", "type": "BOOL", "description": "Asynchronous Reset signal"}], "output": [{"name": "HEAT", "type": "BOOL", "description": "Control signal for hot water heating"}, {"name": "PUMP", "type": "BOOL", "description": "Control signal for circulation pump"}, {"name": "STATUS", "type": "Byte", "description": "ESR compliant status output signaling the process state"}, {"name": "Valve0", "type": "BOOL", "description": "Control outputs for the first valve of circulation"}, {"name": "Valve1", "type": "BOOL", "description": "Control outputs for the second valve of circulation"}, {"name": "Valve2", "type": "BOOL", "description": "Control outputs for the third valve of circulation"}, {"name": "Valve3", "type": "BOOL", "description": "Control outputs for the fourth valve of circulation"}, {"name": "Valve4", "type": "BOOL", "description": "Control outputs for the fifth valve of circulation"}, {"name": "Valve5", "type": "BOOL", "description": "Control outputs for the sixth valve of circulation"}, {"name": "Valve6", "type": "BOOL", "description": "Control outputs for the seventh valve of circulation"}, {"name": "Valve7", "type": "BOOL", "description": "Control outputs for the eighth valve of circulation"}, {"name": "RUN", "type": "BOOL", "description": "Indicates if the disinfection sequence is currently running"}], "in/out": [{"name": "T_START", "type": "TOD", "description": "Time of day at which the disinfection starts"}, {"name": "DAY", "type": "INT", "description": "Weekday on which the disinfection starts"}, {"name": "TEMP_SET", "type": "REAL", "description": "Set temperature for the boiler"}, {"name": "TEMP_OFFSET", "type": "REAL", "description": "Offset to apply to the temperature readings"}, {"name": "TEMP_HYS", "type": "REAL", "description": "Hysteresis value for temperature control"}, {"name": "T_MAX_HEAT", "type": "TIME", "description": "Maximum time allowed to heat the boiler"}, {"name": "T_MAX_RETURN", "type": "TIME", "description": "Maximum time until the input TEMP_RETURN to be active after VALVE"}, {"name": "TP_0", "type": "TIME", "description": "Disinfection time for the first circulation loop"}, {"name": "TP_1", "type": "TIME", "description": "Disinfection time for the second circulation loop"}, {"name": "TP_2", "type": "TIME", "description": "Disinfection time for the third circulation loop"}, {"name": "TP_3", "type": "TIME", "description": "Disinfection time for the fourth circulation loop"}, {"name": "TP_4", "type": "TIME", "description": "Disinfection time for the fifth circulation loop"}, {"name": "TP_5", "type": "TIME", "description": "Disinfection time for the sixth circulation loop"}, {"name": "TP_6", "type": "TIME", "description": "Disinfection time for the seventh circulation loop"}, {"name": "TP_7", "type": "TIME", "description": "Disinfection time for the eighth circulation loop"}], "return_value": {"type": "None", "description": "The function does not return a value."}}
{"title": "Pulse Length Classification", "description": "PULSE_LENGTH sets on an input pulse at IN one of the 3 outputs. The out￾put SHORT is for one cycle TRUE if the input pulse is less than T_SHORT.\n\nThe output MIDDLE will TRUE for one cycle when the input pulse length is\n\nbetween T_SHORT and T_LONG. The output of LONG is set when the input\n\npulse has exceeded T_LONG and remains to TRUE, as the input pulse is set\n\nto TRUE.", "type": "FUNCTION", "name": "PULSE_LENGTH", "input": [{"name": "IN", "type": "BOOL", "description": "Input pulse signal to be classified."}], "output": [{"name": "SHORT", "type": "BOOL", "description": "TRUE for one cycle if the input pulse is less than T_SHORT."}, {"name": "MIDDLE", "type": "BOOL", "description": "TRUE for one cycle if the input pulse length is between T_SHORT and T_LONG."}, {"name": "LONG", "type": "BOOL", "description": "TRUE if the input pulse exceeds T_LONG."}], "in/out": [], "return_value": null, "setup": [{"name": "T_SHORT", "type": "TIME", "description": "Maximum length for a short pulse."}, {"name": "T_LONG", "type": "TIME", "description": "Minimum length for a long pulse."}]}
{"title": "PULSE_T Function Module", "description": "PULSE_T generates an output pulse length of T2 when the input IN is less\n\nthan T1 to TRUE. If the input IN for longer than T1 to TRUE, the output Q\n\nfollows the input IN and is at the same time with IN set to FALSE. If IN is\n\nlonger than the time T2 to TRUE, the output is after the time T2 automati￾cally reset to FALSE. A further impulse at IN while the output is TRUE sets\n\nthe output with the falling edge of IN to FALSE. Is input IN longer than the\n\ntime T2 set to TRUE, the output Q automatically defaults to FALSE after\n\nthe time T2 .\n\nThe following chart shows the input pulse that applies to T1 longer and\n\nthe output Q follows the input. Then, at input IN a short pulse (less than\n\nT1) is generated and the output remains active until a further pulse to IN\n\nresets it again. Another short pulse at the input IN sets the output to\n\nTRUE, until it will be deleted automatically after the expiry of the time T2.", "type": "FUNCTION", "name": "PULSE_T", "input": [{"name": "IN", "type": "BOOL", "description": "Input pulse signal."}, {"name": "T1", "type": "TIME", "description": "Minimum time threshold for output to follow input."}, {"name": "T2", "type": "TIME", "description": "Maximum time for the output pulse duration."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output pulse signal."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return any value."}}
{"title": "Saturation Vapor Pressure Calculation", "description": "SDD calculates the saturation vapor pressure for water vapor in air. The\n\ntemperature T is given in Celsius. The result can be calculated for air over\n\nice (ICE = TRUE) and for air to water (ICE = FALSE). The scope of the func-\n\n38 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition\n\ntion is -30°C to 70°C over water and at -60°C to 0°C on ice. The calculati￾on is performed according to the Magnus formula.", "type": "FUNCTION", "name": "SDD", "input": [{"name": "T", "type": "REAL", "description": "Air temperature in °C."}, {"name": "ICE", "type": "BOOL", "description": "TRUE for air over ice and FALSE for air over water."}], "output": [{"name": "saturation_vapor_pressure", "type": "REAL", "description": "Saturation vapor pressure in Pa."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated saturation vapor pressure."}}
{"title": "Saturation Vapor Pressure Calculation for Ammonia", "description": "SDD_NH3 calculates the saturation vapor pressure for ammonia (NH3).\n\nThe temperature T is given in Celsius. The scope of the function is located\n\nat -109°C to 98°C.", "type": "FUNCTION", "name": "SDD_NH3", "input": [{"name": "T", "type": "REAL", "description": "Temperature in °C."}], "output": [{"name": "saturation_vapor_pressure", "type": "REAL", "description": "Saturation vapor pressure in Pa."}], "in/out": [], "return_value": {"type": "REAL", "description": "The computed saturation vapor pressure for ammonia based on the input temperature.", "fields": []}}
{"title": "Saturation Vapor Pressure Calculation for Ammonia", "description": "SDT_NH3 calculates the saturation temperature for ammonia (NH3). The\n\npressure P is given in Celsius. The scope of the function is 0.001 bar to 60\n\nbar.", "type": "FUNCTION", "name": "SDT_NH3", "input": [{"name": "T", "type": "REAL", "description": "Temperature in °C"}], "output": [{"name": "REAL", "type": "REAL", "description": "Saturation vapor pressure in Pa"}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated saturation vapor pressure for ammonia in Pa"}}
{"title": "Intelligent Switch Function Module", "description": "SWITCH_I is an intelligent switch which automatically adjusts to the\n\nconnected switch or push-button switches. If a switch is connected, the\n\noutput follows each switching edge of the switch. However, if a push-but￾ton switch is connected, SWITCH_I detects whether there is an opener or\n\ncloser, and then evaluates only the frst edge. The setup variable\n\nT_ON_MAX determines after which time the output is switched of automa-\n\n58 Version 1.00\n\nChapter 6. Electrical Engineering\n\ntically. With the SET and RST inputs the output can be switched at any\n\ntime to 100% or of. Applications are the message of smoke detectors or\n\nalarm systems. The time T_DEBOUNCE serves to debounce the switch and\n\nis by default set to 10ms. The time T_RESetup is used to decide whether a\n\nclose switch or break switch is connected to the input IN. If the input is for\n\nmore than this time in a state, it is assumed as rest mode.", "type": "FUNCTION", "name": "SWITCH_I", "input": [{"name": "SET", "type": "BOOL", "description": "Input for switching the output to 100%"}, {"name": "IN", "type": "BOOL", "description": "Control input for buttons"}, {"name": "RST", "type": "BOOL", "description": "Entrance to switch off the output"}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating the state of the intelligent switch"}], "in/out": [], "return_value": {"type": "void", "description": "No return value as this function handles output directly"}, "setup": [{"name": "T_DEBOUNCE", "type": "TIME", "description": "Debounce time for buttons, default set to 10ms"}, {"name": "T_RESetup", "type": "TIME", "description": "Reconfiguration time to determine connected switch type"}, {"name": "T_ON_MAX", "type": "TIME", "description": "Start limitation time after which the output is switched off automatically"}]}
{"title": "SWITCH_X Function Module", "description": "SWITCH_X is an interface for up to 6 push-buttons. The individual buttons\n\nare debounced with T_DEBOUNCE and switch the respective outputs Q1 to\n\nQ6. IN3 to IN6 are directly connected to the outputs when they be opera￾ted alone. IN1 and IN2 generate a pulse for one cycle after they are pres￾sed. If one of the inputs IN3 up to N6 is pressed during input IN1 or IN2 is\n\noperated , then no output pulse passed to Q1 to Q6, but the corresponding\n\noutput Q31 to Q62 is activated. Q42, for example, is activated if IN4 is\n\noperated while IN2 is operated. Q2 and Q4 are then inactive.\n\nSWITCH_X thus allows the inputs IN3 to IN6 to realize a triple occupancy\n\nand select it by pressing IN1 or IN2 and a further input.\n\n59 Version 1.00\n\nChapter 6. Electrical Engineering", "type": "FUNCTION", "name": "SWITCH_X", "input": [{"name": "IN1", "type": "BOOL", "description": "Push button input 1. Generates a pulse for one cycle after it is pressed."}, {"name": "IN2", "type": "BOOL", "description": "Push button input 2. Generates a pulse for one cycle after it is pressed."}, {"name": "IN3", "type": "BOOL", "description": "Push button input 3. Directly influences output Q3."}, {"name": "IN4", "type": "BOOL", "description": "Push button input 4. Directly influences output Q4."}, {"name": "IN5", "type": "BOOL", "description": "Push button input 5. Directly influences output Q5."}, {"name": "IN6", "type": "BOOL", "description": "Push button input 6. Directly influences output Q6."}, {"name": "T_DEBOUNCE", "type": "TIME", "description": "Debounce time for buttons."}], "output": [{"name": "Q1", "type": "BOOL", "description": "Switch output 1 activated by IN1."}, {"name": "Q2", "type": "BOOL", "description": "Switch output 2 activated by IN2."}, {"name": "Q3", "type": "BOOL", "description": "Switch output 3 activated by IN3."}, {"name": "Q4", "type": "BOOL", "description": "Switch output 4 activated by IN4."}, {"name": "Q5", "type": "BOOL", "description": "Switch output 5 activated by IN5."}, {"name": "Q6", "type": "BOOL", "description": "Switch output 6 activated by IN6."}, {"name": "Q31", "type": "BOOL", "description": "Output activated if IN1 or IN2 is pressed while IN3 is activated."}, {"name": "Q32", "type": "BOOL", "description": "Output activated if IN1 or IN2 is pressed while IN4 is activated."}, {"name": "Q41", "type": "BOOL", "description": "Output activated if IN1 or IN2 is pressed while IN5 is activated."}, {"name": "Q42", "type": "BOOL", "description": "Output activated if IN1 or IN2 is pressed while IN6 is activated."}], "in/out": [], "return_value": null}
{"title": "SW_RESetup - Intelligent Push Button Interface", "description": "SW_RECONFIG is an intelligent push button interface, it can debounce the\n\ninput and automatically detects whether a break contact element or clo￾sing contact is connected to the input IN. If at input IN a break contact ele￾ment is detected, so the output Q is inverted. If a closing contact is\n\nconnected to the input IN, the module creates for each change of state of\n\n57 Version 1.00\n\nChapter 6. Electrical Engineering\n\nthe switch with a pulse with length TR. TD is the bounce time and TR the\n\nreconfguration time. If the input IN remains longer than the reconfgurati￾on time is, in a state, the output is FALSE, and will thus pass the next pul￾se at the input to an active high pulse. In the practical installation techni￾ques this may be a great advantage if some switches are somtimes are\n\nbreak contact elements and sometimes connected as closing contact.\n\nThe following chart illustrates the operation of the module:", "type": "FUNCTION", "name": "SW_RECONFIG", "input": [{"name": "IN", "type": "BOOL", "description": "Push button input"}, {"name": "TD", "type": "TIME", "description": "Debounce time for input"}, {"name": "TR", "type": "TIME", "description": "Reconfiguration time"}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Tank Level Control Function", "description": "TANK_LEVEL used to keep the level of liquid in a tank constant. At the in￾put LEVEL a niveau sensor is connected and at the output VALVE, the after\n\nfeed valve is connected. To debounce at the troubled fll niveau the level\n\nsensor, its response time can be adjusted using the Setup variable\n\nLEVEL_DELAY_TIME. At the input LEVEL with TRUE is displayed, that the li￾quid level is too low. After the input was through for the time LEVEL_DE￾LAY_TIME to TRUE, the output VALVE set to TRUE to replenish fuid. During\n\nthe replenishment process MAX_VALVE_TIME is monitored, and if VALVE\n\nstay longer than this time to TRUE, an alarm is generated in the case of\n\nsensor failures or leaks to prevent a permanent refll. The module also mo￾nitors the input LEAK which for normal operation must always be FALSE.\n\nOnce LEAK goes to TRUE the refll immediately stops and a alarm is gene￾rated. LEAK is used to connect leak sensors and or additional niveau sen￾sors above the normal levels. If f an alarm occurs in the operation the mo￾dule will stop any refll until the error has been fxed and the input ACLR is\n\nset to TRUE shortly. At the ESR status output all operating conditions are\n\npassed with ESR messages.\n\nSTATUS = 1, leak sensor (LEAK) is enabled.\n\nSTATUS = 2, refll time (MAX_VALVE_TIME) was exceeded.\n\nSTATUS = 100, level is reached, feeding of.\n\nSTATUS = 101, ACLR was pressed.\n\nSTATUS = 102, level below, make-up runs.\n\n41 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "TANK_LEVEL", "input": [{"name": "LEVEL", "type": "BOOL", "description": "Input for level sensor indicating whether the liquid level is too low."}, {"name": "LEAK", "type": "BOOL", "description": "Input for leak sensors; expected to be FALSE during normal operation."}, {"name": "ACLR", "type": "BOOL", "description": "Input to reset the alarm."}, {"name": "MAX_VALVE_TIME", "type": "TIME", "description": "Maximum allowed time for the refill valve to be activated."}, {"name": "LEVEL_DELAY_TIME", "type": "TIME", "description": "Response time to debounce the level sensor input."}], "output": [{"name": "VALVE", "type": "BOOL", "description": "Output signal to the refill valve."}, {"name": "ALARM", "type": "BOOL", "description": "Alarm output indicating a fault condition."}, {"name": "STATUS", "type": "BYTE", "description": "ESR compliant status output representing the current operational state."}], "in/out": [], "return_value": {"type": "void", "description": "No return value as this is a control function."}}
{"title": "Tank Volume Calculation", "description": "TANK_VOL1 calculates the contents of a tube-shaped tanks flled to the\n\nheight H.", "type": "FUNCTION", "name": "TANK_VOL1", "input": [{"name": "TR", "type": "REAL", "description": "Radius of the tank."}, {"name": "TL", "type": "REAL", "description": "Length of the tank."}, {"name": "H", "type": "REAL", "description": "Filling height of the tank."}], "output": [{"name": "Real", "type": "REAL", "description": "Contents of the tank to the fill level."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated volume of the tank based on the given parameters."}}
{"title": "Tank Volume Calculation", "description": "TANK_VOL2 calculates the contents of\n\na spherical tanks flled to the height H.\n\n42 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "TANK_VOL2", "input": [{"name": "TR", "type": "REAL", "description": "Radius of the tank"}, {"name": "H", "type": "REAL", "description": "Filling height of the tank"}], "output": [{"name": "Real", "type": "REAL", "description": "Contents of the tank to the fill level"}], "in/out": [], "return_value": {"type": "REAL", "description": "Contents of the tank calculated based on the radius and height.", "fields": []}}
{"title": "External Temperature Processing for HVAC Control", "description": "TEMP_EXT processes up to 3 remote temperature sensor and provides by\n\nmode a selected external temperature to the heating control. It calculates\n\nsignals for heating and cooling depending on outdoor temperature, date\n\nand time. With the input T_EXT_Setup is defned how the output value\n\nT_EXT is determined. If T_EXT_Setup is not connected, then the default va￾lue 0. The setup values T_EXT_MIN and T_EXT_Max set the minimum and\n\nmaximum value of the external temperature inputs. If these limits are ex￾ceeded or not reached, a fault in the sensor or broken wire is assumed and\n\ninstead of measured valued the default value T_EXT_DEFAULT is used. \n\nT_EXT_Setup T_EXT\n\n0 Average of T_EXT1, T_ext2 and T_ext3\n\n1 T_EXT1\n\n2 T_EXT2\n\n3 T_EXT3\n\n4 T_EXT_DEFAULT\n\n5 Lowest value of the 3 inputs\n\n6 Highest value of 3 inputs\n\n7 Average value of 3 inputs\n\nWith the setup variables HEAT_PERIOD and COOL_PERIOD is defnes when\n\nheating and when cooling is allowed. The decision, whether the output\n\nHEAT or COOL gets TRUE, still depends on the setup values HEAT_START -\n\nHEAT_STOP and COOL_START and COOL_STOP. These values can be def￾ned separately for day and night. The start of a day and night period can\n\nbe determined by the setup variables START_DAY and START_NIGHT. A va￾riable CYCLE_TIME specifes how often the outside temperature to be que￾ried.\n\n44 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "TEMP_EXT", "input": [{"name": "T_EXT1", "type": "REAL", "description": "External temperature sensor 1"}, {"name": "T_EXT2", "type": "REAL", "description": "External temperature sensor 2"}, {"name": "T_EXT3", "type": "REAL", "description": "External temperature sensor 3"}, {"name": "T_EXT_Setup", "type": "BYTE", "description": "Query mode for selecting output value method"}, {"name": "DT_IN", "type": "DATE_TIME", "description": "Current date and time"}], "output": [{"name": "T_EXT", "type": "REAL", "description": "Calculated outside temperature output"}, {"name": "HEAT", "type": "BOOL", "description": "Heating signal output"}, {"name": "COOL", "type": "BOOL", "description": "Cooling signal output"}], "in/out": [], "return_value": null}
{"title": "TIMER_1 Function Module", "description": "TIMER_1 generates at selectable days a week, an output event Q with a\n\nprogrammable duration (DURATION) and a fxed starting time START. DTI\n\nprovides the module the local time. START and DURATION sets the time of\n\nday and duration of the event. The input DAY determines on which days of\n\nweek the event is generated. IF DAY is set to 0, thus no event is produced.\n\nA DURATION = 0 indicates that the output is only set for one cycle. The re￾sulted output signal can also run past midnight, or it may be longer than a\n\nday. The maximum pulse duration, however is 49 days (T#49d). The input\n\nDAY is of type BYTE and the bits 0..7 defne the days of the event. Bit 0\n\ncorresponds to Sunday, bit 1 Saturday .. Bit 6 corresponds to Monday. If\n\nthe bits 0..6 in DAY are set, so every day an event is generated, otherwise\n\nonly for those days for which the corresponding bit is set. The input De￾fault is, if it is not connected, set to 2#0111_1111, and thus is the module\n\nis active every day. An additional Enable Input E can unlock the module.\n\nThis input is TRUE if it is not connected.", "type": "FUNCTION", "name": "TIMER_1", "input": [{"name": "E", "type": "BOOL", "description": "Enable input to unlock the module."}, {"name": "DTI", "type": "DATE_TIME", "description": "Current local date and time input."}, {"name": "START", "type": "TOD", "description": "Time of day when the output event starts."}, {"name": "DURATION", "type": "TIME", "description": "Duration for which the output signal is active."}, {"name": "DAY", "type": "BYTE", "description": "Selection of the week days for the event. Bits 0-6 represent Sunday to Saturday."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating event activation."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "TIMER_2 Function Module", "description": "TIMER_2 generates an output event with a programmable duration. DT_IN\n\nprovides the building block the local time. START_TIME and DURATION spe￾cifes the time of day and the duration of the event. The input mode deter￾mines how often and on which days the event are produced. HOLIDAY is\n\nan input signal indicating whether the current day is a holiday. This signal\n\ncan be generated by the module HOLIDAY.\n\nMODE Q\n\n0 no output is created\n\n1 only on Monday\n\n2 only on Tuesday\n\n3 only on Wednesday\n\n4 only on Thursday\n\n5 only on Friday\n\n6 only on Saturday\n\n7 Only on Sunday\n\n11 every day\n\n12 every 2 days\n\n13 every 3 days\n\n14 every 4 days\n\n15 every 5 days\n\n16 every 6 days\n\n20 Weekdays (Monday to Friday)\n\n21 Saturday and Sunday\n\n22 Working days (weekdays excluding public holidays)\n\n23 Holidays and weekends\n\n24 Only on holidays\n\n25 First day of the month\n\n26 Last day of the month\n\n27 Last day of the year (December 31)\n\n61 Version 1.00\n\nChapter 6. Electrical Engineering\n\n28 First day of the year (January 1)", "type": "FUNCTION", "name": "TIMER_2", "input": [{"name": "DT_IN", "type": "DATE_TIME", "description": "Date and time input."}, {"name": "START_TIME", "type": "TOD", "description": "Start time for the output signal."}, {"name": "DURATION", "type": "TIME", "description": "Duration of the output signal."}, {"name": "MODE", "type": "BYTE", "description": "Selects the mode for daily output. Determines on which days the event is produced."}, {"name": "HOLIDAY", "type": "BOOL", "description": "Indicates whether the current day is a holiday."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the event state."}], "in/out": [], "return_value": {"type": "void", "description": "No return value for this function."}}
{"title": "TIMER_EVENT_DECODE Function", "description": "TIMER_EVENT_DECODE allows the programming of Timer Events using\n\nstring instead of loading the structure TIMER_EVENT. \n\nThe events are specifed as follows:\n\n<Typ;Kanal; Day , Start, duration, country, Lor> \n\nElement Description Formats\n\n< > Start and stop characters of\n\nthe record.\n\nType Type of event (as described in\n\nTIMER_P4)\n\n'123', 2#0101, 8#33, 16#FF\n\nChannel to be programmed channel '123', 2#0101, 8#33, 16#FF\n\n62 Version 1.00\n\nChapter 6. Electrical Engineering\n\nDay Selection number eg Day '123', 2#0101, 8#33, 16#FF, 'Mo'\n\n'MO, DI, DO'\n\nStart Start time (daytime) 'TOD#12:00'\n\nDuration Duration of the event 'T#1h3m22s'\n\nCountry And logical link '123', 2#0101, 8#33, 16#FF\n\nLor logical or link '123', 2#0101, 8#33, 16#FF\n\nField Day has, depending on the type of event diferent meanings and can\n\nalso be specifed with week as a text or a list of the week. The input LANG\n\nspecifes the used language, 0 = the default language set in the setup , 1\n\n= english, .... more info about languages, see the section data types.", "type": "FUNCTION", "name": "TIMER_EVENT_DECODE", "input": [{"name": "EVENT", "type": "STRING", "description": "The event string formatted as <Typ;Kanal; Day, Start, Duration, Country, Lor>."}, {"name": "LANG", "type": "INT", "description": "Language selection for the event description. 0 = default language, 1 = English, etc."}], "output": [{"name": "TIMER_BOOK", "type": "STRUCT", "description": "The output structure containing the programmed timer events.", "fields": [{"name": "EventType", "type": "STRING", "description": "Type of the event as described in TIMER_P4."}, {"name": "Channel", "type": "STRING", "description": "Channel to be programmed."}, {"name": "DaySelection", "type": "STRING", "description": "Selection of day for the event."}, {"name": "StartTime", "type": "STRING", "description": "Start time for the event."}, {"name": "Duration", "type": "STRING", "description": "Duration of the timer event."}, {"name": "Country", "type": "STRING", "description": "Country logical link."}, {"name": "Lor", "type": "STRING", "description": "Logical or link."}]}], "in/out": [], "return_value": null}
{"title": "Twilight Timer Control Module", "description": "TIMER_EXT is a Timer specifcally for outdoor lighting or other loads are to\n\nbe turned on at twilight. The output Q is at fxed times of the day ON and\n\nOFF, in addition, the output can before twilight turned ON and after twi￾light turned of automatically. An additional input SWITCH can switch the\n\noutput, regardless of the respective time of day, on and of. The inputs\n\nENA, ON, OFF and MAN provide a detailed automatic and manual control\n\nof the output. If ENA is not connected, the module is still Enabled because\n\nits internal Default is TRUE. The following table provides detailed informa￾tion about the operating conditions of the block. \n\nENA ON OFF MAN SWITCH Timer Q STATUS\n\nL - - - - - L 104\n\nH H L - - - H 101\n\nH L H - - - L 102\n\nH H H X - - MAN 103\n\nH L L -  - NOT Q 110\n\nH L L - - TOD = T_DAY_START H 111\n\nH L L - - TOD = T_DAY_STOP L 112\n\nH L L - - TOD = SUN_RISE - T_RISE_START H 113\n\nH L L - - TOD = SUN_RISE + T_RISE_STOP L 114\n\nH L L - - TOD = SUN_SET - T_SET_START H 115\n\nH L L - - TOD = SUN_SET + T_SET_STOP L 116\n\n64 Version 1.00\n\nChapter 6. Electrical Engineering\n\nThe setup variables ENABLE_SUNDAY, SATURDAY and HOLIDAY defne\n\nwhether the block is active on Saturdays, Sundays and public holidays. If\n\nthe module should not be ON at public holidays, at the input HOLIDAY to\n\nthe module HOLIDAY must be connected from the library, this module indi￾cates a TRUE if today is a public holiday. The setup variables T_SET_START,\n\nT_SET_STOP, T_RISE_START, T_RISE_STOP, T_DAY_START and T_DAY_STOP\n\nset the switching times. if one of those variables is T#0s or TOD#00:00\n\nthen the switch time is inactive. This means that ie. T_SET_START (switch\n\nbefore sunset) only turns on when it is set to at least 1 second. the modu￾le gets ON the output Q, at a time T_DAY_START, and in reach of\n\nT_DAY_STOP OFF again when one of the two times ( T_DAY_START or\n\nT_DAY_STOP) TOD#0:00 is and the corresponding switch process is not\n\nexecuted. The module switch ON at the time T_RISE_START before sunrise\n\n(SUN_RISE), and OFF reaching of T_RISE_STOP after sunrise again. The\n\nsame is for the times at sunset.", "type": "FUNCTION", "name": "TIMER_EXT", "input": [{"name": "ENA", "type": "BOOL", "description": "Module enable"}, {"name": "ON", "type": "BOOL", "description": "Forces the output Q to TRUE"}, {"name": "OFF", "type": "BOOL", "description": "Forces the output Q to FALSE"}, {"name": "MAN", "type": "BOOL", "description": "Control input when ON = OFF = TRUE"}, {"name": "SWITCH", "type": "BOOL", "description": "Push button input for manual switching"}, {"name": "DT_IN", "type": "DATETIME", "description": "Input for date and time of day"}, {"name": "SUN_SET", "type": "TOD", "description": "Time of sunset"}, {"name": "SUN_RISE", "type": "TOD", "description": "Time of sunrise"}, {"name": "HOLIDAY", "type": "BOOL", "description": "Input for holiday module"}, {"name": "Setup HOLIDAY", "type": "BOOL", "description": "Input for holiday module setup"}, {"name": "T_SET_START", "type": "TIME", "description": "Start-before sunset time"}, {"name": "T_SET_STOP", "type": "TIME", "description": "Time after sunset to stop"}, {"name": "T_DAY_STOP", "type": "TOD", "description": "Time after daytime to stop"}, {"name": "T_RISE_START", "type": "TIME", "description": "ON time before sunrise"}, {"name": "T_DAY_START", "type": "TOD", "description": "Turn-on time of day"}, {"name": "T_RISE_STOP", "type": "TIME", "description": "OFF time after sunrise"}, {"name": "ENABLE_SATURDAY", "type": "BOOL", "description": "Active on Saturdays if TRUE"}, {"name": "ENABLE_SUNDAY", "type": "BOOL", "description": "Active on Sundays if TRUE"}, {"name": "ENABLE_HOLIDAY", "type": "BOOL", "description": "Active on Holiday if TRUE"}], "output": [{"name": "Q", "type": "BOOL", "description": "Switch output"}, {"name": "Status", "type": "BYTE", "description": "ESR compliant status output"}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "TIMER_P4 - Universal Programmable Timer", "description": "TIMER_P4 is a universal programmable Timer which has a lot of opportuni￾ties. In addition to events at fxed times, also events depending on exter￾nal hours like sunrise or sunset can be programmed. In addition to the ti￾ming programm, all outputs can be linked fexible with logic inputs. Up to\n\n63 independently programmable events are possible, and the user has\n\nvirtually unlimited possibilities. \n\nThe programming of the Timers are done via an ARRAY [0..63] OF\n\nTIMER_EVENT. It can thereby any number of events per channel and over￾lapping events can be generated. \n\nThe data structure TIMER_EVENT contains the following felds:\n\nData field Data Type Description\n\nCHANNEL BYTE Channel number\n\n66 Version 1.00\n\nChapter 6. Electrical Engineering\n\nTYPE BYTE Event Type\n\nDAY BYTE Day or another number\n\nSTART TOD Start time\n\nDURATION TIME Duration of the event\n\nLAND BYTE Mask to be logical and\n\nLOR BYTE Mask for Logical OR\n\nLAST DWORD Internal use\n\nThe data feld is the CHANNEL specifed for the relevant event channel, if\n\nmultiple channels are to be switched simultaneously per channel must be\n\nprogrammed in separate events. The TYPE of event determines what type\n\nof event is to be programmed, see the overview in the following table. DAY\n\ndefnes either a bitmask days of the week (Bit7 = MO, bit0 = SO), or the\n\nday of the month/year or a defned another number or count depending\n\non the event type. START is the start time (TIMEOFDAY) of the event, with\n\nevents as a function of an external time START can also defne a time dif￾ference. The duration defnes independent of the type of event, how long\n\nthe event lasts. Was an event is started the timer remembers in the data\n\nstructure each day, so that each event is run at maximum once per day. If\n\nseveral events per day and channel are to be defned, they can be pro￾grammed independently by multiple events. LAND and LOR defne logical\n\nmasks for additional logical links, a detailed description of the possible\n\nstate of links is provided below in the text. \n\nThe Timer has an additional manual input which allows to override outputs\n\nmanually. If MAN = TRUE is the 4 lowest bits of the input MI are passed to\n\nthe outputs Q. The input is an enable input and must be set to TRUE for\n\nnormal operation, if ENQ is set to FALSE, all outputs remain at FALSE. The\n\nModule can always be reset by means of the asynchronous input RST,\n\nhere all running events are deleted. The input OFS is used only when more\n\nof the TIMER modules are cascaded, the value of OFS then determines\n\nwhich channel number the frst output of the module has. If OFS is set to 4\n\nfor example, so the modules does not response to the corresponding\n\nchannel number 0..3 but to the channels 4..7. Thus, multiple devices are\n\ncascaded in a simple way. \n\nThe STATUS output is an ESR compliant status output which reports the\n\noperating states of the module.\n\nSTATUS = 100 (The module is disabled , ENQ = FALSE) \n\nSTATUS = 101 (manual operation, MAN = TRUE)\n\nSTATUS = 102 (automatic operation)\n\n The following example shows two cascaded timers : \n\n67 Version 1.00\n\nChapter 6. Electrical Engineering\n\n Block diagram of the timers : \n\nIf a programmed event occurs then the corresponding timer of the selec￾ted channel is started with the pre-defned time period. The channel out￾put can be linked by logical AND with up to 4 inputs L0..L3, only the inputs\n\nare associated, which are defnded in the event mask LAND with a 1 . con￾tains the mask LAND not a 1 (2#00000000) then no input is connected to\n\nthe output. If the mask LAND contains, for example 2#00001001) then the\n\noutput signal of the Timer is linked with the logic inputs L0 and L3 by AND.\n\nThe output in this case is only true if both an event the Timer has started\n\nand at the same time L0 and L3 are TRUE. After the AND link the output\n\ncan be additionally connected to any logic inputs in the same manner\n\nusing the mask LOR OR. \n\nThe following events can be programmed:\n\nTYP\n\nE\n\nDescription DAY Start Duration\n\n1 daily event - Start time Duration\n\n2 Event on selected days of the week B0..6 Start time Duration\n\n3 Event every N days N Start time Duration\n\n10 Weekly Event Day of the Start time Duration\n\n68 Version 1.00\n\nChapter 6. Electrical Engineering\n\nweek\n\n20 monthly event Day of the\n\nmonth\n\nStart time Duration\n\n21 last day of the month - Start time Duration\n\n30 annual event Day of the\n\nyear\n\nStart time Duration\n\n31 last day of the year - Start time Duration\n\n40 Event to leap days - Start time Duration\n\n41 Event on holidays - Start time Duration\n\n42 on holidays and weekends - Start time Duration\n\n43 Event during the week - Start time Duration\n\n50 External event after time 0,1 Ofset Duration\n\n51 Event before external time 0,1 -Ofset Duration\n\n52 Output to time+set ofset 0,1,2 Ofset\n\n53 Output to time + ofset delete 0,1,2 Ofset\n\n54 output to time - set ofset 0,1,2 Ofset\n\n55 output to time - ofset delete 0,1,2 Ofset\n\nEvent Types:\n\n1. daily event\n\nat a daily event, only channel number, start time and duration of the\n\nevent is programmed. The feld DAY has no meaning.\n\n2. Event on selected days of the week\n\nat this event the timer is started at selectable day of the week. In feld\n\nDAY is here defned by a bit mask at which days during the week days the\n\nevent has to be started. Monday = bit 6,.... Sunday = bit 0. The event will\n\nstart only on weekdays when the corresponding bit in feld DAY is TRUE. \n\n3. Event every N days\n\nthis after a period of N days, the defned event starts. In feld DAY is speci￾fed, after how many days the event starts. N = 3 means that the event\n\nwill be started every 3 days. N can take this value of 1..255.\n\n10. Weekly Event\n\n69 Version 1.00\n\nChapter 6. Electrical Engineering\n\nhere, a event is started on a particular day in the week, the corresponding\n\nday is defned in the feld DAY: 1 = Monday ..... 7 = Sunday.\n\n20. monthly event\n\nAt monthly events in the feld DAY the corresponding day of the month is\n\ndefned in which the event will take place. DAY = 24 means that the event\n\nrespectively at 24th of a month starts.\n\n21. End of the month\n\nAs months have no fxed length, it is also useful to generate an event on\n\nthe last day of a month. In this mode the DAY has no meaning.\n\n30. annual event\n\nAt annual events, in the feld DAY the corresponding day of the year is de￾fned, in which the event starts. DAY = 33 means that each event at the\n\n33rd day of the year starts, which corresponds to the 2nd of February.\n\n31. End of the year\n\nAs years have no fxed length, it is also useful to generate an event on the\n\nlast day of the year . In this mode the DAY has no meaning. The event is\n\nproduced on 31. December.\n\n40. Event to leap days\n\nThis event is only generated on 29. February, which is only in a leap year.\n\nDAY here has no meaning.\n\n41. Event on holidays\n\nThis event is only generated when the input HOLY = TRUE. At this input\n\nmust be connected the module HOLIDAY from the library. If this mode is\n\nnot used, the input HOLY remains open. The Field Day has no meaning\n\nhere.\n\n42. Event on holidays and weekends\n\nThis event is generated when the input HOLY = TRUE, or a Saturday or\n\nSunday is present. At this input JHOLY must be connected for this purpose\n\nthe module HOLIDAY from the library. If this mode is not used, the input\n\nHOLY remains open. The Field Day has no meaning here.\n\n43. Event during the week\n\nThis event is generated only during the week days from Monday to Friday.\n\nThe Field Day has no meaning here.\n\n50. External event after time\n\nHere is generated a daily event that depends on an external time. IN feld\n\nSTART here is not the start time itself, but rather set the ofset of the ex￾ternal time. In feld DAY is indicated the external time that is used as a re￾ference. DAY = 0 means TREF_0, and DAY = 1 corresponds TREF_1. An\n\nevent after external time, for example, is an event 1 hour after sunset. In\n\nthis case, TREF_1 (DAY must be on 1) passes the time of sunset, and in\n\n70 Version 1.00\n\nChapter 6. Electrical Engineering\n\nthe feld Start the time 01:00 (one hour ofset) is specifed. The times for\n\nsunrise and sunset can be fed from the module SUN_TIME from the library.\n\n51. Event before external time\n\nHere is generated a daily event that depends on an external time. IN feld\n\nSTART here is not the start time itself, but rather set the ofset of the ex￾ternal time. In feld DAY is indicated the external time that is used as a re￾ference. DAY = 0 means TREF_0, and DAY = 1 corresponds TREF_1. An\n\nevent before external time, for example, is an event 1 before after sunset.\n\nIn this case, TREF_1 (DAY must be on 1) passes the time of sunset, and in\n\nthe feld Start the time 01:00 (one hour ofset before TREF_1) is specifed.\n\nThe times for sunrise and sunset can be fed from the module SUN_TIME\n\nfrom the library.\n\n52 Set output after external time\n\nAn event of type 52 switches the output on at reaching an external time +\n\nSTART. The external time is TREF1 when DAY = 1 or TREF_0 if DAY = 0. If\n\nDAY > 1 the external time is 0. The output remains then to TRUE until it is\n\noverwritten with a new event or is deleted by a separate event.\n\n53 Delete output with external ofset\n\nAn event of type 53 switches the output of at reaching an external time +\n\nSTART. The external time is TREF1 when DAY = 1 or TREF_0 if DAY = 0. Is\n\nDAY > 1 is the external time is 0.\n\n54 Set output with negative ofset\n\nAn event of type 54 switches the output on at reaching an external time -\n\nSTART. The external time is TREF1 when DAY = 1 or TREF_0 if DAY = 0. If\n\nDAY >1 the external time is 0. The output is then held to TRUE until it is\n\noverwritten with a new event or deleted by a separate event.\n\n55 Output with negative ofset\n\nAn event of type 55 switches the output of when reaching the external\n\ntime - START. The external time is TREF1 when DAY = 1 or TREF_0 if DAY =\n\n0. Is DAY > 1 is the external time is 0.\n\n71 Version 1.00\n\nChapter 7. Blind Modules\n\n7. Blind Modules", "type": "FUNCTION", "name": "TIMER_P4", "input": [{"name": "DTIME", "type": "DATE_TIME", "description": "Input date and time for the timer operations."}, {"name": "TREF_0", "type": "TOD", "description": "Reference time 0 for scheduling events."}, {"name": "TREF_1", "type": "TOD", "description": "Reference time 1 for scheduling events."}, {"name": "HOLY", "type": "BOOL", "description": "Input to specify if the current day is a holiday."}, {"name": "L0", "type": "BOOL", "description": "Logic input 0 for logical operations."}, {"name": "L1", "type": "BOOL", "description": "Logic input 1 for logical operations."}, {"name": "L2", "type": "BOOL", "description": "Logic input 2 for logical operations."}, {"name": "L3", "type": "BOOL", "description": "Logic input 3 for logical operations."}, {"name": "OFS", "type": "INT", "description": "Channel offset for cascading multiple TIMER modules."}, {"name": "ENQ", "type": "BOOL", "description": "Enable input; if FALSE, all outputs remain FALSE."}, {"name": "MAN", "type": "BOOL", "description": "Manual operation switch; if TRUE, outputs follow manual input."}, {"name": "MI", "type": "BYTE", "description": "Channel selection for manual operation."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset input to clear running events."}, {"name": "I/O PROG", "type": "ARRAY[0..63] OF TIMER_EVENT", "description": "Array containing data for programmable timer events."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output channel 0 for the timer."}, {"name": "Q1", "type": "BOOL", "description": "Output channel 1 for the timer."}, {"name": "Q2", "type": "BOOL", "description": "Output channel 2 for the timer."}, {"name": "Q3", "type": "BOOL", "description": "Output channel 3 for the timer."}, {"name": "STATUS", "type": "BYTE", "description": "Status output indicating the operation state of the module."}], "in/out": [], "return_value": {"type": "void", "description": "This function does not return a value."}, "fields": [{"name": "TIMER_EVENT", "type": "struct", "description": "Structure holding the configuration for a timer event.", "fields": [{"name": "CHANNEL", "type": "BYTE", "description": "The channel number for the event."}, {"name": "TYPE", "type": "BYTE", "description": "The type of the event to be programmed."}, {"name": "DAY", "type": "BYTE", "description": "Specifies the day(s) for the event based on its type."}, {"name": "START", "type": "TOD", "description": "Start time of the event."}, {"name": "DURATION", "type": "TIME", "description": "Duration for which the event is active."}, {"name": "LAND", "type": "BYTE", "description": "Logical AND mask for input linking."}, {"name": "LOR", "type": "BYTE", "description": "Logical OR mask for input linking."}, {"name": "LAST", "type": "DWORD", "description": "Internal use field."}]}]}
{"title": "Temperature Sensor Function Module", "description": "T_AVG24 determines the daily average temperature T24. The sensor input\n\nTS is of type INT and is the temperature * 10 (a value of 234 means 23.4\n\n°C). The data of flter run for noise suppression on a low-pass flter with\n\ntime T_FILTER. By scale and SFO a zero error, and the scale of the sensor\n\ncan be adjusted. At output TA shows the current outside temperature,\n\nwhich is measured every hour and half hour. The module writes every 30\n\nminutes the last, over the 48 values calculated daily average in the I / O\n\nvariable T24. This needs to be defned externally and thereby can be de￾fnded remanent or persistent. If the frst start a value of -1000 found in\n\nT24, then the module initializes at the frst call with the current sensor va￾lue, so that every 30 minutes a valid average may be passed. If T24 has\n\nany value other than -1000, then the module is initialized with this value\n\nand calculates the average based on this value. This allows a power failure\n\nand remanent storage of T24 an immediate working after restart. A reset\n\ninput can always force a restart of the module, which depending on the\n\nvalue in T24, the module is initializes with either TS or the old value of\n\nT24. If the module should be set on a particular average, the desired value\n\nis written into T24 and then a reset generated.\n\nT24_MAX and T24_MIN passes the maximum and minimum values of the\n\nlast 24 hours. To determine the maximum and minimum value, the tempe￾ratures of each half hour are considered. A temperature value that occurs\n\nbetween 2 measurements is not considered. \n\n40 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "T_AVG24", "input": [{"name": "TS", "type": "INT", "description": "External temperature sensor reading (temperature * 10, e.g., 234 represents 23.4°C)"}, {"name": "DTI", "type": "DT", "description": "Date and time of day"}, {"name": "RST", "type": "BOOL", "description": "Reset input to restart the module"}, {"name": "T_FILTER", "type": "TIME", "description": "Time duration for the input filter for noise suppression"}, {"name": "SCALE", "type": "REAL", "description": "Scaling factor for sensor input, default is 1.0"}, {"name": "SFO", "type": "REAL", "description": "Zero balance adjustment for the sensor"}], "output": [{"name": "TA", "type": "REAL", "description": "Current outside temperature measured"}, {"name": "TP", "type": "BOOL", "description": "Indicates if T24 has been renewed (TRUE if updated)"}], "in/out": [{"name": "T24", "type": "REAL", "description": "Daily average temperature, can be defined externally"}, {"name": "T24_MAX", "type": "REAL", "description": "Maximum temperature recorded in the last 24 hours"}, {"name": "T24_MIN", "type": "REAL", "description": "Minimum temperature recorded in the last 24 hours"}], "return_value": {"type": null, "description": null}}
{"title": "Water Specific Heat Capacity Calculation", "description": "WATER_CP calculates the specifc heat capacity of liquid water as a functi￾on of temperature at atmospheric pressure. The calculation is valid in the\n\ntemperature range from 0 to 100 degrees Celsius and is calculated in\n\njoules / (gram * kelvin). The temperature T is given in Celsius.", "type": "FUNCTION", "name": "WATER_CP", "input": [{"name": "T", "type": "REAL", "description": "Water temperature in °C"}], "output": [{"name": "SpecificHeatCapacity", "type": "REAL", "description": "Specific heat capacity at temperature T"}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated specific heat capacity at temperature T"}}
{"title": "Water Density Calculation", "description": "WATER_DENSITY calculates the density of liquid water, not frozen\n\nor evaporated water. WATER_DENSITY calculates the density of air-free wa￾ter when SAT = FALSE, and air-saturated water when SAT = TRUE. The cal￾culated values are calculated using an approximate formula and results\n\nvalues with an accuracy greater than 0.01% in the temperature range of 0\n\n- 100°C at a constant pressure of 1013 mBar.\n\nThe deviation of the density of air saturated with water is corrected accor￾ding to the formula of Bignell.\n\nThe dependence of the density of water pressure is relatively low at about\n\n0.046 kg/m³ per 1 bar pressure increase, in the range up to 50 bar. The\n\nlow pressure dependence has practical applications, no signifcant infu￾ence.\n\n45 Version 1.00\n\nChapter 5. Heating, Ventilation, Air Condition", "type": "FUNCTION", "name": "WATER_DENSITY", "input": [{"name": "T", "type": "REAL", "description": "Temperature of the water in degrees Celsius."}, {"name": "SAT", "type": "BOOL", "description": "Indicates if the water is saturated with air (TRUE) or not (FALSE)."}], "output": [{"name": "density", "type": "REAL", "description": "Calculated water density in grams per liter."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the calculated density of liquid water.", "fields": []}}
{"title": "Calculate Enthalpy of Water", "description": "WATER_ENTHALPY calculates the Enthalpy (Heat content) of liquid water\n\nas a function of temperature at atmospheric pressure. The temperature T\n\nis given in Celsius. The calculation is valid for a temperature of 0 to 100 °\n\nC and the result is the amount of heat needed to head the water from 0 °\n\nC to a temperature of T. The result is expressed in joules / gram J / g and\n\npassed as KJ/Kg. It is calculated by linear interpolation in steps of 10 ° and\n\nthus reach a sufcient accuracy for non-scientifc applications. A possible\n\nApplication of WATER_ENTHALPY is to calculate the amount of energy nee￾ded, for example, to head a bufer tank at X (T2 - T1) degree. From the\n\nenergy required then the runtime of a boiler can be calculated exactly and\n\nthe required energy can be provided. Since there temperature readings\n\nare signifcantly delays, with this method a better heating is possible in\n\npractice.", "type": "FUNCTION", "name": "WATER_ENTHALPY", "input": [{"name": "T", "type": "REAL", "description": "Temperature of the water in Celsius (valid range: 0 to 100 °C)"}], "output": [{"name": "enthalpy", "type": "REAL", "description": "Enthalpy of water in J/g at temperature T"}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated enthalpy of water at the given temperature T in J/g."}}
{"title": "Wind Chill Temperature Calculation", "description": "WCT calculates the wind chill temperature depending on the wind speed in\n\nkm/h and the outside temperature °C. The wind chill temperature is def￾ned only for wind speeds greater than 5 km/h and temperatures below 10\n\n°C. For values outside the defned range, the input temperature is output.\n\n46 Version 1.00\n\nChapter 6. Electrical Engineering\n\n 6. Electrical Engineering", "type": "FUNCTION", "name": "WCT", "input": [{"name": "T", "type": "REAL", "description": "Outdoor temperature in °C."}, {"name": "V", "type": "REAL", "description": "Wind speed in km/h."}], "output": [{"name": "REAL", "type": "REAL", "description": "Wind chill temperature. If input values are outside the defined range, the input temperature is output."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated wind chill temperature."}}
{"title": "Counting Block", "description": "COUNT_BR is a byte count from 0 to MX and starts again at 0. The counter\ncan, using two edge-triggered inputs UP and DN, both forward and back￾ward counting. when reaching a fnal value 0 or MX it counts again at 0 or\nMX. The STEP input sets the increment value of the counter. With a TRUE\nat input SET the counter is set to present value at the IN input. A reset in￾put RST resets the counter at any time to 0.\nSET IN UP DN STEP RST CNT\nReset - - - - - 1 0\nSet 1 N - - - 0 N\nup 0 - ↑ 0 N 0 CNT + N\ndown 0 - 0 ↑ N 0 CNT - N\nIf the independent inputs UP and DN with CLK and a control input UP/DN\nshould be replaced, id can be done using two AND gates at the inputs:\nCOUNT_BR may work with individual step width at UP or Down command,\nit is important to note that the counter behaves as if it internally counts\nthe number of STEP steps forward or backward.", "type": "FUNCTION_BLOCK", "name": "COUNT_BR", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean input that, when true, sets the count to the input value."}, {"name": "IN", "type": "BYTE", "description": "A byte input representing the value to reset to when SET is activated."}, {"name": "UP", "type": "BOOL", "description": "A boolean input indicating an increment request for the count."}, {"name": "DN", "type": "BOOL", "description": "A boolean input indicating a decrement request for the count."}, {"name": "STEP", "type": "BYTE", "description": "A byte parameter that defines the step size for increments and decrements. Defaults to 1.", "fields": []}, {"name": "MX", "type": "BYTE", "description": "A byte parameter that sets the maximum limit for the count. Defaults to 255.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "A boolean input that, when true, resets the count to zero."}], "output": [{"name": "CNT", "type": "BYTE", "description": "The current count value after processing the inputs."}], "in/out": [], "return_value": {}}
{"title": "Inverse Hyperbolic Cosine Calculation", "description": "ACOSH calculates the arcus hyperbolic cosine of the following formula:", "type": "FUNCTION", "name": "ACOSH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse hyperbolic cosine is to be calculated. This value must be greater than or equal to 1."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the inverse hyperbolic cosine calculation.", "fields": []}}
{"title": "Count Character in String", "description": "COUNT_CHAR determines how often the sign of CHR in the string STR oc￾curs. To search for special characters and control characters, the search\ncharacter CHR is specifed as BYTE.", "type": "FUNCTION", "name": "COUNT_CHAR", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "Input variable of type STRING with the specified length."}, {"name": "chr", "type": "BYTE", "description": "Input variable of type BYTE representing the character to count."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "Returns the count of occurrences of the specified character in the string."}}
{"title": "Calculate the Inverse Hyperbolic Cotangent", "description": "ACOTH calculates the arc cotangent hyperbolic with following formula:", "type": "FUNCTION", "name": "ACOTH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse hyperbolic cotangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated inverse hyperbolic cotangent of the input value X."}}
{"title": "Count Manager", "description": "COUNT_DR is a DWORD (32-bit) counter with counts from 0 to MX and\nthen begins again at 0. The counter can, using two edge-triggered inputs\nUP and DN, both forward and backward counting. when reaching a fnal\nvalue 0 or MX it counts again at 0 or MX. The STEP input sets the incre￾ment value of the counter. With a TRUE at input SET the counter is set to\npresent value at the IN input. A reset input RST resets the counter at any\ntime to 0.\nSET IN UP DN STEP RST CNT\nReset - - - - - 1 0\nSet 1 N - - - 0 N\nup 0 - ↑ 0 N 0 CNT + N\ndown 0 - 0 ↑ N 0 CNT - N\nIf the independent inputs UP and DN with CLK and a control input UP/DN\nshould be replaced, id can be done using two AND gates at the inputs:", "type": "FUNCTION_BLOCK", "name": "COUNT_DR", "input": [{"name": "SET", "type": "BOOL", "description": "Signal to initialize the count to the input value."}, {"name": "IN", "type": "DWORD", "description": "Input value used to set the count when 'SET' is true."}, {"name": "UP", "type": "BOOL", "description": "Signal to increment the count."}, {"name": "DN", "type": "BOOL", "description": "Signal to decrement the count."}, {"name": "STEP", "type": "DWORD", "description": "Amount to increment or decrement the count, defaulted to 1.", "fields": []}, {"name": "MX", "type": "DWORD", "description": "Maximum value for the count, defaulted to 16#FFFFFFFF.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "Signal to reset the count to zero."}], "output": [{"name": "CNT", "type": "DWORD", "description": "Current value of the count."}], "in/out": [], "return_value": null}
{"title": "AGDF Function Implementation", "description": "AGDF calculates the inverse Gundermann function.\nThe calculation is done using the formula:", "type": "FUNCTION", "name": "AGDF", "input": [{"name": "X", "type": "REAL", "description": "The input real value for which the AGDF function will compute the result."}], "output": [{"name": "AGDF", "type": "REAL", "description": "The output result of the AGDF function, which is the computed natural logarithm value."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value of the AGDF function is a REAL number representing the natural logarithm of the specified computation."}}
{"title": "AIN Function for Analog Input Conversion", "description": "AIN\nfunction is confgured by setup parameters and calculates the output va￾lues of the A/D converter according to, so that after the AIN module a\nREAL value is available, which corresponds to the real measured value.\nFurthermore, the module can extract and convert a Sign- Bit at any point.\nBy double-clicking on the module, several setup variables can be defned.\nBits defnes how many bits of the input DWORD to be processed. For a 12\nbit converter, this value is 12. Then only the bits 0 - 11 are scored. Sign\ndefnes whether a sign bit is present and where it is found in the input\nword. Sign = 255 means that no sign bit is present and 15 means that bit\n15 in the DWORD contains the sign. The default value for SIGN is 255.\nLOW and HIGH defne the smallest and largest output value. If a Sign- Bit\nis defned ( SIGN < 255), then LOW and HIGH must be positive. Without\nSign- Bit they can be either positive or negative.", "type": "FUNCTION", "name": "AIN", "input": [{"name": "in", "type": "DWORD", "description": "The digital input value to be converted."}, {"name": "Bits", "type": "BYTE", "description": "The number of bits that represent the valid portion of the digital input."}, {"name": "sign", "type": "BYTE", "description": "The position of the sign bit in the input value; defaults to 255 indicating no sign bit."}, {"name": "low", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "high", "type": "REAL", "description": "The upper limit of the output range; defaults to 10.0."}], "output": [{"name": "AIN", "type": "REAL", "description": "The converted real value based on the input and specified parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting real value after conversion from the digital input."}}
{"title": "Complex Polar Calculator", "description": "CPOL produces a complex number in polar form. The input values of L and\nA specify the length (radius) and the angle.", "type": "FUNCTION", "name": "CPOL", "input": [{"name": "L", "type": "REAL", "description": "The magnitude of the complex number in polar coordinates."}, {"name": "A", "type": "REAL", "description": "The angle (in radians) of the complex number in polar coordinates."}], "output": [{"name": "CPOL", "type": "complex", "description": "A complex number represented with a real part and an imaginary part."}], "in/out": [], "return_value": {"type": "complex", "description": "The result of the conversion from polar to rectangular form for the complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex number."}]}}
{"title": "Complex Power Calculation", "description": "CPOW calculates the power of two Complex numbers, CPOW = X^Y.", "type": "FUNCTION", "name": "CPOW", "input": [{"name": "X", "type": "Complex", "description": "The base complex number that is to be raised to a power."}, {"name": "Y", "type": "Complex", "description": "The exponent complex number that indicates the power to which X is raised."}], "output": [{"name": "CPOW", "type": "complex", "description": "The result of raising the complex number X to the power of the complex number Y."}], "in/out": [], "return_value": {"type": "complex", "description": "The calculated complex power result of X raised to Y."}}
{"title": "Cyclic Redundancy Check (CRC) Generator", "description": "CRC_GEN generates a CRC check sum of an arbitrarily large array of Bytes.\nWhen the function is called a Pointer is passed on the processed array and\nits size in bytes. In CoDeSys the call reads: CRC_GEN(ADR(array),\nSIZEOF(Array),...), where array is the name of the processed array. ADR is\na standard function, the Pointer the array is determined and SIZEOF is a\nstandard function, which determines the size of the array. The polynomial\ncan be any polynomials up to a maximum of 32 bits in length. A polynomi￾al X³ + X² + 1 is represented by 101 (1*X³ + 1*X² + 0+X¹ + 1*X⁰). The\nmost signifcant bit, in this case 1*X³ is not specifed in the polynomial, be￾cause it is always one. It can process up polynomials to X³² (CRC 32). By\nthe value INIT, the CR can be passed a starting value. Usually are here are\n0000 and FFFF. The appropriate start value is the standard in the litera￾ture, \"Direct Initial Value\". The input XOR_OUT determines with which bit\nsequence with the checksum at the end of XOR is associated with. The in￾puts and REV_IN REV_OUT set the bit sequence of data. If REV_IN = TRUE,\neach byte with LSB beginning is processed, if REV_IN = FALSE with MSB is\nstarted. REV_OUT = TRUE turns the bit corresponding sequence to the\nchecksum. The module requires a minimum length of the processed data\nof 4 bytes, and is limited up only by the maximum array size. \nThe CRC further down in the following table provides detailed information\non common CRC's and the setup data for CRC_GEN. Due to the number of\npossible and even common CRC's, it is not possible for us to show a com￾plete list.\nFor further research, the website http://regregex.bbcmicro.net/crc-cata￾logue.htm is recommended. \nOnline test calculations are possible for the following Java Tool:\nhttp://zorc.breitbandkatze.de/crc.html \nCommon CRC'S AND polynomials:\nCRC PL PN [Hex] INIT [Hex] REV\nIN\nREV\nOU\nT\nXOUT [Hex]\nCRC-3/ROHC 3 3 7 T T 0\nCRC-4/ITU 4 3 0 T T 0\nCRC-5/EPC 5 9 9 F F 0\nCRC-5/ITU 5 15 0 T T 0\nCRC-5/USB 5 5 1F T T 1F\nCRC-6/DARC 6 19 0 T F 0\nCRC-6/ITU 6 3 0 T T 0\nCRC-7 7 9 0 F F 0\nCRC-7/ROHC 7 4F 7F T T 0\nCRC-8 8 7 0 F F 0\nCRC-8/DARC 8 39 0 T T 0\nCRC-8/I-CODE 8 1D FD F F 0\nCRC-8/ITU 8 7 0 F F 55\nCRC-8/MAXIM 8 31 0 T T 0\nCRC-8/ROHC 8 7 FF T T 0\nCRC-8/WCDMA 8 9B 0 T T 0\nCRC-10 10 233 0 F F 0\nCRC-11 11 385 1A F F 0\nCRC-12/3GPP 12 80F 0 F T 0\nCRC-12/DECT 12 80F 0 F F 0\nCRC-14/DARC 14 805 0 T T 0\nCRC-15 15 4599 0 F F 0\nCRC-16/LHA 16 8005 0 T T 0\nCRC-16/CCITT-AUG 16 1021 1D0F F F 0\nCRC-16/BUYPASS 16 8005 0 F F 0\nCRC-16/CCITT-FALSE 16 1021 FFFF F F 0\nCRC-16/DDS 16 8005 800D F F 0\nCRC-16/DECT-R 16 589 0 F F 1\nCRC-16/DECT-X 16 589 0 F F 0\nCRC-16/DNP 16 3D65 0 T T FFFF\nCRC-16/EN13757 16 3D65 0 F F FFFF\nCRC-16/GENIBUS 16 1021 FFFF F F FFFF\nCRC-16/MAXIM 16 8005 0 T T FFFF\nCRC-16/MCRF4XX 16 1021 FFFF T T 0\nCRC-16/RIELLO 16 1021 B2AA T T 0\nCRC-16/T10-DIF 16 8BB7 0 F F 0\nCRC-16/TELEDISK 16 A097 0 F F 0\nCRC-16/USB 16 8005 FFFF T T FFFF\nCRC-16/CCITT-TRUE 16 1021 0 T T 0\nCRC-16/MODBUS 16 8005 FFFF T T 0\nCRC-16/X-25 16 1021 FFFF T T FFFF\nCRC-16/XMODEM 16 1021 0 F F 0\nCRC-24/OPENPGP 24 864CFB B704CE F F 0\nCRC-24/FLEXRAY-A 24 5D6DCB FEDCBA F F 0\nCRC-24/FLEXRAY-B 24 5D6DCB ABCDEF F F 0\nCRC-32/PKZIP 32 04C11DB7 FFFFFFFF T T FFFFFFFF\nCRC-32/BZIP2 32 04C11DB7 FFFFFFFF F F FFFFFFFF\nCRC-32/CASTAGNOLI 32 1EDC6F41 FFFFFFFF T T FFFFFFFF\nCRC-32/D 32 A833982B FFFFFFFF T T FFFFFFFF\nCRC-32/MPEG2 32 04C11DB7 FFFFFFFF F F 0\nCRC-32/POSIX 32 04C11DB7 0 F F FFFFFFFF\nCRC-32/Q 32 814141AB 0 F F 0\nCRC-32/JAM 32 04C11DB7 FFFFFFFF T T 0\nCRC-32/XFER 32 AF 0 F F 0", "type": "FUNCTION", "name": "CRC_GEN", "input": [{"name": "PT", "type": "POINTER TO ARRAY[0..32000] OF BYTE", "description": "Pointer to the input byte array that needs CRC generation."}, {"name": "SIZE", "type": "INT", "description": "Size of the input byte array, must be at least 4 bytes."}, {"name": "PL", "type": "INT", "description": "Polynomial degree which defines the CRC configuration."}, {"name": "PN", "type": "DWORD", "description": "Polynomial value used for CRC calculation."}, {"name": "INIT", "type": "DWORD", "description": "Initial value for the CRC calculation."}, {"name": "REV_IN", "type": "BOOL", "description": "Flag indicating whether to reverse the input bytes before processing."}, {"name": "REV_OUT", "type": "BOOL", "description": "Flag indicating whether to reverse the output CRC value."}, {"name": "XOR_OUT", "type": "DWORD", "description": "Value to XOR with the final CRC result."}], "output": [{"name": "CRC_GEN", "type": "DWORD", "description": "The resulting CRC value after processing the input byte array."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the calculated CRC value.", "fields": []}}
{"title": "Output Calculation Function", "description": "AOUT is confgured by setup parameters and calculates the input\nvalues (IN) to accordingly, so that after the module AOUT is a digital value\navailable at the output of the D/A converter generates a value that is the\nREAL value IN matches. Furthermore, the module can insert a Sign- Bit\nanywhere if the D/A converter need a Sign- Bit. By double-clicking on the\nmodule, several setup variables can be defned. Bits defne how many Bits\nthe D/A converter can handle. For a 12 bit converter, this value is 12. Then\nonly the bits 0 - 11 are scored. Sign defnes whether a sign bit is needed\nand where to place in the source DWORD. Sign = 255 means that no sign\nbit is needed, and 15 means Bit 15 in the DWORD contains the sign. LOW\nand HIGH defne the smallest and highest input value. If a Sign-Bit is def￾ned ( SIGN< 255), then LOW and HIGH must be positive. Without Sign-Bit\nthey can be either positive or negative.", "type": "FUNCTION", "name": "AOUT", "input": [{"name": "in", "type": "REAL", "description": "The input real number to be processed."}, {"name": "Bits", "type": "BYTE", "description": "The number of bits to be used in the output calculation."}, {"name": "sign", "type": "BYTE", "description": "The sign bit, defaults to 255 if not specified."}, {"name": "low", "type": "REAL", "description": "The lower limit for the input value."}, {"name": "high", "type": "REAL", "description": "The upper limit for the input value, defaults to 10.0 if not specified."}], "output": [{"name": "Aout", "type": "DWORD", "description": "The calculated 32-bit output value based on the processed input."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed output value.", "fields": []}}
{"title": "Complex Number Set Function", "description": "CSET generated from the two input components RE and IM is a complex\nnumber of type COMPLEX.", "type": "FUNCTION", "name": "CSET", "input": [{"name": "RE", "type": "REAL", "description": "The real part of the complex number."}, {"name": "IM", "type": "REAL", "description": "The imaginary part of the complex number."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The complex number consisting of the provided real and imaginary parts.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex number."}]}}
{"title": "Calculate the Absolute Value of a Complex Number", "description": "CABS calculates the length of the vector of a complex number The absolu￾te value is also module or Magnitude mentioned.\nCABS = SQRT(X.RE² + X.IM²)", "type": "FUNCTION", "name": "CABS", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number whose absolute value is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The absolute value of the complex number X.", "fields": []}}
{"title": "Array Average Calculation", "description": "ARRAY_AVG calculates the median value of an arbitrary ar￾ray ofREAL. When called, a pointer to the array and its size in bytes is pas￾sed to the function. Under CoDeSys the call reads:\nARRAY_AVG(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_AVG does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_AVG", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of REAL numbers for which the average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array indicated by the pointer."}], "output": [{"name": "ARRAY_AVG", "type": "REAL", "description": "The computed average of the REAL numbers in the array."}], "in/out": [], "return_value": {"type": "REAL", "description": "The average value of the elements in the array.", "fields": []}}
{"title": "Calculate Geometric Average of an Array", "description": "ARRAY_GAV calculates the median value of an arbi￾trary array of REAL. When called, a pointer to the array and its size in by￾tes is passed to the function. Under CoDeSys the call reads:\nARRAY_GAV(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_GAV does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_GAV", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to the array of real numbers whose geometric average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating how many elements are present."}], "output": [{"name": "ARRAY_GAV", "type": "REAL", "description": "The computed geometric average of the array. Returns 0.0 if any array element is non-positive."}], "in/out": [], "return_value": {"type": "REAL", "description": "The geometric average of the input array computed from the positive elements.", "fields": []}}
{"title": "Complex Arc Tangent Function", "description": "CATAN calculates the arc tangent of a complex number\nThe range of values of the result is between [-/2,+/2 ] For the imagina￾ry part.", "type": "FUNCTION", "name": "CATAN", "input": [{"name": "X", "type": "complex", "description": "Input variable of type complex."}], "output": [{"name": "CATAN", "type": "complex", "description": "The result of the arc tangent calculation, returned as a complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The complex result representing the arc tangent of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the arc tangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the arc tangent result."}]}}
{"title": "Calculate Harmonic Average of an Array", "description": "ARRAY_HAV calculates the harmonic median value of an ar￾bitrary array of REAL. When called, a pointer to the array and its size in\nbytes is passed to the function. Under CoDeSys the call reads:\nARRAY_HAV(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_HAV does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_HAV", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "Pointer to the array of real numbers for which the harmonic average is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements to consider for the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The harmonic average of the array elements.", "fields": []}}
{"title": "Complex Hyperbolic Cotangent Function", "description": "CATANH calculates the arc hyperbolic tangent of a complex number\nThe range of values of the result is between [- /2,+/2 ] for the imagina￾ry part.", "type": "FUNCTION", "name": "CATANH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic cotangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of the hyperbolic cotangent operation, returned as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the hyperbolic cotangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the hyperbolic cotangent result."}]}}
{"title": "Find Maximum Value in an Array", "description": "ARRAY_MAX(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_MAX does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_MAX", "input": [{"name": "pt", "type": "ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers from which the maximum value is to be found."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The maximum value found in the array.", "fields": []}}
{"title": "Cauchy Function Calculation", "description": "CAUCHY calculates the density function for Cauchy.", "type": "FUNCTION", "name": "CAUCHY", "input": [{"name": "X", "type": "REAL", "description": "The first parameter of the Cauchy function."}, {"name": "T", "type": "REAL", "description": "The second parameter, which alters the position of the distribution."}, {"name": "U", "type": "REAL", "description": "The scale parameter for the Cauchy distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the Cauchy function based on the provided input parameters."}}
{"title": "Calculate Minimum Value in an Array", "description": "ARRAY_MIN calculates the minimum value of any array of\nREAL. When called the function passed a Pointer to the array and its size\nin bytes. Under CoDeSys the call reads: ARRAY_MIN(ADR(Array),\nSIZEOF(Array)), where array is the name of the array to be manipulated.\nADR() is a standard function, which identifes the pointer to the array and\nSIZEOF() is a standard function, which determines the size of the array. In\norder to determine the maximum, the array referenced by the pointer is\nscanned directly in memory. The function ARRAY _ MIN does not change\nthe contents of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_MIN", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers from which the minimum value will be computed."}, {"name": "size", "type": "UINT", "description": "The size of the array indicating the number of elements to be considered for the minimum calculation."}], "output": [{"name": "array_min", "type": "REAL", "description": "The minimum value found in the specified array of real numbers."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the minimum value found within the input array."}}
{"title": "Cauchy Distribution Calculation", "description": "CAUCHYCD calculated the distribution function after Cauchy.", "type": "FUNCTION", "name": "CAUCHYCD", "input": [{"name": "X", "type": "REAL", "description": "A real number representing the first parameter of the Cauchy distribution."}, {"name": "T", "type": "REAL", "description": "A real number representing the second parameter of the Cauchy distribution."}, {"name": "U", "type": "REAL", "description": "A real number representing the scale parameter of the Cauchy distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated value of the Cauchy distribution based on the inputs X, T, and U."}}
{"title": "Standard Deviation Calculation", "description": "ARRAY_SDV calculates the standard deviation (Standard De￾viation) value of an arbitrary array of REAL. When called a pointer to the\narray and its size in bytes is passed to the function. Under CoDeSys the\ncall reads: ARRAY_SDV(ADR(Array), SIZEOF(Array)), where array is the\nname of the array to be manipulated. ADR() is a standard function, which\nidentifes the pointer to the array and SIZEOF() is a standard function,\nwhich determines the size of the array. In order to determine the maxi￾mum, the array referenced by the pointer is scanned directly in memory.\nThe function ARRAY_SDV does not change the contents of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_SDV", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers whose standard deviation is to be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements in the input array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated standard deviation of the input array of real numbers."}}
{"title": "Complex Conjugate Function", "description": "CCON calculated the conjugation of a complex number\nCCON.RE = X.RE\nCCON.IM = -X.IM", "type": "FUNCTION", "name": "CCON", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the conjugate is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The complex conjugate of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex conjugate."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex conjugate, which is the negation of the input's imaginary part."}]}}
{"title": "Array Spread Calculation", "description": "ARRAY_SPR determines the dispersion of an arbitrary array of\nREAL. The dispersion is the maximum value in the array minus the mini￾mum value of the array. When called, a Pointer to the array and its size in\nbytes is transferred to the function. Under CoDeSys the call reads:\nARRAY_SPR(ADR(Array), SIZEOF(Array)), where array is the name of the ar￾ray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_SPR does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_SPR", "input": [{"name": "pt", "type": "^ARRAY [0..32000] OF REAL", "description": "Pointer to the array of REAL numbers."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The difference between the maximum and minimum values in the array.", "fields": []}}
{"title": "Complex Cosine Function", "description": "CCOS calculates the cosine of a complex number", "type": "FUNCTION", "name": "CCOS", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the cosine is to be calculated."}], "output": [{"name": "CCOS", "type": "complex", "description": "The cosine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The result of the cosine calculation.", "fields": []}}
{"title": "Array Sum Function", "description": "ARRAY_SUM calculates the sum of all values of an arbitrary\narray of REAL. When called a pointer to the array and its size in bytes is\npassed to the function. Under CoDeSys the call reads:\nARRAY_SUM(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function, which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the maximum, the array refe￾renced by the pointer is scanned directly in memory. The function\nARRAY_SUM does not change the content of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_SUM", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers to be summed."}, {"name": "size", "type": "UINT", "description": "The size of the array. This indicates the number of elements in the array to be processed."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The sum of the elements of the array.", "fields": []}}
{"title": "Compute Complex Hyperbolic Cosine", "description": "CCOSH calculates the hyperbolic cosine of a complex number", "type": "FUNCTION", "name": "CCOSH", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the hyperbolic cosine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The hyperbolic cosine of the input complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the hyperbolic cosine."}, {"name": "im", "type": "real", "description": "The imaginary part of the hyperbolic cosine."}]}}
{"title": "Calculate Array Trend", "description": "ARRAY_TREND calculates the trend development of all va￾lues of an arbitrary array of REAL. When called a pointer to the array and\nits size in bytes is passed to the function. Under CoDeSys the call reads:\nARRAY_TREND(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function, which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array. In order to determine the trend, the array referenced\nby the pointer is scanned directly in memory. The function ARRAY_TREND\ndoes not change the content of the array. This type of processing arrays is\nvery efcient because no additional memory is required and no surrender\nvalues must be copied. The trend is determined by subtract the average\nof the lower half of the values of the array from the average of the values\nof the upper half of the array.", "type": "FUNCTION", "name": "ARRAY_TREND", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to the array of real numbers whose trend needs to be calculated."}, {"name": "size", "type": "UINT", "description": "The total number of elements in the array."}], "output": [{"name": "ARRAY_TREND", "type": "REAL", "description": "The calculated trend value of the array, which is the average based on the input size."}], "in/out": [], "return_value": {"type": "REAL", "description": "Average trend of the array values.", "fields": []}}
{"title": "Complex Division Function", "description": "CDIV dividing two complex numbers X / Y.", "type": "FUNCTION", "name": "CDIV", "input": [{"name": "X", "type": "complex", "description": "The first complex number to be divided, represented by its real and imaginary components."}, {"name": "Y", "type": "complex", "description": "The second complex number, which is the divisor in the division operation."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of the division of complex number X by complex number Y.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the result of the complex division."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the result of the complex division."}]}}
{"title": "Calculate Array Variance", "description": "ARRAY_VAR calculates the variance of an arbitrary array of\nREAL. When called a pointer to the array and its size in bytes is passed to\nthe function. Under CoDeSys the call reads: ARRAY_VAR(ADR(Array), SI￾ZEOF(Array)), where array is the name of the array to be manipulated.\nADR() is a standard function, which identifes the pointer to the array and\nSIZEOF() is a standard function, which determines the size of the array. In\norder to determine the maximum, the array referenced by the pointer is\nscanned directly in memory. The function ARRAY_VAR does not change the\ncontent of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "ARRAY_VAR", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "Pointer to an array of real numbers whose variance will be calculated."}, {"name": "size", "type": "UINT", "description": "The size of the array, indicating the number of elements present within the array."}], "output": [{"name": "ARRAY_VAR", "type": "REAL", "description": "The calculated variance of the real numbers in the array."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed variance of the array of real numbers."}}
{"title": "Hyperbolic Arcsine Calculation", "description": "ASINH calculate the arc hyperbolic sine by the formula:", "type": "FUNCTION", "name": "ASINH", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the hyperbolic arcsine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed hyperbolic arcsine of the input value X."}}
{"title": "Complex Hyperbolic Sine Function", "description": "CSINH calculates the hyperbolic sine of a complex number", "type": "FUNCTION", "name": "CSINH", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the hyperbolic sine is to be calculated."}], "output": [{"name": "CSINH", "type": "complex", "description": "The complex hyperbolic sine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The calculated complex hyperbolic sine value.", "fields": [{"name": "re", "type": "float", "description": "The real part of the complex hyperbolic sine."}, {"name": "im", "type": "float", "description": "The imaginary part of the complex hyperbolic sine."}]}}
{"title": "Astronomical Units Conversion", "description": "ASTRO converts various distance units commonly used in \nastronomy. Normally, only the input to be converted is occupied and the \nremaining inputs remain free. However, if several inputs loaded with \nvalues, the values of all inputs are converted accordingly and then \nsummed.\n1 AE = 149,597870 * 109 m\n1 PC = 206265 AE\n1 LJ = 9,460530 * 1015 m = 63240 AE = 0,30659 PC", "type": "FUNCTION_BLOCK", "name": "ASTRO", "input": [{"name": "m", "type": "REAL", "description": "Distance in meters (SI base unit)."}, {"name": "AE", "type": "REAL", "description": "Distance in astronomical units, where 1 AE = 149,597,870 meters."}, {"name": "PC", "type": "REAL", "description": "Distance in parsecs, where 1 parsec = 206265 AE."}, {"name": "LJ", "type": "REAL", "description": "Distance in light years, where 1 light year = 63240 AE."}], "output": [{"name": "Ym", "type": "REAL", "description": "Converted distance in meters based on input parameters."}, {"name": "YAE", "type": "REAL", "description": "Converted distance in astronomical units."}, {"name": "YPC", "type": "REAL", "description": "Converted distance in parsecs."}, {"name": "YLJ", "type": "REAL", "description": "Converted distance in light years."}], "in/out": [], "return_value": null}
{"title": "Calculate Square Root of a Complex Number", "description": "CSQRT calculates the square root of a complex number", "type": "FUNCTION", "name": "CSQRT", "input": [{"name": "X", "type": "complex", "description": "The complex number for which the square root needs to be calculated."}], "output": [{"name": "CSQRT", "type": "complex", "description": "The computed square root of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "The square root of the input complex number returned by the function.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the square root of the complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the square root of the complex number."}]}}
{"title": "Complex Subtraction Function", "description": "CSUB Subtracts two complex numbers, Csub = X - Y.", "type": "FUNCTION", "name": "CSUB", "input": [{"name": "X", "type": "COMPLEX", "description": "The first complex number from which the second complex number will be subtracted."}, {"name": "Y", "type": "COMPLEX", "description": "The second complex number which will be subtracted from the first complex number."}], "output": [], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The complex result obtained by subtracting Y from X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the result."}]}}
{"title": "Hyperbolic Arctangent Function (ATANH)", "description": "ATANH calculates the Arcus Hyperbolic tangent as follows:", "type": "FUNCTION", "name": "ATANH", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the hyperbolic arctangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic arctangent of the input value X.", "fields": []}}
{"title": "Complex Tangent Function", "description": "CTAN calculates the tangent of a complex number", "type": "FUNCTION", "name": "CTAN", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the tangent is to be calculated."}], "output": [{"name": "CTAN", "type": "complex", "description": "The complex tangent of the input number X."}], "in/out": [], "return_value": {"type": "complex", "description": "The return value is the complex tangent of the input complex number X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex tangent result."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex tangent result."}]}}
{"title": "A_TRIG Function Block", "description": "A_TRIG monitors an input value on change and every time when the input\nvalue changes by more than RES, the module generates an output pulse\nfor a cycle so that the new value can be processed. At the same time, the\ndevice remembers the current input value with which it compares with the\ninput IN at the next cycle. At the output D the diference between IN and\nthe stored value is displayed.", "type": "FUNCTION_BLOCK", "name": "A_TRIG", "input": [{"name": "IN", "type": "REAL", "description": "The current input value to be evaluated."}, {"name": "RES", "type": "REAL", "description": "The threshold value for the change detection."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating whether a significant change has occurred."}, {"name": "D", "type": "REAL", "description": "The calculated difference between the current input and the last input."}], "in/out": [], "return_value": null}
{"title": "Complex Hyperbolic Cotangent Function", "description": "CTANH calculates the hyperbolic tangent of a complex number\n 8. Arithmetics with Double Precision", "type": "FUNCTION", "name": "CTANH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic cotangent is to be calculated."}], "output": [{"name": "CTANH", "type": "complex", "description": "The complex hyperbolic cotangent of the input complex number X.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex hyperbolic cotangent."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex hyperbolic cotangent."}]}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the result of the complex hyperbolic cotangent as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Band Operation Function", "description": "BAND_B hides at the input areas 0..255\nthe areas 0..B and 255-B.. 255, in this\nareas the output is 0 respectively 255.", "type": "FUNCTION", "name": "BAND_B", "input": [{"name": "X", "type": "BYTE", "description": "The first input value for the band operation."}, {"name": "B", "type": "BYTE", "description": "The second input value for the band operation."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the band operation based on the input values.", "fields": []}}
{"title": "Ceiling Function", "description": "CEIL function returns the smallest integer value greater or equal than\nX.", "type": "FUNCTION", "name": "CEIL", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the ceiling value is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The ceiling value of the input real number X, representing the smallest integer greater than or equal to X."}}
{"title": "Bar Graph Function Block", "description": "BAR_GRAPH is a level Detector, which activates depending on the input\nvalue an output. The threshold for the LOW and HIGH Outputs can be set\nby the setup variables TRIGGER_LOW and TRIGGER_HIGH. LOW is TRUE if\nX is less than TRIGGER_LOW and HIGH is true if X is greater or equal than\nTRIGGER_HIGH. If the setup variables ALARM_LOW and / or ALARM_HIGH\nset to TRUE, the output ALARM set to TRUE if the value will be lower than\nTRIGGER_LOW or exceed of TRIGGER_HIGH , and the output LOW or HIGH\nand ALARM remains TRUE until the input RST is TRUE and the alarm is re￾seted. The outputs Q1 to Q6 divide the area between between\nTRIGGER_LOW and TRIGGER_HIGH in seven equal areas. If the setup varia￾ble LOG_SCALE is set, the area between TRIGGER_LOW and\nTRIGGER_HIGH is divided logarithmically. \nThe output Status is an ESR compliant output and forwards states and\nalarms to ESR components.\nStatus\n110 Input is between Trigger_Low and Trigger_High.\n111 Input lower than Trigger_Low , Output LOW is TRUE\n112 Input higher than Trigger_High , Output HIGH is TRUE.\n1 Input lower than Trigger_low and Alarm_Lowis TRUE\n2 Input higher than Trigger_high and Alarm_High is TRUE\nThe following example shows a signal characteristic of n Bar_Graph:", "type": "FUNCTION_BLOCK", "name": "BAR_GRAPH", "input": [{"name": "X", "type": "REAL", "description": "The current value to be evaluated against the trigger thresholds."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to clear alarms and output states."}, {"name": "trigger_Low", "type": "REAL", "description": "The lower threshold for triggering the alarm and bar graph outputs."}, {"name": "trigger_High", "type": "REAL", "description": "The upper threshold for triggering the alarm and bar graph outputs."}, {"name": "Alarm_low", "type": "BOOL", "description": "Indicates if a low alarm is enabled."}, {"name": "Alarm_high", "type": "BOOL", "description": "Indicates if a high alarm is enabled."}, {"name": "log_scale", "type": "BOOL", "description": "Indicates if a logarithmic scale should be applied to the graph representation."}], "output": [{"name": "LOW", "type": "BOOL", "description": "Indicates if the value is below the low trigger threshold."}, {"name": "Q1", "type": "BOOL", "description": "Status of the first bar in the graph."}, {"name": "Q2", "type": "BOOL", "description": "Status of the second bar in the graph."}, {"name": "Q3", "type": "BOOL", "description": "Status of the third bar in the graph."}, {"name": "Q4", "type": "BOOL", "description": "Status of the fourth bar in the graph."}, {"name": "Q5", "type": "BOOL", "description": "Status of the fifth bar in the graph."}, {"name": "Q6", "type": "BOOL", "description": "Status of the sixth bar in the graph."}, {"name": "HIGH", "type": "BOOL", "description": "Indicates if the value is above the high trigger threshold."}, {"name": "Alarm", "type": "BOOL", "description": "Indicates if any alarm condition has been triggered."}, {"name": "Status", "type": "BYTE", "description": "Current status code indicating the state of the evaluation."}], "in/out": [], "return_value": null}
{"title": "Convert BCD to Integer", "description": "BCDC_TO_INT converts a BCD coded input BYTE in an integer value.", "type": "FUNCTION", "name": "BCDC_TO_INT", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE input representing the BCD value to be converted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The resulting integer value derived from the given BCD input."}}
{"title": "Control Input Function", "description": "CTRL_IN calculates the process deviation (SET_POINT _ ACTUAL) and pas￾ses them at the output. If the diference is less than the value at the input\nNOISE of the output remains at 0. CTRL_IN can be used to build own rule\nmodules.\nBlock diagram of CTRL_IN:", "type": "FUNCTION", "name": "CTRL_IN", "input": [{"name": "SET_POINT", "type": "REAL", "description": "The desired target value that the system aims to achieve."}, {"name": "ACTUAL", "type": "REAL", "description": "The current value of the system that is being evaluated."}, {"name": "NOISE", "type": "REAL", "description": "The acceptable range of fluctuation around the set point which will be considered as 'noise'."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated process error after applying the dead zone function.", "fields": []}}
{"title": "Beta Function Calculation", "description": "BETA computes the Euler Beta function.", "type": "FUNCTION", "name": "BETA", "input": [{"name": "X", "type": "REAL", "description": "A real number input representing the first parameter for the beta function calculation."}, {"name": "Y", "type": "REAL", "description": "A real number input representing the second parameter for the beta function calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the beta function calculation, which is a real number."}}
{"title": "Complex Exponential Function", "description": "CEXP calculates the complex exponent to base E, CEXP = E^X.", "type": "FUNCTION", "name": "CEXP", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the exponential is to be calculated."}], "output": [{"name": "CEXP", "type": "complex", "description": "The resulting complex number after computing the exponential of the input."}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the computed complex exponential value.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the computed complex exponential."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the computed complex exponential."}]}}
{"title": "Conversion from BFT to MS", "description": "BFT_TO_MS calculete wind speeds on the Beaufort scale in meters per se￾cond.\nThe calculation is done using the formula:\nBFT_TO_MS = 0.836m/s * B^3/2", "type": "FUNCTION", "name": "BFT_TO_MS", "input": [{"name": "BFT", "type": "INT", "description": "An integer value representing BFT to be converted to MS."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted MS value calculated as BFT raised to the power of 1.5 multiplied by 0.836."}}
{"title": "Control Output Function Block", "description": "CTRL_OUT adds to the CI input the value of OFFSET and returns the result\nto Y if MANUAL = FALSE. If MANUAL is TRUE at output Y the input value of\nMAN_IN + OFFSET is issued. Y is always limited to the boundaries defned\nby LIM_L and LIM_H. If Y reaches one of the limits, then the output LIM is\nTRUE. CTRL_OUT can be used to build own rule modules.\nBlock diagram of CTRL_OUT:", "type": "FUNCTION_BLOCK", "name": "CTRL_OUT", "input": [{"name": "CI", "type": "REAL", "description": "Input signal value used for output calculation."}, {"name": "OFFSET", "type": "REAL", "description": "Value to be added to the output signal."}, {"name": "MAN_IN", "type": "REAL", "description": "Manual input value to be used if manual mode is activated."}, {"name": "LIM_L", "type": "REAL", "description": "Lower limit for the output signal."}, {"name": "LIM_H", "type": "REAL", "description": "Upper limit for the output signal."}, {"name": "MANUAL", "type": "BOOL", "description": "Flag to indicate whether to use manual input."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated output value after applying offset and limits."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating if the output is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "Binomial Coefficient Calculation", "description": "BINOM calculates the binominal coefcient N over K for integer N and K.", "type": "FUNCTION", "name": "BINOM", "input": [{"name": "N", "type": "INT", "description": "The total number of elements from which the selection is made."}, {"name": "K", "type": "INT", "description": "The number of elements to choose from the total elements."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The computed binomial coefficient value.", "fields": []}}
{"title": "Character Code Retrieval", "description": "CHARCODE returns the byte code of a Named Characters. A List the Codes\nwith Name located under the function charName. If no character known,\nfor the name in STR 0 is returned. If STR consists of only one character,\nthen the code of this character returned. CHARCODE uses the global va￾riables SETUP.CHARNAMES which include the list of names with codes.", "type": "FUNCTION", "name": "CHARCODE", "input": [{"name": "STR", "type": "STRING[10]", "description": "A string input with a maximum length of 10 characters whose character code needs to be retrieved."}], "output": [{"name": "CHARCODE", "type": "BYTE", "description": "The character code of the input string returned as a byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the character code of the input string as a byte."}}
{"title": "Binary to Byte Conversion", "description": "BIN_TO_BYTE converts a binary encoded string in a BYTE va￾lue. There, this method only binary characters are '0 'and '1' is interpre￾ted, others in BIN occurring characters are ignored.", "type": "FUNCTION", "name": "BIN_TO_BYTE", "input": [{"name": "BIN", "type": "STRING(12)", "description": "A binary string consisting of '0's and '1's with a maximum length of 12 characters."}], "output": [{"name": "BIN_TO_BYTE", "type": "BYTE", "description": "The resulting byte value obtained from the binary string."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte value that represents the input binary string.", "fields": []}}
{"title": "Character Name Generation", "description": "CHARNAME determines the character name for a character code.", "type": "FUNCTION", "name": "CHARNAME", "input": [{"name": "C", "type": "BYTE", "description": "A BYTE value used to determine the character name."}], "output": [{"name": "CHARNAME", "type": "string", "description": "The resulting character name string constructed from the input BYTE."}], "in/out": [], "return_value": {"type": "string", "description": "The character name generated from the BYTE input."}}
{"title": "Binary to DWORD Conversion", "description": "BIN_TO_DWORD converts a binary encoded string in a BYTE\nvalue. There, this method only binary characters are '0 'and '1' is interpre￾ted, others in BIN occurring characters are ignored.", "type": "FUNCTION", "name": "BIN_TO_DWORD", "input": [{"name": "BIN", "type": "STRING(40)", "description": "A binary string of length up to 40 characters, consisting of '0's and '1's, representing the binary number to be converted."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value obtained from the binary string conversion.", "fields": []}}
{"title": "Check Parity", "description": "CHECK_PARITY checks an input byte IN and an associated paritybit P to\neven parity. The output is TRUE if the number of bits in the byte IN have\nthe value TRUE together with the parity-bit results is an even number.", "type": "FUNCTION", "name": "CHECK_PARITY", "input": [{"name": "in", "type": "DWORD", "description": "A DWORD input whose parity is to be checked."}, {"name": "p", "type": "BOOL", "description": "A boolean parameter that is used to adjust the final parity result."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The computed parity result, where TRUE indicates odd parity and FALSE indicates even parity."}}
{"title": "Count Set Bits in a DWORD", "description": "BIT_COUNT determines the number of bits in IN, which have the value\nTRUE (1). The input IN is DWORD and can also process the types Byte and\nWord.", "type": "FUNCTION", "name": "BIT_COUNT", "input": [{"name": "IN", "type": "DWORD", "description": "A DWORD value for which the set bits are to be counted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The total count of set bits (1s) in the input DWORD.", "fields": []}}
{"title": "Check Real Number", "description": "CHK_REAL reviewes X for valid values.\nThe return values are:\n#00 valid foating-point\n#20 + Infnity\n#40 - Infnity\n#80 NAN\nFor more information see the IEEE754 foating point specifcation.", "type": "FUNCTION", "name": "CHK_REAL", "input": [{"name": "X", "type": "REAL", "description": "The real number to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns a byte indicating the status of the real number according to IEEE754 standards.", "fields": []}}
{"title": "Bit Load Function", "description": "BIT_LOAD_B copies the bit at VAL to the bit in the position N in byte IN.\nThe least signifcant bit B0 is described by the position 0.", "type": "FUNCTION", "name": "BIT_LOAD_B", "input": [{"name": "IN", "type": "BYTE", "description": "The input BYTE value that will be modified."}, {"name": "VAL", "type": "BOOL", "description": "A boolean flag that determines whether to set or clear the bit at the specified position."}, {"name": "POS", "type": "INT", "description": "The position of the bit in the BYTE that needs to be set or cleared."}], "output": [{"name": "BIT_LOAD_B", "type": "BYTE", "description": "The modified BYTE after the bit operation."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The value of the modified BYTE after the operation.", "fields": []}}
{"title": "Character to String Conversion", "description": "CHR_TO_STRING forms a ASCII characters from a byte and returns it as a\none-character string.", "type": "FUNCTION", "name": "CHR_TO_STRING", "input": [{"name": "C", "type": "BYTE", "description": "The byte value representing a character that needs to be converted to a string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "Returns the string representation of the input character, properly null-terminated."}}
{"title": "Complex Inverse Function", "description": "CINV calculated the reciprocal of a complex number, CINV = 1/X", "type": "FUNCTION", "name": "CINV", "input": [{"name": "X", "type": "COMPLEX", "description": "Input variable of type complex representing the complex number for which the inverse is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The inverse of the input complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the inverse complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the inverse complex number."}]}}
{"title": "BIT_LOAD_DW Function", "description": "BIT_LOAD_DW copies the VAL bit at the input to the bit in position N in\nDWORD IN. The least signifcant bit B0 is described by the position 0.", "type": "FUNCTION", "name": "BIT_LOAD_DW", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value to be manipulated."}, {"name": "VAL", "type": "BOOL", "description": "A boolean flag that determines whether to set (TRUE) or clear (FALSE) a bit in the input DWORD."}, {"name": "POS", "type": "INT", "description": "The position of the bit in the DWORD to be manipulated, where 0 is the least significant bit."}], "output": [{"name": "BIT_LOAD_DW", "type": "DWORD", "description": "The resulting DWORD after the bit manipulation operation has been applied."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the modified DWORD after adjusting the specified bit according to the VAL parameter.", "fields": []}}
{"title": "Calculate Area of a Circle", "description": "CIRCLE_A calculates the area of a circle segment with the angle AX and ra￾dius RX. If the angle is set AX = 360 so the circle area is calculated.", "type": "FUNCTION", "name": "CIRCLE_A", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the circle."}, {"name": "ax", "type": "REAL", "description": "A constant multiplier factor that influences the area calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the circle based on the provided radius and constant factor."}}
{"title": "Circle Calculation Function", "description": "CIRCLE_C calculates the arc length of an arc with the angle AX and radius\nRX. If the angle is set AX = 360 so the circumference is calculated.", "type": "FUNCTION", "name": "CIRCLE_C", "input": [{"name": "Rx", "type": "REAL", "description": "The radius of the circle."}, {"name": "Ax", "type": "REAL", "description": "The axis factor used in the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value from the formula that involves the radius and axis factor."}}
{"title": "Bit Load Word Function", "description": "BIT_LOAD_W copies the bit at input VAL to the bit in position N in WORD\nIN. The least signifcant bit B0 is described by the position 0.", "type": "FUNCTION", "name": "BIT_LOAD_W", "input": [{"name": "IN", "type": "WORD", "description": "The input WORD to be modified."}, {"name": "VAL", "type": "BOOL", "description": "Boolean value indicating whether to set or clear the bit."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be set or cleared."}], "output": [{"name": "BIT_LOAD_W", "type": "WORD", "description": "The modified WORD after the bit operation."}], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD after the function's bit manipulation."}}
{"title": "Calculate Circle Segment Area", "description": "CIRCLE_SEG calculates the area of a\ncircle segment is enclosed by a Sektantli￾nie and the circle.", "type": "FUNCTION", "name": "CIRCLE_SEG", "input": [{"name": "RX", "type": "REAL", "description": "The radius of the circle."}, {"name": "HX", "type": "REAL", "description": "The height of the circle segment."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The area of the circle segment calculated using the provided radius and height."}}
{"title": "String Cleaning Function", "description": "CLEAN removes all characters from a string that are not included in the\nstring CX.\nCLEAN('Nr.1 23#', '0123456789 ') = '123'", "type": "FUNCTION", "name": "CLEAN", "input": [{"name": "IN", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be cleaned."}, {"name": "CX", "type": "STRING[80]", "description": "A string containing the allowed characters. Only characters found in this string will remain in the output."}], "output": [{"name": "CLEAN", "type": "STRING", "description": "The cleaned string, containing only allowed characters."}], "in/out": [], "return_value": {"type": "string", "description": "The final cleaned version of the input string.", "fields": []}}
{"title": "Extract Bit from DWORD", "description": "BIT_OF_DWORD extracts a bit of the DWORD at the input IN.\nBit0 für N=0, Bit1 für N=1 and so on.", "type": "FUNCTION", "name": "BIT_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD input value from which the bit is extracted."}, {"name": "N", "type": "INT", "description": "The position of the bit to check in the DWORD input."}], "output": [{"name": "BIT_OF_DWORD", "type": "BOOL", "description": "A boolean value indicating if the specified bit is set in the input DWORD."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the specified bit is set, otherwise FALSE."}}
{"title": "Click Counter Function Block", "description": "CLICK_CNT determines the number of pulses within the unit time TC. at in￾put IN. A rising edge at IN will start an internal timer with time TC. During\nthe course of Timers the module counts the falling edges of IN and review￾es after the expiry of the time TC whether N pulses are within the time TC.\nJust when exactly N pluses within TC will happen, the output Q is set for a\nPLC cycle to TRUE. The module decodes also N = 0, which corresponds to\na rising edge but not falling edge within TC.", "type": "FUNCTION_BLOCK", "name": "CLICK_CNT", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that indicates when an event occurs."}, {"name": "N", "type": "INT", "description": "An integer that specifies the number of falling edges that should be counted before setting the output Q."}, {"name": "TC", "type": "TIME", "description": "A time parameter that defines the time interval for which the input signal is observed."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output that is activated for one cycle when the defined count of falling edges is reached."}], "in/out": [], "return_value": {}}
{"title": "Bit Toggle Function", "description": "BIT_TOGGLE_B inverts a specifed bit at IN.\nBIT_TOGGLE_W(2#0000_1111, 2) = 2#0000_1011\nBIT_TOGGLE_W(2#0000_1111, 7) = 2#1000_1111", "type": "FUNCTION", "name": "BIT_TOGGLE_B", "input": [{"name": "IN", "type": "BYTE", "description": "The input BYTE value whose bit is to be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, where 0 represents the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting BYTE value after toggling the specified bit.", "fields": []}}
{"title": "Click Edge Detection and Counting Function Block", "description": "CLICK_DEC decodes multiple keystrokes and signals to diferent outputs\nthe number of pulses. An input signal without falling edge within TC is is￾sued at Q0 and remains TRUE until IN goes on FALSE. A pulse followed by\na TRUE is output to Q1 and so on. Is a pulse registered within TC which is\nfollowed by the state FALSE, then TRUE appear at the corresponding out￾put for a PLC cycle.", "type": "FUNCTION_BLOCK", "name": "CLICK_DEC", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input signal that triggers edge detection."}, {"name": "TC", "type": "TIME", "description": "Time constant used for timing operations within the block."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal activated when the count is zero."}, {"name": "Q1", "type": "BOOL", "description": "Output signal activated when the count is one."}, {"name": "Q2", "type": "BOOL", "description": "Output signal activated when the count is two."}, {"name": "Q3", "type": "BOOL", "description": "Output signal activated when the count is three."}], "in/out": [], "return_value": null}
{"title": "Bit Toggle Function", "description": "BIT_TOGGLE_DW inverts a specifed bit at IN.\nBIT_TOGGLE_DW(2#0000_1111, 2) = 2#0000_1011\nBIT_TOGGLE_DW(2#0000_1111, 7) = 2#1000_1111", "type": "FUNCTION", "name": "BIT_TOGGLE_DW", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value where the bit will be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, starting from 0 for the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value after the specified bit has been toggled.", "fields": []}}
{"title": "Clock Divider Function Block", "description": "CLK_DIV is a divider module and devides the input si￾gnal CLK into 8 levels each divided by 2, so that at the output Q0 is half\nthe frequency of the input CLK with 50% duty cycle available. The output\nQ1 is the halved frequency of Q0 available and so on, until at Q7 the input\nfrequency is divided by 256. A reset input RST sets asynchronous all out￾puts to FALSE. CLK is allowed to make only one cycle to TRUE, if CLK does\nnot this, CLK musst provided over TP_R.\n The following example is a test circuit with a start signal via ENI / ENO\nrealized functionality. Figure 2 shows a corresponding trace recording of\nthe circuit:", "type": "FUNCTION_BLOCK", "name": "CLK_DIV", "input": [{"name": "clk", "type": "BOOL", "description": "The clock input signal used to increment the counter."}, {"name": "rst", "type": "BOOL", "description": "The reset input signal that initializes the counter and output states."}], "output": [{"name": "Q0", "type": "BOOL", "description": "The first output bit representing the least significant bit of the counter."}, {"name": "Q1", "type": "BOOL", "description": "The second output bit of the counter."}, {"name": "Q2", "type": "BOOL", "description": "The third output bit of the counter."}, {"name": "Q3", "type": "BOOL", "description": "The fourth output bit of the counter."}, {"name": "Q4", "type": "BOOL", "description": "The fifth output bit of the counter."}, {"name": "Q5", "type": "BOOL", "description": "The sixth output bit of the counter."}, {"name": "Q6", "type": "BOOL", "description": "The seventh output bit of the counter."}, {"name": "Q7", "type": "BOOL", "description": "The eighth output bit representing the most significant bit of the counter."}], "in/out": [], "return_value": null}
{"title": "Toggle Bit in Word", "description": "BIT_TOGGLE_W inverts a specifed bit POS at IN.\nBIT_TOGGLE_W(2#0000_1111, 2) = 2#0000_1011\nBIT_TOGGLE_W(2#0000_1111, 7) = 2#1000_1111", "type": "FUNCTION", "name": "BIT_TOGGLE_W", "input": [{"name": "IN", "type": "WORD", "description": "The WORD input value whose specific bit is to be toggled."}, {"name": "POS", "type": "INT", "description": "The position of the bit to be toggled, where 0 represents the least significant bit."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD after toggling the specified bit.", "fields": []}}
{"title": "Clock N Function Block", "description": "CLK_N generates a pulse every X milliseconds, based on the PLC internal 1\nms reference. The pulses are exactly one PLC cycle length and are genera￾ted every 2^N milliseconds.\nThe period is 1 ms for N = 0, 2ms for N = 1, 4ms, for N=2\nCLK_N replaces the modules CLK_1ms, CLK_2ms, CLK_4ms and CLK_8ms\nfrom older libraries.\nThe following picture shows the output signal for N=0:", "type": "FUNCTION_BLOCK", "name": "CLK_N", "input": [{"name": "N", "type": "INT", "description": "An integer that specifies the number of milliseconds for the clock period."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output that represents the current state of the clock."}], "in/out": [], "return_value": {}}
{"title": "Buffer Comparison Function", "description": "BUFFER_COMP checks whether the content of the array PT2\noccurs in the array PT1 from position START. If PT2 is found in PT1, so the\nfunction returns the position in PT1, starting from 0. If PT2 is not found in\nPT1, -1 is returned. BUFFER_COMP can also be used for comparison of two\nequally sized arrays.\nWhen called, a Pointer to the array and its size in bytes is passed to the\nfunction. In CoDeSys the call reads: BUFFER_COMP(ADR(BUF1),\nSIZEOF(BUF1), ADR(BUF2), SIZEOF(BUF2)), where BUF1 and BUF2 are the\nnames of the arrays to be manipulated. ADR() is a standard function which\nindentifes the Pointer to the array and SIZEOF() is a standard function,\nwhich determines the size of the array. The function only returns TRUE.\nThe array specifed by the Pointer is manipulated directly in memory. This\ntype of processing arrays is very efcient because no additional memory\nis required and no surrender values must be copied.", "type": "FUNCTION", "name": "BUFFER_COMP", "input": [{"name": "PT1", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "Pointer to the first byte array where the search will be performed."}, {"name": "SIZE1", "type": "INT", "description": "The size of the first byte array (PT1)."}, {"name": "PT2", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "Pointer to the second byte array which will be searched within the first byte array."}, {"name": "SIZE2", "type": "INT", "description": "The size of the second byte array (PT2)."}, {"name": "START", "type": "INT", "description": "The starting index in the first byte array (PT1) from which the search will be initiated."}], "output": [{"name": "BUFFER_COMP", "type": "INT", "description": "Returns the index of the first match in the first byte array (PT1), or -1 if no match was found."}], "in/out": [], "return_value": {"type": "INT", "description": "The return value indicates the position of the first occurrence of the second byte array in the first byte array.", "fields": []}}
{"title": "Clock Pulse Generator", "description": "CLK_PRG generates clock pulses with a programmable period PT. The out￾put pulses are only one PLC cycle.", "type": "FUNCTION_BLOCK", "name": "CLK_PRG", "input": [{"name": "PT", "type": "TIME", "description": "The time period for which the output pulse should remain HIGH. Default value is set to 10 milliseconds."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output which is HIGH when the output pulse is generated."}], "in/out": [], "return_value": null}
{"title": "Buffer Search Function", "description": "BUFFER_SEARCH (ADR (Array), SIZEOF (ARRAY),\nSTR, POS, IGN), where ARRAY is the name of the array. ADR() is a standard\nfunction which identifes the pointer to the array and SIZEOF() is a stan￾dard function, which determines the size of the array. The function returns\nthe string copied from the bufer as STRING. This type of processing arrays\nis very efcient because no additional memory is required and no surren￾der values must be copied. If IGN = TRUE both upper- and lowercase let￾ters are found as a match, while STR must be present in uppercase letters.\nIf IGN = FALSE case sensitive is searched.", "type": "FUNCTION", "name": "BUFFER_SEARCH", "input": [{"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the array of bytes that represents the buffer to be searched."}, {"name": "SIZE", "type": "INT", "description": "The size of the buffer, indicating how many bytes can be considered for the search."}, {"name": "STR", "type": "STRING", "description": "The string to search for in the buffer."}, {"name": "POS", "type": "INT", "description": "The starting position in the buffer from which to begin the search."}, {"name": "IGN", "type": "BOOL", "description": "A boolean flag indicating whether the search should be case-insensitive (true) or case-sensitive (false)."}], "output": [{"name": "BUFFER_SEARCH", "type": "INT", "description": "The position at which the substring is found within the buffer, or -1 if the substring is not found."}], "in/out": [], "return_value": {"type": "INT", "description": "The function returns the index of the first occurrence of the substring in the buffer or -1 if not found."}}
{"title": "Hyperbolic Complex Inverse Sine Function", "description": "CASINH calculates the arc hyperbolic sine of a complex number\n[fzy] The range of values of the result is between [-  ,+  ] For the imagi￾nary part.", "type": "FUNCTION", "name": "CASINH", "input": [{"name": "X", "type": "complex", "description": "A complex number for which the hyperbolic inverse sine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The hyperbolic inverse sine of the input complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the hyperbolic inverse sine result."}, {"name": "im", "type": "real", "description": "The imaginary part of the hyperbolic inverse sine result."}]}}
{"title": "Celsius to Fahrenheit Conversion Function", "description": "C_TO_F converts a temperature reading from Celsius to Fahrenheit.", "type": "FUNCTION", "name": "C_TO_F", "input": [{"name": "celsius", "type": "REAL", "description": "The temperature value in degrees Celsius to be converted to Fahrenheit."}], "output": [{"name": "C_TO_F", "type": "REAL", "description": "The temperature value in degrees Fahrenheit obtained from the conversion."}], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in degrees Fahrenheit.", "fields": []}}
{"title": "Buffer to String Conversion", "description": "BUFFER_TO_STRING (ADR (Array),\nSIZEOF (ARRAY), START, STOP), ARRAY is the name of the array. ADR() is a\nstandard function which identifes the pointer to the array and SIZEOF() is\na standard function, which determines the size of the array. The function\nreturns the string copied from the bufer as STRING. This type of proces￾sing arrays is very efcient because no additional memory is required and\nno surrender values must be copied.", "type": "FUNCTION", "name": "BUFFER_TO_STRING", "input": [{"name": "PT", "type": "POINTER TO ARRAY [0..32767] OF BYTE", "description": "A pointer to the byte array that contains the data to be converted to a string."}, {"name": "SIZE", "type": "UINT", "description": "The total size of the byte array pointed to by PT."}, {"name": "START", "type": "UINT", "description": "The starting index in the byte array from which to begin the conversion."}, {"name": "STOP", "type": "UINT", "description": "The stopping index in the byte array at which to end the conversion."}], "output": [{"name": "string", "type": "string", "description": "The resulting string obtained from the specified range of the byte buffer."}], "in/out": [], "return_value": {"type": "string", "description": "The final string after converting the bytes from the buffer.", "fields": []}}
{"title": "CLK_PULSE Function Block", "description": "CLK_PULSE generates a defned number of clock pulses with a program￾mable duty cycle. PT defnes the duty cycle and N is the number of gene￾rated pulses. WIth a reset input RST, the generator can be restarted at\nany time. The output CNT counts the pulses generated and RUN = TRUE\nindicates that the generator currently generate pulses. An input value N =\n0 generates an infnite pulse series, the maximum number of pulses is li￾mited to 32767.\nThe following example shows an application of CLK_PULSE for the produc￾tion of 7 pulses with a duty cycle of 100 ms.\nThe trace recording, shows how the RESET (green) is inactive and thus\nRUN (red) is active. The generator generates then 7 pulses (blue), as spe￾cifed at the input N. The output CNT counts from 1 on the frst pulse to 7\nby the last pulse. After the end of the sequence RUN is inactive again and\nthe cycle is complete until it is started by a new reset.", "type": "FUNCTION_BLOCK", "name": "CLK_PULSE", "input": [{"name": "PT", "type": "TIME", "description": "The time period for generating each pulse."}, {"name": "N", "type": "INT", "description": "The number of pulses to generate. A value of 0 means continuous pulses."}, {"name": "RST", "type": "BOOL", "description": "A reset flag to initialize the pulse generation process."}], "output": [{"name": "Q", "type": "BOOL", "description": "Indicates when a pulse is generated (TRUE during a pulse)."}, {"name": "CNT", "type": "INT", "description": "Counts the number of pulses generated."}, {"name": "RUN", "type": "BOOL", "description": "Indicates if pulse generation is currently running."}], "in/out": [], "return_value": {}}
{"title": "Conversion of Individual Boolean Values to a Single Byte", "description": "BYTE_OF_BIT uses one byte of 8 individual bits (B0 .. B7) together.", "type": "FUNCTION", "name": "BYTE_OF_BIT", "input": [{"name": "B0", "type": "BOOL", "description": "The least significant bit of the byte."}, {"name": "B1", "type": "BOOL", "description": "The second least significant bit of the byte."}, {"name": "B2", "type": "BOOL", "description": "The third least significant bit of the byte."}, {"name": "B3", "type": "BOOL", "description": "The fourth bit of the byte."}, {"name": "B4", "type": "BOOL", "description": "The fifth bit of the byte."}, {"name": "B5", "type": "BOOL", "description": "The sixth bit of the byte."}, {"name": "B6", "type": "BOOL", "description": "The seventh bit of the byte."}, {"name": "B7", "type": "BOOL", "description": "The most significant bit of the byte."}], "output": [{"name": "Byte_of_bit", "type": "BYTE", "description": "The resulting byte composed of the input boolean values."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The final byte representation of the boolean inputs.", "fields": []}}
{"title": "Complex Logarithm Calculation", "description": "CLOG calculates the natural logarithm of a complex number raised to E.\nCLOG(X) = LOG(e)(X).", "type": "FUNCTION", "name": "CLOG", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number represented by its real and imaginary parts."}], "output": [], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The complex logarithm of the input number, represented in its real and imaginary parts.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the complex logarithm."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the complex logarithm."}]}}
{"title": "Extracting a Byte from a DWORD", "description": "BYTE_OF_DWORD extracts a byte (B0 .. B3) a DWORD. The individual by￾tes are selected with 0-3 at the input IN.", "type": "FUNCTION", "name": "BYTE_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD value from which a byte will be extracted."}, {"name": "N", "type": "BYTE", "description": "The index of the byte to extract from the DWORD, multiplied by 8 to account for bit shifts."}], "output": [{"name": "BYTE_OF_DWORD", "type": "BYTE", "description": "The extracted byte from the specified position of the input DWORD."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte obtained from the extraction process."}}
{"title": "Comparison Function", "description": "CMP compares two REAL values if the frst N points are equal.", "type": "FUNCTION", "name": "CMP", "input": [{"name": "X", "type": "REAL", "description": "The first real number to be compared."}, {"name": "Y", "type": "REAL", "description": "The second real number to be compared."}, {"name": "N", "type": "INT", "description": "An integer that determines the precision for the comparison."}], "output": [{"name": "CMP", "type": "BOOL", "description": "The result of the comparison; TRUE if the absolute difference between X and Y is less than the computed threshold, FALSE otherwise."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The Boolean result indicating if X and Y are considered equal within the defined precision.", "fields": []}}
{"title": "Byte to Bits Conversion", "description": "BYTE_TO_BITS split a byte (IN) into its individual bits (B0 .. B7). The input\nIN is defned as a DWORD to handle either byte, word, or DWORD at the\ninput. If a Word or DWORD used at the input, only the bits 0th .7 are pro￾cessed. A DWORD can then, using the default command SHR , be shifted\nby 8 bits to the right and then the next byte can be processed.", "type": "FUNCTION_BLOCK", "name": "BYTE_TO_BITS", "input": [{"name": "IN", "type": "BYTE", "description": "A single BYTE input that will be converted to individual bits."}], "output": [{"name": "B0", "type": "BOOL", "description": "Output representing the least significant bit (bit 0) of the input BYTE."}, {"name": "B1", "type": "BOOL", "description": "Output representing the second least significant bit (bit 1) of the input BYTE."}, {"name": "B2", "type": "BOOL", "description": "Output representing the third least significant bit (bit 2) of the input BYTE."}, {"name": "B3", "type": "BOOL", "description": "Output representing the fourth least significant bit (bit 3) of the input BYTE."}, {"name": "B4", "type": "BOOL", "description": "Output representing the fifth least significant bit (bit 4) of the input BYTE."}, {"name": "B5", "type": "BOOL", "description": "Output representing the sixth least significant bit (bit 5) of the input BYTE."}, {"name": "B6", "type": "BOOL", "description": "Output representing the seventh least significant bit (bit 6) of the input BYTE."}, {"name": "B7", "type": "BOOL", "description": "Output representing the most significant bit (bit 7) of the input BYTE."}], "in/out": [], "return_value": null}
{"title": "Complex Number Multiplication", "description": "CMUL Multiplies two complex numbers X and Y.", "type": "FUNCTION", "name": "CMUL", "input": [{"name": "X", "type": "COMPLEX", "description": "The first complex number to be multiplied."}, {"name": "Y", "type": "COMPLEX", "description": "The second complex number to be multiplied."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The result of multiplying the two complex numbers.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Byte to Gray Code Conversion", "description": "BYTE_TO_GRAY converts a byte value (IN) in the Gray code.", "type": "FUNCTION", "name": "BYTE_TO_GRAY", "input": [{"name": "IN", "type": "BYTE", "description": "An 8-bit byte that needs to be converted to Gray code."}], "output": [{"name": "BYTE_TO_GRAY", "type": "BYTE", "description": "The resulting Gray code representation of the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The Gray code equivalent of the input byte.", "fields": []}}
{"title": "Extract Byte from String at Position", "description": "CODE determines the numerical code for a character at the position POS\nin STR. Is CODE called with a position with less than 1 or greater than the\nlength of STR, 0 is returned.", "type": "FUNCTION", "name": "CODE", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The input string from which the byte will be extracted."}, {"name": "POS", "type": "INT", "description": "The position in the string from which to extract the byte. Must be between 1 and the length of the string."}], "output": [{"name": "CODE", "type": "BYTE", "description": "The byte extracted from the string at the specified position, or 0 if the position is invalid."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the byte extracted from the string at the specified position, or 0 if the position is out of bounds."}}
{"title": "Convert BYTE to Range", "description": "BYTE_TO_RANGE convert a BYTE value to a REAL. An input value of 0 cor￾responds to the REAL value of LOW and an input value of 255 corresponds\nto the input value of HIGH.\nTo convert a BYTE value of 0 .255 to a percent of 0 .100 the module is cal￾led, as follows:\nBYTE_TO_RANGE (X,0,100)", "type": "FUNCTION", "name": "BYTE_TO_RANGE", "input": [{"name": "X", "type": "BYTE", "description": "The BYTE value to be converted, which should be in the range of 0 to 255."}, {"name": "low", "type": "REAL", "description": "The lower boundary of the desired range."}, {"name": "high", "type": "REAL", "description": "The upper boundary of the desired range."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled value in the range defined by low and high based on the input BYTE value.", "fields": []}}
{"title": "Calculate Volume of a Cone", "description": "CONE_V calculated the volume of a cone with the radius RX and height HX.", "type": "FUNCTION", "name": "CONE_V", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the cone's base."}, {"name": "hx", "type": "REAL", "description": "The height of the cone."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated volume of the cone."}}
{"title": "Convert BYTE to STRING Representation", "description": "BYTE_TO_STRB convert a byte into a fxed-length STRING. The output\nstring is exactly 8 characters long and is the bitwise notation of the value\nof IN. The output string consists of the characters '0 'and '1'. The least si￾gnifcant bit is right in the STRING. If a STRING is required with less than 8\ncharacters, it can be truncated with the standard function RIGHT () accor￾dingly. The call RIGHT(BYTE_TO_STRB (X),4) results in a STRING with four\ncharacters that correspond to the content of the lowest 4 bits of X.", "type": "FUNCTION", "name": "BYTE_TO_STRB", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE value to be converted into a string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The string representation of the byte input, consisting of 8 characters representing each bit.", "fields": []}}
{"title": "BYTE_To_STRH", "description": "BYTE_TO_STRH converts a byte into a fxed-length STRING. The output\nstring is exactly two characters long and is the hexadecimal notation of\nthe value of IN. The output string consists of the characters '0 '.. '9' and\n'A' .. 'F'. The least signifcant sign is right in the STRING.", "type": "FUNCTION", "name": "BYTE_TO_STRH", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE input variable to be converted into a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting string representation of the input BYTE in hexadecimal format.", "fields": []}}
{"title": "B_TRIG Function Block", "description": "B_TRIG generates after a change of edge on the CLK\ninput an output pulse for exactly one PLC cycle. In contrast to the two\nstandard modules R_TRIG and F_TRIG that produce only at falling or rising\nedge of a pulse, B_TRIG generates at falling and rising edge of an output\npulse.", "type": "FUNCTION_BLOCK", "name": "B_TRIG", "input": [{"name": "CLK", "type": "BOOL", "description": "Input variable that represents the clock signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output variable that reflects the state triggered by the input clock signal."}], "in/out": [], "return_value": null}
{"title": "Compute Inverse Hyperbolic Cosine of a Complex Number", "description": "CACOSH calculates the arc hyperbolic cosine of a complex number\n[fzy] The range of values of the result is between [-  ,+  ] For the imagi￾nary part.", "type": "FUNCTION", "name": "CACOSH", "input": [{"name": "X", "type": "COMPLEX", "description": "Input variable representing a complex number for which the inverse hyperbolic cosine will be calculated."}], "output": [{"name": "CACOSH", "type": "complex", "description": "The result of the inverse hyperbolic cosine of the input complex number."}], "in/out": [], "return_value": {"type": "complex", "description": "Returns the complex result of the inverse hyperbolic cosine function.", "fields": []}}
{"title": "PID Controller Function Block", "description": "CTRL_PI is a PI controller with dynamic anti-wind-up and manual control in￾put. The PI controller operates according to the formula:\nY = KP * DIFF + KI * INTEG(DIFF) + OFFSET\nwhere DIFF = SET_POINT - ACTUAL\nIn manual mode (manual = TRUE) is: Y = MANUAL_IN+ OFFSET\nACT is the measured value for the controlled system and set the setpoint\nfor the controller. The input values of LH and LL limit Output value Y. With\nRST the internal integrator may be set to 0 any time. The output LIM si￾gnals that the controller has reached the limit of LL or LH. The PI controller\nis free running and uses the trapezoidal rule to calculate the integrator for\nthe highest accuracy and optimal speed. The Default Values of the input\nparameters are predefned as follows: KP = 1, KI = 1, LIMIT_L = -1000 and\nLIMIT_H = +1000. With the input SUP a noise reduction is set, the value on\ninput SUP determines at which control diference the controller turns on.\nWith SUP is avoided that the output of the controller varies continously.\nThe value at the input SUP should be in dimension that it suppresses the\nnoise of the controlled system and the sensors. If the input to SUP is set to\n0.1, the controller is only at deviations greater than 0.1 active. At the out￾put DIFF the measured and through a Noise Filter (DEAD_BAND) fltered\ncontrol deviation is available. DIFF is normally not required in a controlled\nsystem but can be used to infuence the control parameters. The input\nOFS is added as the last value to output, and is used to compensate main￾ly of noise, whose efect can be estimated on the loop. \nThe controller works with a dynamic air- Up that prevents that the integra￾tor, when reaching a output limit and further deviation, continues to run\nunlimited and afects the properties usually negative. In the introduction\nchapter of the control technology, more details can be found on anti-wind￾up. \nThe following graph illustrates the internal structure of the controller:", "type": "FUNCTION_BLOCK", "name": "CTRL_PI", "input": [{"name": "ACT", "type": "REAL", "description": "The actual value to be used in the PID control."}, {"name": "SET", "type": "REAL", "description": "The desired setpoint value for the PID control."}, {"name": "SUP", "type": "REAL", "description": "The reference value for supervision purposes."}, {"name": "OFS", "type": "REAL", "description": "Offset value to adjust the output signal."}, {"name": "M_I", "type": "REAL", "description": "Manual input value for the controller."}, {"name": "MAN", "type": "BOOL", "description": "Manual mode switch; if true, the controller uses manual input."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the controller operation."}, {"name": "KP", "type": "REAL", "description": "Proportional gain factor for the PID controller.", "fields": null}, {"name": "KI", "type": "REAL", "description": "Integral gain factor for the PID controller.", "fields": null}, {"name": "LL", "type": "REAL", "description": "Lower limit for the output value.", "fields": null}, {"name": "LH", "type": "REAL", "description": "Upper limit for the output value.", "fields": null}], "output": [{"name": "Y", "type": "REAL", "description": "The output value generated by the PID controller."}, {"name": "DIFF", "type": "REAL", "description": "The difference between the setpoint and actual value."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating whether the output is within the limits."}], "in/out": [], "return_value": null}
{"title": "Complex Addition Function", "description": "CADD adds two complex numbers X and Y.", "type": "FUNCTION", "name": "CADD", "input": [{"name": "X", "type": "complex", "description": "The first complex number to be added."}, {"name": "Y", "type": "complex", "description": "The second complex number to be added."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The resulting complex number obtained from the addition of X and Y.", "fields": [{"name": "re", "type": "real", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "real", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Calendar Calculation Function Block", "description": "CALENDAR_CALC automatically calculates all the values in a CALENDAR\nstructure based on the value of the type UTC in the structure. XCAL is a\nPointer an external or global variable of type CALENDAR. CALENDAR_CALC\ncan thus deliver calendar values based on the structure XCAL throughout\nthe module. CALENDAR_CALC determines at each change of the value UTC\nin XCAL automatically all other values in the structure. Alone the value of\nUTC in a structure must be fed by the RTC module. The defnition of the\nstructured type CALENDAR you can fnd in section data structures. The\ncontinuous calculation of the sun position can weigh heavily on a PLC wi￾thout FPU, which is why the current sun position is calculated only once\nevery 25 seconds if SPE = TRUE. This corresponds to an accuracy of 0.1\ndegrees which is quite sufcient for normal applications. If SPE is FALSE,\nthe position of the sun is not calculated. By an external array HOLIDAYS of\ntype HOLYDAY_DATA, the user can specify specifc holidays according to\nhis needs, for more information on the defnition of public holidays see the\nmodule data structures. \nIf several structures of the type CALENDAR are required (for example, or\nvarious local and UTC times) then more modules CALENDAR_CALC can be\nused with diferent structures of TYPE CALENDAR in accordance .\nThe following example shows how the module SYSRTCGETTIME reads the\nRTC of the CPU and writes the current time in SYSTEMCAL.UTC. CALEN￾DAR_CALC checks every cycle if the value in .UTC has changed and if so it\ncalculates the other values of the structure automatically. The output\nWDAY shows how the structure reads data for further processing. CALEN￾DAR_CALC accounts of the setup data from the data structure (OFFSET\nDST_EN, LONGITUDE, LATITUDE).\nIn the external array HOLIDAYS up to 30 holidays can be defned. For ex￾amples, see the description of the data type HOLIDAY_DATA. This array of\nHOLIDAY_DATA must be defned outside of the module and be pre-assi￾gned as a variable with the holiday dates.", "type": "FUNCTION_BLOCK", "name": "CALENDAR_CALC", "input": [{"name": "SPE", "type": "BOOL", "description": "A boolean flag that enables the calculation of the sun's position every 25 seconds if set to TRUE."}, {"name": "H", "type": "REAL", "description": "Twilight offset parameter for sunrise/sunset calculations, defaults to -0.8333."}], "output": [{"name": "XCAL", "type": "CALENDAR", "description": "The calendar data structure that contains local date, time, holidays, and sun information."}, {"name": "HOLIDAYS", "type": "ARRAY[0..29] OF HOLIDAY_DATA", "description": "An array of holiday data to be used for local holiday calculations."}], "in/out": [], "return_value": null}
{"title": "Cosh Function", "description": "COSH calculates the hyperbolic cosine using the formula:", "type": "FUNCTION", "name": "COSH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the hyperbolic cosine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic cosine of the input value X, computed as (1.0 / T + T) * 0.5 where T is equal to EXP(X)."}}
{"title": "Calibration Block", "description": "CALIBRATE serves for calibrating an analog signal. In order to allow a cali￾brating two reference values (Y_OFFSET and Y_SCALE) must be set by dou￾ble-clicking on the icon of the module. Y_OFFSET is the starting value at\nwhich the ofset is set by a pulse at CO and Y_SCALE is the value at which\nthe gain is determined. A calibration can only be successful if the frst of￾set and gain are then calibrated.", "type": "FUNCTION_BLOCK", "name": "CALIBRATE", "input": [{"name": "X", "type": "REAL", "description": "Input value that will be calibrated."}, {"name": "CO", "type": "BOOL", "description": "Control signal to adjust the offset."}, {"name": "CS", "type": "BOOL", "description": "Control signal to adjust the scale."}, {"name": "Y_Offset", "type": "REAL", "description": "Constant value for offset adjustment."}, {"name": "Y_Scale", "type": "REAL", "description": "Constant value for scale adjustment."}], "output": [{"name": "Y", "type": "REAL", "description": "Calibrated output value based on the input and calibration parameters."}], "in/out": [], "return_value": {}}
{"title": "Coth Function Calculation", "description": "COTH calculates the hyperbolic cotangent by the following formula:\nFor input values larger than 20 or less than -20 COTH provides the appro￾ximate value +1 or -1 corresponding to an accuracy better than 8 digits\nand is thus below the resolution of type REAL.", "type": "FUNCTION", "name": "COTH", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the hyperbolic cotangent will be calculated."}], "output": [{"name": "COTH", "type": "REAL", "description": "The calculated hyperbolic cotangent value based on the input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed hyperbolic cotangent value."}}
{"title": "PID Control Function Block", "description": "CTRL_PID is a PID controller with dynamic anti-wind up and manual control\ninput. The PID controller operates according to the formula: \nY = KP * (DIFF + 1/Tn * INTEG(DIFF) + TV *DERIV(DIFF)) + OFFSET\nwhere DIFF = SET_POINT - ACTUAL\nIn manual mode (manual = TRUE) is: Y = MANUAL_IN+ OFFSET\nACT is the measured value for the controlled system and SET is the set￾point for the controller. The input values of LH and LL limit the output va￾lue Y. With RST, the internal integrator will always set to 0. The output LIM\nsignals that the controller has reached the limit of LL or LH. The PID con￾troller operates free-running and uses the trapezoidal rule to calculate\nwith highest accuracy and optimal speed. The default values of the input\nparameters are predefned as follows: KP = 1, TN = 1, TV = 1, LIMIT_L =\n-1000 and LIMIT_H = +1000. With the input SUP a noise reduction is set,\nthe value on input SUP determines at which control diference, the control￾ler turns on. With SUP is avoided that the output of the controller wob￾bles. The value at the input SUP should be in dimension that it suppresses\nthe noise of the controlled system and the sensors. If the input to SUP is\nset to 0.1, the controller is only at deviations greater than 0.1 active. The\nouput DIFF passes the measured and through a noise flter (DEAD_BAND)\nfltered control deviation. DIFF is normally not required in a controlled sys￾tem but can be used to infuence the control parameters. The input OFS is\nadded as the last value to output, and is used to compensate mainly of\nnoise, whose efect can be estimated on the loop. \nThe controller works with a dynamic air- Up that prevents that the integra￾tor, when reaching a output limit and further deviation, continues to run\nunlimited and afects the properties usually negative. In the introduction\nchapter of the control technology, more details can be found on anti-wind￾up. \nThe control parameters are given in the form of KP, TN and TV, and if the￾re are parameters KP, KI and KD they can be converted using the following\nformula:\nTN = KP/KI und TV = KD/KP\nThe following graph illustrates the internal structure of the controller:\nIn the following example, a PID controller is shown whose SET_POINT is ge￾nerated by module TUNE2 using buttons. Output DIFF is passedto a modu￾le PARSET2 which changes the parameters KP, TN, and TV depending on\nthe deviation at the output of DIFF.", "type": "FUNCTION_BLOCK", "name": "CTRL_PID", "input": [{"name": "ACT", "type": "REAL", "description": "The actual value from the process being controlled."}, {"name": "SET", "type": "REAL", "description": "The desired setpoint for the process variable."}, {"name": "SUP", "type": "REAL", "description": "A supplementary input for additional control."}, {"name": "OFS", "type": "REAL", "description": "Offset value for the controller output."}, {"name": "M_I", "type": "REAL", "description": "Manual input value for control when in manual mode."}, {"name": "MAN", "type": "BOOL", "description": "Manual control flag; when true, overrides the automatic control."}, {"name": "RST", "type": "BOOL", "description": "Reset flag for the PID controller."}, {"name": "KP", "type": "REAL", "description": "Proportional gain of the PID controller.", "default": "1.0"}, {"name": "TN", "type": "REAL", "description": "Integral time constant of the PID controller.", "default": "1.0"}, {"name": "TV", "type": "REAL", "description": "Derivative time constant of the PID controller.", "default": "1.0"}, {"name": "LL", "type": "REAL", "description": "Lower limit for the controller output.", "default": "-1000.0"}, {"name": "LH", "type": "REAL", "description": "Upper limit for the controller output.", "default": "1000.0"}], "output": [{"name": "Y", "type": "REAL", "description": "Output value of the PID controller."}, {"name": "DIFF", "type": "REAL", "description": "Difference between setpoint and actual value."}, {"name": "LIM", "type": "BOOL", "description": "Indicator whether the output is within defined limits."}], "in/out": [], "return_value": null}
{"title": "Calculate Argument of Complex Number", "description": "CARG calculates the angle of a complex number in the coordinate system.\nThe range of values of the result is between [-π , +π ].", "type": "FUNCTION", "name": "CARG", "input": [{"name": "X", "type": "COMPLEX", "description": "A complex number for which the argument needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated argument (angle in radians) of the complex number X.", "fields": []}}
{"title": "PWM Control Function Block", "description": "CTRL_PWM converts the input value of CI (0 .1) in a pulse width modulated\noutput signal Q. When MANUAL is TRUE at the output Q the input value of\nMAN_IN is passed. CTRL_OUT can be used to build own rule modules.\nBlock diagram of CTRL_PWM:\nThe following example shows a PI controller with PWM output:", "type": "FUNCTION_BLOCK", "name": "CTRL_PWM", "input": [{"name": "CI", "type": "REAL", "description": "The control input value used for PWM calculation."}, {"name": "MAN_IN", "type": "REAL", "description": "The manual input value that can override the control input when MANUAL is true."}, {"name": "MANUAL", "type": "BOOL", "description": "A boolean flag indicating whether to use MAN_IN (true) or CI (false) for the PWM calculation."}, {"name": "F", "type": "REAL", "description": "The frequency used for PWM signal generation."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output status indicating whether the PWM signal is active."}], "in/out": [], "return_value": null}
{"title": "Complex Arc Sine Function", "description": "CASIN calculates the arc sine of a complex number\nThe range of values of the result is between [-/2,+/2 ] For the imagina￾ry part.", "type": "FUNCTION", "name": "CASIN", "input": [{"name": "X", "type": "complex", "description": "Input variable of type complex, representing the complex number for which the arc sine will be calculated."}], "output": [{"name": "CASIN", "type": "complex", "description": "Output variable of type complex, representing the arc sine of the input complex number X."}], "in/out": [], "return_value": {"type": "complex", "description": "The resulting complex number from the computation of the arc sine.", "fields": [{"name": "re", "type": "real", "description": "The real part of the resulting complex number."}, {"name": "im", "type": "real", "description": "The imaginary part of the resulting complex number."}]}}
{"title": "Cycle Time Measurement", "description": "CYCLE_TIME monitors the cycle time of a PLC and provides the user with a\nrange of information about cycle times and run times. The total number of\ncycles is also measured. Hereby, the user can, for example ensure that a\nfunction is called every 100 cycles. Control modules can report errors if\nthe cycle time is too long and therefore the control parameters can not be\nguaranteed.", "type": "FUNCTION_BLOCK", "name": "CYCLE_TIME", "input": [{"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the cycle time measurements."}], "output": [{"name": "ct_min", "type": "TIME", "description": "The minimum cycle time recorded."}, {"name": "ct_max", "type": "TIME", "description": "The maximum cycle time recorded."}, {"name": "ct_last", "type": "TIME", "description": "The last cycle time measured."}, {"name": "systime", "type": "TIME", "description": "The accumulated system time."}, {"name": "sysdays", "type": "INT", "description": "The number of days accounted for in system time."}, {"name": "cycles", "type": "DWORD", "description": "The total count of cycles that have occurred."}], "in/out": [], "return_value": null}
{"title": "Convert String to Week Representation", "description": "FSTRING_TO_WEEK decode a list of days on the form 'MO,TU,3'in a Bitpat￾tern (bit6 = MO...Bit0 = So) For the evaluation each of the frst two letters\nof the list elements are evaluated, the rest are ignored. If the string con￾tains spaces they will be removed. The days of the week can be present in\nboth upper-or lowercase. LANG specifes the language used, 1 = English, 2\n= German, 0 is the default language defned in the setup.\nMo = 1; Di, Tu = 2; We, Mi = 3; Th, Do = 4; Fr = 5; Sa = 6; So, Su = 7\nSince the function evaluates only the frst two characters, the weekdays\nmay also be spelled out (Monday) format.\nAs an alternative form, the weekday can be specifed as number 1..7.\nThe list includes the weekdays unsorted and separated by commas.\nFSTRING_TO_WEEK ('Mo,Tu,Sa',2) = 2#01100010.", "type": "FUNCTION", "name": "FSTRING_TO_WEEK", "input": [{"name": "WEEK", "type": "STRING[60]", "description": "A string containing the weekdays separated by commas."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language index for weekday conversion."}], "output": [{"name": "FSTRING_TO_WEEK", "type": "BYTE", "description": "A byte value representing the converted weekdays."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns a byte value that encodes the weekdays from the input string.", "fields": []}}
{"title": "Celsius to Kelvin Conversion", "description": "C_TO_K converts a temperature reading from Celsius to Kelvin.", "type": "FUNCTION", "name": "C_TO_K", "input": [{"name": "Celsius", "type": "REAL", "description": "The temperature in degrees Celsius that needs to be converted to Kelvin."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Kelvin, calculated by adjusting the Celsius input.", "fields": []}}
{"title": "Date Addition Function", "description": "DATE_ADD add days, weeks, months, and add years to a\ndate. First the module adds the specifed days and weeks, then months\nand fnally the years. \nThe input values can be both positive as well be negative. So it can also\nbe subtracted from a date.\nNote that especially for negative input values the sum of negative values,\ni.e. -3000 days does not run below 1.1.1970 because this would have an\noverfow of data type DATE and undefned values are obtained.", "type": "FUNCTION", "name": "DATE_ADD", "input": [{"name": "IDATE", "type": "DATE", "description": "The initial date to which the adjustments will be made."}, {"name": "D", "type": "INT", "description": "The number of days to add to the initial date."}, {"name": "W", "type": "INT", "description": "The number of weeks to add to the initial date."}, {"name": "M", "type": "INT", "description": "The number of months to add to the initial date."}, {"name": "Y", "type": "INT", "description": "The number of years to add to the initial date."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The resulting date after the specified additions."}}
{"title": "Fade Function Block", "description": "FADE is used to switch between 2 inputs IN1 and IN2 with a soft transition.\nThe switching time is specifed as TF. An asynchronous reset (RST) resets\nthe module without delay to IN1 if F = FALSE or IN2 when F = TRUE. A\nswitching operation is triggered by a change in the value of R. Then it\nswitches within the time TF between the two inputs. The switchover will\nmix the two entrances during the changeover. At the beginning of swit￾ching at the output are at 0% of the new value and 100% of the old value\npasssed. after half the transfer time (TF/2) the output has 50% each of the\ntwo input values (Y = in1* 0.5 + in2 * 0.5). after the time TF is then the\nnew output value to 100% available.\nDuring the switching of the output Y is:\nY = TU/TF * IN1 + (1 - TU/TF) * IN2.\nTU is the time elapsed since the start of the switchover.\nSince the output of FADE is dynamically calculated, the device can also be\nused to switch dynamic signals. The switch is divided into up to 65,535\nsteps, which can be limited by the cycle time of the PLC. A PLC with a cy￾cle time of 10ms and a TF of a second is only in 1s/10ms = 100 steps to\nchange channels.", "type": "FUNCTION_BLOCK", "name": "FADE", "input": [{"name": "IN1", "type": "REAL", "description": "The starting value for the fade effect."}, {"name": "IN2", "type": "REAL", "description": "The target value for the fade effect."}, {"name": "F", "type": "BOOL", "description": "A boolean flag that indicates whether the fade operation should be active."}, {"name": "TF", "type": "TIME", "description": "The duration of the fade effect."}, {"name": "rst", "type": "BOOL", "description": "A reset signal that initializes the ramp module and stops the fade effect."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after applying the fade effect between IN1 and IN2."}], "in/out": [], "return_value": null}
{"title": "Calculate Days Delta", "description": "DAYS_DELTA calculates the diference between two data in\ndays.", "type": "FUNCTION", "name": "DAYS_DELTA", "input": [{"name": "date_1", "type": "DATE", "description": "The first date for comparison."}, {"name": "date_2", "type": "DATE", "description": "The second date for comparison."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The difference in days between date_1 and date_2.", "fields": []}}
{"title": "Calculate Days in Month", "description": "DAYS_IN_MONTH function calculates the number of days in the current\nmonth.", "type": "FUNCTION", "name": "DAYS_IN_MONTH", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the number of days in the month needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The number of days in the month corresponding to the provided date.", "fields": []}}
{"title": "Flip-Flop Dynamic Reset and Set", "description": "FF_DRE is a edge-triggered D-Flip-Flop with Asynchronous Set and Reset\ninput. A rising edge at CLK stores the input D to output Q. A TRUE on the\nSET or RST input resets or clears the output Q at any time regardless of\nCLK. The reset input has priority over the input set. If both are active\n(TRUE) are reset is processed and SET is ignored.", "type": "FUNCTION_BLOCK", "name": "FF_DRE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the output Q to high."}, {"name": "D", "type": "BOOL", "description": "Data input that determines the value of output Q when CLK is high."}, {"name": "CLK", "type": "BOOL", "description": "Clock input that triggers the update of output Q on its rising edge."}, {"name": "RST", "type": "BOOL", "description": "Input to reset the output Q."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output that represents the state of the flip-flop."}], "in/out": [], "return_value": null}
{"title": "Calculate Days in Year", "description": "DAYS_IN_YEAR function calculates the number of days in the current\nyear.", "type": "FUNCTION", "name": "DAYS_IN_YEAR", "input": [{"name": "IDATE", "type": "DATE", "description": "The date for which the number of days in the year needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The number of days in the year corresponding to the given date (365 or 366)."}}
{"title": "J-K Flip-Flop Function Block", "description": "FF_JKE is an edge-triggered JK-fop-fop with asynchronous Set and Reset\ninputs. The JK-Flip-Flop sets the output Q when with a rising edge of the\nCLK the Input J is TRUE. Q is FALSE when on a rising clock edge the input K\nis TRUE. If the two inputs J and K on a rising clock edge are TRUE, the out￾put will be negated. It switches the output signal in each cycle. \nD\nCLK\nRST\nQ\nSET", "type": "FUNCTION_BLOCK", "name": "FF_JKE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the flip-flop to high."}, {"name": "J", "type": "BOOL", "description": "Input that determines the next state of Q when activated."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal that synchronizes state changes."}, {"name": "K", "type": "BOOL", "description": "Input that determines the next state of Q when activated."}, {"name": "RST", "type": "BOOL", "description": "Input to reset the flip-flop to low."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current state of the flip-flop output."}], "in/out": [], "return_value": null}
{"title": "Calculate Day of Date", "description": "DAY_OF_DATE day since 1.1.1970. The result of\nthe function is of type DINT because the entire DATE Range Includes\n49,710 days.", "type": "FUNCTION", "name": "DAY_OF_DATE", "input": [{"name": "idate", "type": "DATE", "description": "The date for which the day of the date is to be calculated."}], "output": [{"name": "DAY_OF_DATE", "type": "DINT", "description": "The calculated day of the date as a DINT value, which accommodates a range of 49710 days."}], "in/out": [], "return_value": {"type": "DINT", "description": "The computed day of the date returned as a DINT value.", "fields": []}}
{"title": "FF_RSE Function Block", "description": "FF_RSE an edge-triggered RS fip-fop. The output Q is set by a rising edge\nof CS and cleared by a rising edge on CR. If both edges (CS and CR) rise at\nthe same time, the output is set to FALSE. An asynchronous reset input\nRST sets the output at any time to FALSE.", "type": "FUNCTION_BLOCK", "name": "FF_RSE", "input": [{"name": "CS", "type": "BOOL", "description": "Clock signal input, triggers a transition on the rising edge."}, {"name": "CR", "type": "BOOL", "description": "Reset signal input, sets the output Q to FALSE on the rising edge."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal to set output Q to FALSE immediately."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal representing the state of the flip-flop (TRUE or FALSE)."}], "in/out": [], "return_value": null}
{"title": "Calculate Day of Month", "description": "DAY_OF_MONTH function calculates the day of the month from the in￾put date IDATE.", "type": "FUNCTION", "name": "DAY_OF_MONTH", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the day of the month is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated day of the month based on the input date, adjusted for leap years and month offsets."}}
{"title": "Fibonacci Function", "description": "FIB calculate the Fibonacci number The Fibonacci number is defned as fol￾lows:\nFIB(0) = 0, FIB(1) = 1, FIB(2) = 1, FIB(3) = 2, FIB(4) = 3, FIB(5) = 5 .....\nThe Fibonacci number of X is equal to the sum of the Fibonacci numbers of\nX-1 and X-2. The function can compute the Fibonacci numbers up to 46, if\nX < 0 or greater than 46, the function returns -1.", "type": "FUNCTION", "name": "FIB", "input": [{"name": "X", "type": "INT", "description": "An integer input for which the Fibonacci number needs to be calculated."}], "output": [{"name": "FIB", "type": "DINT", "description": "The calculated Fibonacci number, or -1 for invalid input."}], "in/out": [], "return_value": {"type": "DINT", "description": "The final result of the Fibonacci calculation.", "fields": []}}
{"title": "Calculate Day of the Week", "description": "DAY_OF_WEEK week from the date of receipt\nIDATE.\nMonday = 1 .. Sunday = 7 The calculation is done in accordance with\nISO8601.", "type": "FUNCTION", "name": "DAY_OF_WEEK", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the day of the week is to be calculated."}], "output": [{"name": "DAY_OF_WEEK", "type": "INT", "description": "An integer representing the day of the week, where 1 corresponds to Sunday."}], "in/out": [], "return_value": {"type": "INT", "description": "The day of the week as an integer.", "fields": []}}
{"title": "Calculate Day of Year", "description": "DAY_OF_YEAR function calculates the day of the year from the input\ndate IDATE. Leap years are taken into account according to the Gregorian\ncalendar. The function is defned for the years 1970 - 2099.", "type": "FUNCTION", "name": "DAY_OF_YEAR", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date from which the day of the year needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated day of the year as an integer value."}}
{"title": "Convert Day to Time", "description": "DAY_TO_TIME calculates a value (TIME) from the input value\nin days as REAL.", "type": "FUNCTION", "name": "DAY_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing a duration in days that needs to be converted into time."}], "output": [{"name": "TIME", "type": "TIME", "description": "The output value representing the equivalent time format after conversion from the input days."}], "in/out": [], "return_value": {"type": "TIME", "description": "The TIME value that represents the input duration in days converted to time.", "fields": []}}
{"title": "Integrator Function Block", "description": "FT_INT is an integrator module which provides the integral of the input si￾gnal at the output. The input K is a multiplier for the output signal. Run\nswitches the integrator on if TRUE and of when FALSE. RST (reset) sets\nthe output to 0. The inputs OUT_MIN and OUT_MAX serve upper and lower\nlimits for the output of the integrator . FT_INT \nworks internally in microseconds and is thus fulfll also the requirements\nvery fast PLC controller with cycle times under one millisecond.\nA fundamental problem with integrator is the resolution.The output of type\nreal has a resolution of 7-8 points. This will result in a calculated integrati-\non step of 1 at an output value of more than one hundred million (1E8).\nThus the step can not be added up because it falls below the resolution li￾mit of a maximum of 8 points in type Real. This limitation is important\nwhen using FT_INT.\nFor example, an input signal of 0.0001 would be at a sampling time of 1\nmillisecond and a baseline of 100000 to add a value of 0.0001 * 0.001 se￾conds = 0.000001 to the baseline of 100000, which inevitably results in\nthe value of 100000 again, because the resolution of the data type Real\ncan only collect up to 8. This should be considered especially if FT_INT\nshould serve as a utility meter or similar applications.\nStructure diagram:", "type": "FUNCTION_BLOCK", "name": "FT_INT", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be integrated."}, {"name": "K", "type": "REAL", "description": "The integration factor, default is set to 1."}, {"name": "RUN", "type": "BOOL", "description": "A boolean indicating whether the integration should run or not, default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "A reset flag that, when TRUE, resets the output to zero."}, {"name": "OUT_MIN", "type": "REAL", "description": "The minimum limit for the output, default is set to -1E+37."}, {"name": "OUT_MAX", "type": "REAL", "description": "The maximum limit for the output, default is set to 1E+37."}], "output": [{"name": "OUT", "type": "REAL", "description": "The result of the integration process."}, {"name": "LIM", "type": "BOOL", "description": "A boolean indicating if the output has reached a limit."}], "in/out": [], "return_value": null}
{"title": "FILL Function", "description": "FILL creates a string consisting of the symbol C with the length L.\nFILL(49,5) = '11111'\nThe FILL function evaluates the Global Setup constant STRING_LENGTH\nand limits the maximum length L of the string to STRING_LENGTH.", "type": "FUNCTION", "name": "FILL", "input": [{"name": "C", "type": "BYTE", "description": "A byte value to be converted to a string."}, {"name": "L", "type": "INT", "description": "An integer specifying how many times the character should be appended, limited to a maximum of 80 characters."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting concatenated string after processing the input byte and limit."}}
{"title": "Dead Band Calculation Function", "description": "DEAD_BAND is a linear transfer function with dead zone. The function mo￾ves the positive part of the curve to -L and the negative part of the curve\nby +L. DEAD_BAND is used to flter a quantization noise and other noise\ncomponents from a signal. DEAD_BAND, for example, is used in control\nsystems in order to prevent that the controller permanently switches in\nsmall increments, while the actuator is overstressed and worn out.\nDEAD_BAND = X - SGN(X)*L if ABS(X)> L if ABS(X) > L \nDEAD_BAND = 0 if ABS(X) <= L", "type": "FUNCTION", "name": "DEAD_BAND", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the dead band is calculated."}, {"name": "L", "type": "REAL", "description": "The limit value used to determine the dead band thresholds."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated dead band value based on the input conditions."}}
{"title": "Filter Dynamics with Time Integration", "description": "FILTER_DW is a flter of the frst degree for 32-bit DWORD data. The main\napplication is the fltering of sensor signals for noise reduction. The basic\nfunctionality of a flter of the frst degree can be found in the module\nFT_PT1.", "type": "FUNCTION_BLOCK", "name": "FILTER_DW", "input": [{"name": "X", "type": "DWORD", "description": "Input value to be filtered."}, {"name": "T", "type": "TIME", "description": "Time interval over which the integration is computed."}], "output": [{"name": "Y", "type": "DWORD", "description": "The filtered output value."}], "in/out": [], "return_value": {}}
{"title": "Dead Band Filter Function Block", "description": "DEAD_BAND_A is a self adapting linear transfer function with dead zone.\nThe function moves the positive part of the curve to -L and the negative\npart of the curve by +L. DEAD_BAND_A is used to flter the noise com￾ponents at the origin of a signal. DEAD_BAND_A, for example, used in con￾trol systems in order to prevent that the controller permanently switches\nin small increments, while the actuator is overstressed and worn out.\nThe size L is calculated by fltering the HF cpmponents of the input signal\nX using a low pass with time constant T and the dead zone L calculated\nfrom the amplitude of the HF portion. The sensitivity of the device can be\nchanged via the parameter KL. KL is predefned to 1 and can be unconnec￾ted. Reasonable values for KL are between 1 - 5.\nL = HF_Amplitude(efective) *KL.\nSo that the module will remain stable even under extreme operating con￾ditions, the input LM is limited by of the maximum value of L.\nDEAD_BAND = X - SGN(X)*L if ABS(X)> L if ABS(X) > L \nDEAD_BAND = 0 if ABS(X) <= L", "type": "FUNCTION_BLOCK", "name": "DEAD_BAND_A", "input": [{"name": "X", "type": "REAL", "description": "The input signal to be filtered."}, {"name": "T", "type": "TIME", "description": "The time constant for the filtering process."}, {"name": "KL", "type": "REAL", "description": "A scaling factor for the dead band, default value is 1.0."}, {"name": "LM", "type": "REAL", "description": "The maximum limit for the dead band's width."}], "output": [{"name": "Y", "type": "REAL", "description": "The processed output signal after applying dead band filtering."}, {"name": "L", "type": "REAL", "description": "The computed width of the dead band, representing stability."}], "in/out": [], "return_value": null}
{"title": "Filter Function Block", "description": "FILTER_I is a flter of the frst degree for 16-bit INT data. The main applica￾tion is the fltering of sensor signals for noise reduction. The basic functio￾nality of a flter of the frst degree can be found in the module FT_PT1.", "type": "FUNCTION_BLOCK", "name": "FILTER_I", "input": [{"name": "X", "type": "INT", "description": "An integer input value to be filtered."}, {"name": "T", "type": "TIME", "description": "A time duration used to control the filtering process."}], "output": [{"name": "Y", "type": "INT", "description": "The filtered output value computed from the input."}], "in/out": [], "return_value": null}
{"title": "Dead Zone Function", "description": "DEAD_ZONE is a linear transfer function with dead zone. The output equals \nthe input signal when the absolute value of the input is greater than L.\nDEAD_ZONE = X if ABS(X) > L \nDEAD_ZONE = 0 if ABS(X) <= L", "type": "FUNCTION", "name": "DEAD_ZONE", "input": [{"name": "X", "type": "REAL", "description": "Input variable X of type REAL which is evaluated against the threshold L."}, {"name": "L", "type": "REAL", "description": "Input variable L of type REAL which serves as the threshold for the dead zone."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the dead zone calculation, which is either the value of X if |X| > L or 0.0 if |X| <= L."}}
{"title": "Moving Average Filter", "description": "FILTER_MAV_DW is a flter with moving average. The flter with moving\naverage (also Moving Average Filter called) the average of N successive\nreadings is output as an average. \nY:= (X0 + X1 + … + Xn-1) / N\nX0 is the value of X in the current cycle, X1 is the value in the previous cy￾cle, etc. The number of values over which the average has to be calcula￾ted is specifed at the input N. The range of values of N is between 1 and\n32", "type": "FUNCTION_BLOCK", "name": "FILTER_MAV_DW", "input": [{"name": "X", "type": "DWORD", "description": "The input data value to be filtered."}, {"name": "N", "type": "UINT", "description": "The number of samples to consider for the moving average. It is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "A reset signal that, when TRUE, reinitializes the buffer and the output."}], "output": [{"name": "Y", "type": "DWORD", "description": "The output value representing the current moving average."}], "in/out": [], "return_value": null}
{"title": "Average Calculation Function Block", "description": "FT_AVG calculates a moving average over each of\nthe last N values. By the input RST, the stored values can be deleted. N is\ndefned from 0 .. 32. N = 0 means that the output signal = input signal. N\n= 5 is the average over the last 5 values. The average is calculated over a\nmaximum of 32 values. With input E can be control when the input is read.\nThis allows a simple way to connect a sample and a hold module, such as\nSH_1 with FT_AVG can be linked. The frst call to FT_AVG the bufer load\nthe input signal to avoid that a Ramp-up takes place. \nThe following example reads SH_1 once a second the input value Signal_In\nand passes these values once per second to FT_AVG, which then forms out\nof the last 8 values the mean value.", "type": "FUNCTION_BLOCK", "name": "FT_AVG", "input": [{"name": "IN", "type": "REAL", "description": "The input real value to be averaged."}, {"name": "E", "type": "BOOL", "description": "Enable signal to control the calculation of the average, defaults to TRUE."}, {"name": "N", "type": "INT", "description": "The number of cycles for which the average is calculated, limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize the buffer with the actual input value instead of zero."}], "output": [{"name": "AVG", "type": "REAL", "description": "The computed average of the input values over the specified cycles."}], "in/out": [], "return_value": null}
{"title": "Finite Time Derivative Calculation", "description": "FT_DERIV is a D-link, or LZI-transfer element, which has a diferentiating\ntransfer behavior. At the output of FT_DERIV the derivative is over time T\nin seconds. When the input signal increases in one second from 3 to 4\nthen the output 1 * K (K *  X /  T = 1 * (4-3) / 1 = 1\nIn other words, the derivative of the input signal, the instantaneous slope\nof the input signal. With the input RUN the FT_DERIV can be enabled or di￾sabled. FT_DERIV works internally in microseconds and fulfll also the re￾quirements of very fast PLC controller with cycle times under a millise￾cond.\nStructure diagram:", "type": "FUNCTION_BLOCK", "name": "FT_DERIV", "input": [{"name": "in", "type": "REAL", "description": "Current input value to be differentiated."}, {"name": "K", "type": "REAL", "description": "Scaling factor for the derivative calculation, default is 1.0."}, {"name": "run", "type": "BOOL", "description": "Boolean to indicate if the calculation should be performed, default is TRUE."}], "output": [{"name": "out", "type": "REAL", "description": "Calculated derivative value based on the input."}], "in/out": [], "return_value": null}
{"title": "First-Order Transfer Function Implementation", "description": "FT_IMP is a high-pass flter with time constant T and multiplier K. An ab￾rupt change at the input is visible at the output, but after the time T the\nvalue is already smoother by 63% and after 3 * T by 95%. Thus, after an\nabrupt change of the input signal from 0 to 10, the output passes 10 at\nthe beginning and reduces after 1* T to 3.7 and after 3 * T to 0.5 and then\ngradually to 0.\nStructure diagram:", "type": "FUNCTION_BLOCK", "name": "FT_IMP", "input": [{"name": "in", "type": "REAL", "description": "The input signal to the transfer function."}, {"name": "T", "type": "TIME", "description": "The time constant of the transfer function."}, {"name": "K", "type": "REAL", "description": "The scaling factor applied to the output, default is 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output signal after applying the transfer function."}], "in/out": [], "return_value": null}
{"title": "Moving Average Filter", "description": "FILTER_MAV_W is a flter with moving average. The flter with moving ave￾rage (also Moving Average Filter called) the average of N successive rea￾dings is output as an average. \nY:= (X0 + X1 + … + Xn-1) / N\nX0 is the value of X in the current cycle, X1 is the value in the previous cy￾cle, etc. The number of values over which the average has to be calcula￾ted is specifed at the input N. The range of values of N is between 1 and\n32", "type": "FUNCTION_BLOCK", "name": "FILTER_MAV_W", "input": [{"name": "X", "type": "WORD", "description": "Input variable which is a word value to be averaged."}, {"name": "N", "type": "UINT", "description": "Input variable that specifies the number of samples to average. It is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "Reset variable that initializes the moving average calculation when set to TRUE."}], "output": [{"name": "Y", "type": "WORD", "description": "Output variable which holds the current average value."}], "in/out": [], "return_value": null}
{"title": "Decimal to Byte Conversion", "description": "DEC_TO_BYTE converts a decimal encoded string into a byte\nvalue. Here only decimal characters '0 '.. '9' are interpreted, others in DEC\noccurring characters are ignored .", "type": "FUNCTION", "name": "DEC_TO_BYTE", "input": [{"name": "DEC", "type": "STRING(10)", "description": "A string representation of a decimal number to be converted to byte."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte representation of the input decimal string.", "fields": []}}
{"title": "Filter Block", "description": "FILTER_W Output The main application is the fltering of sensor signals for noise re￾duction. The basic functionality of a flter of the frst degree can be found\nin the module FT_PT1.", "type": "FUNCTION_BLOCK", "name": "FILTER_W", "input": [{"name": "X", "type": "WORD", "description": "Input value to be filtered."}, {"name": "T", "type": "TIME", "description": "Time interval for filtering."}], "output": [{"name": "Y", "type": "WORD", "description": "Filtered output value."}], "in/out": [], "return_value": null}
{"title": "Decimal to DWORD Conversion Function", "description": "DEC_TO_DWORD converts a decimal encoded string into a\nbyte value. Here only decimal characters '0 '.. '9' are interpreted, others in\nDEC occurring characters are ignored .", "type": "FUNCTION", "name": "DEC_TO_DWORD", "input": [{"name": "DEC", "type": "STRING[20]", "description": "A string of up to 20 characters representing a decimal number."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value obtained from the decimal string conversion."}}
{"title": "Filter Waveform", "description": "FILTER_WAV is a flter with a weighted average. (Also called FIR flter) the\nflter with a weighted average of individual values in the bufer are evalua￾ted with diferent weights.\nY:= X0 * W0 + X1 * W1 + ….+ X15 * W15\nX0 is the value of X in the current cycle, X1 is the value in the previous cy￾cle, etc. The factors W are passed as the input array W. In applying the FIR\nflter hast to be ensured that appropriate factors are used for weighting.\nThe application makes sense only if these factors are determined by ap￾propriate methods or design software.", "type": "FUNCTION_BLOCK", "name": "FILTER_WAV", "input": [{"name": "X", "type": "REAL", "description": "The input sample value to be filtered."}, {"name": "W", "type": "ARRAY[0..15] OF REAL", "description": "An array of weights corresponding to the samples in the buffer."}, {"name": "RST", "type": "BOOL", "description": "A reset signal that initializes the buffer if set to TRUE."}], "output": [{"name": "Y", "type": "REAL", "description": "The output result representing the weighted average of the buffered samples."}], "in/out": [], "return_value": null}
{"title": "Decimal String to Integer Conversion", "description": "DEC_TO_INT converts a decimal encoded string into a byte\nvalue. Here only decimal characters '0 '.. '9' and '-' are interpreted, others\nin DEC occurring characters are ignored .", "type": "FUNCTION", "name": "DEC_TO_INT", "input": [{"name": "DEC", "type": "STRING[10]", "description": "The input decimal string to be converted to an integer."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The integer value resulting from the conversion of the input decimal string.", "fields": []}}
{"title": "Degree Conversion Function", "description": "DEG(π) = 180 Grad, DEG(3π) = 180 Grad\nDEG(0) = 0 Grad, DEG(2π) = 0 Grad", "type": "FUNCTION", "name": "DEG", "input": [{"name": "rad", "type": "REAL", "description": "The angle in radians to be converted to degrees."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in degrees, constrained to be between 0 and 360 degrees.", "fields": []}}
{"title": "FindB Function", "description": "FINDB searched for the presence of STR2 in STR1 and returns\nthe last position of STR2 in STR1.\nIf STR2 is not found, a 0 is returned.", "type": "FUNCTION", "name": "FINDB", "input": [{"name": "str1", "type": "STRING(STRING_LENGTH)", "description": "The main string in which the search for the substring will be conducted."}, {"name": "str2", "type": "STRING(STRING_LENGTH)", "description": "The substring that is being searched for in 'str1'."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the last occurrence of 'str2' in 'str1'. Returns 0 if 'str2' is not found.", "fields": []}}
{"title": "Convert Degrees to Direction", "description": "DEG_TO_DIR calculates a direction (0 .360 degrees) into to compass rea￾dings. At the input DEG the direction in degrees is available (0 = North, 90\n= East, 180 = South and 270 = West ). The output represents the directi￾on as String NNE. With the input N the maximum length of the direction in￾dication is limited. When N = 1, only in the 4 cardinal directions N, E, S, W\ndissolved. If N = 2 between each another direction is inserted: NE, SE, SW,\nNW. At N = 3 are also directions as NNO ... are dissolved, with N = 3 a to￾tal of 16 directions are evaluated. The input L allows the switching of the\nlanguages defned in the language setup. 0L = 0 means Default Langua￾ge, a number > 0 is one of the predefned languages. more info about the\npre-defned data types can be found at CONSTANTS_LANGUAGE.", "type": "FUNCTION", "name": "DEG_TO_DIR", "input": [{"name": "DEG", "type": "INT", "description": "The degree input to be converted to a direction."}, {"name": "N", "type": "INT", "description": "An additional input variable that influences the calculation of the direction."}, {"name": "L", "type": "INT", "description": "Length input that determines the language used for direction output."}], "output": [{"name": "DEG_TO_DIR", "type": "string", "description": "The resulting string that represents the direction based on the degree input."}], "in/out": [], "return_value": {"type": "string", "description": "Returns the direction corresponding to the given degree input."}}
{"title": "Minimum and Maximum Value Calculation", "description": "FT_MIN_MAX stores the minimum and maximum value of an input signal\nIN and provides these two values at the outputs of MN and MX until clea￾red by a reset. A reset sets MN and MX on the reset applied input values.", "type": "FUNCTION_BLOCK", "name": "FT_MIN_MAX", "input": [{"name": "in", "type": "REAL", "description": "The input value for which the minimum or maximum is to be calculated."}, {"name": "rst", "type": "BOOL", "description": "A reset flag that, when true, resets the minimum and maximum values."}], "output": [{"name": "mx", "type": "REAL", "description": "The current maximum value calculated."}, {"name": "mn", "type": "REAL", "description": "The current minimum value calculated."}], "in/out": [], "return_value": null}
{"title": "Delay Function Block", "description": "DELAY delays an input signal (IN) for N cycles. The input RESET is asyn￾chronous, and may delete the Delay bufer. \nThe", "type": "FUNCTION_BLOCK", "name": "DELAY", "input": [{"name": "IN", "type": "REAL", "description": "The real number input value to be processed by the delay block."}, {"name": "N", "type": "INT", "description": "The number of cycles to delay the input. This value is limited to a maximum of 32."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the block. If true, the buffer will be reset."}], "output": [{"name": "OUT", "type": "REAL", "description": "The output value from the delay block, which is the delayed version of the input."}], "in/out": [], "return_value": null}
{"title": "First-Order Proportional-Derivative Controller", "description": "FT_PD is a PD controller, the following formula works:\nY = KP * (IN + DERIV(IN))\nFT_PD can be used in conjunction with the modules CTRL_IN and\nCTRL_OUT to establish a PD controller.\nThe following graph illustrates the internal structure of the controller:", "type": "FUNCTION_BLOCK", "name": "FT_PD", "input": [{"name": "IN", "type": "REAL", "description": "The input signal to be controlled."}, {"name": "KP", "type": "REAL", "description": "The proportional gain constant, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the derivative action, default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output of the PD controller based on the input signal and its derivative."}], "in/out": [], "return_value": null}
{"title": "Find First Non-Numeric Character", "description": "FINDB_NONUM STR searches from right to left and returns\nthe last position which is not a number.\nNumbers are the letters \"0..9\" and \".\"", "type": "FUNCTION", "name": "FINDB_NONUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for a non-numeric character."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first non-numeric character found in the string. Returns 0 if no non-numeric character is found.", "fields": []}}
{"title": "Delete Characters from String", "description": "DEL_CHARS deletes all characters from a string which are contained in the\nstring CX.\nCLEAN('Nr.1 23#', ' #ABCDEFG') = 'Nr.123'", "type": "FUNCTION", "name": "DEL_CHARS", "input": [{"name": "IN", "type": "STRING", "description": "The input string from which characters will be deleted."}, {"name": "CX", "type": "STRING[80]", "description": "A string containing the characters to be deleted from the input string."}], "output": [{"name": "DEL_CHARS", "type": "STRING", "description": "The modified string after the specified characters have been deleted."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting string after all specified characters have been removed.", "fields": []}}
{"title": "Proportional-Integral Controller", "description": "FT_PI is a PI controller which works following the formula:\nY = KP * IN + KI * INTEG(IN)\nThe input values ILIM_H and ILIM_L limits the working area of the internal\nintegrator. With RST, the internal Integrator can always be set to 0. The\noutput LIM indicates that the Integrator has reached one of the limits\nILIM_L oe ILIM_H. The PI controller is free running and uses the trapezoidal\nrule to calculate the integrator for the highest accuracy and optimal\nspeed. The default values of the input parameters are predefned as fol￾lows: KP = 1, CI = 1, ILIM_L= -1E38 and ILIM_H = +1E38. \nAnti Wind-Up: Control modules with Integrator tend to the so-called Wind￾Up Efect. A Wind-Up means that the integrator module continuously run\nagain because, for example, the control signal Y is at a limit and the sys￾tem can not compensate the deviation, which then leads to subsequent\ntransition into the control range until a long and time-consuming dismant￾ling of the integrator value and the scheme only respond delayed. Since\nthe integrator is only necessary to compensate the deviation for all other\ncontrol units, and the range of the integrator should be limited with the\nvalues of ILIM. The Integrator then reaches a limit and stops remaining at\nthe last valid value. For other wind- Up Action, the Integrator can be con￾trolled with the input IEN = FALSE any time separately, the Integrator only\nruns when IEN = TRUE. \nThe following graph illustrates the internal structure of the controller:\nFT_PI can be used in conjunction with the modules CTRL_IN and CTRL_OUT\nto build a PI controller.", "type": "FUNCTION_BLOCK", "name": "FT_PI", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PI controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain parameter, default is 1.0."}, {"name": "KI", "type": "REAL", "description": "The integral gain parameter, default is 1.0."}, {"name": "ILIM_L", "type": "REAL", "description": "The lower limit for the integrator output, default is -1E+38."}, {"name": "ILIM_H", "type": "REAL", "description": "The upper limit for the integrator output, default is 1E+38."}, {"name": "IEN", "type": "BOOL", "description": "Indicator to enable or disable the integrator, default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "Reset signal for the integrator."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PI controller after applying the gains."}, {"name": "LIM", "type": "BOOL", "description": "Indicator that shows if the integrator has reached its output limits."}], "in/out": [], "return_value": {}}
{"title": "Difference Check Function", "description": "DIFFER is TRUE if in1 and in2 difer by more than X from each\nother.", "type": "FUNCTION", "name": "DIFFER", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input for the difference calculation."}, {"name": "in2", "type": "REAL", "description": "The second real number input for the difference calculation."}, {"name": "X", "type": "REAL", "description": "The threshold value. The function checks if the absolute difference exceeds this value."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the absolute difference between in1 and in2 is greater than X; otherwise, returns FALSE."}}
{"title": "Find Last Numeric Character in String", "description": "FINDB_NUM searches STR from right to left and returns the\nlast position that is a number.\nNumbers are the letters \"0..9\" and \".\"", "type": "FUNCTION", "name": "FINDB_NUM", "input": [{"name": "str", "type": "STRING", "description": "Input variable of type STRING with a specified length.", "fields": []}], "output": [{"name": "FINDB_NUM", "type": "INT", "description": "The position of the last numeric character or period in the input string, or 0 if none exists.", "fields": []}], "in/out": [], "return_value": {"type": "INT", "description": "The return value indicates the position of the last numeric character or period found in the string.", "fields": []}}
{"title": "Convert Direction to Degrees", "description": "DIR_TO_DEG converts a NNE direction in the form to degrees. It will be up\nto 3 points evaluated, corresponding to a resolution of 22.5°. The output is\ninteger. The input must be in capital letters and East must be marked with\nO or E. The string NO is converted to 45°. L specifes the used language,\nfor detailed information see data type CONSTANTS_LANGUAGE.\nThe cardinal points are: 0° = North, 90° = East, 180° = South, 270° =\nWest. The conversion is done according to the following table:\nN 0° NNO, NNE 23° NO 45° ONO, ENE 68°\nO 90° OSO, ESE 113° SO, SE 135° SSO, SSE 158°\nS 180° SSW 203° SW 225° WSW 248°\nW 270° WNW 293° NW 315° NNW 338°", "type": "FUNCTION", "name": "DIR_TO_DEG", "input": [{"name": "DIR", "type": "STRING[3]", "description": "A string representation of the direction, limited to three characters."}, {"name": "L", "type": "INT", "description": "An integer indicating the language option, used for direction localization."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The degree representation of the input direction calculated as per the language-specific mapping.", "fields": []}}
{"title": "Find Position of Substring", "description": "FINDP searches in a string STR starting at position POS for a string SRC. If\nSRC found in the string so the position of the frst character of SRC in STR\nis returned. If the string starting at position POS is not found, an 0 is retur￾ned. If an empty string is specifed as the search string, the module deli￾vers the result 0.", "type": "FUNCTION", "name": "FINDP", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The string in which to search for the substring."}, {"name": "src", "type": "STRING[STRING_LENGTH]", "description": "The substring that is being searched for in the main string."}, {"name": "pos", "type": "INT", "description": "The position from which to start searching in the main string."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first occurrence of the substring; returns 0 if the substring is not found.", "fields": []}}
{"title": "Find Character in String", "description": "FIND_CHAR searches the string STR starting at position POS and returns\nthe position at which the frst character is not a control character. Control\ncharacters are all characters whose value is less than 32 or 127. In exami￾ning the Global Setup EXTENDED_ASCII constant is considered. If EXTEN￾DED_ASCII = TRUE the extended ASCII character-set to be considered in\naccordance with ISO 8859-1. Umlauts like Ä, Ö, Ü are considered only if\nthe global constant EXTENDED_ASCII = TRUE. If EXTENDED_ASCII = FAL￾SE characters of the extended character set with a value > 127 interpre￾ted as control characters.", "type": "FUNCTION", "name": "FIND_CHAR", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for the character."}, {"name": "pos", "type": "INT", "description": "The starting position in the string from which to begin the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The index of the found character if it meets the criteria; otherwise, 0.", "fields": []}}
{"title": "Find Control Character in String", "description": "FIND_CTRL searches the string str starting at position POS and returns the\nposition at which the next control character is. Control characters are all\ncharacters whose value is less than 32 or 127.", "type": "FUNCTION", "name": "FIND_CTRL", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The string in which to search for control characters."}, {"name": "pos", "type": "INT", "description": "The position in the string from which to start the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position of the first control character found in the string. Returns 0 if no control character is found."}}
{"title": "PID Controller Function Block", "description": "FT_PID is a PID controller of the following formula works:\nY = KP * ( IN + 1/TN * INTEG(IN) + TV *DERIV(IN))\nThe control parameters are given in the form of KP, TN and TV, and if the￾re are parameters KP, KI and KD they can be converted using the following\nformula:\nTN = KP/KI und TV = KD/KP\nThe input values ILIM_H and ILIM_L limit the working area of the internal\nintegrator. With RST, the internal integrator will always set to 0. The out￾put LIM signals that the integrator runs one of the limits or ILIM_L ILIM_H.\nThe PI controller is free running and uses the trapezoidal rule to calculate\nthe integrator for the highest accuracy and optimal speed. The default va￾lues of the input parameters are predefned as follows: KP = 1, TN = 1s,\nTV = 1s, ILIM_L =-1E38 and ILIM_H = +1 E38.\n Anti Wind-Up: Control modules with Integrator tend to the so-called Wind￾Up Efect. A Wind-Up means that the integrator module continuously run\nagain because, for example, the control signal Y is at a limit and the sys￾tem can not compensate the deviation, which then leads to subsequent\ntransition into the control range until a long and time-consuming dismant￾ling of the integrator value and the scheme only respond delayed. Since\nthe integrator is only necessary to compensate the deviation for all other\ncontrol units, and the range of the integrator should be limited with the\nvalues of ILIM. The Integrator then reaches a limit and stops remaining at\nthe last valid value. For other wind- Up Action, the Integrator can be con￾trolled with the input IEN = FALSE any time separately, the Integrator only\nruns when IEN = TRUE. \nThe following graph illustrates the internal structure of the controller:\nFT_PD can be used in conjunction with the modules CTRL_IN and\nCTRL_OUT to establish a PD controller.", "type": "FUNCTION_BLOCK", "name": "FT_PID", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PID controller."}, {"name": "KP", "type": "REAL", "description": "Proportional gain coefficient."}, {"name": "TN", "type": "REAL", "description": "Integral time constant."}, {"name": "TV", "type": "REAL", "description": "Derivative time constant."}, {"name": "ILIM_L", "type": "REAL", "description": "Lower limit for the integrator output."}, {"name": "ILIM_H", "type": "REAL", "description": "Upper limit for the integrator output."}, {"name": "IEN", "type": "BOOL", "description": "Enable flag for the integrator."}, {"name": "RST", "type": "BOOL", "description": "Reset flag for the integrator."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PID controller."}, {"name": "LIM", "type": "BOOL", "description": "Flag indicating whether the integrator has hit its limits."}], "in/out": [], "return_value": null}
{"title": "Find Non-Numeric Character", "description": "FIND_NONUM searches STR from the starting position POS\nfrom left to right and returns the frst position which is not a number.\nNumbers are the letters \"0..9\" and \".\"", "type": "FUNCTION", "name": "FIND_NONUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be searched for non-numeric characters."}, {"name": "pos", "type": "INT", "description": "The position in the string from which to start the search."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The index of the first non-numeric character found in the string, or 0 if there are no non-numeric characters.", "fields": []}}
{"title": "PID Controller Function Block", "description": "FT_PIDW is a PID controller with Anti Wind- Up Hold works according to the\nfollowing formula: \nY = KP * ( IN + 1/TN * INTEG(IN) + TV *DERIV(IN))\nThe control parameters are given in the form of KP, TN and TV, and if the￾re are parameters KP, KI and KD they can be converted using the following\nformula:\nTN = KP/KI und TV = KD/KP\nThe input values LIM_H and LIM_L limit the range of the output Y. With\nRST, the internal Integrator can always be set to 0. The output LIM indica￾tes that the Output Y runs to one of the limits LIM_L orL IM_H. The PI con￾troller is free running and uses the trapezoidal rule to calculate the inte￾grator for the highest accuracy and optimal speed. The default values of\nthe input parameters are predefned as follows: KP = 1, TN = 1s, TV = 1s,\nILIM_L =-1E38 and ILIM_H = +1 E38.\n Anti Wind-Up: Control modules with Integrator tend to the so-called Wind￾Up Efect. A Wind-Up means that the integrator module continuously run\nagain because, for example, the control signal Y is at a limit and the sys￾tem can not compensate the deviation, which then leads to subsequent\ntransition into the control range until a long and time-consuming dismant￾ling of the integrator value and the scheme only respond delayed. Since\nthe integrator is only necessary to compensate the deviation for all other\ncontrol units, and the range of the integrator should be limited with the\nvalues of ILIM.\nThe module FT_PIDW has a so-called Wind-Up-Hold which freezes the inte￾grator after reaching for an output limit (LIM_L, LIM_H) on the last value\nand thus a Wind-Up prevents. \nThe following graph illustrates the internal structure of the controller:\nFT_PD can be used in conjunction with the modules CTRL_IN and\nCTRL_OUT to establish a PD controller.", "type": "FUNCTION_BLOCK", "name": "FT_PIDW", "input": [{"name": "IN", "type": "REAL", "description": "The input process variable that the PID controller will process."}, {"name": "KP", "type": "REAL", "description": "The proportional gain of the PID controller, defaults to 1.0."}, {"name": "TN", "type": "REAL", "description": "The integral time constant of the PID controller, defaults to 1.0."}, {"name": "TV", "type": "REAL", "description": "The derivative time constant of the PID controller, defaults to 1.0."}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output, defaults to -1E+38."}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output, defaults to 1E+38."}, {"name": "RST", "type": "BOOL", "description": "A reset flag that when true resets the integral component of the controller."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated control output of the PID controller."}, {"name": "LIM", "type": "BOOL", "description": "A flag indicating whether the output is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "DT Simulation Function Block", "description": "DT_SIMU simulates on output DTS a date value that starts with the initial\nvalue of START and continues with the speed SPEED. If SPEED intthe input\nvalue not used, the device operates with the internal standard value 1.0\nand the DTS output is running forward at 1 second/second. With the input\nSPEED at the output DTS an arbitrarily fast or slow clock can be simulated.\nThe module can be used in the simulation environment to simulate an RTC\nand also adjust the speed of the RTC for testing. If the input SPEED = 0,\nthe output DTS at each PLC cycle is further increased by a second.", "type": "FUNCTION_BLOCK", "name": "DT_SIMU", "input": [{"name": "START", "type": "DT", "description": "The starting date and time value for the simulation."}, {"name": "SPEED", "type": "REAL", "description": "The speed factor that modifies the time increment, with a default value of 1.0."}], "output": [{"name": "DTS", "type": "DT", "description": "The updated date and time value after applying the simulation logic."}], "in/out": [], "return_value": null}
{"title": "Find Number in String", "description": "FIND_NUM STR from position POS from left to right\nand returns the frst position that is a number.\nNumbers are the letters \"0..9\" and \".\"", "type": "FUNCTION", "name": "FIND_NUM", "input": [{"name": "str", "type": "STRING", "description": "The string to be searched for numeric characters.", "fields": []}, {"name": "pos", "type": "INT", "description": "The starting position from which to begin the search for numeric characters.", "fields": []}], "output": [{"name": "FIND_NUM", "type": "INT", "description": "The index of the first numeric character found in the string; returns 0 if no numeric character is found.", "fields": []}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the index of the first numeric character or 0 if none is found.", "fields": []}}
{"title": "Convert DateTime to Structured DateTime", "description": "DT_TO_SDT converts a date value into a structured date day of type SDT.", "type": "FUNCTION", "name": "DT_TO_SDT", "input": [{"name": "DTI", "type": "TIME_DT", "description": "The input DateTime value that needs to be converted into Structured DateTime."}], "output": [{"name": "DT_TO_SDT", "type": "SDT", "description": "The output Structured DateTime that contains the year, month, day, weekday, hour, minute, and second extracted from the input DateTime."}], "in/out": [], "return_value": {"type": "SDT", "description": "The return value is a Structured DateTime containing the detailed components of the input DateTime value.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year component extracted from the input DateTime."}, {"name": "MONTH", "type": "INT", "description": "The month component extracted from the input DateTime."}, {"name": "DAY", "type": "INT", "description": "The day component extracted from the input DateTime."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday component extracted from the input DateTime, representing the day of the week."}, {"name": "HOUR", "type": "INT", "description": "The hour component extracted from the input DateTime."}, {"name": "MINUTE", "type": "INT", "description": "The minute component extracted from the input DateTime."}, {"name": "SECOND", "type": "INT", "description": "The second component extracted from the input DateTime."}]}}
{"title": "String Truncation and Padding Function", "description": "FIX creates a string of fxed length N. The string STR at the input is trunca￾ted to the length N respective flled with the fll character C. If the string\nSTR is shorter than the length L to be created, will the string be flled de￾pending on M, with the fll character C. If M = 0, the padding at the end of\nthe string is appended, if M = 1, the padding is attached the beginning\nand when M = 2, the string is centered between fll character. If the num￾ber of the necessary padding is odd and if M = 2, the fll at the end has a\nfll character more than at the beginning. The FIX function evaluates the\nGlobal Setup string_length constant and limits the maximum length L of\nthe string to string_length.", "type": "FUNCTION", "name": "FIX", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be modified."}, {"name": "L", "type": "INT", "description": "The length to which the string should be truncated or padded."}, {"name": "C", "type": "BYTE", "description": "The character used for padding the string."}, {"name": "M", "type": "INT", "description": "The mode for string modification: 1 for left truncate/pad, 2 for center pad."}], "output": [{"name": "FIX", "type": "string", "description": "The modified string after truncation and/or padding."}], "in/out": [], "return_value": {"type": "string", "description": "Returns the modified string after performing the specified operations."}}
{"title": "Date and Time Formatting Function", "description": "DT_TO_STRF converts a DATETIME value into a formated string. At the in￾put DTI the convertible DATETIME value appears and with the string FMT\nthe appropriate output format is determined. The input LANG determines\nthe language to be used (0 = LANGUAGE_DEFAULT, 1 = English and 2 =\nGerman). The language settings are made in the relevant paragraph of\nthe global constants and can be adapted or modifed. In addition to the\ndate and time at the input of MS also milliseconds can be processed. \nThe generated string matches the string FMT where in the string all cha￾racters '#' followed by a capital letter are replaced with the corresponding\nvalue. The following table defnes the format characters:\n#A 4 digit year number (2008)\n#B 2-digit year number, eg (08)\n#C Month 1-2 digits (1,12)\n#D Month 2 digits (1, 12)\n#E Month 3 letters (Jan)\n#F Months written out (January)\n#G Day 1 or 2 digits (1, 31)\n#H Day 2-digit (01, 31)\n#I Week as a number (1 = Monday, 7 = Sunday)\n#J Week 2 letters (Mo)\n#K Week written out (Monday)\n#L AM or PM in American date formats\n#M Hour in 24 hour format 1-2 digits (0, 23)\n#N Hour in 24 hour format 2 digits (00, 23)\n#O Hours in 12 hours Format 1 - 2 digits (1, 12)\n# P Hour in 12 hour format 2 digits (01, 12)\n#Q Minutes 1-2 digits (0, 59)\n#R Minutes 2 digits (00, 59)\n#S Seconds 1-2 digits (0, 59)\n#T Seconds 2 digits (00, 59)\n#U Milliseconds 1-3 digits (0, 999)\n#V Milliseconds 3 digits (000, 999)\n#W Day 2 digits but pre-padded with blank (' a' .. '31 ')\n#X Month 2 digits but pre- padded with blank (' 1' .. '12 ')", "type": "FUNCTION", "name": "DT_TO_STRF", "input": [{"name": "DTI", "type": "TIME_DT", "description": "Date and Time Input representing the DateTime value to format."}, {"name": "MS", "type": "INT", "description": "Additional Integer Input specifying milliseconds."}, {"name": "FMT", "type": "STRING", "description": "Format String Input that defines the desired output format for the DateTime."}, {"name": "LANG", "type": "INT", "description": "Language Input that specifies the language for formatting the output."}], "output": [{"name": "DT_TO_STRF", "type": "string", "description": "Formatted string representation of the DateTime based on the input format and language."}], "in/out": [], "return_value": {"type": "string", "description": "The formatted string output of the function.", "fields": []}}
{"title": "Float to Real Conversion Function", "description": "FLOAT_TO_REAL converts a string- foating point number into a data type\nREAL. While the conversion characters \".\" or ',' interpreted as a comma\nand 'E' or 'e' as the separator of the exponent. The characters '-\n0123456789' are evaluated and others in FLT occurring characters are\nignored.", "type": "FUNCTION", "name": "FLOAT_TO_REAL", "input": [{"name": "FLT", "type": "STRING[20]", "description": "The string input representing a floating-point number to be converted."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted real number value from the input string.", "fields": []}}
{"title": "Convert Bytes to DWORD", "description": "DWORD_OF_BYTE creates from 4 individual bytes (B0 .. B3) a DWORD.\nA DWORD is composed as follows: B3-B2-B1-B0.", "type": "FUNCTION", "name": "DWORD_OF_BYTE", "input": [{"name": "B3", "type": "BYTE", "description": "The highest byte of the DWORD."}, {"name": "B2", "type": "BYTE", "description": "The second highest byte of the DWORD."}, {"name": "B1", "type": "BYTE", "description": "The third byte of the DWORD."}, {"name": "B0", "type": "BYTE", "description": "The lowest byte of the DWORD."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The combined DWORD value generated from the four input BYTE values."}}
{"title": "Integer Floor Function", "description": "FLOOR function returns the greatest integer value less or equal to X.", "type": "FUNCTION", "name": "FLOOR", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the floor value needs to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The integer floor value of the input real number X.", "fields": []}}
{"title": "Convert Two Words to a DWORD", "description": "DWORD_OF_WORD creates from 2 separate WORDS W0 und W1 a\nDWORD.\nA DWORD is composed as follows: W1-W0.", "type": "FUNCTION", "name": "DWORD_OF_WORD", "input": [{"name": "W1", "type": "WORD", "description": "The first 16-bit WORD value to be converted and shifted."}, {"name": "W0", "type": "WORD", "description": "The second 16-bit WORD value to be combined with the first."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting 32-bit DWORD value formed by combining W1 and W0.", "fields": []}}
{"title": "Convert DWORD to String", "description": "DWORD_TO_STRB converts a DWORD, Word or byte in a STRING of fxed\nlength. The output string is exactly 32 characters long and is the bitwise\nnotation of the value of IN. The output string consists of the characters '0\n'and '1'. The least signifcant bit is left in the string. DWORD_TO_STRB can\nhandle input formats, Byte, Word and DWORD types. The output is inde￾pendent of the input type is always a STRING of 32 characters. If a shorter\nstring is needed, it can be cut with the standard function RIGHT() accor-\ndingly. The call RIGHT(DWORD_TO_STRB(X),8) results to a string of 8 cha￾racters to the contents of the lower bytes of X.", "type": "FUNCTION", "name": "DWORD_TO_STRB", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value that needs to be converted to a string."}], "output": [{"name": "DWORD_TO_STRB", "type": "string", "description": "The output string representation of the input DWORD value, containing binary characters."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting binary string derived from the input DWORD.", "fields": []}}
{"title": "Flow Control Function Block", "description": "FLOW_CONTROL switches a valve at the output Q when the input IN =\nTRUE. In addition, the valve can also be switched via the input RE. REQ =\nTRUE turns the valve on for the time T_AUTO and will be locked for the\ntime T_DELAY. after the time T_DELAY the valve can be turned on again on\nREQ. During this lock period T_DELAY the valve may be controlled by the\ninput IN. An ESR compatible status output STATUS indicates the status of\nthe module. Both the REQ and IN can only switch the output Q when the\ninput ENQ is set to True.\nStatus = 100 Ready\nStatus = 101 Valve on by a TRUE at IN\nStatus = 102 Valve on by a TRUE at REQ\nStatus = 103 Reset is executed\nThe diagram illustrates the structure of inferential FLOW_CONTROL:", "type": "FUNCTION_BLOCK", "name": "FLOW_CONTROL", "input": [{"name": "IN", "type": "BOOL", "description": "Input boolean signal that influences the flow control."}, {"name": "REQ", "type": "BOOL", "description": "Request boolean signal that triggers the timing and operations."}, {"name": "ENQ", "type": "BOOL", "description": "Enquiry boolean signal that enables or disables certain operations."}, {"name": "RST", "type": "BOOL", "description": "Reset signal that clears the state of the function block."}, {"name": "T_AUTO", "type": "TIME", "description": "The automatic timing duration for the timer, defaulting to 60 minutes."}, {"name": "T_DELAY", "type": "TIME", "description": "The delay duration applied after the automatic timing, defaulting to 1380 minutes."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean signal that indicates the state of the flow control."}, {"name": "STATUS", "type": "BYTE", "description": "Status code reflecting the current state of the function block."}], "in/out": [], "return_value": null}
{"title": "Convert DWORD to String with Length Limitation", "description": "DWORD_TO_STRF converts a DWORD, Word or byte in a STRING of fxed\nlength. The output string is exactly N digits, with leading zeros inserted or\nleading digits truncated. The maximum permitted length N is 20 digits.", "type": "FUNCTION", "name": "DWORD_TO_STRF", "input": [{"name": "IN", "type": "DWORD", "description": "The DWORD value to be converted to a string."}, {"name": "N", "type": "INT", "description": "The maximum length of the resulting string, which should be limited to a maximum of 20."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The resulting string representation of the DWORD input, limited to the specified length N.", "fields": []}}
{"title": "Flow Meter Function Block", "description": "FLOW_METER determines the fow rate per unit of\ntime and count quantities. FLOW_METER determines the fow rate from the\ninput VX and E. The module supports two operating modes are determined\nby the variable setup PULSE_MODE. If PULSE_MODE = TRUE is the volume\nfow and the amount determined by is added at each rising edge at E, the\nvalue of VX upon itself. If the PULSE_MODE = FALSE the input VX is inter￾preted as fow per unit time and is added up as long as E = TRUE. Using\nthe input RST, the internal counter can be always set to zero. X and Y are\nexternal to be declared variables and can be declared retentive / perma￾nent to be permanent in case of power failure. The module provides the\ninstantaneous fow value F as the Real in accordance to the unit connec￾ted to VX. If a value at VX is applied eg. in liters / hour so is the measured\nvalue at the output F in l / h. The output F is set at the constant intervals\nUPDATE_TIME. The outputs X and Y make up the over time accumulated\nmeasure values where X in REAL represent in the decimal point and Y in\nUDINT the integer part. A count of 234.111234 is represented by 0.111234\nat X and a value of 234 at Y. If for count only a REAL is used then the reso￾lution (for Real to IEEE32), is only 7-8 position . The above described me￾thod can provide more than 9 digits before the decimal point (2^32-1) and\nat least 7 digits after the decimal point. Since in this case X is always\nsmaller than 1, Y can be used for output without decimal places. The two\nvariables X and Y must be declared external and can, as the following ex￾ample, also be secured against power failure.", "type": "FUNCTION_BLOCK", "name": "FLOW_METER", "input": [{"name": "VX", "type": "REAL", "description": "Input velocity for flow calculation."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the flow measurement."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize flow measurement parameters."}, {"name": "PULSE_MODE", "type": "BOOL", "description": "Flag to indicate if the flow meter is operating in pulse mode."}, {"name": "UPDATE_TIME", "type": "TIME", "description": "Time interval for updating flow calculation. Default is 1 second."}], "output": [{"name": "F", "type": "REAL", "description": "Calculated flow rate based on input parameters."}], "in/out": [{"name": "X", "type": "REAL", "description": "Current flow measurement value."}, {"name": "Y", "type": "UDINT", "description": "Counter for flow measurements, incremented based on calculated results."}], "return_value": null}
{"title": "Convert DWORD to Hexadecimal String", "description": "DWORD_TO_STRH converts a DWORD, Word or byte in a STRING of fxed\nlength. The output string is exactly 8 characters long and is the hexadeci￾mal notation of the value of IN. The output string consists of the charac￾ters '0 '.. '1' and 'A '.. 'F'. The least signifcant hexadecimal character is\nright in the string. DWORD_TO_STRH can process input as byte, word and\nDWORD types. The output is independent of the input type is always a\nSTRING of 32 characters. If a shorter string is needed, it can be cut with\nthe standard function RIGHT() accordingly. The call\nRIGHT(DWORD_TO_STRH(X),4) results to a string of 4 characters to the\ncontents of the lower 2 bytes of X.", "type": "FUNCTION", "name": "DWORD_TO_STRH", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value that needs to be converted to a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "A string representation of the hexadecimal value of the input DWORD, consisting of 8 hex characters.", "fields": []}}
{"title": "Fractional Part Calculation", "description": "FRACT(3.14) results 0.14.\nFor X greater than or less than +/- 2.14 * 10^9 Fract always provides a\nzero return. As the resolution of a 32bit REAL is a maximum of 8 digits,\nfrom numbers larger or smaller than +/- 2.14 * 10^9 no fractional part can\nbe determined, because this part can also not be stored in a REAL varia￾ble.", "type": "FUNCTION", "name": "FRACT", "input": [{"name": "x", "type": "REAL", "description": "The real number from which the fractional part is to be calculated."}], "output": [{"name": "FRACT", "type": "REAL", "description": "The calculated fractional part of the input number, or 0 if the absolute value of the input number is greater than or equal to 2 billion."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the fractional component of the input real number."}}
{"title": "Convert DWORD to REAL", "description": "DW_TO_REAL copies the bit pattern of a DWORD (IN) to a REAL. These bits\nare copied without regard to their meaning. The function REAL_TO_DW is\nthe inverse so that the conversion of REAL_TO_DW and then DW_TO_REAL\nresult in the output value. The IEC standard DWORD_TO_REAL function\nconverts the value of the DWORD to a REAL value.", "type": "FUNCTION", "name": "DW_TO_REAL", "input": [{"name": "X", "type": "DWORD", "description": "The DWORD input variable that needs to be converted to REAL."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The REAL value obtained from the conversion of the input DWORD.", "fields": []}}
{"title": "PI Controller Function Block", "description": "FT_PIWL is a PI controller with dynamic anti-wind Up and works according\nthe following formular: \nY = KP * IN + KI * INTEG(IN)\nThe input values LIM_H and LIM_L limit the range of the output Y. With\nRST, the internal Integrator can always be set to 0. The output LIM indica￾tes that the Output Y runs to one of the limits LIM_L orL IM_H. The PI con￾troller is free running and uses the trapezoidal rule to calculate the inte￾grator for the highest accuracy and optimal speed. The default values of\nthe input parameters are predefned as follows: KP = 1, CI = 1, ILIM_L=\n-1E38 and ILIM_H = +1E38. \nAnti Wind-Up: Control modules with Integrator tend to the so-called Wind￾Up Efect. A Wind-Up means that the integrator module continuously run\nagain because, for example, the control signal Y is at a limit and the sys￾tem can not compensate the deviation, which then leads to subsequent\ntransition into the control range until a long and time-consuming dismant￾ling of the integrator value and the scheme only respond delayed. Since\nthe integrator is only necessary to compensate the deviation for all other\ncontrol units, and the range of the integrator should be limited with the\nvalues of ILIM.\nThe module FT_PIWL has a so-called dynamic-wind Up Reset which resets\nreaching a limit (LIM_L, LIM_H) the Integrator to a value corresponding of\nthe output limit. After reaching a Limits the controller re-enters the work\narea must the Integrator are not frst or Down-integrated, and the control￾ler is ready for use without delay. The dynamic Anti-Wind Up Method is\nthat in most cases without drawbacks preferred method, because it does\nnot negatively afect the control and prevents the disadvantages of\nWind_Up . \nThe following graph illustrates the internal structure of the controller:\nFT_PIWL can used together with the modules CTRL_IN and CTRL_OUT to\nbuild complex controllers.", "type": "FUNCTION_BLOCK", "name": "FT_PIWL", "input": [{"name": "IN", "type": "REAL", "description": "The input signal for the PI controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain coefficient (default is 1.0)."}, {"name": "KI", "type": "REAL", "description": "The integral gain coefficient (default is 1.0)."}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output signal (default is -1E+38)."}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output signal (default is 1E+38)."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the internal state."}], "output": [{"name": "Y", "type": "REAL", "description": "The output signal from the PI controller."}, {"name": "LIM", "type": "BOOL", "description": "Indicates whether the output signal is within the defined limits."}], "in/out": [], "return_value": null}
{"title": "D_TRIG Function Block", "description": "D_TRIG triggers on any change in the DWORD-input IN. If the input \nvalue has changed, the output Q for a PLC cycle is set to TRUE and the \noutput X indicates how much has changed in the IN input. The input and \noutput are of type DWORD. The input can also process WORD and BYTE \ntypes. With output X it should be noted that DWORD is unsigned and \ntherefore a change of -1 at the input is not -1, but the number 2^32-2 at \nthe output. With the standard function DWORD_TO_INT the output X can \nbe converted to an integer, which displays also negative changes correctly.\nThe following example shows the application of D_TRIG when the input\nchanges value from 5 to 2:", "type": "FUNCTION_BLOCK", "name": "D_TRIG", "input": [{"name": "in", "type": "DWORD", "description": "Current input value to be monitored."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output flag indicating whether the input has changed since the last scan."}, {"name": "X", "type": "DWORD", "description": "Output value that represents the difference between the current input and the last input."}], "in/out": [], "return_value": null}
{"title": "PID Controller with Derivative Action", "description": "FT_PIDWL is a PID controller with dynamic Wind- Up reset and works accor￾ding to the following formula: \nY = KP * ( IN + 1/TN * INTEG(IN) + TV *DERIV(IN))\nThe control parameters are given in the form of KP, TN and TV, and if the￾re are parameters KP, KI and KD they can be converted using the following\nformula:\nTN = KP/KI und TV = KD/KP\nThe input values LIM_H and LIM_L limit the range of the output Y. With\nRST, the internal Integrator can always be set to 0. The output LIM indica￾tes that the Output Y runs to one of the limits LIM_L orL IM_H. The PI con￾troller is free running and uses the trapezoidal rule to calculate the inte￾grator for the highest accuracy and optimal speed. The default values of\nthe input parameters are predefned as follows: KP = 1, TN = 1s, TV = 1s,\nILIM_L =-1E38 and ILIM_H = +1 E38.\nAnti Wind-Up: Control modules with Integrator tend to the so-called Wind￾Up Efect. A Wind-Up means that the integrator module continuously run\nagain because, for example, the control signal Y is at a limit and the sys￾tem can not compensate the deviation, which then leads to subsequent\ntransition into the control range until a long and time-consuming dismant￾ling of the integrator value and the scheme only respond delayed. Since\nthe integrator is only necessary to compensate the deviation for all other\ncontrol units, and the range of the integrator should be limited with the\nvalues of ILIM.\nThe module FT_PIW has a so-called dynamic-wind Up Reset which resets\nreaching a limit (LIM_L, LIM_H) the the Integrator to a value corresponding\nof the output limit. After reaching a Limits the controller re-enters the work\narea must the Integrator are not frst or Down-integrated, and the control￾ler is ready for use without delay. The dynamic Anti-Wind Up Method is\nthat in most cases without drawbacks preferred method, because it does\nnot negatively afect the control and prevents the disadvantages of\nWind_Up . \nThe following graph illustrates the internal structure of the controller:\nFT_PD can be used in conjunction with the modules CTRL_IN and\nCTRL_OUT to establish a PD controller.", "type": "FUNCTION_BLOCK", "name": "FT_PIDWL", "input": [{"name": "IN", "type": "REAL", "description": "The input value to the PID controller."}, {"name": "KP", "type": "REAL", "description": "The proportional gain, default value is 1.0."}, {"name": "TN", "type": "REAL", "description": "The time constant for the integral term, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the derivative term, default value is 1.0."}, {"name": "LIM_L", "type": "REAL", "description": "Lower limit for the output, default value is -1E+38."}, {"name": "LIM_H", "type": "REAL", "description": "Upper limit for the output, default value is 1E+38."}, {"name": "RST", "type": "BOOL", "description": "Boolean flag to reset the controller state."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the PID controller after processing."}, {"name": "LIM", "type": "BOOL", "description": "Indicates whether the output has been limited."}], "in/out": [], "return_value": null}
{"title": "Integer Truncation Function", "description": "D_TRUNC \nreviewes what result the IEC functions provides, and uses the appropriate \nfunction to deliver a useful result.\nD_TRUNC(1.6) = 1\nD_TRUNC(-1.6) = -1", "type": "FUNCTION", "name": "D_TRUNC", "input": [{"name": "X", "type": "REAL", "description": "The real number to be truncated to an integer."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The truncated integer value of the input real number.", "fields": []}}
{"title": "Proportional-Integral Controller Function Block", "description": "FT_PIW can used together with the modules CTRL_IN and CTRL_OUT to\nbuild complex controllers.", "type": "FUNCTION_BLOCK", "name": "FT_PIW", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be controlled."}, {"name": "KP", "type": "REAL", "description": "The proportional gain for the controller.", "fields": []}, {"name": "KI", "type": "REAL", "description": "The integral gain for the controller.", "fields": []}, {"name": "LIM_L", "type": "REAL", "description": "The lower limit for the output.", "fields": []}, {"name": "LIM_H", "type": "REAL", "description": "The upper limit for the output.", "fields": []}, {"name": "RST", "type": "BOOL", "description": "Reset signal for the integrator.", "fields": []}], "output": [{"name": "Y", "type": "REAL", "description": "The output value of the controller.", "fields": []}, {"name": "LIM", "type": "BOOL", "description": "Indicator that output is at limit.", "fields": []}], "in/out": [], "return_value": {}}
{"title": "Easter Date Calculation", "description": "EASTER calculates for a given year, the date of Easter Sun￾day. Most religious holidays have a fxed distance from Easter, so that in\nthe case that Easter is known for a year, these holidays can also be deter￾mined easily. EASTER is also used in the module HOLIDAY to calculate holi￾days.", "type": "FUNCTION", "name": "EASTER", "input": [{"name": "year", "type": "INT", "description": "The year for which the Easter date should be calculated, provided as an integer."}], "output": [{"name": "EASTER", "type": "DATE", "description": "The calculated date of Easter Sunday for the specified year."}], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated date of Easter Sunday for the year input.", "fields": []}}
{"title": "FRMP_B Function", "description": "FRMP_B calculates the value of a ramp at a given time TD. The module en￾sures that no bufer overrun or underrun can take place at the output. The\noutput value is limited in all cases to 0 .. 255. TR sets the time for a full\nramp 0 .. 255 and TD is the elapsed time. If DIR = TRUE, a rising ramp is\ncalculated and if DIR = FALSE a falling edge. With the start value an edge\ncan be calculated from any starting point.", "type": "FUNCTION", "name": "FRMP_B", "input": [{"name": "START", "type": "BYTE", "description": "The starting byte value to be used in calculations."}, {"name": "DIR", "type": "BOOL", "description": "Direction flag, where TRUE indicates an increment operation and FALSE indicates a decrement operation."}, {"name": "TD", "type": "TIME", "description": "The first time duration to be compared with TR."}, {"name": "TR", "type": "TIME", "description": "The second time duration used for comparison with TD."}], "output": [{"name": "FRMP_B", "type": "BYTE", "description": "The resulting byte value calculated based on the input parameters."}], "in/out": [], "return_value": {"type": "BYTE", "description": "This return value represents the calculated byte value based on the function logic."}}
{"title": "Calculate Area of an Ellipse", "description": "ELLIPSE_A calculates the area of an ellipse that is defned by the radii R1\nand R2.", "type": "FUNCTION", "name": "ELLIPSE_A", "input": [{"name": "R1", "type": "REAL", "description": "The length of the semi-major axis of the ellipse."}, {"name": "R2", "type": "REAL", "description": "The length of the semi-minor axis of the ellipse."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the ellipse.", "fields": []}}
{"title": "String to Byte Conversion", "description": "FSTRING_TO_BYTE converts a formatted string into a byte value. It sup￾ports following input formats:\n2#0101 (binary), 8#345 (octal), 16#2a33 (hexadecimal) and 234 (deci￾mal).", "type": "FUNCTION", "name": "FSTRING_TO_BYTE", "input": [{"name": "IN", "type": "STRING[12]", "description": "A string representation of a number, which can be in binary, octal, hexadecimal, or decimal format."}], "output": [{"name": "FSTRING_TO_BYTE", "type": "BYTE", "description": "The byte value converted from the input string representation."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The byte result of the conversion based on the provided input string."}}
{"title": "Calculate Ellipse Circumference", "description": "ELLIPSE_C calculates the circumference of an ellipse that is defned by the\nradii R1 and R2.", "type": "FUNCTION", "name": "ELLIPSE_C", "input": [{"name": "R1", "type": "REAL", "description": "The length of the semi-major axis of the ellipse."}, {"name": "R2", "type": "REAL", "description": "The length of the semi-minor axis of the ellipse."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed circumference of the ellipse.", "fields": []}}
{"title": "Energy Calculation Function Block", "description": "ENERGY in diferent, in practice common units of\nenergy. Normally, only the input to be converted is occupied and the re￾maining inputs remain free. However, if several inputs loaded with values,\nthe values of all inputs are converted accordingly and then summed.\n1 J = 1 Ws (Watt * Seconds) = 1 Nm (Newton * meters)\n1 C = 4,1868 J = 1,163 * 10 -3 Wh (watt * hours) \n1 Wh = 3,6 * 103 J = 860 C", "type": "FUNCTION_BLOCK", "name": "ENERGY", "input": [{"name": "J", "type": "REAL", "description": "Energy in Joules."}, {"name": "C", "type": "REAL", "description": "Capacity in a specific energy unit."}, {"name": "Wh", "type": "REAL", "description": "Energy in watt-hours."}], "output": [{"name": "YJ", "type": "REAL", "description": "Calculated energy in Joules after conversion."}, {"name": "YC", "type": "REAL", "description": "Energy in a calculated unit based on YJ."}, {"name": "YWh", "type": "REAL", "description": "Converted energy from YJ to watt-hours."}], "in/out": [], "return_value": null}
{"title": "Error Function Calculation", "description": "ERF function calculates the error function of X. The error function is\ncalculated using an approximation formula, the maximum relative error is\nsmaller than 1,3 * 10-4 \n.", "type": "FUNCTION", "name": "ERF", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the error function is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated value of the error function for the input X."}}
{"title": "Complementary Error Function Calculation", "description": "ERFC calculates the inverse error function of X.", "type": "FUNCTION", "name": "ERFC", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the complementary error function is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The value of the complementary error function computed from the input X."}}
{"title": "String to DateTime Conversion", "description": "FSTRING_TO_DT convert a formatted string to a DATETIME value. Useing\nthe string FMT a format is given for decoding. The character '#' followed\nby a letter defnes the information to be decoded.\n#Y Year in the spelling in 08 or 2008\n#M Month in the spelling of 01 or 1\n#N Month in the spelling of 'Jan' or 'January' (Big and small letters are ignored)\n#D Day in the spelling of 01 or 1\n#h Hour in the spelling of 01 or 1\n#m Minute in the spelling of 01 or 1\n#s Second in the spelling of 01 or 1", "type": "FUNCTION", "name": "FSTRING_TO_DT", "input": [{"name": "SDT", "type": "STRING[60]", "description": "Input variable for the source data text which contains the date and time as a string."}, {"name": "FMT", "type": "STRING[60]", "description": "Input variable for the format that specifies how to interpret the source data text."}], "output": [{"name": "FSTRING_TO_DT", "type": "DT", "description": "The resulting DateTime value extracted from the provided string based on the specified format."}], "in/out": [], "return_value": {"type": "DT", "description": "The return value is the DateTime constructed from the parsed string.", "fields": []}}
{"title": "ESR Data Collection Function Block", "description": "ESR_COLLECT collects ESR data from up to 8 ESR modules and stores the\nlog in an array. The output POS indicates the position at which in the array\nESR_OUT is currently the last message is ESR. Collects the module more\nthan 64 messages so the messages are discarded and restarted at positi￾on 0. With the asynchronous reset input, the device can be reset at any\ntime. By resetting, all the collected data will be deleted and the pointer is\nmoved to -1. The module collects data in the output array ESR_OUT and\nmoves POS the last position of the array that contains data. When there\nare no messages POS remains to -1. If the output data are read, the varia￾ble POS has to be set to -1, or if only readed a part POS can be set to the\nlast valid value.\nThe following example demonstrates how ESR_COLLECT is connected with\nESR modules.\nThe output ESR_OUT is made up as follows:\n.\nTYPE\n.ADRESS .DS .TS .DATA [0..7]\n1 Label Date TIME Status, 1 Byte ESR Error\n2 Label Date TIME Status, 1 Byte ESR Status\n3 Label Date TIME Status, 1 Byte ESR Debug\n10 Label Date TIME not used Boolean input low transition\n11 Label Date TIME not used Boolean input high transi￾tion\n20 Label Date TIME Byte 0 - 3 Real Value Real Value change\nThe ESR data includes the following:\nESR_DATA.TYP Data type, see table above\nESR_DATA.ADRESS up to 10 characters long String Identifer \nESR_DATA.DS Date stamp of type TIME DATA\nESR_DATA.TS Timestamp of type TIME (PLC Timer ) \nESR_DATA.DATA up to 8 bytes of data block", "type": "FUNCTION_BLOCK", "name": "ESR_COLLECT", "input": [{"name": "ESR_0", "type": "ARRAY[0..3] OF esr_data", "description": "First array of ESR data containing up to 4 elements."}, {"name": "ESR_1", "type": "ARRAY[0..3] OF esr_data", "description": "Second array of ESR data containing up to 4 elements."}, {"name": "ESR_2", "type": "ARRAY[0..3] OF esr_data", "description": "Third array of ESR data containing up to 4 elements."}, {"name": "ESR_3", "type": "ARRAY[0..3] OF esr_data", "description": "Fourth array of ESR data containing up to 4 elements."}, {"name": "ESR_4", "type": "ARRAY[0..3] OF esr_data", "description": "Fifth array of ESR data containing up to 4 elements."}, {"name": "ESR_5", "type": "ARRAY[0..3] OF esr_data", "description": "Sixth array of ESR data containing up to 4 elements."}, {"name": "ESR_6", "type": "ARRAY[0..3] OF esr_data", "description": "Seventh array of ESR data containing up to 4 elements."}, {"name": "ESR_7", "type": "ARRAY[0..3] OF esr_data", "description": "Eighth array of ESR data containing up to 4 elements."}, {"name": "rst", "type": "BOOL", "description": "A boolean flag to reset the output position."}], "output": [{"name": "ESR_OUT", "type": "ARRAY[0..31] OF esr_data", "description": "Output array containing up to 32 collected ESR data elements."}], "in/out": [{"name": "pos", "type": "INT", "description": "Current position index for output storage, can be modified to determine where to place the next valid ESR data."}], "return_value": null}
{"title": "Convert String to Month Integer", "description": "FSTRING_TO_MONTH determines from a string containing a month name\nor abbreviation the value of the month. The function can handle both the\nmonth names and abbreviations as input as well as a number of the\nmonth.\nFSTRING_TO_MONTH('Januar',2) = 1\nFSTRING_TO_MONTH('Jan',2) = 1\nFSTRING_TO_MONTH('11',0) = 11\nThe input LANG selects the used language, 0 = the default in the Setup , 1\n= English .... more info about the language settings, see the chapter Data\nTypes.", "type": "FUNCTION", "name": "FSTRING_TO_MONTH", "input": [{"name": "MTH", "type": "STRING(20)", "description": "A string representing the month to be converted."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language setting. Use 0 for default language, or a specific language index."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "Returns the integer representation of the month (1-12), or the integer value of the string if no match is found."}}
{"title": "String to DWORD Conversion Function", "description": "FSTRING_TO_DWORD converts a formatted string to a 32bit Value. It sup￾ports following input formats:\n2#0101 (binary), 8#345 (octal), 16#2a33 (hexadecimal) and 234 (deci￾mal).", "type": "FUNCTION", "name": "FSTRING_TO_DWORD", "input": [{"name": "IN", "type": "STRING[40]", "description": "The input string which can represent a number in binary, octal, hexadecimal, or decimal format."}], "output": [{"name": "FSTRING_TO_DWORD", "type": "DWORD", "description": "The DWORD representation of the input string after conversion from its specified format."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the converted DWORD value from the input string.", "fields": []}}
{"title": "String to Weekday Conversion", "description": "FSTRING_TO_WEEKDAY decodes a weekday in the form 'MO' to an integer,\n1 = MO ... 7 = Sun. For the analysis the frst two letters of the string WDAY\nare evaluated, all others are ignored. If the string contains spaces they will\nbe removed. The days of the week can be present in both upper-or lower￾case. Since the function evaluates only the frst two characters, the week￾days may also be spelled out (Monday) format.\nMo = 1; Di, Tu = 2; We, Mi = 3; Th, Do = 4; Fr = 5; Sa = 6; So, Su = 7\nAs an alternative form, the weekday can be specifed as number 1..7.\nLANG specifes the used language, 1 = English, 2 = German, 0 = defned\ndefault language in the Setup.", "type": "FUNCTION", "name": "FSTRING_TO_WEEKDAY", "input": [{"name": "WDAY", "type": "STRING[20]", "description": "A string representation of the weekday to be converted."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language index to be used for weekday conversion. 0 refers to the default language."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the corresponding weekday (1 to 7) if a match is found, otherwise the result of STRING_TO_INT on WDAY."}}
{"title": "Check Even Number", "description": "EVEN = TRUE if the input IN is even and FALSE for odd IN.", "type": "FUNCTION", "name": "EVEN", "input": [{"name": "in", "type": "DINT", "description": "Input variable that represents the integer to be checked for evenness."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The boolean result indicating if the input number is even (TRUE) or odd (FALSE)."}}
{"title": "Ramp Function Block", "description": "FT_RMP calculates every time where the output\nshould be and sets this value to the output. The main change is therefore\ndependent on the cycle time and is not in equal steps. If a ramp out of\nsheer same steps are required, are the modules RMP_B and RMP_W are\navailable. The module is only active when the input RMP = TRUE.\nThe following chart shows the profle of the output as a function of an in￾put signal:", "type": "FUNCTION_BLOCK", "name": "FT_RMP", "input": [{"name": "Rmp", "type": "BOOL", "description": "Control flag to enable or disable ramping behavior."}, {"name": "in", "type": "REAL", "description": "Target input value to which the output will ramp."}, {"name": "KR", "type": "REAL", "description": "Ramp-up rate; determines how quickly the output will increase towards the input value."}, {"name": "KF", "type": "REAL", "description": "Ramp-down rate; determines how quickly the output will decrease towards the input value."}], "output": [{"name": "out", "type": "REAL", "description": "Current output value being ramped, based on the input value."}, {"name": "busy", "type": "BOOL", "description": "Indicates whether the output is currently in the process of ramping."}, {"name": "UD", "type": "BOOL", "description": "Direction flag indicating whether the output is ramping up (TRUE) or down (FALSE)."}], "in/out": [], "return_value": null}
{"title": "Holiday Event Checker", "description": "EVENTS shows the output Y with TRUE special days and also\nprovides the names of the events at the output NAME. EVENTS can also\ntake into account events over several days. The array ELIST name, date\nand duration of events are set.\nIn the external array ELIST can defne up to 50 such events in the followi￾ng format.\n*.NAME : STRING(30) specifes the name of the event\n*.DAY : SINT Events of the month\n*.MONTH : SINT Month of Events\n*.USE : SINT Duration of the event in days", "type": "FUNCTION_BLOCK", "name": "EVENTS", "input": [{"name": "DATE_IN", "type": "DATE", "description": "The date to check for holiday events."}, {"name": "ENA", "type": "BOOL", "description": "Enable signal to determine if the holiday event check should be processed."}], "output": [{"name": "Y", "type": "BOOL", "description": "Output indicating if a holiday event is active."}, {"name": "NAME", "type": "STRING(30)", "description": "The name of the holiday if an event is active, otherwise an empty string."}], "in/out": [{"name": "ELIST", "type": "ARRAY[0..49] OF HOLIDAY_DATA", "description": "An array of holiday data structures to check against the input date."}], "return_value": null}
{"title": "Mathematical Expression Evaluator", "description": "EXEC calculates mathematic expressions and results a string.\nThe expression can only be a simple expression with an operator and wi￾thout brackets. For errors, such as a divide by zero EXEC provides the re￾turn string 'ERROR'.\nThe valid operators are: +, - *, /, ^, SIN, COS, TAN, SQRT.\nREAL as numbers and integer numbers are allowed.", "type": "FUNCTION", "name": "EXEC", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string representing the mathematical expression to be evaluated."}], "output": [{"name": "EXEC", "type": "STRING", "description": "The result of the evaluated mathematical expression as a string."}], "in/out": [], "return_value": {"type": "string", "description": "The result or error message returned after evaluating the expression.", "fields": []}}
{"title": "Linear Function Calculation", "description": "F_LIN = A*X + B)\nThe function F_LIN returns the Y value of a linear equation.\nF_LIN = A*X + B", "type": "FUNCTION", "name": "F_LIN", "input": [{"name": "X", "type": "REAL", "description": "The independent variable for the linear equation."}, {"name": "A", "type": "REAL", "description": "The coefficient representing the slope of the linear function."}, {"name": "B", "type": "REAL", "description": "The constant term that represents the y-intercept of the linear function."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the linear function calculation, which is the value of A * X + B."}}
{"title": "Exponentiation Function", "description": "EXPN calculates the exponential value of X^N for integer N. EXPN is espe￾cifcally written for PLC without Floating Point Unit and is about 30 times\nfaster than the IEC standard function EXPT(). Note the special case of the\n0^0 defned mathematically as a 1 and is not a 0. \nEXPN(10,-2) = 0.01 EXPN(1.5,2) = 2.25\nEXPN(0,0) = 1", "type": "FUNCTION", "name": "EXPN", "input": [{"name": "X", "type": "REAL", "description": "The base value which is a real number."}, {"name": "N", "type": "INT", "description": "The exponent value which is an integer. It can be positive or negative."}], "output": [{"name": "EXPN", "type": "REAL", "description": "The result of the calculation, representing X raised to the power of N."}], "in/out": [], "return_value": {"type": "REAL", "description": "The real number result of the exponentiation."}}
{"title": "Pulse Generator Function Block", "description": "GEN_PULSE (ENQ: = TRUE, PTH: = T # 0s, PTL:\n= T # 0s) generates an output signal which has one cycle TRUE and one\ncycle FALSE. The Default ENQ value is TRUE.", "type": "FUNCTION_BLOCK", "name": "GEN_PULSE", "input": [{"name": "ENQ", "type": "BOOL", "description": "Enable input for the pulse generator, should be set to TRUE to generate pulses."}, {"name": "PTH", "type": "TIME", "description": "Time duration for which the output should be held in the 'high' state."}, {"name": "PTL", "type": "TIME", "description": "Time duration for which the output should be in the 'low' state before switching back to 'high'."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output pulse signal, toggles between TRUE and FALSE based on the elapsed time."}], "in/out": [], "return_value": null}
{"title": "Factorial Calculation Function", "description": "FACT calculates the factorial of X. \nIt is defned for input values from 0 .. 12. For values less than zero and\ngreater than 12 is the result -1. For the factorial of larger numbers, the\nGAMMA function is suitable.\nFor natural numbers X: X! = 1*2*3...*(X-1)*X, 0! = 1\nFaculties of negative or non-whole numbers are not defned.", "type": "FUNCTION", "name": "FACT", "input": [{"name": "X", "type": "INT", "description": "The integer input for which the factorial is to be calculated."}], "output": [{"name": "FACT", "type": "DINT", "description": "Returns the factorial of the input integer X, or -1 if the input is out of valid range."}], "in/out": [], "return_value": {"type": "DINT", "description": "The factorial of the integer X or -1 if X is out of the acceptable range."}}
{"title": "Polynomial Evaluation Function", "description": "F_POLY calculates a polynomial of 7th degree.\nF_POLY = C[0] + C[1] * X^1 + C[2] * X^2 + ...C[7] * X^7", "type": "FUNCTION", "name": "F_POLY", "input": [{"name": "X", "type": "REAL", "description": "The input value at which the polynomial is to be evaluated."}, {"name": "C", "type": "ARRAY[0..7] OF REAL", "description": "An array of coefficients for the polynomial, where each index corresponds to the coefficient for X to the power of the index."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting value of the polynomial evaluated at X."}}
{"title": "Power Calculation Function", "description": "F_POWER = A * X^N)\nF_Power calculate the power function according to the equation F_POWER\n= A * Xn .", "type": "FUNCTION", "name": "F_POWER", "input": [{"name": "a", "type": "REAL", "description": "The coefficient to multiply with the result of the exponentiation."}, {"name": "x", "type": "REAL", "description": "The base value which will be raised to the power of n."}, {"name": "n", "type": "REAL", "description": "The exponent value to which the base x will be raised."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the calculation, which is the coefficient multiplied by the base raised to the exponent.", "fields": []}}
{"title": "Quadratic Function Calculator", "description": "F_QUAD = A * X² + B * X + C)\nF_QUAD calculates the result of a quadratic equation using the formula\nf_QUAD = A * X ² + B * X + C.", "type": "FUNCTION", "name": "F_QUAD", "input": [{"name": "X", "type": "REAL", "description": "The value of the variable X for which the quadratic function is calculated."}, {"name": "A", "type": "REAL", "description": "The coefficient A in the quadratic equation."}, {"name": "B", "type": "REAL", "description": "The coefficient B in the quadratic equation."}, {"name": "C", "type": "REAL", "description": "The coefficient C in the quadratic equation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the quadratic function based on the input parameters X, A, B, and C."}}
{"title": "Fahrenheit to Celsius Conversion", "description": "F_TO_C converts a temperature reading from Fahrenheit in Celsius.", "type": "FUNCTION", "name": "F_TO_C", "input": [{"name": "fahrenheit", "type": "REAL", "description": "The temperature value in Fahrenheit that needs to be converted to Celsius."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Celsius.", "fields": []}}
{"title": "Convert Frequency to Angular Frequency", "description": "F_TO_OM calculates the angular frequency omega of the frequency in Hz", "type": "FUNCTION", "name": "F_TO_OM", "input": [{"name": "F", "type": "REAL", "description": "The frequency value in Hertz to be converted to angular frequency."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted angular frequency in radians per second.", "fields": []}}
{"title": "Function to Convert Frequency to Period Time", "description": "F_TO_PT converts a frequency value of Hz in the corresponding period.", "type": "FUNCTION", "name": "F_TO_PT", "input": [{"name": "F", "type": "REAL", "description": "The input frequency in Hertz."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The calculated period time corresponding to the given frequency.", "fields": []}}
{"title": "Gamma Function Calculation", "description": "GAMMA calculates the gamma function after approximation\nof NEMES.\nThe gamma function can be used for Integer X as replacement for the Fa￾culty.", "type": "FUNCTION", "name": "GAMMA", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the Gamma function is to be calculated."}], "output": [{"name": "GAMMA", "type": "REAL", "description": "The computed Gamma value based on the input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the Gamma function calculation.", "fields": []}}
{"title": "Gaussian Function", "description": "GAUSS The function calculates the Gaussian normal distribution using the followi￾ng formula:\nThe normal distribution is the density function normally distributed ran￾dom variables. With the parameters U = 0 and SI = 1, it follows the stan￾dard normal distribution.", "type": "FUNCTION", "name": "GAUSS", "input": [{"name": "X", "type": "REAL", "description": "The value at which to evaluate the Gaussian function."}, {"name": "U", "type": "REAL", "description": "The mean (average) of the distribution."}, {"name": "SI", "type": "REAL", "description": "The standard deviation of the distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed value of the Gaussian function at the specified point X."}}
{"title": "Gauss cumulative distribution function", "description": "GAUSSCD calculated the distribution function for normal dis￾tribution using the following formula:\nThe normal distribution is the density function normally distributed ran￾dom variables. With the parameters U = 0 and SI = 1, it follows the stan￾dard normal distribution. The distribution function ( Cumulative Distributi￾on Function ).", "type": "FUNCTION", "name": "GAUSSCD", "input": [{"name": "X", "type": "REAL", "description": "The value at which to evaluate the cumulative distribution function."}, {"name": "U", "type": "REAL", "description": "The mean value of the Gaussian distribution."}, {"name": "SI", "type": "REAL", "description": "The standard deviation of the Gaussian distribution."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The cumulative probability for the Gaussian distribution at the given value X.", "fields": []}}
{"title": "Calculate Greatest Common Divisor (GCD)", "description": "GCD function calculates the greatest common divisor (GCD) of A and\nB.", "type": "FUNCTION", "name": "GCD", "input": [{"name": "A", "type": "DINT", "description": "The first integer for which the GCD is to be calculated."}, {"name": "B", "type": "DINT", "description": "The second integer for which the GCD is to be calculated."}], "output": [{"name": "GCD", "type": "INT", "description": "The greatest common divisor of A and B."}], "in/out": [], "return_value": {"type": "INT", "description": "The calculated GCD value that is returned by the function."}}
{"title": "GDF Function Calculation", "description": "GDF calculate the Gundermann function.\nThe calculation is done using the formula:\nThe result of GDF is between -π/2 and + π/2\nGDF(0) = 0", "type": "FUNCTION", "name": "GDF", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number which will influence the output based on defined conditions."}], "output": [{"name": "GDF", "type": "REAL", "description": "Output parameter which is a real number calculated based on the value of the input parameter X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated result based on the input parameter X according to specific conditional logic."}}
{"title": "Bit Generator Function Block", "description": "GEN_BIT is a fully programmable pattern generator. At the inputs in0 .. IN7\nare the bit patterns at the input CLK in each case as a DWORD and passed\nby each clock pulse to the outputs Q0 .. Q3 starting from bit 0 of ascen￾ding. After the frst clock pulse at the input CLK the output Q0 has bit 0 of\nIN0 , at Q1 is bit 0 of In1 ... on Q7 is bit 0 of IN3. After the next clock pulse\nat the CLK input, the bit 1 of the inputs IN is passed to the outputs Q and\nso on, until the sequence is completed. The input STEPS determines how\nmany bits of the input DWORDS be passed to the outputs. The input REP\ndetermines how often this sequence is repeated. If the input set to 0, the\nsequence is repeated continuously. An asynchronous reset can always re￾set the sequencer. The outputs CNT and RUN indicate which bit is current￾ly passed to the output and whether the sequencer is running, or the se￾quence (RUN inactive) has fnished. After the sequences have expired the\nlast bit patterns remains on the outputs available until a reset restarts the\ngenerator.", "type": "FUNCTION_BLOCK", "name": "GEN_BIT", "input": [{"name": "in0", "type": "DWORD", "description": "First input DWORD value for bit shifting."}, {"name": "in1", "type": "DWORD", "description": "Second input DWORD value for bit shifting."}, {"name": "in2", "type": "DWORD", "description": "Third input DWORD value for bit shifting."}, {"name": "in3", "type": "DWORD", "description": "Fourth input DWORD value for bit shifting."}, {"name": "clk", "type": "BOOL", "description": "Clock signal to trigger the operation."}, {"name": "steps", "type": "INT", "description": "Number of steps to process before resetting."}, {"name": "rep", "type": "INT", "description": "Number of times to repeat the operation; 0 for continuous operation."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to initialize the block."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for the least significant bit of in0."}, {"name": "Q1", "type": "BOOL", "description": "Output for the least significant bit of in1."}, {"name": "Q2", "type": "BOOL", "description": "Output for the least significant bit of in2."}, {"name": "Q3", "type": "BOOL", "description": "Output for the least significant bit of in3."}, {"name": "cnt", "type": "INT", "description": "Current step count in the operation."}, {"name": "run", "type": "BOOL", "description": "Indicates if the block is currently running."}], "in/out": [], "return_value": null}
{"title": "Modulo Operation Function", "description": "MODR returns the remainder of a division similar to the stan￾dard MOD function, but for REAL numbers. MODR internally uses the data\nformat of type DINT. This may come to an overfow because DINT can sto￾re a maximum of +/-2.14 * 10^9 The range of MODR is therefore limited\nto +/- 2.14 * 10^9. For DIVI = 0 the function returns 0. \nMODR(A, M) = A - M * FLOOR2(A / M).", "type": "FUNCTION", "name": "MODR", "input": [{"name": "IN", "type": "REAL", "description": "The number to be divided."}, {"name": "DIVI", "type": "REAL", "description": "The divisor used for the modulo operation."}], "output": [{"name": "MODR", "type": "REAL", "description": "The result of the modulo operation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The modulo result, which is either the computed modulo or zero if DIVI is zero."}}
{"title": "Calculate Beginning of Month from a Given Date", "description": "MONTH_BEGIN calculates the date of frst Day of the current month and\ncurrent year.\nMONTH_BEGIN(D#2008-2-13) = D#2008-2-1", "type": "FUNCTION", "name": "MONTH_BEGIN", "input": [{"name": "idate", "type": "DATE", "description": "The input date from which the beginning of the month is to be calculated."}], "output": [{"name": "MONTH_BEGIN", "type": "DATE", "description": "The calculated beginning date of the month derived from the input date."}], "in/out": [], "return_value": {"type": "DATE", "description": "The date representing the start of the month for the given input date."}}
{"title": "Random Duty Cycle Generator", "description": "GEN_RDM is a random signal generator. It generates the output OUT a\nnew value in PT intervals. The output Q is TRUE for one cycle when the\noutput OUT has changed. The input AM and OS set the amplitude and the\nofset for the output OUT. If the inputs OS and AM are not connected, then\nthe default values are 0 and .\nThe following example shows a trace recording of the input values PT =\n100ms, AM = 10 and OS = 5. The output values generated every 100 ms\nin the range of 0 .. 10.", "type": "FUNCTION_BLOCK", "name": "GEN_RDM", "input": [{"name": "PT", "type": "TIME", "description": "The time period for the duty cycle generation."}, {"name": "AM", "type": "REAL", "description": "The amplitude factor that scales the random signal, default value is 1."}, {"name": "OS", "type": "REAL", "description": "The offset added to the generated random signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating whether the output signal is active."}, {"name": "Out", "type": "REAL", "description": "The generated output signal based on the random duty cycle."}], "in/out": [], "return_value": null}
{"title": "Calculate End of Month Date", "description": "MONTH_END calculates the date of the last day of the current month and\ncurrent year.\nMONTH_END(D#2008-2-13) = D#2008-2-29", "type": "FUNCTION", "name": "MONTH_END", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date for which the end of month is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The last date of the month corresponding to the provided input date."}}
{"title": "GEN_RDT Function Block", "description": "GEN_RDT generates pulses with a defned pulse width and random spa￾cing. The output pulses with the pulse width TP_Q be generated at random\nintervals TX. TX fuctuates randomly between time MIN_TIME_MS and\nMAX_TIME_MS. The module generates output pulses at XQ only when the\nENABLE input is TRUE.", "type": "FUNCTION_BLOCK", "name": "GEN_RDT", "input": [{"name": "Enable", "type": "BOOL", "description": "A boolean to enable or disable the function block operation."}, {"name": "Min_Time_ms", "type": "TIME", "description": "The minimum time interval (Taktzeit) for the output generation."}, {"name": "Max_Time_ms", "type": "TIME", "description": "The maximum time interval (Taktzeit) for the output generation."}, {"name": "TP_Q", "type": "TIME", "description": "The duration for which the output should remain in the TRUE state."}], "output": [{"name": "xQ", "type": "BOOL", "description": "A boolean output that indicates the state of the output based on the timing conditions."}], "in/out": [], "return_value": null}
{"title": "Determine Month of a Given Date", "description": "MONTH_OF_DATE(D#2007-12-31) = 12\nMONTH_OF_DATE(D#2006-1-1) = 1", "type": "FUNCTION", "name": "MONTH_OF_DATE", "input": [{"name": "IDATE", "type": "DATE", "description": "The date for which the month needs to be determined."}], "output": [{"name": "MONTH_OF_DATE", "type": "INT", "description": "The month of the year corresponding to the given date, as an integer value."}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the calculated month of the year based on the input date."}}
{"title": "Generator for Ramp Modulated Pulse (RMP)", "description": "GEN_RMP is a sawtooth generator. It generates a ramp at the output OUT \nwith the duration of PT and repeats this continuously. The output Q is for \nexactly one cycle TRUE when the ramp starts at the output OUT. The input \nAM and OS set the amplitude and the ofset for the output OUT. If the \ninputs OS and AM are not connected the default values are 0 and 1. The \noutput OUT then generates a sawtooth signal of 0 .. 1. The input DL can \nmove the output up to a period (PT) and is used to produce multiple \nshifted signals to each other. A 0 at the input DL means no displacement. \nA value between 0 and 1 shifts the signal by up to a period. \nThe following example shows a trace recording of the input values PT =\n10s, AM = 1 and OS = 0", "type": "FUNCTION_BLOCK", "name": "GEN_RMP", "input": [{"name": "PT", "type": "TIME", "description": "Pulse time duration for the generation of the ramp-modulated pulse."}, {"name": "AM", "type": "REAL", "description": "Amplitude of the ramp signal."}, {"name": "OS", "type": "REAL", "description": "Offset added to the ramp signal."}, {"name": "DL", "type": "REAL", "description": "Duty cycle of the pulse signal, represented as a fraction between 0 and 1."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean flag indicating if the current output is less than the previous output."}, {"name": "OUT", "type": "REAL", "description": "Calculated output value of the ramp signal."}], "in/out": [], "return_value": {}}
{"title": "Convert Month Integer to String Representation", "description": "MONTH_TO_STRING convert a month number to its equivalent string. The\ninput MTH passes the month: 1 =January, 12 = December. The input LANG\nchooses the language: 1 = English and 2 = German. LANG = 0 used as\nDefault the language specifed in the Global Setup variable\nLANGUAGE_DEFAULT. The input LX sets the length of the string to be gene￾rated: 0 = full month name, 3 = 3-letter abbreviation, all other values at\nthe input LX are undefned. \nThe strings produced by the module, and the supported languages are de￾fned in the Global Constants and can be expanded and changed. \nMONTH_TO_STRING(1,0,0) = 'January'\ndependent on the global constant LANGUAGE_DEFAULT\nMONTH_TO_STRING(1,2,0) = 'Januar'\nMONTH_TO_STRING(1,2,3) = 'Jan'", "type": "FUNCTION", "name": "MONTH_TO_STRING", "input": [{"name": "MTH", "type": "INT", "description": "The month integer to convert, should be between 1 and 12."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language setting for the month name. A value less than or equal to 0 indicates the default language."}, {"name": "LX", "type": "INT", "description": "An integer indicating the format of the month name. 0 for the default length, 3 for a three-letter abbreviation."}], "output": [{"name": "MONTH_TO_STRING", "type": "string", "description": "The string representation of the month in the specified language and format."}], "in/out": [], "return_value": {"type": "string", "description": "The output month name as a string.", "fields": []}}
{"title": "Sine Wave Generator Function Block", "description": "GEN_SIN is a sine wave generator with programmable period, adjustable\namplitude and signal ofset. A special feature is a adjustable delay so that\nwith multiple generators overlapping signals can be generated. A Binary\nOutput Q passes a logical signal, which is generated phase equal to the\nsine signal. The input DL is a delay for the output signal. The Delay is spe￾cifed with DL * PT. A DL of 0.5 delays the signal by half a period. \nThe following example shows GEN_SIN with a trace recording of the sine\nsignal and the binary output Q.\nThe above example generates a sine wave with 0.1 Hz (PT = 10 s) and a\nlower peak value of 0 and upper peak value of 10.", "type": "FUNCTION_BLOCK", "name": "GEN_SIN", "input": [{"name": "PT", "type": "TIME", "description": "The period of the sine wave."}, {"name": "AM", "type": "REAL", "description": "The amplitude of the sine wave. Default is 1.0."}, {"name": "OS", "type": "REAL", "description": "The offset of the sine wave."}, {"name": "DL", "type": "REAL", "description": "The duty cycle of the sine wave, which affects the waveform shape."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the signal state, true if the sine wave is positive."}, {"name": "Out", "type": "REAL", "description": "The current value of the generated sine wave."}], "in/out": [], "return_value": {}}
{"title": "Convert MS to BFT", "description": "MS_TO_BFT converts wind speeds of meters per second in the Beaufort\nscale.\nThe calculation is done using the formula:\nMS_TO_BFT = (MS * 1.196172)^2/3", "type": "FUNCTION", "name": "MS_TO_BFT", "input": [{"name": "MS", "type": "REAL", "description": "The input value in Meteo Standard (MS) that needs to be converted to Beaufort scale."}], "output": [{"name": "BFT", "type": "INT", "description": "The resulting integer value in the Beaufort scale corresponding to the input MS value."}], "in/out": [], "return_value": {"type": "INT", "description": "The integer result of the conversion from MS to BFT.", "fields": []}}
{"title": "Square Wave Generator", "description": "GEN_SQ is a generator with programmable period time and a fxed duty\ncycle of 50%. The input PT defnes the period time and the output Q pas￾ses the output signal.", "type": "FUNCTION_BLOCK", "name": "GEN_SQ", "input": [{"name": "PT", "type": "TIME", "description": "The period of the square wave signal, defining the time interval for toggling the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal that represents the state of the square wave, toggling between TRUE and FALSE."}], "in/out": [], "return_value": null}
{"title": "Convert Meters per Second to Kilometers per Hour", "description": "MS_TO_KMH calculates a speed value of meters/second to kilometers/hour \nto.\nMS_TO_KMH := MS * 3.6", "type": "FUNCTION", "name": "MS_TO_KMH", "input": [{"name": "ms", "type": "REAL", "description": "The velocity in meters per second."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted velocity in kilometers per hour."}}
{"title": "GEN_SQR Function Block", "description": "GEN_SQR is a sqare wave generator with programmable period, adjustable\namplitude and signal ofset and duty cycle DC ( Duty Cycle ). A special\nfeature is a adjustable delay so that with multiple generators overlapping\nsignals can be generated.\nThe following", "type": "FUNCTION_BLOCK", "name": "GEN_SQR", "input": [{"name": "PT", "type": "TIME", "description": "The period time for the square wave generation."}, {"name": "AM", "type": "REAL", "description": "The amplitude of the output signal. Default is 1.0."}, {"name": "OS", "type": "REAL", "description": "The offset value added to the output signal."}, {"name": "DC", "type": "REAL", "description": "The duty cycle of the square wave. Default is 0.5."}, {"name": "DL", "type": "REAL", "description": "The dead time. This is used to control the timing of the edges in the output signal."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the current state of the square wave signal."}, {"name": "Out", "type": "REAL", "description": "The generated output value of the square wave signal."}], "in/out": [], "return_value": null}
{"title": "List Cleaning Function", "description": "LIST_CLEAN cleans a list of empty elements. The list consists of Strings\n(elements) that begin with the separation character SEP.\nLIST_CLEAN('&ABC$23&&NEXT', 38) = '&ABC&23&NEXT'\nLIST_CLEAN('&&23&&NEXT&', 38) = '&23&NEXT'\nLIST_CLEAN('&&&&', 38) = ''", "type": "FUNCTION", "name": "LIST_CLEAN", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator character used to determine element boundaries in the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING[LIST_LENGTH]", "description": "The list of strings that will be cleaned. The function modifies this list in-place."}], "return_value": {"type": "BOOL", "description": "Indicates the success of the cleaning operation. The function returns TRUE upon successful completion."}}
{"title": "Convert Geographic Coordinates to Decimal Degrees", "description": "GEO_TO_DEG calculates an angle expressed in degrees from the input\ndata level. Minutes, seconds.\nGEO_TO_DEG (2,59,60.0) is 3.0 degrees", "type": "FUNCTION", "name": "GEO_TO_DEG", "input": [{"name": "D", "type": "INT", "description": "The degree component of the geographic coordinate"}, {"name": "M", "type": "INT", "description": "The minute component of the geographic coordinate"}, {"name": "SEC", "type": "REAL", "description": "The second component of the geographic coordinate"}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting decimal degrees calculated from the input geographic coordinates"}}
{"title": "Multiply Time by a Real Number", "description": "MULTIME function multiplies a time value with a multiplier.", "type": "FUNCTION", "name": "MULTIME", "input": [{"name": "t", "type": "TIME", "description": "The TIME value to be multiplied."}, {"name": "M", "type": "REAL", "description": "The REAL multiplier to scale the TIME value."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The resulting TIME after multiplying the input TIME with the REAL multiplier.", "fields": []}}
{"title": "Calculate the Gold Value", "description": "GOLD calculates the result of the golden feature. GOLD (1) gives the gol￾den ratio, and GOLD (0) returns 1. GOLD (X) * GOLD (-X) is always 1. GOLD\n(X) is the positive result of the quadratic equation and -GOLD(-X) is the ne￾gative result of the quadratic equation.\nThe calculation is done using the formula:", "type": "FUNCTION", "name": "GOLD", "input": [{"name": "X", "type": "REAL", "description": "The input real number for which the Gold value will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated Gold value based on the input X."}}
{"title": "Get Element from String List", "description": "LIST_GET delivers the item at the position POS from a list. The list consists\nof Strings (elements) that begin with the separation character SEP. The\nfrst element of the list has the position 1.", "type": "FUNCTION", "name": "LIST_GET", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator used to delimit elements in the input string list."}, {"name": "POS", "type": "INT", "description": "The position of the element to be retrieved from the list (0-based index)."}], "output": [{"name": "LIST_GET", "type": "string", "description": "The output string containing the retrieved element from the input list based on the specified position."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The input/output string list from which the element will be retrieved."}], "return_value": {"type": "string", "description": "Returns the string representation of the element at the specified position in the list."}}
{"title": "Convert Gray Code to Byte", "description": "GRAY_TO_BYTE converts a Gray-coded value (IN) in a byte.", "type": "FUNCTION", "name": "GRAY_TO_BYTE", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE value representing the Gray code to be converted."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The binary representation of the input Gray code after conversion."}}
{"title": "Insert into List Function", "description": "LIST_INSERT puts an element at the position POS in a list. The list consists\nof Strings (elements) that begin with the separation character SEP. The\nfrst element of the list is at position 1. If a position greater than the last\nelement of the list is given, empty elements are added to the list until INS\nis at its normal position at the end of the list. If POS = 0, the new element\nwill be placed to the top of the list.", "type": "FUNCTION", "name": "LIST_INSERT", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to tokenize the list."}, {"name": "POS", "type": "INT", "description": "The position in the list where the new string should be inserted."}, {"name": "INS", "type": "STRING(LIST_LENGTH)", "description": "The string that will be inserted into the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list into which the string will be inserted."}], "return_value": {"type": "BOOL", "description": "Returns TRUE if the string was successfully inserted, otherwise FALSE."}}
{"title": "Hexadecimal to Byte Conversion", "description": "HEX_TO_BYTE in a BYTE value.\nHere only hexadecimal characters '0'..'9', 'a..f' and 'A'.. 'F' are interpreted,\nothers occurring in HEX characters are ignored.", "type": "FUNCTION", "name": "HEX_TO_BYTE", "input": [{"name": "HEX", "type": "STRING(5)", "description": "A string representing the hexadecimal value to be converted to a byte."}], "output": [{"name": "HEX_TO_BYTE", "type": "BYTE", "description": "The resulting byte value obtained from the conversion of the hexadecimal string."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The output byte value derived from the hexadecimal input string."}}
{"title": "List Length Calculation", "description": "LIST_LENGTH) (input list)\nOutput INT (number of items in the list)\nLIST_LEN determines the number of items in a list.\nLIST_LEN('&0&1&2&3', 38) = 4\nLIST_LEN('',21) = 0", "type": "FUNCTION", "name": "LIST_LEN", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to mark the boundaries between elements in the list."}], "output": [{"name": "LIST_LEN", "type": "INT", "description": "The total number of elements in the list as determined by counting the occurrences of the separator."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The string representation of the list where elements are separated by the specified separator."}], "return_value": {"type": "INT", "description": "The return value indicates the count of elements in the list based on the separator provided."}}
{"title": "Hexadecimal to DWORD Converter", "description": "HEX_TO_DWORD converts a hexadecimal string in a DWORD\nvalue. Here only hexadecimal characters '0'..'9', 'a..f' and 'A'.. 'F' are inter￾preted, others occurring in HEX characters are ignored.", "type": "FUNCTION", "name": "HEX_TO_DWORD", "input": [{"name": "Hex", "type": "STRING", "description": "A hexadecimal string input with a maximum length of 20 characters."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The DWORD value that results from converting the hexadecimal input string.", "fields": []}}
{"title": "Multi Input Selector Function", "description": "MULTI_IN is a sensor interface that accepts up to 3 sensors to check for er￾rors, and depending on the input mode, an output value is calculated.\nMode Function\n0 MULTI_in = average of the inputs in_1.. 3\n1 MULTI_in = input in_1\n2 MULTI_in = input in_2\n3 MULTI_in = input in_3\n4 MULTI_in = Default Input \n5 MULTI_in = smallest value of the inputs in_1.. 3\n6 MULTI_in = largest value of the inputs in_1 .. 3\n7 MULTI_in = mean value of the inputs in_1..3\n>7 MULTI_in = 0\nRegardless of the mode input values that are greater than IN_MAX or less\nthan IN_MIN be ignored. If no calculation is possible as defned by mode,\nthe input Default is used as a output value. Multi_in is used when diferent\nsensors measures the same value and high security and reliability is requi￾red. A possible application is to measure the outside temperature at va￾rious points and the surveillance on cable or sensor failure.", "type": "FUNCTION", "name": "MULTI_IN", "input": [{"name": "in_1", "type": "REAL", "description": "The first input value."}, {"name": "in_2", "type": "REAL", "description": "The second input value."}, {"name": "in_3", "type": "REAL", "description": "The third input value."}, {"name": "default", "type": "REAL", "description": "The default value used when no inputs meet the criteria."}, {"name": "in_min", "type": "REAL", "description": "The minimum threshold value for validation of inputs."}, {"name": "in_max", "type": "REAL", "description": "The maximum threshold value for validation of inputs."}, {"name": "mode", "type": "BYTE", "description": "The mode which determines the operational behavior of the function."}], "output": [{"name": "MULTI_IN", "type": "REAL", "description": "The computed result based on the selected inputs and mode."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting value after processing inputs according to the selected mode."}}
{"title": "Holiday Calculation", "description": "HOLIDAYS: ARRAY [0..29] of HOLIDAY_DATA\nOutput Y: BOOL (TRUE if DATE_IN is a holiday)\nName: STRING(30) (name of present-day holiday)\nThe HOLIDAY function shows the output Y with TRUE holidays and also pro￾vides the name of the current holiday at the output NAME. HOLIDAY can,\nin addition to celebration days during the weekdays Friday, Saturday or\nSunday be active and deliver at the output Y TRUE, depending on whether\nthe inputs are FRIDAY, SATURDAY or SUNDAY set to TRUE. In the array HO￾LIDAYS are name and date of holidays defned and also universally adapta￾ble to other countries. Holidays can be defned as a fxed date, with a di￾stance of Easter or the week before a fxed date. The input LANGU selects\nthe appropriate language from the setup data so that expenditure for Fri￾day, Saturday and Sunday can be customized language-specifc. [fzy] The\nlanguages are global constants in the \"LOCATION SETUP\" defned and can\nbe expanded or adapted.\nIn the external array HOLIDAYS up to 30 holidays can be defned. Examp￾les are located in the description of the data type HOLYDAY_DATA.", "type": "FUNCTION_BLOCK", "name": "HOLIDAY", "input": [{"name": "DATE_IN", "type": "DATE", "description": "The date to check for a holiday."}, {"name": "LANGU", "type": "INT", "description": "The language code to determine the holiday name."}, {"name": "FRIDAY", "type": "BOOL", "description": "Indicates whether Friday should be considered as a weekend."}, {"name": "SATURDAY", "type": "BOOL", "description": "Indicates whether Saturday should be considered as a weekend."}, {"name": "SUNDAY", "type": "BOOL", "description": "Indicates whether Sunday should be considered as a weekend."}], "output": [{"name": "Y", "type": "BOOL", "description": "Indicates whether the date is a holiday."}, {"name": "NAME", "type": "STRING[30]", "description": "The name of the holiday, if any, corresponding to the given date."}], "in/out": [{"name": "HOLIDAYS", "type": "ARRAY[0..29] OF HOLIDAY_DATA", "description": "An array containing holiday data to be checked against the input date."}], "return_value": {"type": null, "description": null}}
{"title": "Multiply and Add Function", "description": "MUL_ADD multiplies the input value X with K and adds O.\nMUL_ADD = X * K + O.\nMUL_ADD (0.5, 10, 2) is 0.5 * 10 + 2 = 7", "type": "FUNCTION", "name": "MUL_ADD", "input": [{"name": "X", "type": "REAL", "description": "The first input value that will be multiplied."}, {"name": "K", "type": "REAL", "description": "The second input value that will multiply with X."}, {"name": "O", "type": "REAL", "description": "The value that will be added to the product of X and K."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the operation, which is the value of X multiplied by K, plus O."}}
{"title": "Get Hour from TIME_OF_DAY", "description": "HOUR function extracts the current hour of the day.", "type": "FUNCTION", "name": "HOUR", "input": [{"name": "itod", "type": "TIME_OF_DAY", "description": "The input variable representing the time of day from which the hour will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The hour value extracted from the input TIME_OF_DAY, represented as an integer."}}
{"title": "List Next Function Block", "description": "LIST_NEXT always delivers the next item from a list. The list is a STRING\nwhose elements are separated with the character SEP. The frst element\nof the list has the position 1. After the frst call to LIST_NEXT or a reset, at\noutput LEL the frst element of the list is passed. For each subsequent call\nthe module returns the next element of the list. When the end of the list is\nreached, an empty string Issued and set the output NUL = TRUE. With the\ncommand RST = TRUE, the list can be edited again and again.", "type": "FUNCTION_BLOCK", "name": "LIST_NEXT", "input": [{"name": "SEP", "type": "BYTE", "description": "The separator byte used to delimit items in the list."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the position in the list to the beginning."}], "output": [{"name": "LEL", "type": "STRING(LIST_LENGTH)", "description": "The output string containing the next list element extracted from the input list."}, {"name": "NUL", "type": "BOOL", "description": "A boolean flag indicating whether the list is empty or fully processed."}], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The input string representing the entire list to be processed."}], "return_value": null}
{"title": "Hour Extraction from DateTime", "description": "HOUR_OF_DT extracts the hour from a current DT value.\nHOUR_OF_DT(DT#2008-6-6-10:22:20) = 10", "type": "FUNCTION", "name": "HOUR_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "A DateTime value from which the hour will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the hour part of the given DateTime value, in the range of 0 to 23."}}
{"title": "Retrieve Element from List", "description": "LIST_RETRIEVE passes the item at the position POS from a list and deletes\nthe corresponding item in the list. The list consists of Strings (elements)\nthat begin with the separation character SEP. The frst element of the list\nis at position 1. The function returns an empty string if no element is at\nthe position POS.", "type": "FUNCTION", "name": "LIST_RETRIEVE", "input": [{"name": "SEP", "type": "BYTE", "description": "The byte value representing the separator used to delimit elements in the list."}, {"name": "POS", "type": "INT", "description": "The position of the element to retrieve from the list, where the first element is at position 1."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list from which an element will be retrieved. This is both the input list and will be updated during the operation."}], "return_value": {"type": "string", "description": "The retrieved element from the list. If the position is not greater than 0, the function returns an empty string."}}
{"title": "Convert Hours to Time", "description": "HOUR_TO_TIME calculates a time value (TIME) from the input\nvalue in hours as REAL.", "type": "FUNCTION", "name": "HOUR_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing time in hours."}], "output": [], "in/out": [], "return_value": {"type": "TIME", "description": "The converted time in the TIME format.", "fields": []}}
{"title": "Retrieve Last Element from a List", "description": "LIST_RETRIEVE_LAST passes the last item from a list and deletes the corre￾sponding item in the list. The list consists of Strings (elements) that begin\nwith the separation character SEP.", "type": "FUNCTION", "name": "LIST_RETRIEVE_LAST", "input": [{"name": "SEP", "type": "BYTE", "description": "The byte value used as a separator in the list."}], "output": [{"name": "LIST_RETRIEVE_LAST", "type": "string", "description": "The substring extracted from the list after the last occurrence of the separator."}], "in/out": [{"name": "LIST", "type": "STRING[LENGTH := LIST_LENGTH]", "description": "The input-output list of characters from which the last element is to be retrieved. This list will be modified to terminate at the last separator."}], "return_value": {"type": "string", "description": "Returns the last element in the list found after the last separator."}}
{"title": "Convert Hour to Time of Day", "description": "HOUR_TO_TOD calculate a time of day (TIMEOFDAY) from the\ninput value in hours as REAL.", "type": "FUNCTION", "name": "HOUR_TO_TOD", "input": [{"name": "IN", "type": "REAL", "description": "The input time in hours that needs to be converted to Time of Day."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "Returns the equivalent Time of Day representation of the input hours.", "fields": []}}
{"title": "Calculate the Hypotenuse", "description": "HYPOT The Mortgage function calculates the hypotenuse of a right triangle, by\nthe theorem of Pythagoras.", "type": "FUNCTION", "name": "HYPOT", "input": [{"name": "X", "type": "REAL", "description": "The length of one side of the right triangle."}, {"name": "Y", "type": "REAL", "description": "The length of the other side of the right triangle."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated length of the hypotenuse."}}
{"title": "Hysteresis Control Function Block", "description": "HYST is a standard Hysteresis module, its function depends on the input\nvalues ON and OFF.\nIs ON > OFF then the output TRUE if IN > ON and is FALSE when IN < OFF.\nIs ON < OFF then the output TRUE if IN < ON and is FALSE when IN > OFF.\nThe output WIN is TRUE if IN is between ON and OFF, is IN is out of range\nON - OFF WIN gets FALSE.", "type": "FUNCTION_BLOCK", "name": "HYST", "input": [{"name": "In", "type": "REAL", "description": "The input value to be evaluated against the hysteresis thresholds."}, {"name": "ON", "type": "REAL", "description": "The upper threshold value for the hysteresis control."}, {"name": "OFF", "type": "REAL", "description": "The lower threshold value for the hysteresis control."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output boolean indicating the active state based on hysteresis logic."}, {"name": "win", "type": "BOOL", "description": "A boolean output that indicates if the input is within the hysteresis range."}], "in/out": [], "return_value": {}}
{"title": "M_D Function Block", "description": "M_D measures the time between a rising edge of START and a rising edge \non STOP. PT is the result of the last measurement. Output ET is the elapsed \ntime since the last rising edge of START. M_d requires a rising edge to start \nthe measurement. If at the frst call already START is TRUE, it is not seen \nas a rising edge. Even if STOP is TRUE, a rising edge of START is not \ncounted. Only when all start conditions (STOP = FALSE, RST: = FALSE and \nrising edge at START) are present, the output RUN gets TRUE and a \nmeasurement is started. With TRUE at the input RST, the outputs can \nalways be reset to 0. If ET reaches the value of TMAX, automatically a \nreset is generated in the module to reset all outputs to 0. TMAX is \ninternally assigned with default value of T#10d and normally can be \nunconnected. TMAX serves to defne a maximum value range for PT. The \noutput RUN is TRUE if is a measurement is processed.", "type": "FUNCTION_BLOCK", "name": "M_D", "input": [{"name": "start", "type": "BOOL", "description": "A boolean input to start the timer."}, {"name": "stop", "type": "BOOL", "description": "A boolean input to stop the timer."}, {"name": "tmax", "type": "TIME", "description": "The maximum preset time for the timer, defaults to 14400 minutes."}, {"name": "rst", "type": "BOOL", "description": "A boolean input to reset the timer."}], "output": [{"name": "PT", "type": "TIME", "description": "The preset time that has been set or retained when stopping."}, {"name": "ET", "type": "TIME", "description": "The elapsed time counted while the timer is running."}, {"name": "run", "type": "BOOL", "description": "A boolean output indicating whether the timer is currently running."}], "in/out": [], "return_value": null}
{"title": "Timing Function Block", "description": "M_T measures the time how long IN was TRUE. PT is the time from the \nrising edge of signal IN to the falling edge of the IN signal. The Output ET \npasses the elapsed time since the last rising edge to falling edge. As long \nas the input signal is FALSE, ET = 0. M_T requires a rising edge to trigger \nthe measurement. If at the frst call IN is already TRUE, it is not seen as a \nrising edge. For more examples, see the description of M_TX. With TRUE at \nthe input RST, the outputs can always be reset to 0. If ET reaches the \nvalue of TMAX, automatically a reset is generated in the module to reset \nall outputs to 0. TMAX is internally assigned with default value of T#10d \nand normally can be unconnected.", "type": "FUNCTION_BLOCK", "name": "M_T", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input that, when true, starts the timing measurement."}, {"name": "TMAX", "type": "TIME", "description": "The maximum allowable elapsed time that can be measured. Defaults to 14400 minutes."}, {"name": "RST", "type": "BOOL", "description": "A boolean input to reset the elapsed time measurements."}], "output": [{"name": "PT", "type": "TIME", "description": "The previous time value recorded before the reset or input changes."}, {"name": "ET", "type": "TIME", "description": "The elapsed time measured from the rising edge of the input signal."}], "in/out": [], "return_value": null}
{"title": "Increment Function", "description": "INC adds to the input X the Value D and ensures that the output INC is not\ndoes not exceed the value of M. If the result from the addition of X and D\nis greater than M, then it starts again at 0. The feature is especially useful\nwhen addressing arrays and bufers. Even the positioning of absolute en￾coders it can be used. INC can be used to decrementieren with a negative\nD, while INC will ensure that the result is not below zero. If subtract 1 from\nzero INC starts again at M.\nINC: = X + D, because D can take the maximum value M.\nIf INC > M so INC starts again at 0.\nIf INC < 0 so INC starts again at M", "type": "FUNCTION", "name": "INC", "input": [{"name": "X", "type": "INT", "description": "The initial integer value to be incremented."}, {"name": "D", "type": "INT", "description": "The increment value that will be added to X."}, {"name": "M", "type": "INT", "description": "The modulus value used for wrapping the result."}], "output": [{"name": "INC", "type": "INT", "description": "The resulting value after incrementing X by D and applying modulo M."}], "in/out": [], "return_value": {"type": "INT", "description": "The final computed increment value.", "fields": []}}
{"title": "Timing Measurement Function Block (M_TX)", "description": "M_TX determined from the input signal IN the time which the signal IN was\nTRUE (TH) and the time the signal was set to FALSE (TL). The times of TH\nand TL are only measured after a rising or falling edge. If IN is at the frst\ncall of the module already high, this is not seen as a rising edge. From the\nmeasured values of TH and TL the Duty Cycle and the frequency in Hz are\ncalculated. A Duty Cycle of 0.4 means the signal was 40% TRUE and 60%\nFALSE. Output ET of type TIME is started with each rising edge at 0 and\nruns up until the next rising edge it starts again at 0. With a TRUE at the\ninput RST, the outputs can be reset at any time to 0. The input TMAX sets,\nafter which the elapsed time at ET, the outputs automatically are reseted.\nTMAX is internally assigned a default value of T#10d and can normally be\nleft open. The input TMAX is primarily used to reset in the absence of input\nsignal for a defned time the outputs. An example of a possible application\nis to measure the speed of a wave, indicating absence of the sensor si￾gnals to the speed (frequency) 0. TMAX is used with caution because, for\nexample, a TMAX of 10 seconds at the same time limits the smallest mea￾surable frequency to 0.1 Hz.", "type": "FUNCTION_BLOCK", "name": "M_TX", "input": [{"name": "in", "type": "BOOL", "description": "The input signal to be monitored for edges (rising and falling)."}, {"name": "tmax", "type": "TIME", "description": "The maximum allowed timing duration; after this duration, the block will reset the measurements.", "fields": []}, {"name": "rst", "type": "BOOL", "description": "Reset signal to initialize the measurement outputs."}], "output": [{"name": "TH", "type": "TIME", "description": "The duration of the high state (rising edge) in time."}, {"name": "TL", "type": "TIME", "description": "The duration of the low state (falling edge) in time."}, {"name": "DC", "type": "REAL", "description": "The duty cycle computed as the ratio of the high time to the total period."}, {"name": "F", "type": "REAL", "description": "The frequency calculated based on the high and low durations."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the last rising edge."}], "in/out": [], "return_value": null}
{"title": "Negation Function", "description": "NEGX returns the negated input value (-x).", "type": "FUNCTION", "name": "NEGX", "input": [{"name": "X", "type": "REAL", "description": "Input parameter which is a real number to be negated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The negated value of the input X.", "fields": []}}
{"title": "Convert Octal String to Byte", "description": "OCT_TO_BYTE converts an octal encoded string into a byte\nvalue. Only the octal characters are '0 '..'7' are interpreted, others in HEX\noccurring characters are ignored.", "type": "FUNCTION", "name": "OCT_TO_BYTE", "input": [{"name": "OCT", "type": "STRING[10]", "description": "An octal string consisting of up to 10 characters representing values in the octal numeral system."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte value obtained from converting the octal string.", "fields": []}}
{"title": "Increment/Decrement Counter Function Block", "description": "INC_DEC is a decoder for incremental encoder. Encoder (rotation encoder)\ndeliver two overlapping pulses, channel A and channel B. By the two chan￾nels, the direction and angle of rotation is decoded. INC_DEC detect each\nedge of the encoder, so 4 times the resolution is achieved. The output DIR\nshows the direction of rotation, and at the output CNT is an integer value\nprovided, which outputs the number of counted pulses. For a full rotation\nof an encoder with 100 pulses CNT counts to 400, because each edge is\ncounted at both channels, so 4 times the resolution is achieved. A RST in￾put allows any time to set the counter to 0. The counter counts up when\nDIR = TRUE, and down if DIR = FALSE.\nIn the following", "type": "FUNCTION_BLOCK", "name": "INC_DEC", "input": [{"name": "CHa", "type": "BOOL", "description": "Input signal for channel A. Determines if an increment or decrement pulse is generated."}, {"name": "CHb", "type": "BOOL", "description": "Input signal for channel B. Determines if an increment or decrement pulse is generated."}, {"name": "RST", "type": "BOOL", "description": "Reset signal. When active, resets the counter to zero."}], "output": [{"name": "dir", "type": "BOOL", "description": "Output indicating the direction of counting. TRUE for increment, FALSE for decrement."}, {"name": "cnt", "type": "INT", "description": "Output showing the current value of the counter."}], "in/out": [], "return_value": null}
{"title": "Convert String to Lowercase", "description": "LOWERCASE converts the String STR to lower case. During\nconversion, the Global Setup EXTENDED_ASCII constant is considered. If\nEXTENDED_ASCII = TRUE extended ASCII character set are evaluated ac￾cording to ISO 8859-1. Umlauts like Ä, Ö, Ü are considered only if the glo￾bal constant EXTENDED_ASCII = TRUE. A detailed description of the code\nchange is found in the function TO_LOWER.", "type": "FUNCTION", "name": "LOWERCASE", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be converted to lowercase."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The lowercase version of the input string.", "fields": []}}
{"title": "Integration Function Block", "description": "INTEGRATE is a Integrator which integrates the value of X to an external\nvalue Y. The integrator operates when E = TRUE, the internal Default of E\n= TRUE.", "type": "FUNCTION_BLOCK", "name": "INTEGRATE", "input": [{"name": "E", "type": "BOOL", "description": "Enable flag to execute the integration calculation. Default is TRUE."}, {"name": "X", "type": "REAL", "description": "The current value to be integrated."}, {"name": "K", "type": "REAL", "description": "Scaling factor for the integration calculation. Default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The resulting integrated value."}], "in/out": [], "return_value": null}
{"title": "Latch Function Block", "description": "LTCH is a transparent storage element ( Latch ). As long as L is true, Q fol￾lows the input D and the falling edge of L stores the output Q the current\ninput signal to D. With the asynchronous reset input of the Latch will be\ndeleted at any time regardless of L.", "type": "FUNCTION_BLOCK", "name": "LTCH", "input": [{"name": "D", "type": "BOOL", "description": "The data input that is transferred to the output Q when the latch is transparent."}, {"name": "L", "type": "BOOL", "description": "The latch control input that determines whether the latch is transparent."}, {"name": "RST", "type": "BOOL", "description": "The asynchronous reset input that forces the output Q to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output of the latch that reflects the state based on the inputs D and L."}], "in/out": [], "return_value": {}}
{"title": "Interlock Function Block", "description": "INTERLOCK has 2 inputs I1 and I2 which passes to each of the\noutputs Q1 and Q2. Q1 and Q2, however, are interlocked so that only one\noutput is set to TRUE. The time TL sets a dead time between the two out￾puts. An output can only be true if the other output was at least for the\ntime TL FALSE.\nI1 I2 Q1 Q2\n0 0 0 0\n0 1 0 1\n1 0 1 0\n1 1 0 0", "type": "FUNCTION_BLOCK", "name": "INTERLOCK", "input": [{"name": "I1", "type": "BOOL", "description": "First input signal."}, {"name": "I2", "type": "BOOL", "description": "Second input signal."}, {"name": "TL", "type": "TIME", "description": "Time delay for the interlock mechanism."}], "output": [{"name": "Q1", "type": "BOOL", "description": "Output signal 1, reflects the state of I1 considering the delay of I2."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2, reflects the state of I2 considering the delay of I1."}], "in/out": [], "return_value": null}
{"title": "Convert Local Time to UTC", "description": "LTIME_TO_UTC calculates UTC (Universal Time) from a given local time. \nThe world time is calculated by subtracting from the TIME_ZONE_OFFSET\nLTIME local time. If the DST is active (DST = TRUE), an additional hour of\nLTIME is deducted.\nNote: The summer time is not regulated the same in all countries. The\nfunction assumes that in addition to summer time a further hour is added\nto ofset.", "type": "FUNCTION", "name": "LTIME_TO_UTC", "input": [{"name": "LOCAL_TIME", "type": "DT", "description": "The local time to be converted to UTC."}, {"name": "DST", "type": "BOOL", "description": "A boolean flag indicating if Daylight Saving Time should be considered."}, {"name": "TIME_ZONE_OFFSET", "type": "INT", "description": "The offset of the local time from UTC in minutes."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The converted UTC time.", "fields": []}}
{"title": "Integer to BCD Conversion", "description": "INT_TO_BCDC converts the input value IN to a BCD coded output value.", "type": "FUNCTION", "name": "INT_TO_BCDC", "input": [{"name": "IN", "type": "INT", "description": "The integer value to be converted into BCD format."}], "output": [{"name": "BYTE", "type": "BYTE", "description": "The BCD representation of the input integer."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the BCD conversion as a byte."}}
{"title": "Convert Octal String to DWORD", "description": "OCT_TO_DWORD converts an octal encoded string into a byte\nvalue. Only the octal characters are '0 '..'7' are interpreted, others in HEX\noccurring characters are ignored.", "type": "FUNCTION", "name": "OCT_TO_DWORD", "input": [{"name": "OCT", "type": "STRING[20]", "description": "A string of octal digits that needs to be converted to a DWORD."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The converted DWORD value representing the octal input string.", "fields": []}}
{"title": "Inverse Function", "description": "INV calculates the inverse of X:", "type": "FUNCTION", "name": "INV", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the inverse is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed inverse of the input value X.", "fields": []}}
{"title": "Manual Control Logic Function", "description": "MANUAL can override an input signal IN with TRUE or FALSE.\nIN ON OFF Q\n0 0 0 0\n1 0 0 1\n- - 1 0 Manual operation position OFF\n- 1 0 1 Manual operation position ON\nThe typical use of MANUAL by means of a switch with 3 positions (OFF,\nAUTO, ON) where the connections are OFF at OFF and On at On and AUTO\nof the switch remains open.\nThe following diagram shows the possible connection of a switch with 3\npositions:", "type": "FUNCTION", "name": "MANUAL", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal indicating the current state. This signal is involved in the logical operation."}, {"name": "ON", "type": "BOOL", "description": "Input signal that, when TRUE, contributes to activating the manual control."}, {"name": "OFF", "type": "BOOL", "description": "Input signal that, when TRUE, deactivates the manual control."}], "output": [{"name": "MANUAL", "type": "BOOL", "description": "Output of the function indicating the state of the manual control, TRUE if the manual control is active."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns the state of the MANUAL control determined by the logical conditions of the input parameters."}}
{"title": "Check if Input is Alphabetic", "description": "ISC_ALPHA tests whether the character IN is an alphabetic character. If IN\nis a sign A..Z, a..z or any umlaut, the function returns TRUE, if not the\nfunction returns FALSE. In examining the Global Setup EXTENDED_ASCII\nconstant is considered. If EXTENDED_ASCII = TRUE the extended ASCII\ncharacter-set to be considered in accordance with ISO 8859-1. Umlauts\nlike Ä, Ö, Ü are considered only if the global constant EXTENDED_ASCII =\nTRUE.\nThe following Table Explains the code:\nCode EXTENDED_ASCII = TRUE EXTENDED_ASCII = FAS￾LE 0..64 FALSE FALSE\n65..90 TRUE TRUE\n91..96 FALSE FALSE\n97..122 TRUE TRUE\n123..191 FALSE FALSE\n192..214 TRUE FALSE\n215 FALSE FALSE\n216..246 TRUE FALSE\n247 FALSE FALSE\n248..255 TRUE FALSE", "type": "FUNCTION", "name": "ISC_ALPHA", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked to see if it represents an alphabet character."}], "output": [{"name": "ISC_ALPHA", "type": "BOOL", "description": "Returns true if the input byte is an alphabet character, otherwise returns false."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The boolean result indicating if the input is an alphabetic character."}}
{"title": "Input Control Function for ISC", "description": "ISC_CTRL tests whether a sign IN is a control character, if IN is a controll\ncharacter, the function returns TRUE, if not the function returns FALSE.\nControl characters are all characters with code < 32 or 127.", "type": "FUNCTION", "name": "ISC_CTRL", "input": [{"name": "IN", "type": "BYTE", "description": "A byte input value that will be evaluated by the function."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input IN is less than 32 or equal to 127; otherwise, returns FALSE."}}
{"title": "Offset Calculation Function", "description": "OFFSET addes diferent ofsets to an input signal depending on \nthe binary value of O1.. O4. The ofsets can be added individually or \nsimultaneously. With the input D a Default value instead of the input X can \nbe switched to the adder. The ofset and Default value be defned through \nthe setup variables.\nThe following example illustrates the operation of ofset:", "type": "FUNCTION", "name": "OFFSET", "input": [{"name": "X", "type": "REAL", "description": "The initial value to which offsets may be applied."}, {"name": "O1", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_1' to the result."}, {"name": "O2", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_2' to the result."}, {"name": "O3", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_3' to the result."}, {"name": "O4", "type": "BOOL", "description": "A boolean indicating whether to add 'Offset_4' to the result."}, {"name": "D", "type": "BOOL", "description": "A boolean flag that, if true, will cause the function to return the 'default' value instead of the calculated offset value."}, {"name": "Offset_1", "type": "REAL", "description": "The offset value to add if 'O1' is true."}, {"name": "Offset_2", "type": "REAL", "description": "The offset value to add if 'O2' is true."}, {"name": "Offset_3", "type": "REAL", "description": "The offset value to add if 'O3' is true."}, {"name": "Offset_4", "type": "REAL", "description": "The offset value to add if 'O4' is true."}, {"name": "default", "type": "REAL", "description": "The default value that will be returned if 'D' is true."}], "output": [{"name": "OFFSET", "type": "REAL", "description": "The resulting offset value after applying the initial value and any additional offsets, or the default value if 'D' is true."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the final offset value calculated based on the specified conditions."}}
{"title": "Check if a Byte is a Valid Hex Character", "description": "ISC_HEX tests whether a sign IN is a hex character, If IN is a sign 0..9, A..F,\na..f the function returns TRUE if the function returns FALSE.\nThe signs are 0..9 are the codes (48..57)\nThe characters A..F are the codes (65..70)\nThe characters a..f are the codes (97..102)", "type": "FUNCTION", "name": "ISC_HEX", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked if it is a valid hexadecimal character."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input byte is a valid hexadecimal character, FALSE otherwise."}}
{"title": "Check if Character is Lowercase", "description": "ISC_LOWER tests whether a sign IN is a lowercase letter, If IN is a lower\ncase the function returns TRUE, else the function returns FALSE. In exami￾ning the Global Setup EXTENDED_ASCII constant is considered. If EXTEN￾DED_ASCII = TRUE the extended ASCII character-set to be considered in\naccordance with ISO 8859-1.\nThe following Table discusses the character codes:\nCode EXTENDED_ASCII = TRUE EXTENDED_ASCII = FASLE\n0..96, 123..223, 247, 255 FALSE FALSE\n97..122 TRUE TRUE\n224..246 TRUE FALSE\n248..254 TRUE FALSE", "type": "FUNCTION", "name": "ISC_LOWER", "input": [{"name": "IN", "type": "BYTE", "description": "Input variable representing the ASCII value of a character."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input corresponds to a lowercase ASCII character, otherwise returns FALSE."}}
{"title": "Check If Byte Is Numeric", "description": "ISC_NUM tests whether a sign IN is a number, if IN is a character 0..9, the\nfunction returns TRUE, if not the function returns FALSE. The character 0..9\nare codes (48..57)", "type": "FUNCTION", "name": "ISC_NUM", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input byte is within the ASCII range for numeric characters, otherwise returns false."}}
{"title": "Check Uppercase Character", "description": "ISC_UPPER tests whether a sign IN is a captial letter, if IN is a capital let￾ter, the function returns TRUE, if not the function returns FALSE. In exami￾ning the Global Setup EXTENDED_ASCII constant is considered. If EXTEN￾DED_ASCII = TRUE the extended ASCII character-set to be considered in\naccordance with ISO 8859-1.\nThe The following table describes the character codes:\nCode EXTENDED_ASCII=TRUE EXTENDED_ASCII = FASLE\n0..64,91..191,215, 223..255 FALSE FALSE\n65..90 TRUE TRUE\n192..214 TRUE FALSE\n216..222 TRUE FALSE", "type": "FUNCTION", "name": "ISC_UPPER", "input": [{"name": "IN", "type": "BYTE", "description": "The byte value to be checked for uppercase character status."}], "output": [{"name": "ISC_UPPER", "type": "BOOL", "description": "Returns TRUE if the input byte corresponds to an uppercase ASCII character; otherwise, FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The result indicating whether the input byte is an uppercase letter, based on ASCII definitions.", "fields": []}}
{"title": "Matrix Function Block", "description": "MATRIX is a matrix keyboard controller for up to 4 columns and 5 rows.\nWith each PLC cycle on the MATRIX column switch the output further for a\ncolumn so that the lines Y1 to Y4 are queried one by one. For each co￾lumn, the row inputs X1 to X5 are queried and if a button is pressed, the\ncorresponding key code is displayed on the output. The output of TP is a\ncycle set to TRUE if the output CODE indicating a new value. If the setup\nvariable RELEASE is set to TRUE, then for pressing and releasing a button\neach sent a key code. If RELEASE is set to FALSE, a key code is generated\nonly when a button is a pressed. The key code of the output is as follows:\nBit CODE Output\n7 1 when key is pressed, 0 when key is released\n6 Line number Bit 2\n5 Line number Bit 1\n4 Line number Bit 0\n3 Always 0\n2 Row number Bit 2\n1 Row Number Bit 1\n0 Row Number Bit 0\nThe matrix controller is wired as follows:\nThis simple circuit can analyze up to 20 (4 * 5) keys. However, it should be\nnoted here that only in cases a number of keys can be pressed simulta￾neously. The controller can handle with this circuit, several buttons in a co￾lumn in any doubt, but not when keys are pressed simultaneously on dife￾rent columns. The wiring may be extended by each button is decoupled\nvia diodes, and thus the in fuence of di ferent \ncolumns to one another is prevented. In the circuit with diodes, any num￾ber of keys at a time and be evaluated safely. The outputs of the matrix\ncontroller continuously scan the rows of the keyboard matrix. On every\nPLC cycle one line is read. If in a row more keys have been pressed or\nchanged, the changes are displayed as codes of the following cycles. The\nmodule stores the individual key codes and gives each cycle consisting of\nonly one code so that no code can be lost. \nThe following timing diagram shows the scanning of rows of keys:", "type": "FUNCTION_BLOCK", "name": "MATRIX", "input": [{"name": "x1", "type": "BOOL", "description": "First input boolean signal."}, {"name": "x2", "type": "BOOL", "description": "Second input boolean signal."}, {"name": "x3", "type": "BOOL", "description": "Third input boolean signal."}, {"name": "x4", "type": "BOOL", "description": "Fourth input boolean signal."}, {"name": "x5", "type": "BOOL", "description": "Fifth input boolean signal."}, {"name": "Release", "type": "BOOL", "description": "A constant input signal indicating whether to release the generated code."}], "output": [{"name": "code", "type": "BYTE", "description": "The generated code based on the input changes."}, {"name": "TP", "type": "BOOL", "description": "A flag indicating whether a change has been detected."}, {"name": "y1", "type": "BOOL", "description": "Output signal derived from the processed code (default TRUE)."}, {"name": "y2", "type": "BOOL", "description": "Second output signal derived from the processed code."}, {"name": "y3", "type": "BOOL", "description": "Third output signal derived from the processed code."}, {"name": "y4", "type": "BOOL", "description": "Fourth output signal derived from the processed code."}], "in/out": [], "return_value": null}
{"title": "Check if a String is Alphanumeric", "description": "IS_ALNUM test if in the string STR are only letters or numbers. If an incor￾rect, non-alphanumeric character is found the function returns FALSE. STR\ncontains only letters or numbers, the result is TRUE. Letters are the cha￾racters A..Z and a..Z, and numbers are the signs 0..9. In examining the\nGlobal Setup constant EXTENDED_ASCII is considered. If EXTENDED_ASCII\n= TRUE the extended ASCII character-set to be considered in accordance\nwith ISO 8859-1. Umlauts like Ä, Ö, Ü are considered only if the global con￾stant EXTENDED_ASCII = TRUE.", "type": "FUNCTION", "name": "IS_ALNUM", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be checked for alphanumeric characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the string is alphanumeric and not empty; otherwise returns false."}}
{"title": "IS_ALPHA Function", "description": "IS_ALPHA tests whether the string STR contains only letters. If an incorrect,\nnon-alphanumeric character is found the function returns FALSE. If only letters\nare included in STR is the result of TRUE. Letters are the characters A..Z and\na..z. In examining the Global Setup EXTENDED_ASCII constant is considered. If\nEXTENDED_ASCII = TRUE the extended ASCII character-set to be considered in\naccordance with ISO 8859-1. Umlauts like Ä, Ö, Ü are considered only if the glo￾bal constant EXTENDED_ASCII = TRUE.", "type": "FUNCTION", "name": "IS_ALPHA", "input": [{"name": "str", "type": "STRING", "description": "The input string to be checked for alphabetic characters. It is defined with a specified maximum length.", "fields": []}], "output": [{"name": "IS_ALPHA", "type": "BOOL", "description": "A boolean value indicating whether the string consists solely of alphabetic characters.", "fields": []}], "in/out": [], "return_value": {"type": "BOOL", "description": "The return value of the function, indicating the result of the alphabet check.", "fields": []}}
{"title": "Convert Omega to Frequency", "description": "OM_TO_F calculates the frequency in Hz of the angular frequency Omega.", "type": "FUNCTION", "name": "OM_TO_F", "input": [{"name": "OM", "type": "REAL", "description": "The input value representing Omega (angular velocity) in real number format."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The function returns the computed frequency as a real number value.", "fields": []}}
{"title": "Check if All Characters are Present", "description": "IS_CC tests whether the string in STR only the in STR listed characters are\nincluded. If another character is found the function returns FALSE.", "type": "FUNCTION", "name": "IS_CC", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string to be checked against the comparison string."}, {"name": "cmp", "type": "STRING(STRING_LENGTH)", "description": "The comparison string containing characters to look for in the input string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input string contains all characters from the comparison string in the specified portion; otherwise, returns FALSE."}}
{"title": "ONTIME Function Block", "description": "ONTIME is an hour meter. It is summed up the entire time that the signal\nIN was since the last RESET to TRUE. Additionally, the number of the total\non/of cycles is determined. The output values are of type UDINT. With the\ninput RST, the output values will be reset at any time. The output values\nare not stored in variables of the module, but are applied externally atta￾ched and connected over IO (Pointer). This has the distinct advantage that\nas desired by the user the variables can be determined as RETAIN or PER￾SISTENT. It is thus possible to store old operating hours and restore it la￾ter, for example, at CPU change.\nThe declaration of the variables at the inputs SECONDS and CYCLES must\nbe of type UDINT and can either be created as a VAR, VAR RETAIN or VAR\nRETAIN PERSISTENT.\nThe declaration of the variables for the operating time and cycles must be\nUDINT type and can be alternatively RETAIN or PERSISTENT.\nVAR RETAIN PERSISTENT\nBetriebszeit_in_Sekunden: UDINT;\nCycles: UDINT;\nEND_VAR\nThe following table explains, RETAIN and PERSISTENT:\nType variables Retain and Persistent retain their value during download,\nonline change and reset. In a cold reset or reset source, lose these varia-\nbles the values. The user can save, but the values in the fle system or\nnetwork, and to restore itself, eg after changing the CPU.", "type": "FUNCTION_BLOCK", "name": "ONTIME", "input": [{"name": "IN", "type": "BOOL", "description": "This input signal indicates whether the timing should be active."}, {"name": "RST", "type": "BOOL", "description": "This input signal resets the SECONDS and CYCLES outputs."}], "output": [{"name": "SECONDS", "type": "UDINT", "description": "The total elapsed time in seconds."}, {"name": "CYCLES", "type": "UDINT", "description": "The total count of active cycles."}], "in/out": [], "return_value": null}
{"title": "Control Character String Checker", "description": "IS_CTRL tests whether the string STR are only control characters included.\nIf another character is found the function returns FALSE. If in STR are only\ncontrol characters included, the function returns TRUE. Control characters\nare the characters with the decimal 0..31 and 127", "type": "FUNCTION", "name": "IS_CTRL", "input": [{"name": "STR", "type": "STRING", "description": "The input string to be checked for control characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The function returns TRUE if the string consists only of control characters, otherwise FALSE."}}
{"title": "OSCAT_VERSION Function", "description": "OSCAT_VERSION iprovides if IN = FALSE the current version number as\nDWORD. If IN is set to TRUE then the release date of the current version as\na DWORD is returned.", "type": "FUNCTION", "name": "OSCAT_VERSION", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input parameter that determines which version number to return."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The DWORD value representing the OSCAT version based on the input parameter.", "fields": []}}
{"title": "Hexadecimal String Validation", "description": "IS_HEX tests whether the string STR contains only hexadecimal characters\nare. If another character is found the function returns FALSE. If in STR are\nonly hexadecimal characters included, the function returns TRUE. The he￾xadecimal character are characters with the decimal code 0..9, a..f. and\nA..F.", "type": "FUNCTION", "name": "IS_HEX", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be validated as a hexadecimal string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the input string is a valid hexadecimal string. Returns TRUE if all characters are hexadecimal, otherwise FALSE."}}
{"title": "String Lowercase Check", "description": "IS_LOWER tests whether the string STR only lowercase letters are inclu￾ded. If anything other than a small letter found the function returns FALSE.\nIf in STR are only lowercase letters included, the function returns TRUE. In\nexamining the Global Setup EXTENDED_ASCII constant is considered. If\nEXTENDED_ASCII = TRUE the extended ASCII character-set to be conside-\nred in accordance with ISO 8859-1. Umlauts like Ä, Ö, Ü are considered\nonly if the global constant EXTENDED_ASCII = TRUE.", "type": "FUNCTION", "name": "IS_LOWER", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be checked for lowercase characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if all characters in the string are lowercase; otherwise, false.", "fields": []}}
{"title": "Override Calculation Function", "description": "OVERRIDE supplies at the output Y the input value (X1, X2, X3), whose ab￾solute value is the largest of all. The inputs X1, X2 and X3 may each indivi￾dually be enabled with the inputs E1, E2 and E3. if one of the input signals\nE1, E2 or E3 to FALSE, the corresponding input X1, X2 or X3 is not conside￾red. One of many possible applications of OVERRIDE is for example, the\nquery of three sensors with the highest value overrides the others. With\nthe inputs of E in the diagnosis case, each sensor can be queried indivi￾dually, or a defective sensor can be switched of.", "type": "FUNCTION", "name": "OVERRIDE", "input": [{"name": "X1", "type": "REAL", "description": "The first input value used in the override calculation."}, {"name": "X2", "type": "REAL", "description": "The second input value used in the override calculation."}, {"name": "X3", "type": "REAL", "description": "The third input value used in the override calculation."}, {"name": "E1", "type": "BOOL", "description": "Enable flag for the first input value."}, {"name": "E2", "type": "BOOL", "description": "Enable flag for the second input value."}, {"name": "E3", "type": "BOOL", "description": "Enable flag for the third input value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated override value based on the input parameters."}}
{"title": "Check Non-Containment of Substring", "description": "IS_NCC tests whether the string STR none of the in STR listed characters\nare included. Is a character of CMP found in STR, the function returns FAL￾SE.", "type": "FUNCTION", "name": "IS_NCC", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The main string in which to search for the substring."}, {"name": "cmp", "type": "STRING[STRING_LENGTH]", "description": "The substring that needs to be checked for containment in the main string."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Boolean value indicating whether the substring is not contained in the main string. TRUE if not found; FALSE if found."}}
{"title": "Calculate Parity", "description": "PARITY calculates even parity over the input byte IN. The output is TRUE if\nthe number of true bits in the byte (IN) is odd.", "type": "FUNCTION", "name": "PARITY", "input": [{"name": "in", "type": "DWORD", "description": "The DWORD input value for which the parity is to be calculated."}], "output": [{"name": "PARITY", "type": "BOOL", "description": "The result indicating the parity of the input value, TRUE if the number of set bits is odd, otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns the parity result of the input value.", "fields": []}}
{"title": "Check if String is Numeric", "description": "IS_NUM tests whether the string STR contains only numbers. If another\ncharacter is found the function returns FALSE. If in STR are only numbers\nincluded, the function returns TRUE. Numbers are the character 0..9.", "type": "FUNCTION", "name": "IS_NUM", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "Input variable of type STRING with specified length which needs to be checked for numeric characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input string consists only of numeric characters and has a length greater than zero; otherwise, returns false."}}
{"title": "Check if Array is Sorted", "description": "IS_SORTED checks whether any array of REAL is sorted in\nascending order. When called, a pointer to the array and its size in bytes is\ntransferred to the function. Under CoDeSys the call is:\n_ARRAY_SORT(ADR(Array), SIZEOF(Array)), where array is the name of the\narray to be manipulated. ADR() is a standard function which identifes the\npointer to the array and SIZEOF() is a standard function, which determines\nthe size of the array.\nThe function returns TRUE if the array is sorted in ascending order.\nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "IS_SORTED", "input": [{"name": "pt", "type": "pointer to ARRAY[0..32000] of REAL", "description": "A pointer to an array containing REAL numbers."}, {"name": "size", "type": "UINT", "description": "The size of the array, specifying the number of elements in the pointer array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array is sorted in ascending order, otherwise returns FALSE."}}
{"title": "METER Function Block", "description": "METER is a meter, the two independent inputs (M1 and M2) are added up\nover time. The counting is controlled the inputs I1 and I2. With the reset\ninput RST the counter can be reset at any time. The value of M1 is added\nto the output value per second as long as I1 is TRUE analogous the value\nof M2 is added per second to output value if I2 is TRUE. If I1 and I2 TRUE,\nthe value of M1 + M2 is added per seconds once to the output. The input\nD Splits the output MX. Thus i.e. watt-hours can be counted instead of\nwatt-seconds. The module uses internally the OSCAT specifc data type\nREAL2 which allows a resolution of 15 digits. This the module can capture\nsmallest consumption levels at the inputs of M1 and M2 with short cycle ti￾mes and add them up to high overall values at the output MX. The resolu￾tion of the block can be determined as follows. MX is defned as I/O and\nmust be placed on an external variable of type REAL. The external variable\ncan be declared as retentive and/or persistent in order to obtain the value\nin case of power failure.\nMX/10^15 corresponds to the minimum resolution at the inputs M1 and\nM2.", "type": "FUNCTION_BLOCK", "name": "METER", "input": [{"name": "M1", "type": "REAL", "description": "First measurement input."}, {"name": "M2", "type": "REAL", "description": "Second measurement input."}, {"name": "I1", "type": "BOOL", "description": "Boolean indicator for the first measurement."}, {"name": "I2", "type": "BOOL", "description": "Boolean indicator for the second measurement."}, {"name": "D", "type": "REAL", "description": "Divisor used for calculations, defaults to 1.0."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to initialize measured values."}], "output": [{"name": "MX", "type": "REAL", "description": "Current output value reflecting the consumption measurement."}], "in/out": [], "return_value": null}
{"title": "Check Uppercase String", "description": "IS_UPPER checks if in the string STR all capital letters are included. If an\nincorrect, non capital character is found the function returns FALSE. If in\nSTR are only capital letters included, the function returns TRUE. In exami￾ning the Global Setup EXTENDED_ASCII constant is considered. If EXTEN￾DED_ASCII = TRUE the extended ASCII character-set to be considered in\naccordance with ISO 8859-1. Umlauts like Ä, Ö, Ü are considered only if\nthe global constant EXTENDED_ASCII = TRUE.", "type": "FUNCTION", "name": "IS_UPPER", "input": [{"name": "str", "type": "STRING", "description": "The input string to be checked for uppercase characters."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "True if all characters in the string are uppercase, false otherwise."}}
{"title": "Meter Status Function Block", "description": "METER_STAT calculates the consumption of the current day, week, month\nand year and shows the value of the last corresponding period. The accu￾mulated consumption value is at the IN input, while at the DI input is app￾lied the current date. With the RST input, the counter can be reset at any\ntime. For ease of storage in the persistent and retentive memory, the out￾puts are defned as I / O.\nThe following example shows the application of METER_STAT with the mo￾dule METER:", "type": "FUNCTION_BLOCK", "name": "METER_STAT", "input": [{"name": "IN", "type": "REAL", "description": "The input value measured by the meter."}, {"name": "DI", "type": "DATE", "description": "The current date corresponding to the measurement."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to indicate whether to reset the current measurements."}], "output": [], "in/out": [{"name": "Last_Day", "type": "REAL", "description": "The value of the last day measurement."}, {"name": "Current_Day", "type": "REAL", "description": "The value of the current day measurement."}, {"name": "Last_Week", "type": "REAL", "description": "The value of the last week measurement."}, {"name": "Current_Week", "type": "REAL", "description": "The value of the current week measurement."}, {"name": "Last_Month", "type": "REAL", "description": "The value of the last month measurement."}, {"name": "Current_Month", "type": "REAL", "description": "The value of the current month measurement."}, {"name": "Last_Year", "type": "REAL", "description": "The value of the last year measurement."}, {"name": "Current_Year", "type": "REAL", "description": "The value of the current year measurement."}], "return_value": null}
{"title": "Convert Kilometers per Hour to Meters per Second", "description": "KMH_TO_MS converts value to a speed of kilomter per Hour in meters per\nsecond. KMH_TO_MS := KMH / 3.6", "type": "FUNCTION", "name": "KMH_TO_MS", "input": [{"name": "kmh", "type": "REAL", "description": "The speed value in kilometers per hour to be converted."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The equivalent speed value in meters per second after conversion."}}
{"title": "Temperature Conversion from Kelvin to Celsius", "description": "K_TO_C converts a temperature reading from Kelvin in Celsius.", "type": "FUNCTION", "name": "K_TO_C", "input": [{"name": "Kelvin", "type": "REAL", "description": "The temperature value in Kelvin that needs to be converted to Celsius."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The converted temperature value in Celsius.", "fields": []}}
{"title": "Lambert W Function Calculation", "description": "LAMBERT_W function is defned for x > = -1/e. When the value is be￾low the range the is result -1000. The range of LAMBERT_W function is >=\n-1.", "type": "FUNCTION", "name": "LAMBERT_W", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the Lambert W function is to be calculated."}], "output": [{"name": "LAMBERT_W", "type": "REAL", "description": "The calculated Lambert W value. Returns -1000.0 for invalid inputs and 0 for an input of 0."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value of the Lambert W function computation.", "fields": []}}
{"title": "Langevin Function", "description": "LANGEVIN Function is very similarto sigmoid function, but more\nslowly approaching the limits. In contrast to the sigmoid are the values at\n-1 and +1. The Langevin function is mainly at CPUs without foating point\nunit much faster than the Sigmoid function.\nThe following chart shows the progress of the Langevin function:", "type": "FUNCTION", "name": "LANGEVIN", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number."}], "output": [{"name": "LANGEVIN", "type": "REAL", "description": "The calculated Langevin value based on the input parameter X."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the Langevin value, which is a real number calculated based on the input X."}}
{"title": "Minute Calculation from Time of Day", "description": "MINUTE function extracts the current minute of the day.", "type": "FUNCTION", "name": "MINUTE", "input": [{"name": "itod", "type": "TOD", "description": "The Time of Day input from which the minute value will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The calculated minute value derived from the given Time of Day input."}}
{"title": "Leap Year Day Check", "description": "LEAP_DAY function checks if the input date is a leap or a 29th Februa￾ry. The test is valid for the time window from 1970 to 2099. In the year\n2100 a leap year indicated although this is not one. However, since the\nrange of dates according to IEC61131-3 extends only to the year 2106 this\ncorrection will be omitted.", "type": "FUNCTION", "name": "LEAP_DAY", "input": [{"name": "IDATE", "type": "DATE", "description": "The date to be checked for leap day."}], "output": [{"name": "LEAP_DAY", "type": "BOOL", "description": "A boolean value indicating whether the input date is a leap day."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the date is February 29th, otherwise false."}}
{"title": "Minute Extraction from DateTime", "description": "MINUTE_OF_DT extracts the current minute from a DT value.\nMINUTE_OF_DT(DT#2008-6-6-10:22:20) = 22", "type": "FUNCTION", "name": "MINUTE_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "The DateTime value from which the minute is to be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The extracted minute value from the given DateTime.", "fields": []}}
{"title": "Leap Year Calculation", "description": "LEAP_OF_DATE tests whether the input date is in a leap year.\nThe function calculates whether a date falls within a leap year and returns\nTRUE if necessary. The test is valid for the time window from 1970 to\n2099. In the year 2100 a leap year is indicated although this is not one.\nHowever, since the range of dates according to IEC61131-3 extends only\nto the year 2106 this correction will be omitted.", "type": "FUNCTION", "name": "LEAP_OF_DATE", "input": [{"name": "idate", "type": "DATE", "description": "The date to check for leap year status."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "True if the year of the given date is a leap year, otherwise false."}}
{"title": "Convert Minutes to Time", "description": "MINUTE_TO_TIME calculates a time value (TIME) from the in￾put in minutes as REAL.", "type": "FUNCTION", "name": "MINUTE_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input parameter representing the time in minutes to be converted."}], "output": [{"name": "MINUTE_TO_TIME", "type": "TIME", "description": "The output time value calculated from the input minutes."}], "in/out": [], "return_value": {"type": "TIME", "description": "The resulting time value after conversion from minutes.", "fields": []}}
{"title": "Leap Year Determination Function", "description": "LEAP_YEAR tests if the input year is a leap year and passs\nTRUE if true. The test is valid for the time window from 1970 to 2099. In\nthe year 2100 a leap year is indicated although this is not one. However,\nsince the range of dates according to IEC61131-3 extends only to the year\n2106 this correction will be omitted.", "type": "FUNCTION", "name": "LEAP_YEAR", "input": [{"name": "yr", "type": "INT", "description": "The year for which the leap year status is to be determined."}], "output": [{"name": "LEAP_YEAR", "type": "BOOL", "description": "Returns TRUE if the year is a leap year, FALSE otherwise."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the year is a leap year."}}
{"title": "Check Date Period", "description": "PERIOD ignores the\nyears in the dates D1, D2 and DX. The test is performed only for months\nand days, so this function works for each year. The test period can also af￾ter 31 Extend beyond December, so for example from 9/1 - 3/15, a typical\napplication is to determine whether there is a heating period. That PERIOD\nwork properly the two dates D1 and D2 may not be in a leap year. It can,\nfor example, always be 2001, or even any other year that is not a leap\nyear.\nPERIOD (10/1/2001, 11/11/2007, 31/03/2001) returns TRUE, because the\ntest date within the period from 10/1 - 3/31 content.", "type": "FUNCTION", "name": "PERIOD", "input": [{"name": "d1", "type": "DATE", "description": "The start date of the period."}, {"name": "dx", "type": "DATE", "description": "The date to check if it falls within the period."}, {"name": "d2", "type": "DATE", "description": "The end date of the period."}], "output": [{"name": "PERIOD", "type": "BOOL", "description": "A boolean value indicating if the date dx is within the period defined by d1 and d2."}], "in/out": [], "return_value": {"type": "BOOL", "description": "The result of whether dx is within the period between d1 and d2.", "fields": []}}
{"title": "Length Conversion Function Block", "description": "LENGTH converts diferent in common used units for units of\nlength. Normally, only the input to be converted is occupied and the re￾maining inputs remain free. However, if several inputs loaded with values,\nthe values of all inputs are converted accordingly and then summed.\n1 P = 0.376065 mm (unit from the printing industry)\n1 IN = 25,4 mm\n1 FT = 0,3048 m\n1 YD = 0,9144 m\n1 MILE = 1609,344 m\n1 SM = 1852 m\n1 FM = 1,829 m", "type": "FUNCTION_BLOCK", "name": "LENGTH", "input": [{"name": "m", "type": "REAL", "description": "Length in meters (SI base unit)."}, {"name": "p", "type": "REAL", "description": "Length in typographical points."}, {"name": "in", "type": "REAL", "description": "Length in inches."}, {"name": "ft", "type": "REAL", "description": "Length in feet."}, {"name": "yd", "type": "REAL", "description": "Length in yards."}, {"name": "mile", "type": "REAL", "description": "Length in miles."}, {"name": "sm", "type": "REAL", "description": "Length in international sea miles."}, {"name": "fm", "type": "REAL", "description": "Length in fathoms."}], "output": [{"name": "Ym", "type": "REAL", "description": "Converted length in meters."}, {"name": "Yp", "type": "REAL", "description": "Converted length in typographical points."}, {"name": "Yin", "type": "REAL", "description": "Converted length in inches."}, {"name": "Yft", "type": "REAL", "description": "Converted length in feet."}, {"name": "Yyd", "type": "REAL", "description": "Converted length in yards."}, {"name": "Ymile", "type": "REAL", "description": "Converted length in miles."}, {"name": "Ysm", "type": "REAL", "description": "Converted length in international sea miles."}, {"name": "Yfm", "type": "REAL", "description": "Converted length in fathoms."}], "in/out": [], "return_value": null}
{"title": "String Mirror Function", "description": "MIRROR reads the string STR reverse and passes the characters in reverse\norder.", "type": "FUNCTION", "name": "MIRROR", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string that needs to be mirrored."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The mirrored version of the input string."}}
{"title": "Linear Interpolation Function", "description": "LINEAR_INT is a linear interpolation module. A characteristic is described\nby a maximum of 20 coordinate values (X, Y) and is cut up to 19 linear\nsegments. The defnition of the coordinate values is passed in an array\nwhich describes the characteristic with individual X, Y describes value\npairs. The value pairs must be sorted by the x_value. If an X value is called\noutside range which is described by the value pairs, then the frst respecti￾ve last linear segment is extrapolated and the corresponding value Issued.\nTo keep the number of defnition points fexible, at the input PTS is given\nthe number of points. The possible score is in the range from 3 to 20, whe￾rein each individual dot is shown with X-and Y-value.", "type": "FUNCTION", "name": "LINEAR_INT", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the linear interpolation is to be calculated."}, {"name": "XY", "type": "ARRAY[1..20, 0..1] OF REAL", "description": "A two-dimensional array containing the points for interpolation, where each row represents a point with X and Y coordinates."}, {"name": "Pts", "type": "INT", "description": "The number of points defined in the XY array that should be used for interpolation."}], "output": [{"name": "LINEAR_INT", "type": "REAL", "description": "The result of the linear interpolation calculation for the given input X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The real number result obtained from the linear interpolation."}}
{"title": "Mixing Two Real Values", "description": "MIX provides at the output a mixed ratio M value, mixed from values A and\nB. The input M passes the proportion of B in the range 0..1.\nMIX = (M-1)*A + M*B", "type": "FUNCTION", "name": "MIX", "input": [{"name": "A", "type": "REAL", "description": "The first real value to be mixed."}, {"name": "B", "type": "REAL", "description": "The second real value to be mixed."}, {"name": "M", "type": "REAL", "description": "The mixing factor, which determines the weight of each input value in the final result."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the mixing operation, calculated as (1.0 - M) * A + M * B."}}
{"title": "Add Item to List", "description": "LIST_ADD adds another element to the end of a list. The list consists of\nStrings (elements) that begin with the separation character SEP.", "type": "FUNCTION", "name": "LIST_ADD", "input": [{"name": "SEP", "type": "BYTE", "description": "The separation character that will be converted to a string and prefixed to the input string."}, {"name": "INS", "type": "STRING(LIST_LENGTH)", "description": "The input string that is to be added to the list."}], "output": [], "in/out": [{"name": "LIST", "type": "STRING(LIST_LENGTH)", "description": "The list to which the input string will be added. It is modified in place."}], "return_value": {"type": "BOOL", "description": "A boolean value indicating the success of the addition operation to the list.", "fields": []}}
{"title": "PIN Code Verification", "description": "PIN_CODE checks a stream of bytes for the presence of a specifc se￾quence. If the sequence is found, this is indicated by a TRUE at output TP.\nIn the following example, two modules PIN_CODE be used to decode two\nCODE_SEQUENCES of a matrix keyboard.", "type": "FUNCTION_BLOCK", "name": "PIN_CODE", "input": [{"name": "CB", "type": "BYTE", "description": "The byte value representing the current code input by the user."}, {"name": "E", "type": "BOOL", "description": "A boolean flag indicating whether the input verification should be processed."}, {"name": "PIN", "type": "STRING[8]", "description": "The PIN code string that the user needs to match, up to 8 characters long."}], "output": [{"name": "TP", "type": "BOOL", "description": "A boolean output indicating whether the proper PIN code has been detected (TRUE) or not (FALSE)."}], "in/out": [], "return_value": null}
{"title": "Polynomial Interpolation Calculation", "description": "POLYNOM_INT interpolates a number of pairs of values with a polynomial\nof N times degree. The number of pairs is PTS, and N is the number of\npairs of values (PTS). Any characteristic is described by a maximum of 5\ncoordinate-values (X, Y) and internally described by a polynomial. The de￾fnition of the coordinate values is passed in an array which describes the\ncharacteristic with individual X, Y describes value pairs. The value pairs\nmust be sorted by the x_value. If an X value is queried outside the descri￾bed range by value-apairs, so that is calculated according to the determi￾ned polygon. It is noted, that here can occur oscillations above and below\nthe area of defnition by a polynomial of higher degree , and calculated va￾lues mostly are not useful in this area. Before the application of a polyno￾mial it is essential for this purpose to read the basics, for example, in Wiki￾pedia. To keep the number of defnition points fexible, at the input PTS is\ngiven the number of points. The possible score is in the range from 3 to 5,\nwherein each individual dot is shown with X-and Y-value. A Polynomial with\nmore than 5 points leads to an increased tendency to oscillate and is for\nthis reason refused. \nThe following example shows the defnition for the array XY and some va￾lues:\nVAR\n EXAMPLE : ARRAY[1..5,0..1] := -10,-0.53, 10,0.53, 100,88.3, 200,122.2;\nEND_VAR\nfor the above defnition, the following results are valid:\nPOLYNOM_INT(0, example, 4) = -1.397069;\nPOLYNOM_INT(30.0, example, 4) = 11.4257;\nPOLYNOM_INT(66.41, example, 4) = 47.74527;\nPOLYNOM_INT(800.0, example, 4) = -19617.94;\nWhen the results of the example is clearly seen that the value of\n-19617.94 for the input X = 800 makes no sense, since it is outside the\ndefned range of -10 to +200.\n The following trace recording shows the variation of output to input. Here,\nclearly, the overshoot of the polygon with respect to a linear interpolation\ncan be seen. Green = input X, Red = linear interpolation, Blue = polynomi￾al interpolation. \n 10. Geometric Functions", "type": "FUNCTION", "name": "POLYNOM_INT", "input": [{"name": "X", "type": "REAL", "description": "The point at which the polynomial value is to be calculated."}, {"name": "XY", "type": "ARRAY[1..5, 0..1] OF REAL", "description": "A two-dimensional array containing the data points for polynomial interpolation, where each element corresponds to an (x, y) coordinate."}, {"name": "Pts", "type": "INT", "description": "The number of data points provided in the 'XY' array, limited to a maximum of 5."}], "output": [{"name": "POLYNOM_INT", "type": "REAL", "description": "The calculated value of the polynomial at the point 'X'."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the polynomial interpolation at the specified point 'X'."}}
{"title": "Pressure Conversion Function Block", "description": "PRESSURE converts diferent, in practice common units, for\npressure. Normally, only the input to be converted is occupied and the re￾maining inputs remain free. However, if several inputs loaded with values,\nthe values of all inputs are converted accordingly and then summed.\n1 MWS = 1 meter of water = 0.0980665 Bar\n1 Torr = 1 mm Hg = 0.133322 bar = 101325/760 Pa\n1 ATT = 1 kp / cm ² = 0.980665 bar\n1 ATM = 1.01325 Bar\n1 PA = 1 N / m²\n1 BAR = 105 Pa", "type": "FUNCTION_BLOCK", "name": "PRESSURE", "input": [{"name": "mws", "type": "REAL", "description": "Pressure in millimeters of water column."}, {"name": "torr", "type": "REAL", "description": "Pressure in torr."}, {"name": "att", "type": "REAL", "description": "Pressure in technical atmospheres."}, {"name": "atm", "type": "REAL", "description": "Pressure in standard atmospheres."}, {"name": "pa", "type": "REAL", "description": "Pressure in pascals."}, {"name": "bar", "type": "REAL", "description": "Pressure in bar."}], "output": [{"name": "Ymws", "type": "REAL", "description": "Converted pressure in millimeters of water column."}, {"name": "Ytorr", "type": "REAL", "description": "Converted pressure in torr."}, {"name": "Yatt", "type": "REAL", "description": "Converted pressure in technical atmospheres."}, {"name": "Yatm", "type": "REAL", "description": "Converted pressure in standard atmospheres."}, {"name": "Ypa", "type": "REAL", "description": "Converted pressure in pascals."}, {"name": "Ybar", "type": "REAL", "description": "Converted pressure in bar."}], "in/out": [], "return_value": null}
{"title": "Convert Process Time to Frequency", "description": "PT_TO_F expects a period of seconds in the appropriate frequency to fre￾quency in Hz.", "type": "FUNCTION", "name": "PT_TO_F", "input": [{"name": "PT", "type": "TIME", "description": "The input process time that needs to be converted to frequency."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The frequency value calculated from the process time.", "fields": []}}
{"title": "PWM_DC Function Block", "description": "PWM_DC is a Duty - cycle modulated frequency generator. The generator\ngenerates a fxed frequency F with a duty cycle (TON / TOFF) which can be\nmodulated (adjusted) by the input DC. A value of 0.5 at the input DC ge￾nerates a duty cycle of 50%. \nThe following image shows an output signal with a duty - cycle 2 / 1, which\ncorresponds to a DC (ratio) of 0.67.", "type": "FUNCTION_BLOCK", "name": "PWM_DC", "input": [{"name": "F", "type": "REAL", "description": "The frequency of the PWM signal in Hz."}, {"name": "DC", "type": "REAL", "description": "The duty cycle of the PWM signal, specified as a fraction (0.0 to 1.0)."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output state of the PWM signal, where TRUE indicates the pulse is active."}], "in/out": [], "return_value": null}
{"title": "Pulse Width Modulation Control", "description": "PWM_PW is a pulse width modulated frequency generator. The generator\ngenerates a fxed frequency F with a duty cycle (TON / TOFF) which can\nbemodulated (set) by the input PW. The input passes the time before the\nsignal remains TRUE.", "type": "FUNCTION_BLOCK", "name": "PWM_PW", "input": [{"name": "F", "type": "REAL", "description": "The frequency of the PWM signal in Hertz."}, {"name": "PW", "type": "TIME", "description": "The duration of the pulse width."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output Boolean signal representing the PWM signal."}], "in/out": [], "return_value": null}
{"title": "Scalar Multiplication of a 3D Vector", "description": "V3_SMUL multiplies a three-dimensional vector A with scalar M.\nV3_SMUL([1,2,3],10) = (10,20,30)", "type": "FUNCTION", "name": "V3_SMUL", "input": [{"name": "A", "type": "Vector_3", "description": "The 3-dimensional vector that is to be multiplied by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the vector."}]}, {"name": "M", "type": "REAL", "description": "The scalar multiplier to be applied to each component of the vector."}], "output": [{"name": "V3_SMUL", "type": "Vector_3", "description": "The resulting vector after multiplication by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting vector."}]}], "in/out": [], "return_value": {"type": "Vector_3", "description": "The resulting vector formed by multiplying each component of the input vector by the scalar.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting vector."}]}}
{"title": "Vector Subtraction Function", "description": "V3_SUB Subtracts the vector B of A\nV3_SUB([3,3,3],[1,2,3]) = (2,1,0)\nV3_SUB([1,2,3],[1,-2,-3]) = (0,4,6)", "type": "FUNCTION", "name": "V3_SUB", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector from which the second vector will be subtracted."}, {"name": "B", "type": "Vector_3", "description": "The second input vector that will be subtracted from the first vector."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The resultant vector after subtracting vector B from vector A.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the resultant vector, calculated as A.X - B.X."}, {"name": "Y", "type": "REAL", "description": "The Y component of the resultant vector, calculated as A.Y - B.Y."}, {"name": "Z", "type": "REAL", "description": "The Z component of the resultant vector, calculated as A.Z - B.Z."}]}}
{"title": "Convert Degrees to Radians with Modulo Operation", "description": "RAD function converts an angle value from degrees to radians. Taking\ninto account that the DEG will not be greater than 360. If DEG is greater\nthan 360, 360 is to be subtracted as long as DEG is again between 0-360\n°.\nRAD(0) = 0 RAD(180) = π\nRAD(360) = 0 RAD(540) = π", "type": "FUNCTION", "name": "RAD", "input": [{"name": "DEG", "type": "REAL", "description": "Degrees as input variable."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated radians value, constrained to be within the range [0, 2PI]."}}
{"title": "Range to Byte Conversion", "description": "RANGE_TO_BYTE converts a real value in a BYTE value. An input value of X\ncorresponds to the value of LOW is converted it into an output value of 0\nand an input value X of the input value corresponds to HIGH is converted\ninto an output value of 255. The input X is limited to the range from LOW\nto HIGH, an overfow of the output BYTE can therefore not happen.", "type": "FUNCTION", "name": "RANGE_TO_BYTE", "input": [{"name": "X", "type": "REAL", "description": "The real number input that is to be converted to a byte."}, {"name": "low", "type": "REAL", "description": "The lower bound of the range."}, {"name": "high", "type": "REAL", "description": "The upper bound of the range."}], "output": [], "in/out": [], "return_value": {"type": "BYTE", "description": "The resulting byte value after the conversion from the real number based on the defined range."}}
{"title": "Range to Word Conversion", "description": "RANGE_TO_WORD converts a REAL value to a WORD value. An input value\nof X corresponds to the value of LOW is converted it into an output value\nof 0 and an input value X that corresponds to HIGH is converted to an out￾put value of 65535. The X input is limited to the range from LOW to HIGH,\nan overfow of the output WORD therefore can not happen.", "type": "FUNCTION", "name": "RANGE_TO_WORD", "input": [{"name": "X", "type": "REAL", "description": "The input real number that needs to be converted."}, {"name": "low", "type": "REAL", "description": "The lower limit for the range."}, {"name": "high", "type": "REAL", "description": "The upper limit for the range."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The word representation of the normalized input value.", "fields": []}}
{"title": "Random Number Generation Function", "description": "RDM calculates a pseudo- random number. This is the PLC's internal Timer\nread and converted into a pseudo-random number. Because RDM's is writ￾ten as a function and not as a function module, it can not save data bet￾ween 2 calls and should therefore be used with caution. RDM is only called\nonce per cycle, it produces reasonable good results. But when it is repea￾tedly called within a cycle, it delivers the same number, most likely becau￾se of the PLC timer is still on the same value. If the function is repeatedly\nused within a cycle, so it must be passed with each call a diferent number\nof starts (LAST). It shall be called only once per cycle, is sufcient to call\nRDM(0). As a starting number for each call, the last calculated number of\nRDM can be used. Supplied by RDM random numbers between 0 and 1,\nwhich does not contain 1 (0 <=random number < 1)", "type": "FUNCTION", "name": "RDM", "input": [{"name": "last", "type": "REAL", "description": "The upper limit for the generated random number, constrained between 0.0 and 1.0."}], "output": [{"name": "RDM", "type": "REAL", "description": "The generated pseudo-random number, calculated based on the input 'last' and the current PLC time."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the random number generation function, which is a pseudo-random value based on internal calculations and input parameters."}}
{"title": "Read and Compute Data with Bit Manipulation", "description": "RDMDW charges pseudo - random number with 32 bits in length in the for￾mat DWORD. This is the PLC's internal timer that is read and is transferred\ninto a pseudo random number. Since RDMDW as a function and was not\nwritten as a function module, it can not save data between 2 calls and\nshould therefore be used with caution. If RDMDW called only once per cy￾cle, it produces reasonable good results. But when it is repeatedly called\nwithin a cycle, it delivers the same number, most likely because of the PLC\ntimer is still on the same value. If the function is repeatedly used within a\ncycle, so it must be passed with each call a diferent number of starts\n(LAST). If it be called only once per cycle, it is sufcient to call RDMDW(0).\nAs a starting number for each call, the last number accounted by RDMDW\nbe used. That result from RDMDW is a random 32-bit wide bit pattern.", "type": "FUNCTION", "name": "RDMDW", "input": [{"name": "last", "type": "DWORD", "description": "The DWORD value used for bit counting and subsequent mathematical operations."}], "output": [{"name": "RDMDW", "type": "DWORD", "description": "The resulting DWORD after applying bit manipulation and mathematical computations based on the input value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed DWORD value returned from the function."}}
{"title": "Convert Real to DWORD", "description": "REAL_TO_DW copies the bit pattern of a REAL (IN) in a DWORD. These bits\nare copied without regard to their meaning. The function REAL_TO_DW is\nthe inverse so that the conversion of REAL_TO_DW and then DW_TO_REAL\nresult in the output value. The IEC standard function REAL_TO_DWORD\nconverts the REAL value to a fxed numerical value and is rounded at the\nlowest point of the DWORD.", "type": "FUNCTION", "name": "REAL_TO_DW", "input": [{"name": "X", "type": "REAL", "description": "Input variable of type REAL that needs to be converted to DWORD."}], "output": [{"name": "REAL_TO_DW", "type": "DWORD", "description": "The DWORD representation of the input REAL value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The result of the conversion from REAL to DWORD."}}
{"title": "Convert Real Number to Fraction", "description": "REAL_TO_FRAC converts a foating point number (REAL) in a fraction. The\nfunction returns the data type is a FRACTION of the structure with 2 va￾lues. With the input X, the maximum size of the counter can be specifed.\nData type FRACTION:\n*.NUMERATOR : INT (Numerator of the fraction)\n*.DENOMINATOR : INT (Denominator of the fraction)", "type": "FUNCTION", "name": "REAL_TO_FRAC", "input": [{"name": "X", "type": "REAL", "description": "The real number to be converted into a fraction."}, {"name": "N", "type": "INT", "description": "The maximum allowed size of the denominator."}], "output": [{"name": "NUMERATOR", "type": "DINT", "description": "The calculated numerator of the resulting fraction."}, {"name": "DENOMINATOR", "type": "DINT", "description": "The calculated denominator of the resulting fraction."}], "in/out": [], "return_value": {"type": "FRACTION", "description": "The fraction representation of the given real number containing numerator and denominator.", "fields": [{"name": "NUMERATOR", "type": "DINT", "description": "The numerator value of the fraction."}, {"name": "DENOMINATOR", "type": "DINT", "description": "The denominator value of the fraction."}]}}
{"title": "Real to String Formatting Function", "description": "REAL_TO_STRF converts a REAL value to a string with a fxed number of\ndecimal N. At the conversion entirely in a normal number format XXX.NNN\nis converted. At the conversion IN is rounded to N digits after the decimal\npoint and then converted into a String to the format XXX.NNN. When N =\n0, the REAL number is rounded to 0 digits after the decimal point and the\nresult is passed as an integer without a point and decimal places. If the\nnumber IN is less than, as with N decimal places can be captured, a zero is\npassed. The decimal places are always flled up to N digits with zeros. The\nmaximum string length is 20 digits. The D input determines which charac￾ter represents the decimal point.", "type": "FUNCTION", "name": "REAL_TO_STRF", "input": [{"name": "IN", "type": "REAL", "description": "The real number to be converted to a string."}, {"name": "N", "type": "INT", "description": "The number of decimal places to round the real number to. Must be limited to the range 0..7."}, {"name": "D", "type": "STRING[1]", "description": "The character to be used as the decimal separator."}], "output": [{"name": "REAL_TO_STRF", "type": "string", "description": "The resulting string representation of the real number."}], "in/out": [], "return_value": {"type": "string", "description": "The string representation of the real number after conversion and formatting."}}
{"title": "Reflect Function", "description": "REFLECT reverses the order specifed by the number of L BitsBits in a\nDWORD. The most signifcant bits than specifed by the length L remain\nunchanged.", "type": "FUNCTION", "name": "REFLECT", "input": [{"name": "D", "type": "DWORD", "description": "The DWORD value to be reflected."}, {"name": "L", "type": "INT", "description": "The length defining how many bits to reflect from the DWORD value."}], "output": [{"name": "REFLECT", "type": "DWORD", "description": "The resulting DWORD value after the reflection operation."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD value from the reflection process."}}
{"title": "Refraction Calculation", "description": "REFRACTION calculates the atmospheric refraction outside the atmosphe￾re and celestial bodies. A celestial body appears by the refraction of light\nin the atmosphere by the refraction higher above the horizon than he ac￾tually is. The refraction is 0 at the zenith (at 12:00 noon) and increases\nmuch close to the horizon. At 0° (the horizon), the refraction is -0.59° and\n10° above the horizon, it is 0.09°. The refraction is needed to calculated\norbits of celestial bodies and to correct satellite so that they match with\nobservation. The module calculates an average value for the pressure of\n1010mBar and 10° C. When the sun is actually at 0°, so exactly in the ho￾rizon, it appears above the horizon because of refraction at 0.59 degrees .\nThe visible sun position is the actual (astronomical) sun position H + the\nrefraction of the sun. The refraction angle is also calculated below the ho￾rizon ELEV < - 2°, so that below the horizon always the refraction is added\nto the astronomical refraction angle, so as the distance to the sun can be\ncalculated correctly at any time. For astronomical angle < -1.9 ° is the re￾fraction remains constant at 0.744 degrees.", "type": "FUNCTION", "name": "REFRACTION", "input": [{"name": "ELEV", "type": "REAL", "description": "The elevation in degrees which will be used in the refraction calculation."}], "output": [{"name": "REFRACTION", "type": "REAL", "description": "The calculated refraction value based on the input elevation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The output value representing the refraction calculated from the given elevation."}}
{"title": "Replace All Occurrences of a Substring", "description": "REPLACE_ALL replaces all occurring strings SRC in the string STR with REP.\nAn empty string SRC gives no results.", "type": "FUNCTION", "name": "REPLACE_ALL", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The original string in which occurrences of the source substring will be replaced."}, {"name": "src", "type": "STRING[STRING_LENGTH]", "description": "The substring that needs to be replaced in the original string."}, {"name": "rep", "type": "STRING[STRING_LENGTH]", "description": "The substring that will replace each occurrence of the source substring."}], "output": [{"name": "REPLACE_ALL", "type": "string", "description": "The modified string after all occurrences of the source substring have been replaced."}], "in/out": [], "return_value": {"type": "string", "description": "The final string resulting from the replacement of all occurrences."}}
{"title": "Character Replacement Function", "description": "REPLACE_CHARS replaces all the characters STR in String SRC with the\ncharacters at the same place in REP.\nexample: REPLACE_CHARS('abc123', '0123456789', ABCDEFGHIJ') = 'ab￾cABC'", "type": "FUNCTION", "name": "REPLACE_CHARS", "input": [{"name": "STR", "type": "STRING", "description": "The string in which the replacement will occur."}, {"name": "SRC", "type": "STRING", "description": "The substring to be replaced in STR."}, {"name": "REP", "type": "STRING", "description": "The substring that will replace occurrences of SRC."}], "output": [{"name": "REPLACE_CHARS", "type": "STRING", "description": "The resulting string after replacement operations."}], "in/out": [], "return_value": {"type": "string", "description": "The modified string after replacing characters according to the defined rules."}}
{"title": "UML Character Replacement Function", "description": "REPLACE_UML replaces umlauts with a combination of two characters so\nthat the result contains no more umlauts. The large and small letters are\nconsidered here. If a word is all upper case and is an umlaut is mentioned,\nthis is replaced by a capital letter followed by a lowercase letter, in the\ncase of a ß which has no capitals there will always be replaced with two\nsmall letters. If the function REPLACE_UML is used on a uppercase word,\nthen it must be ensured using the function UPPERCASE() that all capital\nletters that the lower case are again converted to uppercase.\nÄ > Ae, Ö > Oe, Ü > Ue, ä > ae, ö > oe, ü > oe, ß > ss.", "type": "FUNCTION", "name": "REPLACE_UML", "input": [{"name": "str", "type": "STRING", "description": "The input string that may contain umlaut characters which need to be replaced."}], "output": [], "in/out": [], "return_value": {"type": "STRING", "description": "The output string after replacing umlaut characters, with appropriate handling for non-umlaut characters.", "fields": []}}
{"title": "Calculate RES_NI for temperature and resistance", "description": "RES_NI calculated the resistance of a NI-resistance sensor from the input\nvalues T (temperature in°C) and R0 (resistance at 0°C).\nThe calculation is done using the formula:\nRES_NI = R0 + A*T + B*T²+C*T4\nA = 0.5485\nB = 0.665E-3\nC = 2.805E-9\nThe calculation is suitable for temperatures from -60.. +180 °C.", "type": "FUNCTION", "name": "RES_NI", "input": [{"name": "T", "type": "REAL", "description": "The input temperature in degrees Celsius at which the resistance is calculated."}, {"name": "R0", "type": "REAL", "description": "The reference resistance at 0°C."}], "output": [{"name": "RES_NI", "type": "REAL", "description": "The calculated resistance value based on the input temperature and reference resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value (RES_NI) returned from the function."}}
{"title": "Calculate Resistance at Non-Temperature Coefficient (NTC)", "description": "RES_NTC calculated the resistance of an NTC resistance sensor from the\ninput values T (temperature in °C) and RN (resistance at 25°C). The input\nvalue B is a constant value which must be read in the data sheets of that\nsensor. Typical values are at NTC sensors 2000 - 4000 Kelvin.\nThe calculation is done using the formula:\nThe formula provides a sufcient accuracy for small temperature ranges,\neg 0-100°C. For wide temperature ranges the formula according to Stein￾hart is more suitable.", "type": "FUNCTION", "name": "RES_NTC", "input": [{"name": "T", "type": "REAL", "description": "The temperature in degrees Celsius."}, {"name": "RN", "type": "REAL", "description": "The reference resistance at a specified temperature."}, {"name": "B", "type": "REAL", "description": "The material characteristic constant for the NTC thermistor."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value based on the provided inputs."}}
{"title": "Resistance Temperature Detector Calculation", "description": "RES_PT calculates the resistance of a PT resistance sensor from the input\nvalues T (temperature in °C) and R0 (resistance at 0°C).\nThe calculation is done using the formula:\nfor temperatures > 0 °C\nRES_PT = R0 * (1 + A*T + B*T²)\nand for temperatures below 0 ° C\nRES_PT = R0 * (1 + A*T + B*T² + C*(T-100)*T³\nA = 3.90802E-3\nB = -5.80195E-7\nC = -427350E-12\nThe calculation is suitable for temperatures from -200.. +850°C.", "type": "FUNCTION", "name": "RES_PT", "input": [{"name": "T", "type": "REAL", "description": "The temperature in degrees Celsius for which the resistance is to be calculated."}, {"name": "R0", "type": "REAL", "description": "The reference resistance of the Pt100 sensor at 0 degrees Celsius."}], "output": [{"name": "RES_PT", "type": "REAL", "description": "The calculated resistance of the Pt100 sensor based on the input temperature and reference resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resistance value computed from the input parameters for a Pt100 sensor."}}
{"title": "Calculate Resistance Based on Temperature Differences", "description": "RES_SI calculates the resistance of a SI-resistance sensor from the input\nvalues T (temperature in °C) and RS, resistance at TS in °C. In contrast to\nthe modules RES_NI and RES_PT which R0 is given at 0°C, the resistance\nspecifed for RS for SI sensors at diferent temperatures (eg 25°C for\nKTY10). Therefore, the module has an input for RS and another for TS.\nThe calculation is done using the formula:\nRES_SI = RS + A*(T-TS) + B*(T-TS)²\nA = 7.64E-3\nB = 1.66E-5\nThe calculation is suitable for a temperature range of -50 .. +150°C.", "type": "FUNCTION", "name": "RES_SI", "input": [{"name": "T", "type": "REAL", "description": "The current temperature value."}, {"name": "RS", "type": "REAL", "description": "The base resistance value."}, {"name": "TS", "type": "REAL", "description": "The reference temperature value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated resistance value based on the inputs and constants.", "fields": []}}
{"title": "Byte Reversal Function", "description": "REVERSE reverses the order of the bits in a byte. Bit7 of IN becomes bit 0,\nbit 6 to bit 1, etc.", "type": "FUNCTION", "name": "REVERSE", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte value to be reversed."}], "output": [{"name": "REVERSE", "type": "BYTE", "description": "The output byte value resulting from the bitwise operations on the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The return value represents the modified byte resulting from the function's operations."}}
{"title": "Ramp Function Block (RMP_B)", "description": "RMP_B is a ramp generator with 8 bits (1 byte) resolution. The ramp of\n0..255 is divided into a maximum of 255 steps and go through, in a time\nof PT once complete. An enable signal E switches the ramp generator on\nor of. An asynchronous reset sets each time the output to 0, and a pulse\nat the SET input sets the output to 255. With a UD input, the direction\nOPEN (UD = TRUE) or down (UD = FALSE) is set. The output of BUSY =\nTRUE indicates that a ramp is active. BUSY = FALSE means the output is\nstable. The outputs HIGH and LOW are TRUE, if the output OUT reaches\nthe lower or upper limit (0 and 255).\nAt setting of PT has to be noted, that a PLC with 5ms cycle time needs\n256*5 = 1275 milliseconds for a ramp. If the time PT is made shorter than\nthe cycle time multiplied by 256, the edge is translated in correspondingly\nlarger steps. The ramp is constructed in this case with less than 256 steps\nper cycle. PT may be T#0s, then the output switched between minimum\nand maximum value back and forth.\nThe following example shows an application of RMP_B. The outputs HIGH\nand LOW triggers both NTSC (X4, X5) 1 second delayed, and switch with\nthe RS Flip Flop (X6) the UP input of the Ramps generators in order. The\nresult is a ramp of 5 seconds, followed by an break of 1 second and then\nthe reverse gradient of 5 seconds and then a break of 1 second. In the\nTrace the history of the signals can be seen. \nTiming diagram for Up / Down Ramp:\nAnother example shows the use of a sawtooth RMP_B.\nTiming diagram for sawtooth:", "type": "FUNCTION_BLOCK", "name": "RMP_B", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean indicating if the ramp should be set to its maximum value."}, {"name": "PT", "type": "TIME", "description": "The time duration over which the ramp should occur."}, {"name": "E", "type": "BOOL", "description": "Enable input that allows the ramp operation to process; defaults to TRUE."}, {"name": "UP", "type": "BOOL", "description": "A boolean that determines the direction of the ramp; if TRUE, the ramp will increase, if FALSE, it will decrease."}, {"name": "RST", "type": "BOOL", "description": "A boolean that, when set, resets the output value to zero."}], "output": [{"name": "OUT", "type": "BYTE", "description": "The current value of the ramp output."}, {"name": "BUSY", "type": "BOOL", "description": "Indicates if the function block is currently busy processing the ramp operation."}, {"name": "HIGH", "type": "BOOL", "description": "Indicates if the output is currently at its maximum value (255)."}, {"name": "LOW", "type": "BOOL", "description": "Indicates if the output is currently at its minimum value (0)."}], "in/out": [], "return_value": null}
{"title": "Ramping Soft Signal Control", "description": "RMP_SOFT smooths the ramp of an input signal VAL. The signal Out follows\nthe input signal VAL, where increase time as well as fall time can be limi￾ted by PT_ON and PT_OFF . The rise time and fall time of the ramps are de￾fned by setup parameter in the module RMP_SOFT. The setup time PT_ON\nspecifes how long the ramp takes of 0..255. A ramp that is limited by the\nVAL, is accordingly shorter. PT_OFF defnes accordingly the falling ramp. If\nthe input IN is set to FALSE, VAL corresponds to a value of 0, so by swit￾ching the input IN between 0 and VAL it can be switched.", "type": "FUNCTION_BLOCK", "name": "RMP_SOFT", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input that triggers the ramping action."}, {"name": "VAL", "type": "BYTE", "description": "The target value to ramp towards."}, {"name": "PT_ON", "type": "TIME", "description": "The ramping time when increasing the output value."}, {"name": "PT_OFF", "type": "TIME", "description": "The ramping time when decreasing the output value."}], "output": [{"name": "OUT", "type": "BYTE", "description": "The output value that gets ramped up or down based on the input conditions."}], "in/out": [], "return_value": null}
{"title": "Ramp Generator Function Block", "description": "RMP_W is a ramp generator with 16-bit (2 bytes) resolution. The ramp of\n0.. 65535 is divided into a maximum of 65536 steps and run in a time of\nPT once complete. An enable signal E switches the ramp generator on or\nof. An asynchronous reset sets each time the output to 0, and a pulse at\nthe Set input sets the output to 65535. With the UD input, the direction UP\n(UD = TRUE) or DOWN (UD = FALSE) is defned. The output of BUSY =\nTRUE indicates that a ramp is active. BUSY = FALSE means the output is\nstable. The outputs HIGH and LOW gets TRUE, the output OUT reaches the\nlower or upper limit (0 and 65535).\nAt setting of PT is to be noted that a PLC with 5 ms cycle time needs\n65536*5 = 327 seconds for a ramp. If the PT is the time defned shorter\nthan the cycle time 65536, the edge is translated in correspondingly lar￾ger steps. The ramp is constructed in this case with less than 256 steps\nper cycle. PT may be T#0s, then the output switched between minimum\nand maximum value back and forth.\nFor a detailed description, see the module RMP_B. The function is absolu￾tely identical except that the output OUT 8-bit wide instead of 16 bit.\n 19. Signal processing", "type": "FUNCTION_BLOCK", "name": "RMP_W", "input": [{"name": "SET", "type": "BOOL", "description": "Control signal to set the ramp output to its maximum value."}, {"name": "PT", "type": "TIME", "description": "Time duration for which the ramp should be executed."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp operation; when false, the ramp is disabled."}, {"name": "UP", "type": "BOOL", "description": "Direction control for the ramp; true for upward ramping, false for downward."}, {"name": "RST", "type": "BOOL", "description": "Control signal to reset the ramp output to zero."}], "output": [{"name": "out", "type": "WORD", "description": "Current output value of the ramp generator."}, {"name": "busy", "type": "BOOL", "description": "Indicates whether the ramp generator is currently active."}, {"name": "high", "type": "BOOL", "description": "Indicates if the output is at its maximum value."}, {"name": "low", "type": "BOOL", "description": "Indicates if the output is at its minimum value."}], "in/out": [], "return_value": null}
{"title": "Random Number Generation", "description": "RND in￾ternally uses the standard function TRUNC() which converts the input va￾lue to an INTEGER type DINT. This may come as an overfow because DINT\ncan store in maximum +/-2.14*10^9. The range of the RND is therefore li-\nmited to +/-2.14*10^9 . See also the ROUND function which rounds the in￾put value to N decimal places.", "type": "FUNCTION", "name": "RND", "input": [{"name": "X", "type": "REAL", "description": "The input value for which a random number is to be generated."}, {"name": "N", "type": "INT", "description": "The precision level that determines how finely the random number is generated."}], "output": [{"name": "RND", "type": "REAL", "description": "The randomly generated number based on input 'X' and precision 'N'."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the random number generation, which can be zero or a scaled version of 'X'."}}
{"title": "Decimal Rounding Function", "description": "ROUND rounds the input value IN to N digits. Follows the last\ndigit a digit greater than 5 the last digit is rounded up. ROUND internally\nuses the standard function TRUNC() which converts the input value to an\nINTEGER type DINT. This may come as an overfow because DINT can store\nin maximum +/-2.14*10^9. The range of ROUND is therefore limited to +/-\n2.14 * 10^9.", "type": "FUNCTION", "name": "ROUND", "input": [{"name": "in", "type": "REAL", "description": "The real number to be rounded."}, {"name": "N", "type": "INT", "description": "The number of decimal places to round to, limited between 0 and 8."}], "output": [{"name": "ROUND", "type": "REAL", "description": "The rounded real number."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the rounding operation.", "fields": []}}
{"title": "Real-Time Clock Management Function Block", "description": "RTC_MS is a clock component with a resolution of milliseconds and date.\nThe time is automatically every time you SET = TRUE to the value of SDT\nand SMS. If SET = FALSE the time is running on their own and provides the\noutput XDT the current date and time, and at the output XMS milliseconds.\nThe output XMS counts every second 0-999 and begins with the next se￾cond again at 0. The accuracy of the clock depends on the millisecond Ti￾mer of the PLC.", "type": "FUNCTION_BLOCK", "name": "RTC_MS", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean flag to initiate the clock setting process."}, {"name": "SDT", "type": "DT", "description": "The current date and time to set the clock to."}, {"name": "SMS", "type": "INT", "description": "The initial count of milliseconds to set."}], "output": [{"name": "XDT", "type": "DT", "description": "The updated date and time after processing."}, {"name": "XMS", "type": "INT", "description": "The updated count of milliseconds since the last clock update."}], "in/out": [], "return_value": null}
{"title": "Scale Function", "description": "SCALE multiplies the input X with K, and adds the ofset O. The calculated\nvalue will be limited to the values of MN and MX and the result is passed\nto output.\nSCALE = LIMIT(MN, X * K + O, MX)", "type": "FUNCTION", "name": "SCALE", "input": [{"name": "X", "type": "REAL", "description": "The input value that will be scaled."}, {"name": "K", "type": "REAL", "description": "The scaling factor applied to the input value."}, {"name": "O", "type": "REAL", "description": "The offset to be added to the scaled input value."}, {"name": "MX", "type": "REAL", "description": "The maximum limit for the scaled value."}, {"name": "MN", "type": "REAL", "description": "The minimum limit for the scaled value."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled value limited between MN and MX."}}
{"title": "Scale Byte Function", "description": "SCALE_B scales an input value BYTE and calculates an output value in\nREAL. The input value X is limited here to I_LO and I_HI. SCALE_D (IN, 0,\n255, 0, 100) scales an input with 8-bit resolution on the output 0..100.", "type": "FUNCTION", "name": "SCALE_B", "input": [{"name": "X", "type": "BYTE", "description": "The input byte value to be scaled."}, {"name": "I_LO", "type": "BYTE", "description": "The lower limit of the input range."}, {"name": "I_HI", "type": "BYTE", "description": "The upper limit of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper limit of the output range."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The scaled output value based on the input range and output limits."}}
{"title": "Calculate Angle in 3D Space", "description": "V3_XANG calculates the angle between the X-axis of the coordinate sys￾tem and a three-dimensional vector A in radians\nV3_XANG(1,2,3) = 1.300..", "type": "FUNCTION", "name": "V3_XANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector from which the angle is to be calculated.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector."}]}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians calculated from the 3D vector.", "fields": []}}
{"title": "Scale a Value between Two Ranges", "description": "SCALE_D scales an input value DWORD and calculates an output value in\nREAL. The input value X is limited here to I_LO and I_HI. SCALE_D (IN, 0,\n8191, 0, 100) scales an input with 14 bit resolution to the output 0..100.\nSCALE_D can also be negative and have a negative slope work at output\nvalues, and the values I_LO and I_HI must always be specifed that ILO <\nI_HI is.", "type": "FUNCTION", "name": "SCALE_D", "input": [{"name": "X", "type": "DWORD", "description": "The input value to be scaled."}, {"name": "I_LO", "type": "DWORD", "description": "The lower limit of the input range."}, {"name": "I_HI", "type": "DWORD", "description": "The upper limit of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower limit of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper limit of the output range."}], "output": [{"name": "SCALE_D", "type": "REAL", "description": "The scaled output value based on the input range and output range."}], "in/out": [], "return_value": {"type": "REAL", "description": "The function returns the scaled value."}}
{"title": "Scale a Value", "description": "SCALE_R scales an input value REAL and calculates an output value in\nREAL. The input value X is limited here to I_LO and I_HI. SCALE_D\n(IN,4,20,0,100) scales an input with 4 .. 20mA to the output 0..100.\nSCALE_R can also be negative output values and work with a negative slo￾pe, the values I_LO and I_HI but must always be specifed that ILO < I_HI.", "type": "FUNCTION", "name": "SCALE_R", "input": [{"name": "X", "type": "REAL", "description": "The value to be scaled."}, {"name": "I_LO", "type": "REAL", "description": "The lower bound of the input range."}, {"name": "I_HI", "type": "REAL", "description": "The upper bound of the input range."}, {"name": "O_LO", "type": "REAL", "description": "The lower bound of the output range."}, {"name": "O_HI", "type": "REAL", "description": "The upper bound of the output range."}], "output": [{"name": "SCALE_R", "type": "REAL", "description": "The scaled output value corresponding to the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final scaled value based on the input parameters.", "fields": []}}
{"title": "Check if a 3D Vector is Null", "description": "V3_NUL checks if the vector A is a zero vector. A vector is then a zero vec￾tor if all the components (X, Y, Z) are zero.\nV3_NUL(0,0,0) = TRUE", "type": "FUNCTION", "name": "V3_NUL", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector whose components will be checked to determine if it is a null vector."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the vector A is a null vector (all components are zero); otherwise, returns FALSE."}}
{"title": "Scheduler Function Block", "description": "SCHEDULER is used to call time dependent program parts. For example,\ncomplex calculations that are needed only rarely, can be called at fxed in￾tervals. The outputs Q? of the module will be active only for one cycle and\nrelease the execution of the program part. The setup time T? specify at\nwhich intervals the outputs are enabled. SCHEDULER checks per CPU cy￾cle only one output, so that in maximum one output per cycle can be acti￾ve. In the extreme case when all call times T? are T#0s, in each cycle one\noutput should be set, so that frst Q0, then Q1, etc. to Q3 are set and then\nagain to start Q0. The call times can therefore up to 3 CPU cycles and dif￾fer from the predetermined value T? .", "type": "FUNCTION_BLOCK", "name": "SCHEDULER", "input": [{"name": "E0", "type": "BOOL", "description": "Input event signal for output Q0."}, {"name": "E1", "type": "BOOL", "description": "Input event signal for output Q1."}, {"name": "E2", "type": "BOOL", "description": "Input event signal for output Q2."}, {"name": "E3", "type": "BOOL", "description": "Input event signal for output Q3."}, {"name": "T0", "type": "TIME", "description": "The time interval for activating output Q0."}, {"name": "T1", "type": "TIME", "description": "The time interval for activating output Q1."}, {"name": "T2", "type": "TIME", "description": "The time interval for activating output Q2."}, {"name": "T3", "type": "TIME", "description": "The time interval for activating output Q3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal indicating the status of E0 after T0 has elapsed."}, {"name": "Q1", "type": "BOOL", "description": "Output signal indicating the status of E1 after T1 has elapsed."}, {"name": "Q2", "type": "BOOL", "description": "Output signal indicating the status of E2 after T2 has elapsed."}, {"name": "Q3", "type": "BOOL", "description": "Output signal indicating the status of E3 after T3 has elapsed."}], "in/out": [], "return_value": {}}
{"title": "Convert Structured Date Time to Date", "description": "SDT_TO_DATE produces a date value of a structured date-time value", "type": "FUNCTION", "name": "SDT_TO_DATE", "input": [{"name": "DTI", "type": "SDT", "description": "The structured date time input that contains the year, month, and day."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The resulting date generated from the structured date time.", "fields": []}}
{"title": "Conversion from SDT to DT", "description": "SDT_TO_DT generates a date-time value of a structured date-time value", "type": "FUNCTION", "name": "SDT_TO_DT", "input": [{"name": "DTI", "type": "SDT", "description": "Input parameter of type SDT that holds the structured date time information."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The resulting date time value in DT format after conversion from the SDT input.", "fields": []}}
{"title": "Conversion from SDT to TOD", "description": "SDT_TO_TOD produces a time of day of a structured date-time value.", "type": "FUNCTION", "name": "SDT_TO_TOD", "input": [{"name": "DTI", "type": "SDT", "description": "The input parameter of type SDT that contains the hours, minutes, seconds, and milliseconds to be converted."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "The converted time of day in milliseconds as a DWORD.", "fields": []}}
{"title": "Convert Time of Day to Seconds", "description": "SECOND extracts the seconds portion of the day", "type": "FUNCTION", "name": "SECOND", "input": [{"name": "itod", "type": "TOD", "description": "The input time of day value that needs to be converted to seconds."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The output value represents the time in seconds converted from the input TOD."}}
{"title": "Extract Second from Date and Time", "description": "SECOND_OF_DT extracts the second from a current DT value.\nSECOND_OF_DT(DT#2008-6-6-10:22:20) = 20", "type": "FUNCTION", "name": "SECOND_OF_DT", "input": [{"name": "XDT", "type": "DT", "description": "The date and time value from which the second component will be extracted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "An integer representing the second component extracted from the input date and time.", "fields": []}}
{"title": "Convert Seconds to TIME", "description": "SECOND_TO_TIME calculates a value (TIME) from the input\nvalue in seconds as a REAL.", "type": "FUNCTION", "name": "SECOND_TO_TIME", "input": [{"name": "IN", "type": "REAL", "description": "The input value representing time in seconds that needs to be converted to TIME."}], "output": [{"name": "SECOND_TO_TIME", "type": "TIME", "description": "The output time value converted from the input seconds into the TIME format."}], "in/out": [], "return_value": {"type": "TIME", "description": "Returns the converted TIME value."}}
{"title": "Vector Parallelism Check", "description": "V3_PAR will be TRUE if the two vectors A and B are parallel. A zero vector\nis parallel to any vector because it has no direction. Two vectors A and B in\nopposite directions are parallel.\nV3_PAR([1,1,1],[2,2,2]) = TRUE\nV3_PAR([1,1,1],[-1,-1,-1]) = TRUE\nV3_PAR([1,2,3],[0,0,0]) = TRUE\nV3_PAR([1,2,3],[1,0,0]) = FALSE", "type": "FUNCTION", "name": "V3_PAR", "input": [{"name": "A", "type": "Vector_3", "description": "The first 3-dimensional vector to check for parallelism."}, {"name": "B", "type": "Vector_3", "description": "The second 3-dimensional vector to check for parallelism."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the vectors A and B are parallel, otherwise returns FALSE."}}
{"title": "Sensor Intensity Calculation", "description": "SENSOR_INT calculate the sensor resistance, taking into account the para￾sitic resistances, which usually afect the measurement. The A / D conver￾ter measures either current at a fxed voltage or voltage at a fxed current.\nThe resulting resistance is not only the resistance of the sensor, but is\ncomposed of the resistance of the sensor and two parasitic resistances RS\nand RP. Since the parasitic resistances remain constant, they can be com￾pensated and the real resistance of the sensor can be calculated.\nBetween the terminals A and B measured resistance (measured by current\nand voltage) is a total resistance of the sensor resistance in parallel to the\nparasitic resistance RP and the line resistance RS. RS and RP, are compen￾sated the real resistance RX is calculated. The modules can TEMP_ then be\ncalculated as the exact temperature.", "type": "FUNCTION", "name": "SENSOR_INT", "input": [{"name": "Voltage", "type": "REAL", "description": "The voltage input to the function."}, {"name": "Current", "type": "REAL", "description": "The current input to the function."}, {"name": "RP", "type": "REAL", "description": "The parallel resistance value used in the calculation."}, {"name": "RS", "type": "REAL", "description": "The series resistance value used in the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated sensor intensity value.", "fields": []}}
{"title": "Vector 3 Reversal Function", "description": "V3_REV generates a vector with the same amount of A but with opposite\ndirection. A - V3_REV(A) = 0.\nV3_REV(1,2,3) = (-1,-2,-3)", "type": "FUNCTION", "name": "V3_REV", "input": [{"name": "A", "type": "Vector_3", "description": "The input vector whose components are to be reversed."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The output vector which is the negation of the input vector A.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the output vector, which is the negative of the X component of input vector A."}, {"name": "Y", "type": "REAL", "description": "The Y component of the output vector, which is the negative of the Y component of input vector A."}, {"name": "Z", "type": "REAL", "description": "The Z component of the output vector, which is the negative of the Z component of input vector A."}]}}
{"title": "Set Date Function", "description": "SET_DATE calculates a Date (DATE) from the input values,\nday, month and year. SET_DATE does not test the validity of a date. For\nexample, also be February, 30th will be set, which, of course results the\n1st March or in a leap year, the March, 2nd. SET_DATE can therefore also\nbe used to generate any day of the year. This can be a quite practicable\napplication. In this case, the monthly amount may also be 0. An invalid\nmonth always gives a date in relation to January. An invalid month (month\n< 1 or month > 12) is always interpreted as January.", "type": "FUNCTION", "name": "SET_DATE", "input": [{"name": "YEAR", "type": "INT", "description": "The year of the date to be set."}, {"name": "MONTH", "type": "INT", "description": "The month of the date to be set."}, {"name": "DAY", "type": "INT", "description": "The day of the date to be set."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated date based on the provided year, month, and day.", "fields": []}}
{"title": "Set Date and Time", "description": "SET_DT calculates a time-date value (DATE_TIME) from the\ninput values, day, month, year, hour, minute and seconds.", "type": "FUNCTION", "name": "SET_DT", "input": [{"name": "year", "type": "INT", "description": "The year to be set."}, {"name": "month", "type": "INT", "description": "The month to be set, ranging from 1 to 12."}, {"name": "day", "type": "INT", "description": "The day of the month to be set."}, {"name": "hour", "type": "INT", "description": "The hour of the day to be set, ranging from 0 to 23."}, {"name": "minute", "type": "INT", "description": "The minute of the hour to be set, ranging from 0 to 59."}, {"name": "second", "type": "INT", "description": "The second of the minute to be set, ranging from 0 to 59."}], "output": [], "in/out": [], "return_value": {"type": "DT", "description": "The date and time represented as a DWORD.", "fields": []}}
{"title": "Set Time of Day (TOD)", "description": "SET_TOD calculates a time of day (TOD) from the input va￾lues, hours, minutes and seconds.", "type": "FUNCTION", "name": "SET_TOD", "input": [{"name": "hour", "type": "INT", "description": "The hour component of the time, ranging from 0 to 23."}, {"name": "minute", "type": "INT", "description": "The minute component of the time, ranging from 0 to 59."}, {"name": "second", "type": "REAL", "description": "The second component of the time, which can include a fractional part for milliseconds."}], "output": [], "in/out": [], "return_value": {"type": "TOD", "description": "Returns the time of day value calculated from the input parameters.", "fields": []}}
{"title": "Sign Function (SGN)", "description": "SGN calculates the Signum of X. \nSGN = +1 if X > 0\nSGN = 0 if X = 0\nSGN = -1 if X < 0", "type": "FUNCTION", "name": "SGN", "input": [{"name": "X", "type": "REAL", "description": "The real number for which the sign is to be determined."}], "output": [{"name": "SGN", "type": "INT", "description": "The sign of the input number, which will be 1, -1, or 0."}], "in/out": [], "return_value": {"type": "INT", "description": "Returns the sign of the input number as an integer value.", "fields": []}}
{"title": "Simple Signal Handler Function Block", "description": "SH is a Sample and Hold module. It saves on each rising edge of CLK, the\ninput signal IN at the output OUT. After each update of TRIG OUT is TRUE\nfor one cycle. \nThe following", "type": "FUNCTION_BLOCK", "name": "SH", "input": [{"name": "in", "type": "REAL", "description": "Input Real Variable that receives the signal to be processed."}, {"name": "CLK", "type": "BOOL", "description": "Clock Input Variable that triggers the processing of the input signal."}], "output": [{"name": "out", "type": "REAL", "description": "Output Real Variable that reflects the captured input value when triggered."}, {"name": "trig", "type": "BOOL", "description": "Output BOOL Variable that indicates whether the input has been captured or not."}], "in/out": [], "return_value": null}
{"title": "FT_Profile Function Block", "description": "FT_PROFILE generates a time-dependent output signal. The output signal\nis defned by time - value pairs. FT_PROFILE generate a output signal Y by\nthe value pairs are connected by ramps. A typical application for FT_PRO￾FILE is to generate a temperature profle for a furnace, but also every app￾lication which requires a time-dependent control signal provides an appli￾cation. The time-dependent output signal is initiated by a rising edge at E\nand then runs automatically. After the pair of values (TIME_10, VALUE_10)\nthe output signal remains to VALUE_10, until the input E = FALSE. With an\nedge to E the signal can be started and additionally, the input E will also\nused to extend the signal indefnitely. This makes it possible to create a\ncourse to the value VALUE_3, to stretch it with E and after the falling edge\nof E again to create a course back to baseline. With the inputs K, M and O,\nthe output signal can be stretched and scaled dynamically.\nY = value generated * K + O\nThe input M is used for stretching of the signal over time. The actual time\ncourse is consistent with the defned time course through the setup over\ntime multiplied by M. In order to ensure linear ramp, a time extension by\nM works only after completion of an edge. The output RUN is set with a ri￾sing edge of E to TRUE and is only after the time profle FALSE again. At\nthe output of ET, the time elapsed since start time can be read.\nThe following graphs show the output for the values:\nVALUE_0 = 0\nTIME_1, VALUE_1 = 1s, 50\nTIME_2, VALUE_2 = 3s, 50\nTIME_3, VALUE_3 = 4s, 100\nTIME_10, VALUE_10 = 6s, 100\nTIME_11, VALUE_11 = 7s, 50\nTIME_12, VALUE_12 = 9s, 50\nTIME_13, VALUE_13 = 10s, 0\nThe graphs represent the output of both phase 3 is stretched by E, and wi￾thout stretching.", "type": "FUNCTION_BLOCK", "name": "FT_PROFILE", "input": [{"name": "K", "type": "REAL", "description": "The gain factor applied to the output value, with a default value of 1.0."}, {"name": "O", "type": "REAL", "description": "The offset added to the output value."}, {"name": "M", "type": "REAL", "description": "A multiplier applied to the time intervals, with a default value of 1.0."}, {"name": "E", "type": "BOOL", "description": "A boolean signal to start the profile generation."}, {"name": "value_0", "type": "REAL", "description": "The initial value at time_0."}, {"name": "time_1", "type": "TIME", "description": "The time at which value_1 is reached."}, {"name": "value_1", "type": "REAL", "description": "The value corresponding to time_1."}, {"name": "time_2", "type": "TIME", "description": "The time at which value_2 is reached."}, {"name": "value_2", "type": "REAL", "description": "The value corresponding to time_2."}, {"name": "time_3", "type": "TIME", "description": "The time at which value_3 is reached."}, {"name": "value_3", "type": "REAL", "description": "The value corresponding to time_3."}, {"name": "time_10", "type": "TIME", "description": "The time at which value_10 is reached."}, {"name": "value_10", "type": "REAL", "description": "The value corresponding to time_10."}, {"name": "time_11", "type": "TIME", "description": "The time at which value_11 is reached."}, {"name": "value_11", "type": "REAL", "description": "The value corresponding to time_11."}, {"name": "time_12", "type": "TIME", "description": "The time at which value_12 is reached."}, {"name": "value_12", "type": "REAL", "description": "The value corresponding to time_12."}, {"name": "time_13", "type": "TIME", "description": "The time at which value_13 is reached."}, {"name": "value_13", "type": "REAL", "description": "The value corresponding to time_13."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value calculated from the interpolation and adjusted by K and O."}, {"name": "RUN", "type": "BOOL", "description": "A boolean indicating whether the function block is currently running or not."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the start of the profile generation."}], "in/out": [], "return_value": null}
{"title": "Calculate Angle Between Two Vectors", "description": "V3_ANG calculates the angle between two three dimensional vectors\nV3_ANG([1,0,0],[0,1,0]) = 1,57.. ( π / 2)", "type": "FUNCTION", "name": "V3_ANG", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for angle calculation."}, {"name": "B", "type": "Vector_3", "description": "The second input vector for angle calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians between vectors A and B.", "fields": []}}
{"title": "Normalize a 3D Vector", "description": "V3_NORM generates from any one-dimensional vector a vector Normalized\nto length 1 with the same direction. A vector of length 1 is called unit vec￾tor\nV3_NORM(3,0,0) = (1,0,0)", "type": "FUNCTION", "name": "V3_NORM", "input": [{"name": "A", "type": "Vector_3", "description": "The input 3D vector that needs to be normalized."}], "output": [{"name": "V3_NORM", "type": "vector_3", "description": "The normalized 3D vector as the output."}], "in/out": [], "return_value": {"type": "vector_3", "description": "The normalized form of the input vector.", "fields": []}}
{"title": "SH_T Function Block", "description": "SH_T is a transparent Sample and Hold module. The input signal is provi￾ded at the output, as long as E is TRUE. With a falling edge of E, the value\nstored in the output OUT and will stay here until E return TRUE, and thus is\nswitched back to OUT. \nThe following example illustrates the operation of SH_T", "type": "FUNCTION_BLOCK", "name": "SH_T", "input": [{"name": "IN", "type": "REAL", "description": "The input value that will be passed to the output when enabled."}, {"name": "E", "type": "BOOL", "description": "The enable signal that determines whether the input is passed to the output."}], "output": [{"name": "OUT", "type": "REAL", "description": "The output value that reflects the input value when enabled."}], "in/out": [], "return_value": null}
{"title": "Sigmoid Function", "description": "SIGMOID = 1 / (1 + EXP(-X))\nThe Sigmoid is often used as activation function. By its behavior the\nSigmoid is qualifed for soft switching transitions.\nThe following chart illustrates the progress of the Sigmoid :", "type": "FUNCTION", "name": "SIGMOID", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the sigmoid function is to be calculated."}], "output": [{"name": "SIGMOID", "type": "REAL", "description": "The output of the sigmoid function calculated based on the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated sigmoid value based on the input X, returning 1.0, 0.0, or the computed value based on the sigmoid formula.", "fields": []}}
{"title": "Signal Function Block", "description": "SIGNAL generates an output signal Q that corresponds to the bit pattern in\nSIG. This is Bitpattern is passed in TS long steps. By diferent bit patterns\nin SIG, various output signals are generated. If the input IN connected to\nTRUE, the module begins to put on output Q in accordance with the SIG\nprovided Bitpattern . By adapting the Bitpattern diferent output signals\nare generated. A Pattern of 10101010, generates an output signal with\n50% Duty Cycle and a frequency that is 1/2*S. A Pattern 11110000 by con￾trast, generates an output signal of 50% and a frequency of 1/8*TS. The\nstart of an output signal is random. The Bit sequence starts at any bit\nwhen the input IN goes to TRUE. If at the input TS no time given then the\nmodule internally uses a default of 1024ms per cycle (a cycle is the cycle\nof all 8 bits of a sequence). Typical applications for SIGNAL is the signal ge￾neration for sirens or signal lamps. \nThe following graph illustrates the functioning of signal for\nSIG = 2#1111_0000:", "type": "FUNCTION_BLOCK", "name": "SIGNAL", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input indicating whether an alarm is present."}, {"name": "SIG", "type": "BYTE", "description": "A byte input representing a signal value that will be combined with the calculated step."}, {"name": "TS", "type": "TIME", "description": "A time input to determine the interval for the step calculation."}], "output": [{"name": "Q", "type": "BOOL", "description": "A boolean output indicating the result of the signal processing."}], "in/out": [], "return_value": null}
{"title": "Sign Function", "description": "SIGN_I returns TRUE if the input value is negative. The input\nvalues are of type DINT.", "type": "FUNCTION", "name": "SIGN_I", "input": [{"name": "IN", "type": "DINT", "description": "A 32-bit signed integer input whose sign is to be checked."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating the sign of the input integer. Returns true if the sign bit is set (input is negative), otherwise returns false."}}
{"title": "Sign Function", "description": "SIGN_R function returns TRUE if the input value is negative. The input\nvalues are of type REAL.", "type": "FUNCTION", "name": "SIGN_R", "input": [{"name": "in", "type": "REAL", "description": "The real number input for which the sign is to be determined."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The return value indicating the sign of the input number. TRUE if negative, FALSE otherwise."}}
{"title": "SINC Function", "description": "SINC calculates the sine Kardinalis or the gap function.\nMit SINC(0) = 1.", "type": "FUNCTION", "name": "SINC", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the sine calculation is to be performed."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the sine calculation, or 1.0 if the input value is zero."}}
{"title": "Hyperbolic Sine Function", "description": "SINH calculates the sinus Hyperbolic according the following formula:", "type": "FUNCTION", "name": "SINH", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the hyperbolic sine is to be calculated."}], "output": [{"name": "SINH", "type": "REAL", "description": "The calculated hyperbolic sine of the input value X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the hyperbolic sine calculation."}}
{"title": "Speed Conversion Function Block", "description": "SPEED converts various common units in the units for speed.\nNormally, only the input to be converted is occupied and the remaining in-\nputs remain free. However, if several inputs loaded with values, the values\nof all inputs are converted accordingly and then summed.\n1 ms = meters / second = 3.6 km / h\n1 kmh = kilometers / hour = 1 / 3, 6 m / s\n1 knot = knot = 1 nautical mile / hour = 0.5144 m / s\nMh = 1 mile per hour = 0.44704 m / s", "type": "FUNCTION_BLOCK", "name": "SPEED", "input": [{"name": "ms", "type": "REAL", "description": "Speed in meters per second (m/s)"}, {"name": "kmh", "type": "REAL", "description": "Speed in kilometers per hour (km/h)"}, {"name": "kn", "type": "REAL", "description": "Speed in knots (kn)"}, {"name": "mh", "type": "REAL", "description": "Speed in miles per hour (mh)"}], "output": [{"name": "Yms", "type": "REAL", "description": "Converted speed in meters per second (m/s)"}, {"name": "Ykmh", "type": "REAL", "description": "Converted speed in kilometers per hour (km/h)"}, {"name": "Ykn", "type": "REAL", "description": "Converted speed in knots (kn)"}, {"name": "Ymh", "type": "REAL", "description": "Converted speed in miles per hour (mh)"}], "in/out": [], "return_value": null}
{"title": "Calculate Volume of a Sphere", "description": "SPHERE_V calculates the volume of a sphere with a radius of RX.", "type": "FUNCTION", "name": "SPHERE_V", "input": [{"name": "rx", "type": "REAL", "description": "The radius of the sphere."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated volume of the sphere."}}
{"title": "Square Root to the Nth Power Calculation", "description": "SQRTN calculates the N-fold root of X as follows:", "type": "FUNCTION", "name": "SQRTN", "input": [{"name": "X", "type": "REAL", "description": "The base number for which the Nth root needs to be calculated."}, {"name": "N", "type": "INT", "description": "The exponent indicating the degree of the root to compute. Must be greater than 0."}], "output": [{"name": "SQRTN", "type": "REAL", "description": "The computed Nth root of X, or 0 if N is less than or equal to 0."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the Nth root calculation."}}
{"title": "SRAMP Function Block", "description": "SRAMP generates an output signal which is is limited by the adjustable pa￾rameters. The output follows the input signal and is limited by maximum\nspeed (VU_MAX and VD_MAX), upper and lower limit (LIMIT_LOW and LI￾MIT_HIGH), and maximum acceleration (A_UP and A_DN). SRAMP is used to\ndrive motors, for example. The output V passes the current speed of the\noutput.\nIn following diagram, the internal process of SRAMP is shown. A ramp ge￾nerator X2, sets the speed of the output change, and a second ramp gene￾rator X3 controls the output.\nThe Trace Recording shows an example of SRAMP. The input (green) increa￾ses from 0 to 20 and then immediately to 10 while the output increases\nwith the maximum acceleration to maximum speed. Then is shown that\nthe Input during the course may change. In this example, it slowed down\nin time, so that the output stops exactly at 10. After reaching the end va￾lue 10 of the input switches to -3 and the output Y follows accordingly. \nThe input values for A_UP and VU_MAX must be specifed with a positive\nsign, A_DN and VD_MAX need a negative sign.", "type": "FUNCTION_BLOCK", "name": "SRAMP", "input": [{"name": "X", "type": "REAL", "description": "The target value that the output 'Y' should reach."}, {"name": "A_UP", "type": "REAL", "description": "The acceleration rate when ramping up towards the target value."}, {"name": "A_DN", "type": "REAL", "description": "The deceleration rate when ramping down away from the target value."}, {"name": "VU_MAX", "type": "REAL", "description": "The maximum speed limit when ramping up."}, {"name": "VD_MAX", "type": "REAL", "description": "The maximum speed limit when ramping down."}, {"name": "LIMIT_HIGH", "type": "REAL", "description": "The upper limit for the output 'Y'."}, {"name": "LIMIT_LOW", "type": "REAL", "description": "The lower limit for the output 'Y'."}, {"name": "RST", "type": "BOOL", "description": "A boolean reset signal. If true, it resets the internal states."}], "output": [{"name": "Y", "type": "REAL", "description": "The current output value of the function block, which is ramped towards 'X'."}, {"name": "V", "type": "REAL", "description": "The current speed of the ramping operation, determining how quickly 'Y' approaches 'X'."}], "in/out": [], "return_value": null}
{"title": "Calculate Stair Value", "description": "STAIR follows the input signal X with a step function. The \nheight of the steps is given by D. If X = 0, then the output directly follows \nthe input signal. STAIR is not suitable for fltering of input signals, because \nif the input fuctuates by a step , the output switches between two \nadjacent values back and forth. For this purpose we recommend the use of \nStair2 that works with a Hysteresis and avoids unstable conditions.\nThe following example illustrates the operation of STAIR:", "type": "FUNCTION", "name": "STAIR", "input": [{"name": "X", "type": "REAL", "description": "The value from which the stair calculation is derived."}, {"name": "D", "type": "REAL", "description": "The step size used for the stair calculation. Should be greater than zero for the operation to apply."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated stair value based on the inputs.", "fields": []}}
{"title": "Status to ESR Data Converter", "description": "STATUS_TO_ESR generates a record from the input values.\nA STATUS in the range between 1.. 99 is an error message and will be mar￾ked as Type 1. Status 100 .. 199 is characterized as type 2 and 200 .. 255\nis marked as Type 3 ( Debug I nformation). \nThe ESR data at the output consist of the following items:\n.TYPE 1 = error, 2 = State, 3 = Debug \n.ADRESS Byte address of ISR data recording\n.LINE Line number (input) of the ESR data recording\n.DS Date stamp of type DATE_TIME\n.DT Timestamp of type TIME (PLC-timer)\n.Data Data block of 8 bytes\n 5. Mathematics", "type": "FUNCTION", "name": "STATUS_TO_ESR", "input": [{"name": "status", "type": "BYTE", "description": "A byte representing the status value which determines the type of ESR data."}, {"name": "adress", "type": "STRING[10]", "description": "A string of up to 10 characters representing the address associated with the ESR data."}, {"name": "DT_in", "type": "DT", "description": "A date and time input that represents the timestamp to be stored in the ESR data."}, {"name": "TS", "type": "TIME", "description": "A time input that indicates the time to be included in the ESR data."}], "output": [{"name": "esr_data", "type": "Struct", "description": "The output ESR data structure filled based on the input parameters and logic applied within the function.", "fields": [{"name": "typ", "type": "INT", "description": "The type classification of the ESR data, determined by the status value."}, {"name": "adress", "type": "STRING[10]", "description": "The address associated with the ESR data."}, {"name": "DS", "type": "DT", "description": "The date and time input retained in the ESR data."}, {"name": "TS", "type": "TIME", "description": "The time input retained in the ESR data."}, {"name": "data", "type": "ARRAY[0..10] OF BYTE", "description": "An array storing the status input at index 0."}]}], "in/out": [], "return_value": {"type": "Struct", "description": "This function does not return a value directly, but modifies the output variable 'esr_data' instead.", "fields": []}}
{"title": "Calculate Sun Midday Time", "description": "SUN_MIDDAY calculates at what time the sun is exactly in the \nsouth, depending on the date . The calculation is done in UTC (Universal \nTime).", "type": "FUNCTION", "name": "SUN_MIDDAY", "input": [{"name": "LON", "type": "REAL", "description": "The longitude in degrees for which the noon time is to be calculated."}, {"name": "UTC", "type": "DATE", "description": "The UTC date based on which the midday time will be computed."}], "output": [{"name": "SUN_MIDDAY", "type": "TOD", "description": "The calculated time of day representing the sun midday for the specified location."}], "in/out": [], "return_value": {"type": "TOD", "description": "The resulting time of day after adjusting for the calculated offset from standard noon.", "fields": []}}
{"title": "Sun Position Calculation", "description": "SUN_POS calculated the position of the sun (B, H) at the current time. The\ntime is expressed as Universal Time (UTC). Any possible local time must\nfrst be converted to UTC. At the sun position HR, the atmospheric refracti￾on for 1010mbar and 10°C is already taken into account. The accuracy is\nbetter than 0.1 degrees for the period from 2000 to 2050. Possible appli￾cations of SUN_POS are the tracking of solar panels or a sun dependent\ntracking of the slats of blinds. SUN_POS is a complicated algorithm, but\ndelivers the exact values. To keep the load of a PLC as low as possible, the\ncalculation can be performed, for example, only every 10 seconds, which\ncorresponds to an uncertainty of 0.04 degrees. The output B passes the\nsolar angle in degrees from north (south = 180 °). H is the Astronomical\nangle above the horizon (the horizon = 0 °). HR is the sun above the hori￾zon to the atmospheric corrected by the refraction (refraction). An obser￾ver on the Earth sees the sun in a, by the refraction raised position, of the\nhorizon, which will cause the sun is shining already, but it is still slightly\nbelow the horizon.", "type": "FUNCTION_BLOCK", "name": "SUN_POS", "input": [{"name": "latitude", "type": "REAL", "description": "Latitude of the geographical position."}, {"name": "longitude", "type": "REAL", "description": "Longitude of the geographical position."}, {"name": "utc", "type": "DT", "description": "World time in UTC."}], "output": [{"name": "B", "type": "REAL", "description": "Solar zenith angle in degrees."}, {"name": "H", "type": "REAL", "description": "Solar altitude angle in degrees."}, {"name": "HR", "type": "REAL", "description": "Hour angle in degrees."}], "in/out": [], "return_value": null}
{"title": "Calculation of Solar Times", "description": "SUN_TIME is a astro timer. It calculates sunrise and \nsunset for any day, defned by the input UTC. In addition to sunrise and \nsunset, the time of the solar azimuth (daily peak in the south) and the \nsolar angle above the horizon in the azimuth is calculated. This SUN_TIME \nwill work regardless of the site all the time is calculated in UTC (Universal \nTime) and can again be converted to local time as needed. In addition, to \nthe times of sunrise and sunset, the module also calculates the angle of \nthe sun above the horizon SUN_DECLINATION. SUN_TIME uses a complex \nalgorithm to minimize the loading of a PLC as low as possible, the values \nshould be calculated with SUN_TIME only once per day. SUN_TIME is used \nfor the control of blinds, in order to pull up just before sunrise and enjoy in \nthe bedroom the twilight. Other applications are include controlling \nirrigation in horticulture to using the sunrise and sunset or even for \ntracking solar panels. Further calculations of Sun's position is provided by \nthe module SUN_POS. SUN_TIME is only in latitudes between 65°S and \n65°North is available. The output MIDDAY passes, at what time the sun is \nthe south and SUN_DECLINATION stating the angle above the horizon in \ndegrees.", "type": "FUNCTION_BLOCK", "name": "SUN_TIME", "input": [{"name": "LATITUDE", "type": "REAL", "description": "Latitude of geographical position in degrees."}, {"name": "LONGITUDE", "type": "REAL", "description": "Longitude of geographical position in degrees."}, {"name": "UTC", "type": "DATE", "description": "World time in UTC format."}, {"name": "H", "type": "REAL", "description": "Height above horizon for sunrise, default value is -0.83333333333."}], "output": [{"name": "MIDDAY", "type": "TOD", "description": "Astrological midday in hours when sun stands at south direction."}, {"name": "SUN_RISE", "type": "TOD", "description": "Sunrise time for the current day in local time."}, {"name": "SUN_SET", "type": "TOD", "description": "Sunset time for the current day in local time."}, {"name": "SUN_DECLINATION", "type": "REAL", "description": "Sun declination above horizon at midday in degrees."}], "in/out": [], "return_value": {}}
{"title": "Byte Swapping Function", "description": "SWAP_BYTE exchanges the High and Low Bytes in a WORD.", "type": "FUNCTION", "name": "SWAP_BYTE", "input": [{"name": "IN", "type": "WORD", "description": "The input WORD that will undergo byte swapping."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The result of the byte-swapped input WORD.", "fields": []}}
{"title": "Tangent Over X Function", "description": "TANC TANC function calculates the following formula:\nwith TANC(0) = 1.", "type": "FUNCTION", "name": "TANC", "input": [{"name": "X", "type": "REAL", "description": "The input real number which the tangent is computed from."}], "output": [{"name": "TANC", "type": "REAL", "description": "The output real number resulting from the computation of TAN(X) / X or 1.0 if X is zero."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the tangent function divided by the input value, or 1.0 if the input is zero."}}
{"title": "Hyperbolic Tangent Function (TANH)", "description": "TANH calculates the Tangent Hyperbolic according to the following \nformula:", "type": "FUNCTION", "name": "TANH", "input": [{"name": "X", "type": "REAL", "description": "The input value for which the hyperbolic tangent is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The hyperbolic tangent of the input value X."}}
{"title": "Timer Counter Function Block", "description": "TC_MS determines the last cycle time, that is the time since the last call of\nthe module has passed. The time comes in milliseconds.", "type": "FUNCTION_BLOCK", "name": "TC_MS", "input": [], "output": [{"name": "TC", "type": "DWORD", "description": "The calculated time difference in milliseconds between the current timer value and the last timer value."}], "in/out": [], "return_value": null}
{"title": "Time Calculation Function Block", "description": "TC_S determines the last cycle time, that is the time since the last call of\nthe module has passed. The time will be delivered in seconds, but has an\naccuracy in microseconds. The module calls the function T_PLC_US().\nT_PLC_US () returns the internal PLC Timer in microseconds with a step\nwidth of 1000 microseconds. If a higher resolution is required the function\nT_PLC_US() has to be adjusted to the appropriate system.", "type": "FUNCTION_BLOCK", "name": "TC_S", "input": [], "output": [{"name": "TC", "type": "REAL", "description": "The elapsed time in seconds since the last invocation of the block."}], "in/out": [], "return_value": null}
{"title": "Timer Counting using System Timer", "description": "TC_US determines the last cycle time, that is the time since the last call of\nthe module has passed. The time comes in milliseconds. The module calls\nthe function T_PLC_US(). T_PLC_US () returns the internal PLC Timer in mi￾croseconds with a step width of 1000 microseconds. If a higher resolution\nis required the function T_PLC_US() has to be adjusted to the appropriate\nsystem. \n 22. Calculations", "type": "FUNCTION_BLOCK", "name": "TC_US", "input": [], "output": [{"name": "TC", "type": "DWORD", "description": "The elapsed time in microseconds since the last update."}], "in/out": [], "return_value": null}
{"title": "Temperature Conversion", "description": "TEMPERATURE converts diferent, in practice common used units for\ntemperature. Normally, only the input to be converted is occupied and the\nremaining inputs remain free. However, if several inputs loaded with va￾lues, the values of all inputs are converted accordingly and then summed.\n1 K = 273.15 °C\n1 °C = 273.15 K\n1 °F = °C * 1.8 + 32\n1 Re = °C * 0.8\n1 Ra = K * 1.8\n23. Control Modules", "type": "FUNCTION_BLOCK", "name": "TEMPERATURE", "input": [{"name": "K", "type": "REAL", "description": "Input temperature in Kelvin."}, {"name": "C", "type": "REAL", "description": "Celsius conversion base value, initialized to -273.15."}, {"name": "F", "type": "REAL", "description": "Fahrenheit conversion base value, initialized to -459.67."}, {"name": "Re", "type": "REAL", "description": "Réaumur conversion base value, initialized to -218.52."}, {"name": "Ra", "type": "REAL", "description": "Rankine value to be converted."}], "output": [{"name": "YK", "type": "REAL", "description": "Converted temperature in Kelvin."}, {"name": "YC", "type": "REAL", "description": "Converted temperature in Celsius."}, {"name": "YF", "type": "REAL", "description": "Converted temperature in Fahrenheit."}, {"name": "YRe", "type": "REAL", "description": "Converted temperature in Réaumur."}, {"name": "YRa", "type": "REAL", "description": "Converted temperature in Rankine."}], "in/out": [], "return_value": null}
{"title": "Temperature Calculation Function", "description": "TEMP_NI calculates the temperature of a NI-resistance from the RES sensor\ninput values (measured resistance value) and R0 (resistance at 0°C).\nThe calculation is suitable for a temperature range of -60.. +180 ° C and\nmade by the following formal:\nRES_NI = R0 + A*T + B*T²+C*T4\nA = 0.5485; B = 0.665E-3; C = 2.805E-9\nRP\nRS\nRX\nA B", "type": "FUNCTION", "name": "TEMP_NI", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value measured."}, {"name": "R0", "type": "REAL", "description": "The reference resistance value for the calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated temperature derived from the formula using Res and R0."}}
{"title": "Temperature Calculation from NTC Resistance", "description": "TEMP_NTC\nInput RES: REAL (measured resistance in ohms)\nRN: REAL (resistance of the sensor at 25°C)\nB: REAL (specifcation of the sensor)\nOutput REAL (measured temperature)\nTEMP_NTC calculates from the measured resistance and the parameters of\nthe sensor, the measured temperature. RN is the resistance of the sensor\nat 25°C, and B depends on the sensor and the specifcation of the sensor.\nThe module calculates the temperature according to the following formu￾la:", "type": "FUNCTION", "name": "TEMP_NTC", "input": [{"name": "RES", "type": "REAL", "description": "The resistance value of the NTC thermistor."}, {"name": "RN", "type": "REAL", "description": "The nominal resistance of the thermistor at a reference temperature."}, {"name": "B", "type": "REAL", "description": "The material constant used in the calculation for the NTC thermistor."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated temperature in degrees Celsius based on the thermistor resistance.", "fields": []}}
{"title": "Calculate Temperature from Resistance", "description": "TEMP_PT calculates the temperature of a PT-resistance from the RES sen￾sor input values (measured resistance value) and R0 (resistance at 0°C). If\nthe inputs has a temperature outside the range of -200.. + 850°C, at the\noutput the temperature output +10000.0°C is passed.\nThe calculation is done using the formula:\nfor temperatures > 0 °C\nRES_PT = R0 * (1 + A*T + B*T²)\nand for temperatures below 0 ° C\nRES_PT = R0 * (1 + A*T + B*T² + C*(T-100)*T³\nA = 3.90802E-3; B = -5.80195E-7; C = -427350E-12", "type": "FUNCTION", "name": "TEMP_PT", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value to be used for temperature calculation."}, {"name": "R0", "type": "REAL", "description": "The reference resistance value used for comparison."}], "output": [{"name": "TEMP_PT", "type": "REAL", "description": "The calculated temperature in degrees Celsius based on the input resistance."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the computed temperature value."}}
{"title": "Calculate Temperature Adjustment", "description": "TEMP_SI calculates the temperature of a resistor sensor input values from\nthe RES (resistance in ohms) and RS, Resistance at TS in °C. It is specifed\nin contrast to the modules TEMP_NI and TEMP_PT with their R0 at 0°, the\nresistance RS is given in SI sensors at diferent temperatures (eg 25° C for\nKTY10). Therefore, the module has an input for RS and another for TS.\nThe calculation is done using the formula:\nRES_SI = RS + A*(T-TS) + B*(T-TS)²\nA = 7.64E-3; B = 1.66E-5\nThe calculation is suitable for temperatures from -50.. +150 °C.\n 21. Measuring Modules", "type": "FUNCTION", "name": "TEMP_SI", "input": [{"name": "Res", "type": "REAL", "description": "The resistance value input for the temperature calculation."}, {"name": "RS", "type": "REAL", "description": "The reference resistance used in the formula."}, {"name": "TS", "type": "REAL", "description": "The target temperature that influences the adjustment calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed adjusted temperature based on the inputs provided."}}
{"title": "Ticker Function Block", "description": "TICKER generate at the output DISPLAY a running script. At the output DIS￾PLAY a substring of text with the length N is output. DISPLAY is passed to\noutput in a time frame of PT and starts at each pass from one place to the\nleft of the input string TEXT. The scrolling text is generated only when N <\nthan the length of TEXT. If N >= length of text then the String TEXT is di￾rectly represented at the output of DISPLAY.", "type": "FUNCTION_BLOCK", "name": "TICKER", "input": [{"name": "N", "type": "INT", "description": "The starting index of the ticker text to display."}, {"name": "PT", "type": "TIME", "description": "The time period for which the delay is set before the next ticker update."}], "output": [{"name": "Display", "type": "STRING[STRING_LENGTH]", "description": "The portion of text to be displayed in the ticker."}], "in/out": [{"name": "Text", "type": "STRING[STRING_LENGTH]", "description": "The full text that is processed to create the ticker display."}], "return_value": null}
{"title": "TMAX Function Block", "description": "TMAX limits the duration of the output pulse to the time PT. The output Q\nfollows the input IN, as long as the TRUE time of IN is shorter than PT. If IN\nis longer than PT to TRUE, the output pulse is shortened. Whenever an\noutput changes by a timeout to FALSE, the output Z is set to TRUE for a\ncycle.", "type": "FUNCTION_BLOCK", "name": "TMAX", "input": [{"name": "IN", "type": "BOOL", "description": "Input boolean signal that triggers the function block."}, {"name": "PT", "type": "TIME", "description": "Time duration that the input signal must be TRUE for in order to reset the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal that indicates whether the function block is active or not."}, {"name": "Z", "type": "BOOL", "description": "Output signal that indicates that the timing condition has been satisfied, i.e., the input was TRUE for the specified duration."}], "in/out": [], "return_value": null}
{"title": "TMIN Function Block", "description": "TMIN ensures that the output pulse Q is at least PT is set to TRUE, even if\nthe input pulse at IN is shorter than PT. otherwise the output Q follows the\ninput IN.", "type": "FUNCTION_BLOCK", "name": "TMIN", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that influences the output state."}, {"name": "PT", "type": "TIME", "description": "The time period for which the input signal should be considered."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output signal indicating the current state based on the input and timer."}], "in/out": [], "return_value": null}
{"title": "Toggle Function Block", "description": "TOGGLE is a edge-triggered Toggle Flip -Flop with asynchronous reset \ninput. The TOGGLE Flip Flop invertes output Q on a rising edge of CLK. The \noutput changes on each rising edge of CLK his condition.\n 18. Signal Generators", "type": "FUNCTION_BLOCK", "name": "TOGGLE", "input": [{"name": "CLK", "type": "BOOL", "description": "Clock input signal used for toggling the output state."}, {"name": "rst", "type": "BOOL", "description": "Reset input signal that sets the output Q to false when high."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current state of the output signal, toggled based on the CLK input."}], "in/out": [], "return_value": null}
{"title": "TONOF Function Block", "description": "TONOF creates a ON delay T1 and an OFF delay T2\nThe rising edge of the input signal IN is delayed by T1 and the falling edge\nof IN is delayed by T2.", "type": "FUNCTION_BLOCK", "name": "TONOF", "input": [{"name": "IN", "type": "BOOL", "description": "The boolean input signal that triggers the timer."}, {"name": "T_ON", "type": "TIME", "description": "The time duration for which the output remains active when the input is true."}, {"name": "T_OFF", "type": "TIME", "description": "The time duration for which the output remains inactive when the input is false."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output signal indicating the state after applying the timing logic."}], "in/out": [], "return_value": null}
{"title": "Convert Byte to Lowercase", "description": "TO_LOWER converts individual characters to lowercase. During conversion,\nthe Global Setup EXTENDED_ASCII constant is considered. If\nEXTENDED_ASCII = TRUE, all characters of the extended ASCII character\nset to be considered in accordance with ISO 8859-1.\nThe following Table discusses the conversion code:\nCode EXTENDED_ASCII = TRUE EXTENDED_ASCII = FALSE\n0..64 0..64 0..64\n65..90 97..122 97..122\n91..191 91..191 91..191\n192..214 224..246 192..214\n215 215 215\n216..222 248..254 216..254\n223..255 223..255 223..255", "type": "FUNCTION", "name": "TO_LOWER", "input": [{"name": "IN", "type": "BYTE", "description": "The input byte to be converted to lowercase."}], "output": [{"name": "TO_LOWER", "type": "BYTE", "description": "The lowercase representation of the input byte."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Returns the converted lowercase byte if applicable, otherwise returns the input byte.", "fields": []}}
{"title": "Convert Byte to UML Representation", "description": "TO_UML converts individual characters of the character set to greater than\n127 in a combination of two letters. It is here the extended ASCII character\nset ISO 8859-1 (Latin1).\nIt will be converted the following characters:\nÄ >> Ae ä >> ae Ö >> Oe ö >> oe Ü >> Ue ü >> ue\nß >> ss\nAll other characters are returned as a string with the character IN.", "type": "FUNCTION", "name": "TO_UML", "input": [{"name": "IN", "type": "BYTE", "description": "A BYTE input that represents a character in a specific encoding."}], "output": [{"name": "TO_UML", "type": "string", "description": "The UML representation of the input byte, transformed according to predefined rules."}], "in/out": [], "return_value": {"type": "string", "description": "The resulting UML string representation of the input BYTE."}}
{"title": "Convert Byte to Uppercase", "description": "TO_UPPER converts some characters to uppercase. During conversion, the\nGlobal Setup EXTENDED_ASCII constant is considered. If EXTENDED_ASCII\n= TRUE, all characters of the extended ASCII character set to be conside￾red in accordance with ISO 8859-1.\nThe following Table discusses the conversion code:\nCode EXTENDED_ASCII = TRUE EXTENDED_ASCII = FALSE\n0..64 0..64 0..64\n65..90 97..122 97..122\n91..191 91..191 91..191\n192..214 224..246 192..214\n215 215 215\n216..222 248..254 216..254\n223..255 223..255 223..255", "type": "FUNCTION", "name": "TO_UPPER", "input": [{"name": "IN", "type": "BYTE", "description": "The BYTE value to be converted to uppercase."}], "output": [{"name": "TO_UPPER", "type": "BYTE", "description": "The uppercase equivalent of the input BYTE, or the original input if no conversion is applicable."}], "in/out": [], "return_value": {"type": "BYTE", "description": "The result of the uppercase conversion for the input BYTE.", "fields": []}}
{"title": "Timed Pulse Generator", "description": "TP_X is a multiple triggerable pulse generator. In contrast to the standard\nmodule TP this template can be triggered multiple times and thus the out￾put pulse can be extended. The output Q remains after the last trigger\nevent (rising edge of IN) at ON, for the period of PT. While Q is true, by a\nfurther edge at the IN the Timer can be triggered again and the output\npulse can be extended. In contrast to TOF, at TP_X the time PT is measu￾red as of the last rising edge, regardless of how long IN remains at TRUE.\nThis means that the output Q, after the time PT, is measured from the last\nrising edge of IN moves to FALSE, even when the input IN is TRUE. \nTiming of TP_X:\n 16. Logic Modules", "type": "FUNCTION_BLOCK", "name": "TP_X", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input for the triggering signal. A rising edge on this signal will start the pulse."}, {"name": "PT", "type": "TIME", "description": "Time duration for which the output Q will remain true after a rising edge is detected."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output that indicates whether the pulse is currently active."}, {"name": "ET", "type": "TIME", "description": "Elapsed time since the pulse was activated."}], "in/out": [], "return_value": null}
{"title": "Trend Function Block", "description": "TREND monitors the input X and time at the output Q to see if X increases\n(Q = TRUE) or X decrease (Q = FALSE). If X does not change, Q remains at\nits last value. If X increases, the output TU gets for one cycle to TRUE and\nat the output D the result X - LAST_X is displayed. If X is less than LAST_X\nso TD gets TRUE for one cycle and the output D is LAST_X - X passed.\nLAST_X is an internal value of the module and is the value of X in the last\ncycle.", "type": "FUNCTION_BLOCK", "name": "TREND", "input": [{"name": "X", "type": "REAL", "description": "Input variable representing the current value being monitored."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output indicating whether the input variable 'X' has changed (increased or decreased)."}, {"name": "TU", "type": "BOOL", "description": "Output indicating if 'X' is greater than the last recorded value."}, {"name": "TD", "type": "BOOL", "description": "Output indicating if 'X' is less than the last recorded value."}, {"name": "D", "type": "REAL", "description": "Output representing the difference between the current value 'X' and the last value."}], "in/out": [], "return_value": null}
{"title": "Trend Detection Function Block", "description": "TREND_DW monitors the input X and time at the output Q to see if X incre￾ases (Q = TRUE) or X decrease (Q = FALSE). If X does not change, Q re￾mains at its last value. If X increases, the output TU gets for one cycle to\nTRUE and at the output D the result X - LAST_X is displayed. If X is less\nthan LAST_X so TD gets TRUE for one cycle and the output D is LAST_X - X\npassed. LAST_X is an internal value of the module and is the value of X in\nthe last cycle.", "type": "FUNCTION_BLOCK", "name": "TREND_DW", "input": [{"name": "X", "type": "DWORD", "description": "The input value to be monitored for trend detection."}], "output": [{"name": "Q", "type": "BOOL", "description": "Indicates whether the input value 'X' has changed."}, {"name": "TU", "type": "BOOL", "description": "True if an upward trend is detected (X has increased)."}, {"name": "TD", "type": "BOOL", "description": "True if a downward trend is detected (X has decreased)."}, {"name": "D", "type": "DWORD", "description": "The difference in value between the current and last input value."}], "in/out": [], "return_value": null}
{"title": "Calculate Area of Triangle", "description": "TRIANGLE_A calculates the area of any triangle. The triangle can be def￾ned by either through 2 pages and the pages spanned by the angles 1 and\n2 (S1, S2 and A), or if A = 0 then the area is calculated from three sides\n(S1, S2 and S3).\n 11. Vector Mathematics", "type": "FUNCTION", "name": "TRIANGLE_A", "input": [{"name": "S1", "type": "REAL", "description": "Length of the first side of the triangle."}, {"name": "A", "type": "REAL", "description": "Included angle in degrees. If A is 0, Heron's formula is used."}, {"name": "S2", "type": "REAL", "description": "Length of the second side of the triangle."}, {"name": "S3", "type": "REAL", "description": "Length of the third side of the triangle."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The calculated area of the triangle.", "fields": []}}
{"title": "String Trimming Function", "description": "TRIM function removes all spaces from STR.", "type": "FUNCTION", "name": "TRIM", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string from which leading spaces need to be removed."}], "output": [{"name": "TRIM", "type": "string", "description": "The output string after leading spaces have been stripped away."}], "in/out": [], "return_value": {"type": "string", "description": "The trimmed string that results from the removal of leading spaces.", "fields": []}}
{"title": "Trimming Leading and Trailing Spaces from a String", "description": "TRIME function removes spaces at the beginning and the end of STR.\nSpaces within the string are ignored, even if they occur repeatedly.", "type": "FUNCTION", "name": "TRIME", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be trimmed."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The trimmed version of the input string, with leading and trailing spaces removed."}}
{"title": "Tuning Function Block", "description": "TUNE sets, using up and down buttons, an output signal Y. By correspon￾ding setup variables, the increment will be programmed individually. An\nupper and lower limit for the output Y can be specifed by LIMIT_L and LI￾MIT_H . with the buttons SU and SD up or down steps are generated. If a\nkey is held down longer than the time T1, then the output Y is continuously\nadjusted up or down. The speed, which with the output is adjusted here, is\ngiven by S1. S1 and S2 indicate the units per second. Is a button held\ndown longer than the time T2, the device automatically switches to a se￾cond speed S2. With the inputs RST and SET the output can at any time be\nadjusted by RST_VAL resp. SET_VAL to a predetermined value.", "type": "FUNCTION_BLOCK", "name": "TUNE", "input": [{"name": "SET", "type": "BOOL", "description": "A boolean flag to set the value of Y to SET_val."}, {"name": "SU", "type": "BOOL", "description": "A boolean flag indicating a request to increment the value of Y slowly."}, {"name": "SD", "type": "BOOL", "description": "A boolean flag indicating a request to decrement the value of Y slowly."}, {"name": "RST", "type": "BOOL", "description": "A boolean flag to reset the value of Y to RST_val."}, {"name": "SS", "type": "REAL", "description": "A real number representing the step size for slow adjustments, default value is 0.1."}, {"name": "Limit_L", "type": "REAL", "description": "The lower limit for the output value Y."}, {"name": "LIMIT_H", "type": "REAL", "description": "The upper limit for the output value Y, default value is 100.0."}, {"name": "RST_val", "type": "REAL", "description": "The value to set Y to when RST is true."}, {"name": "SET_val", "type": "REAL", "description": "The value to set Y to when SET is true, default value is 100.0."}, {"name": "T1", "type": "TIME", "description": "The duration for the slow ramp operation, default value is 500 ms."}, {"name": "T2", "type": "TIME", "description": "The duration for the fast ramp operation, default value is 2 s."}, {"name": "S1", "type": "REAL", "description": "The step size for the slow ramp up operation, default value is 2.0."}, {"name": "S2", "type": "REAL", "description": "The step size for the fast ramp up operation, default value is 10.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value that is adjusted based on the input states and limits."}], "in/out": [], "return_value": null}
{"title": "Cross Product of Two Vectors", "description": "V3_XPRO calculates the cross product of two-dimensional vectors A and B\nV3_XPRO([1,2,3],[2,1,2]) = (1,4,-3)", "type": "FUNCTION", "name": "V3_XPRO", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for the cross product operation."}, {"name": "B", "type": "Vector_3", "description": "The second input vector for the cross product operation."}], "output": [], "in/out": [], "return_value": {"type": "vector_3", "description": "The resulting vector that is the cross product of vectors A and B.", "fields": [{"name": "X", "type": "REAL", "description": "The x-component of the resulting cross product vector."}, {"name": "Y", "type": "REAL", "description": "The y-component of the resulting cross product vector."}, {"name": "Z", "type": "REAL", "description": "The z-component of the resulting cross product vector."}]}}
{"title": "Time Conversion and Correction Function", "description": "T_PLC_MS returns the current internal PLC time in milliseconds. This has\nnothing to do with a possibly existing clock (real time module), but is the\ninternal Timer of a PLC, which is used as a time reference. \nThe source code of the module has the following characteristics:\nFUNCTION T_PLC_MS : DWORD\nVAR CONSTANT\nDEBUG : BOOL := FALSE;\nN : INT := 0;\nOFFSET := 0;\nEND_VAR\nVAR\nTEMP : DWORD := 1;\nEND_VAR\nT_PLC_MS := TIME_TO_DWORD(TIME());\nIF DEBUG THEN\nT_PLC_MS := SHL(T_PLC_US,N) OR SHL(TEMP,N)-1 + OFFSET;\nEND_IF;\nIn normal operation, the module reads the function TIME() the internal\nTimer of the PLC, and returns it. The internal Timer the PLC according to\nIEC standard has one millisecond resolution. \nAnother feature of T_PLC_MS is a debug mode, which allows to test the\noverfow of the internal PLC Timers and verify the developed software shu￾re. The internal Timer of any PLC has, independent of manufacturer and\ntype of implementation, after a fxed time an overfow. That means that it\nis running against .. FF FFFF (highest value of the corresponding type can\nbe stored) and then starts again at 000..0000. At standard PLC Timers is\nthe overfow time 2^32 -1 milliseconds, which is about 49.71 days. Since\nthis Timer is implemented in a hardware, it initial value can not be set, so\nthat after starting the PLC it always starts at 0 and runs up to the maxi￾mum value . After reaching the maximum value, the infamous Timer Over￾fow arises, which causes fatal consequences in the application software ,\nbut can only be tested extremely difcult. \nT_PLC_MS ofers several ways to test the overfow and time-dependent\nsoftware. With the constant DEBUG, the test mode is switched on and\nthen, using the constants N and ofset , starts the timer at a certain level,\nthus specifcally the overfow can be tested without waiting the 49. Ofset\ndefnces which ist addeed to the value of the internal Timer . With the con￾stant N is determined by how many bits of the internal Timer Value is shif￾ted to the left, while the lower N bits are flled with 1. With N thus the\nspeed of the internal Timers can be increased by factors of 2,4,8,16 and\nso on. \nT_PLC_US thus ofers all possibilities to test time-dependent software, both\nfor the problem of overfow, and for very slow time-dependent functions.\nThe constant DEBUG, N and OFFSET were intentionally not implemented\nas inputs of the function to avoid accidental misuse.", "type": "FUNCTION", "name": "T_PLC_MS", "input": [{"name": "debug", "type": "BOOL", "description": "Flag to enable debug mode for detailed processing."}, {"name": "N", "type": "INT", "description": "Shift value used for adjusting the timer."}, {"name": "offset", "type": "DWORD", "description": "Additive offset to adjust the timer value."}], "output": [{"name": "T_PLC_MS", "type": "DWORD", "description": "Resulting timer value in DWORD format after conversion and correction."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Final timer value in DWORD format."}}
{"title": "Time to DWORD Conversion with Offset and Debugging", "description": "T_PLC_US returns the current internal PLC time in microseconds. This has\nnothing to do with a possibly existing clock (Real Time Module), but is the\ninternal Timer of a PLC that is used as a time reference. \nThe source code of the module has the following characteristics:\nFUNCTION T_PLC_US : DWORD\nVAR CONSTANT\nDEBUG : BOOL := FALSE;\nN : INT := 0;\nOFFSET := 0;\nEND_VAR\nVAR\nTEMP : DWORD := 1;\nEND_VAR\nT_PLC_US := TIME_TO_DWORD(TIME())*1000;\nIF DEBUG THEN\nT_PLC_US := SHL(T_PLC_US,N) OR SHL(TEMP,N)-1 + OFFSET;\nEND_IF;\nIn normal operation, the module reads the function TIME() the internal\nTimer of the PLC. Since the internal Timer of the PLC works according to\nIEC standard with 1 millisecond resolution, the read value is multiplied by\n1000 to deliver the value in micro-seconds back. This function was created\nfor compatibility reasons in that way, to provide microseconds timer for\ncontrols, that has a resolution no better than milliseconds, which can then\nbe used in other modules. If the existing PLC supports microseconds, this\nfunction can easily be adjusted only at this point and the accuracy chan￾ges by this simple patch for all the modules that call this feature. The soft￾ware remains portable and future proof. Already, virtually all PLC control￾lers support a resolution in microseconds. This will however not be read\nusing standard routines, but provided vendor specifc and non-standard.\nThe module T_PLC_US provides so an appropriate interface to these ven￾dor-specifc timers. \nAnother feature of T_PLC_US is a Debug Mode, which allows to produce\nthe overfow of the internal PLC Timers and test the software developed\nright shure. The internal Timer of any PLC has, independent of manufac￾turer and type of implementation, after a fxed time an overfow. That\nmeans that it is running against FF..FFFF (highest value of the correspon￾ding type can be stored) and then starts again at 000..0000. At standard\nPLC Timer is the overfow time 2^32 -1 milliseconds, which is about 49.71\ndays. Since this Timer is implemented in a hardware, it initial value can\nnot be set, so that after starting the PLC it always starts at 0 and runs up\nto the maximum value. After reaching the maximum value, the infamous\nTimer Overfow arises, which causes fatal consequences in the application\nsoftware , but can only be tested extremely difcult. \nT_PLC_US ofers several ways to test the overfow and time-dependent\nsoftware. With the constant DEBUG, the test mode is switched on and\nthen, using the constants N and ofset , starts the timer at a certain level,\nthus specifcally the overfow can be tested without waiting the 49. Ofset\ndefnces a value which is added to the value of the internal Timer . With\nthe constant N is determined by how many bits of the internal Timer Value\nis shifted to the left, while the lower N bits are flled with 1. With N thus\nthe speed of the internal Timers can be increased by factors of 2,4,8,16\nand so on. \nT_PLC_US thus ofers all possibilities to test time-dependent software, both\nfor the problem of overfow, and for very slow time-dependent functions.\nThe constant DEBUG, N and OFFSET were intentionally not implemented\nas inputs of the function to avoid accidental misuse.", "type": "FUNCTION", "name": "T_PLC_US", "input": [{"name": "debug", "type": "BOOL", "description": "Flag indicating whether debug mode is active."}, {"name": "N", "type": "INT", "description": "Number of bits to shift in the conversion process."}, {"name": "offset", "type": "DWORD", "description": "Offset to apply to the converted time value."}], "output": [{"name": "T_PLC_US", "type": "DWORD", "description": "The resulting DWORD value derived from the time conversion."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the converted time value as a DWORD."}}
{"title": "Uppercase String Conversion", "description": "UPPERCASE converts all letters of STR in uppercase. During\nconversion, the Global Setup EXTENDED_ASCII constant is considered. If\nEXTENDED_ASCII = TRUE, all characters of the extended ASCII character\nset to be considered in accordance with ISO 8859-1. Umlauts like Ä, Ö, Ü\nare considered only if the global constant EXTENDED_ASCII = TRUE. A de￾tailed description of the code change is found in the function TO_UPPER.", "type": "FUNCTION", "name": "UPPERCASE", "input": [{"name": "str", "type": "STRING", "description": "The input string that needs to be converted to uppercase."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The converted uppercase string.", "fields": []}}
{"title": "UTC to Local Time Conversion", "description": "UTC_TO_LTIME calculates from the universal time at\ninput UTC the local time (LOCAL_DT), with automatic daylight saving time\nif DST_ENABLE is set to True. If DST_ENABLE is FALSE, the local time is cal￾culated without daylight saving.\nThis function module requires UTC at the input, which is normally provided\nby the PLC and can be read by a routine of the manufacturer. \nThe following example an application for a WAGO 750-841 CPU is shown.\nThe reading of the internal clock is done by the manufacturer SYSRTCGET￾TIME routine. The PLC clock must be in this case set to UTC.", "type": "FUNCTION", "name": "UTC_TO_LTIME", "input": [{"name": "UTC", "type": "DT", "description": "The UTC date and time to be converted."}, {"name": "DST_ENABLE", "type": "BOOL", "description": "A boolean flag indicating whether daylight saving time adjustments should be applied."}, {"name": "TIME_ZONE_OFFSET", "type": "INT", "description": "The time zone offset in minutes to be applied to the UTC time."}], "output": [{"name": "UTC_TO_LTIME", "type": "DT", "description": "The converted local time in date and time format."}], "in/out": [], "return_value": {"type": "DT", "description": "The function returns the local time corresponding to the input UTC time after applying the necessary adjustments for the time zone and DST.", "fields": []}}
{"title": "Calculate the Magnitude of a 3D Vector", "description": "V3_ABS calculates the absolute value (length) of a vector in a three￾dimensional coordinate system.\nV3_ABS(3,4,5) = 7.071...", "type": "FUNCTION", "name": "V3_ABS", "input": [{"name": "A", "type": "ARRAY[1..3] OF REAL", "description": "An array representing a 3D vector, containing three REAL values corresponding to the x, y, and z components of the vector."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed magnitude of the 3D vector A.", "fields": []}}
{"title": "3D Vector Addition", "description": "V3_ADD adds two three dimensional vectors.\nV3_ADD([3,4,5],[1,2,3]) = (4,6,8)", "type": "FUNCTION", "name": "V3_ADD", "input": [{"name": "A", "type": "Vector_3", "description": "The first input vector for the addition operation.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector A."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector A."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector A."}]}, {"name": "B", "type": "Vector_3", "description": "The second input vector for the addition operation.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the vector B."}, {"name": "Y", "type": "REAL", "description": "The Y component of the vector B."}, {"name": "Z", "type": "REAL", "description": "The Z component of the vector B."}]}], "output": [{"name": "V3_ADD", "type": "Vector_3", "description": "The resultant vector from the addition of vectors A and B.", "fields": [{"name": "X", "type": "REAL", "description": "The X component of the resultant vector."}, {"name": "Y", "type": "REAL", "description": "The Y component of the resultant vector."}, {"name": "Z", "type": "REAL", "description": "The Z component of the resultant vector."}]}], "in/out": [], "return_value": {"type": "void", "description": "The function does not return a value, but modifies the output parameter V3_ADD."}}
{"title": "Vector Dot Product Calculation", "description": "V3_DPRO calculates the scalar product of two-dimensional vectors.\nV3_DPRO([1,2,3],[3,1,2]) = 11\nThe scalar product is calculated from A.X*B.X + A.Y*B.Y + A.Z*B.Z", "type": "FUNCTION", "name": "V3_DPRO", "input": [{"name": "A", "type": "Vector_3", "description": "The first 3-dimensional vector used in the dot product calculation."}, {"name": "B", "type": "Vector_3", "description": "The second 3-dimensional vector used in the dot product calculation."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting dot product of vectors A and B."}}
{"title": "Calculate Angle from Vector", "description": "V3_YANG calculates the angle between the Y-axis of the coordinate system\nand a three-dimensional vector A in radians\nV3_YANG(1,2,3) = 1.006..", "type": "FUNCTION", "name": "V3_YANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3-dimensional vector for which the angle will be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed angle in radians based on the Y component of the vector.", "fields": []}}
{"title": "1D Timer Function Block", "description": "TP_1D is an edge-triggered pulse generator which generates at a rising\nedge at IN an output pulse at Q with the duration of PT1. During the out￾put pulse an another rising edge to IN is created, the output pulse will be\nextended so that after the last rising edge of output for the duration of PT\nremains TRUE. After the end of the pulse duration PT1 the module block\nthe output for the time PTD. A new impulse can be restarted only after the\ntime PTD. The module can be reset at any time with a TRUE at the RST in￾put. The output W shows that the module in the waiting cycle, and as long\nas W = TRUE, no new impuls can start.", "type": "FUNCTION_BLOCK", "name": "TP_1D", "input": [{"name": "IN", "type": "BOOL", "description": "A boolean input signal that starts the timing process when true."}, {"name": "PT1", "type": "TIME", "description": "The time duration that determines how long the output Q remains true after the input IN is activated."}, {"name": "PTD", "type": "TIME", "description": "The delay time which controls when output W is activated after the input has been processed."}, {"name": "RST", "type": "BOOL", "description": "A boolean reset input that, when true, resets the outputs and internal states."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output indicating the active state based on the input and time conditions."}, {"name": "W", "type": "BOOL", "description": "The boolean output indicating the delayed state which activates after the PTD time if conditions are met."}], "in/out": [], "return_value": null}
{"title": "Calculate Angle from Z-Axis", "description": "V3_ZANG calculates the angle between the Z-axis of the coordinate sys￾tem and a three-dimensional vector A in radians\nV3_ZANG(1,2,3) = 0.640..\n 12. Time & Date", "type": "FUNCTION", "name": "V3_ZANG", "input": [{"name": "A", "type": "Vector_3", "description": "A 3D vector containing the X, Y, and Z components."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians between the vector and the Z-axis.", "fields": []}}
{"title": "Scale Input Values with Offset", "description": "SCALE_X2 calculates from the input values IN and the setup values IN_MIN\nand IN_MAX internal values, then add all the internal values, multiplies the\nsum by K and add the ofset O. An input value IN = FALSE means IN_MIN is\nincluded, IN = TRUE means IN_MAX is considered. The sum is multiplied\nby K and ofset O is added. K is not connected then the frst multiplier\nSCALE_X2 can be used, for example, to calculate total air quantities in\nventilation systems, or wherever controlled faps are used and the resul￾ting total needs to be calculated. By the input ofset, SCALE_X2 can easily\nbe cascaded with other SCALE modules.\nIn following", "type": "FUNCTION", "name": "SCALE_X2", "input": [{"name": "IN1", "type": "BOOL", "description": "First boolean selector for input selection."}, {"name": "IN2", "type": "BOOL", "description": "Second boolean selector for input selection."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the selected inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the result after scaling."}, {"name": "IN1_MIN", "type": "REAL", "description": "Minimum value for input 1 when selected."}, {"name": "IN1_MAX", "type": "REAL", "description": "Maximum value for input 1 when selected. Default is 1000.0.", "fields": []}, {"name": "IN2_MIN", "type": "REAL", "description": "Minimum value for input 2 when selected."}, {"name": "IN2_MAX", "type": "REAL", "description": "Maximum value for input 2 when selected. Default is 1000.0.", "fields": []}], "output": [{"name": "SCALE_X2", "type": "REAL", "description": "The resultant value after scaling and applying the offset."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final calculated value after processing the input parameters.", "fields": []}}
{"title": "8-Bit Storage Function Block", "description": "STORE_8 is an 8-event memory. A TRUE one of the inputs D0..D7 sets the\ncorresponding output Q0 .. Q7. The asynchronous set and reset inputs\n(SET, RST) set all outputs simultaneously to TRUE or FALSE. IF during a re￾set one of the inputs TRUE after the reset, the corresponding output is im-\nmediately set to TRUE. If edge-triggered inputs are required, use TP_R mo￾dules before of the module STRORE_8. This allows the user to use both\nedge triggered as well as condition-triggered inputs simultaneously. Input\nCLR clears with a rising edge on CLR only one event, beginning with the\nhighest priority output that is just TRUE. If with CLR a output Q has clea￾red which input Q is TRUE, so the output D will be set to TRUE at the next\ncycle.", "type": "FUNCTION_BLOCK", "name": "STORE_8", "input": [{"name": "Set", "type": "BOOL", "description": "A signal to enable setting the storage values."}, {"name": "D0", "type": "BOOL", "description": "Input for the first bit in the storage."}, {"name": "D1", "type": "BOOL", "description": "Input for the second bit in the storage."}, {"name": "D2", "type": "BOOL", "description": "Input for the third bit in the storage."}, {"name": "D3", "type": "BOOL", "description": "Input for the fourth bit in the storage."}, {"name": "D4", "type": "BOOL", "description": "Input for the fifth bit in the storage."}, {"name": "D5", "type": "BOOL", "description": "Input for the sixth bit in the storage."}, {"name": "D6", "type": "BOOL", "description": "Input for the seventh bit in the storage."}, {"name": "D7", "type": "BOOL", "description": "Input for the eighth bit in the storage."}, {"name": "Clr", "type": "BOOL", "description": "A signal to clear the stored values."}, {"name": "Rst", "type": "BOOL", "description": "A signal to reset the storage values."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for the first stored bit."}, {"name": "Q1", "type": "BOOL", "description": "Output for the second stored bit."}, {"name": "Q2", "type": "BOOL", "description": "Output for the third stored bit."}, {"name": "Q3", "type": "BOOL", "description": "Output for the fourth stored bit."}, {"name": "Q4", "type": "BOOL", "description": "Output for the fifth stored bit."}, {"name": "Q5", "type": "BOOL", "description": "Output for the sixth stored bit."}, {"name": "Q6", "type": "BOOL", "description": "Output for the seventh stored bit."}, {"name": "Q7", "type": "BOOL", "description": "Output for the eighth stored bit."}], "in/out": [], "return_value": null}
{"title": "Convert Weekday Integer to String Representation", "description": "WEEKDAY_TO_STRING converts a weekday in the corresponding string.\nThe input WDAY indicates the corresponding day of the week: 1 = Monday\nand 7 = Sunday. The input LANG chooses the language: 1 = English and 2\n= German. LANG = 0 used as Default the language specifed in the Global\nSetup variable LANGUAGE_DEFAULT. [fzy] The input LX sets the length of\nthe string to be generated: 0 = full month name, 3 = 3-letter abbreviation,\nall other values at the input LX are undefned. \nThe strings produced by the module, and the supported languages are de￾fned in the Global Constants and can be expanded and changed. \nWEEKDAY_TO_STRING(1,0,0) = ' Monday ' \ndependent on the global constant LANGUAGE_DEFAULT\nWEEKDAY_TO_STRING(1,2,0) = ' Monday ' \nWEEKDAY_TO_STRING(1,0,2) = ' Mon ' \n 14. Memory Modules", "type": "FUNCTION", "name": "WEEKDAY_TO_STRING", "input": [{"name": "WDAY", "type": "INT", "description": "An integer representing the weekday. Valid values are from 1 to 7."}, {"name": "LANG", "type": "INT", "description": "An integer representing the language choice. If set to 0, the default language is used."}, {"name": "LX", "type": "INT", "description": "An integer that specifies the language format. 0 for standard, 2 for an alternative format."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "Returns the string representation of the weekday in the specified language.", "fields": []}}
{"title": "Byte Swap Function", "description": "SWAP_BYTE2 reverses the order of bytes in a DWORD.", "type": "FUNCTION", "name": "SWAP_BYTE2", "input": [{"name": "IN", "type": "DWORD", "description": "The DWORD value whose bytes are to be swapped."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The resulting DWORD after the bytes have been swapped.", "fields": []}}
{"title": "Window Function", "description": "WINDOW function tests whether the input value is within the limits de￾fned by the LOW and HIGH.\nWINDOW is exactly TRUE if IN < HIGH and IN > LOW.", "type": "FUNCTION", "name": "WINDOW", "input": [{"name": "low", "type": "REAL", "description": "The lower boundary of the input range."}, {"name": "in", "type": "REAL", "description": "The input value to be evaluated."}, {"name": "high", "type": "REAL", "description": "The upper boundary of the input range."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns true if the input value is within the specified range, false otherwise."}}
{"title": "Time Check Function", "description": "TIMECHECK checks whether the daily time TD is between the START and\nSTOP time. TIME CHECK returns TRUE if TD > = START and TD < STOP. IF\nSTART and STOP are defned in a way that START > STOP, the output with\nthe start set to TRUE and remains by midnight TRUE until at the next day\nSTOP is reached.\nThe function has the following defnition:\nSTART < STOP : TD >= START AND TD < STOP\nSTART > STOP : TD >= START OR TD < STOP", "type": "FUNCTION", "name": "TIMECHECK", "input": [{"name": "TD", "type": "TOD", "description": "The time of day to check against the range."}, {"name": "START", "type": "TOD", "description": "The start time of the range."}, {"name": "STOP", "type": "TOD", "description": "The stop time of the range."}], "output": [{"name": "TIMECHECK", "type": "BOOL", "description": "Returns TRUE if TD falls within the time range; otherwise, returns FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates the result of the time check operation.", "fields": []}}
{"title": "Range Checking Function", "description": "WINDOW2 supplies FALSE if IN is outside\nthe limits LOW and HIGH .\n 6. Arrays", "type": "FUNCTION", "name": "WINDOW2", "input": [{"name": "LOW", "type": "REAL", "description": "The lower bound of the range."}, {"name": "IN", "type": "REAL", "description": "The input value to be checked against the range."}, {"name": "HIGH", "type": "REAL", "description": "The upper bound of the range."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the input value is within the specified range (inclusive), otherwise returns FALSE."}}
{"title": "Selection of Valid Inputs from Three Inputs", "description": "SEL2_OF_3 evaluates 3 inputs (IN1 .. IN3) and checks whether the deviati￾on of the input value is less than or equal to D. The average of the three\ninputs is output at output Y. The individual inputs are only considered if\nthey are not further away from another input than D. If the mean value of\nonly 2 inputs, the number of unrecognized input is passed at W. If W = 0,\nall 3 inputs are considered. If all 3 inputs vary more than D, the output is\nset to W = 4 and the output E = TRUE. The output Y is not changed in this\ncase and remains at the last valid zero. \"\nA typical application for the module is the acquisition of 3 sensors which\nmeasures the same process variable in order to reduce measurement er￾ror as measured by diferent measures or broken wire.", "type": "FUNCTION_BLOCK", "name": "SEL2_OF_3", "input": [{"name": "IN1", "type": "REAL", "description": "The first input value."}, {"name": "IN2", "type": "REAL", "description": "The second input value."}, {"name": "IN3", "type": "REAL", "description": "The third input value."}, {"name": "D", "type": "REAL", "description": "The tolerance value to determine the validity of inputs."}], "output": [{"name": "Y", "type": "REAL", "description": "The calculated average of the selected valid input values."}, {"name": "W", "type": "INT", "description": "Indicator of which inputs were valid (0 for all, 1 for IN2 and IN3, 2 for IN3 and IN1, 3 for IN1 and IN2, 4 for none)."}, {"name": "E", "type": "BOOL", "description": "Error flag indicating if no valid input combinations were found."}], "in/out": [], "return_value": null}
{"title": "Combine Two Bytes into a Word", "description": "WORD_OF_BYTE composes a Word of 2 separate bytes B0 and B1.", "type": "FUNCTION", "name": "WORD_OF_BYTE", "input": [{"name": "B1", "type": "BYTE", "description": "The first byte to be combined, which will be shifted left by 8 bits."}, {"name": "B0", "type": "BYTE", "description": "The second byte to be combined, which will remain in its original position."}], "output": [], "in/out": [], "return_value": {"type": "WORD", "description": "The resulting WORD obtained by combining B1 and B0."}}
{"title": "Selective Output Block for Three Inputs", "description": "SEL2_OF_3B evaluates 3 redundant binary inputs and provides the value,\nthat at least 2 of the 3 inputs have, at output Q. If one of the three inputs\nhas a diferent value than the other two, the output W is set as a warning.\nA response delay TD can be defned for the output W that at diferent ti￾ming while switching the inputs the Output W does not respond.", "type": "FUNCTION_BLOCK", "name": "SEL2_OF_3B", "input": [{"name": "IN1", "type": "BOOL", "description": "First boolean input."}, {"name": "IN2", "type": "BOOL", "description": "Second boolean input."}, {"name": "IN3", "type": "BOOL", "description": "Third boolean input."}, {"name": "TD", "type": "TIME", "description": "Time duration for the delay timer."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean indicating the result of the OR logic on the inputs."}, {"name": "W", "type": "BOOL", "description": "Output boolean representing the state of the timer output."}], "in/out": [], "return_value": null}
{"title": "Extract Specific Word from DWORD", "description": "WORD_OF_DWORD extracts a word (W0 .. W1) from a DWORD.\n 17. Latches, Flip-Flop and Shift Register", "type": "FUNCTION", "name": "WORD_OF_DWORD", "input": [{"name": "in", "type": "DWORD", "description": "The input DWORD from which the WORD will be extracted."}, {"name": "N", "type": "BYTE", "description": "The index of the WORD to extract from the DWORD, where N specifies which 16-bit segment to retrieve."}], "output": [{"name": "WORD_OF_DWORD", "type": "WORD", "description": "The output WORD extracted from the input DWORD at the specified index N."}], "in/out": [], "return_value": {"type": "WORD", "description": "The extracted 16-bit unsigned integer (WORD) from the input DWORD.", "fields": []}}
{"title": "Select 8 Function Block", "description": "SELECT_8 set only one output to TRUE as long as E = TRUE. The active\noutput Q0..Q7 can be selected by the SET input and the value at the input\nIN. A TRUE at SET and a value of 5 at the input IN set the output Q5 to\nTRUE while all other outputs are set to FALSE. A TRUE at the input RST set\noutput Q0 to TRUE. With inputs UP is switched from an output Qn to Qn\n+1, while the input DN switches an output Qn to Qn-1. The input EN must\nbe TRUE so that an output is TRUE, if EN is FALSE, all outputs are FALSE. A\nFALSE at E does not afected the function of other inputs. Thus, even with\na FALSE at input EN can be switched up or down with UP or DN . The in￾puts UP and DN are edge-triggered and respond to the rising edge. The\nstate output always shows which output is currently selected.\nE SET IN UP DN RST Q STATE\nReset X - - - - 1 Q0 if EN=1 0\nSet X 1 N - - 0 QN if EN=1 N\nup X 0 - ↑ 0 0 QN+1 if EN=1 N + 1\ndown X 0 - 0 ↑ 0 QN-1 if EN=1 N - 1", "type": "FUNCTION_BLOCK", "name": "SELECT_8", "input": [{"name": "E", "type": "BOOL", "description": "Enable input for the function block."}, {"name": "SET", "type": "BOOL", "description": "Sets the state variable to the value of IN when TRUE."}, {"name": "IN", "type": "BYTE", "description": "Input value used to set the state variable."}, {"name": "UP", "type": "BOOL", "description": "Increment the state variable when TRUE and the last UP was FALSE."}, {"name": "DN", "type": "BOOL", "description": "Decrement the state variable when TRUE and the last DN was FALSE."}, {"name": "RST", "type": "BOOL", "description": "Resets the state variable to 0 when TRUE."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal for state 0."}, {"name": "Q1", "type": "BOOL", "description": "Output signal for state 1."}, {"name": "Q2", "type": "BOOL", "description": "Output signal for state 2."}, {"name": "Q3", "type": "BOOL", "description": "Output signal for state 3."}, {"name": "Q4", "type": "BOOL", "description": "Output signal for state 4."}, {"name": "Q5", "type": "BOOL", "description": "Output signal for state 5."}, {"name": "Q6", "type": "BOOL", "description": "Output signal for state 6."}, {"name": "Q7", "type": "BOOL", "description": "Output signal for state 7."}, {"name": "STATE", "type": "INT", "description": "Current state of the selection (0-7)."}], "in/out": [], "return_value": null}
{"title": "Convert WORD to Range", "description": "WORD_TO_RANGE converts a WORD value to a REAL value. An input value\nof 0 corresponds to the real value of LOW and an input value of 65535 cor￾responds to the input value of HIGH.\nTo convert a WORD value of 0..65535 in a percentage of 0..100, the modu￾le is called as follows:\nWORD_TO_RANGE(X,100,0)\n 20. Sensors", "type": "FUNCTION", "name": "WORD_TO_RANGE", "input": [{"name": "X", "type": "WORD", "description": "The WORD value to be converted into the specified range."}, {"name": "low", "type": "REAL", "description": "The lower bound of the range to which the WORD value will be mapped."}, {"name": "high", "type": "REAL", "description": "The upper bound of the range to which the WORD value will be mapped."}], "output": [{"name": "WORD_TO_RANGE", "type": "REAL", "description": "The resulting REAL value after mapping the WORD input into the specified range."}], "in/out": [], "return_value": {"type": "REAL", "description": "The mapped REAL value based on the input WORD and specified range.", "fields": []}}
{"title": "Sequential Control Block for Multiple Inputs", "description": "SEQUENCE_4 is a 4-bit sequencer with control inputs. After a rising edge\non START, RUN gets TRUE and the sequencer waits for the time Wait0 for a\nTRUE signal at the input IN0. After the signal on IN0 is TRUE, the output\nQ0 is set and waits the time Delay0. After the interval Delay0 in the next\ncycle the module waiting the time wait1 for an input signal at in1 and Q0\nremains TRUE, until Q1 is set. The whole procedure is repeated until all 4\ncycles have elapsed. If during the waiting time wait0..3 the corresponding\ninput gets not true, an error is set, by corresponding Error Number at the\noutput STATUS it is displayed, and depending on the setup variable\nSTOP_ON_ERROR the sequencer is stopped or not. The STATUS output is\n110 for waiting to the start signal, and 111 for pass through. It show the\nsequence with 1 .. 4 errors. A Error = 1 means that the signal at the input\nin0 gets not active, a 2 corresponds to in1 etc . \nThe outputs RUN and STEP indicate whether the sequencer is running and\nin which cycle it is at the moment. The output QX is TRUE, if one of the\noutputs Q0..Q3 are TRUE. \nAn asynchronous reset input can always reset the sequencer. This reset in￾put can also be connected with a output Q0..Q3 to stop the sequencer be￾fore the full sequence. The sequencer can be started at any time with a ri￾sing edge on the START input, again and again. This is true, even if he has\nnot completed a sequence.\nIf not a edge examination of one or more inputs IN are required, they may\nsimply be left open, because the default value for this input is TRUE.\nThe initial state is compatible and ESR shows a value of 1-4 indicates that\nan error has occurred. An error occurs if the corresponding input signal to\nIN does not occur during the waiting period.\nError = 1 means that in0 is not within the waiting time has become active.\nError 2 .. 4 corresponds to inputs 1 .. 3.\nA status value of 110 means on hold and 111 means that just a sequence\nis running.", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_4", "input": [{"name": "in0", "type": "BOOL", "description": "Boolean input control for step 0."}, {"name": "in1", "type": "BOOL", "description": "Boolean input control for step 1."}, {"name": "in2", "type": "BOOL", "description": "Boolean input control for step 2."}, {"name": "in3", "type": "BOOL", "description": "Boolean input control for step 3."}, {"name": "start", "type": "BOOL", "description": "Start signal to initiate the sequence."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to reset the sequence and outputs."}, {"name": "wait0", "type": "TIME", "description": "Wait time for step 0."}, {"name": "delay0", "type": "TIME", "description": "Delay time after step 0."}, {"name": "wait1", "type": "TIME", "description": "Wait time for step 1."}, {"name": "delay1", "type": "TIME", "description": "Delay time after step 1."}, {"name": "wait2", "type": "TIME", "description": "Wait time for step 2."}, {"name": "delay2", "type": "TIME", "description": "Delay time after step 2."}, {"name": "wait3", "type": "TIME", "description": "Wait time for step 3."}, {"name": "delay3", "type": "TIME", "description": "Delay time after step 3."}, {"name": "stop_on_error", "type": "BOOL", "description": "Flag to stop the sequence on the first error detected."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for step 0."}, {"name": "Q1", "type": "BOOL", "description": "Output for step 1."}, {"name": "Q2", "type": "BOOL", "description": "Output for step 2."}, {"name": "Q3", "type": "BOOL", "description": "Output for step 3."}, {"name": "QX", "type": "BOOL", "description": "Combined output status indicating active steps."}, {"name": "run", "type": "BOOL", "description": "Indicates whether the sequence is currently running."}, {"name": "step", "type": "INT", "description": "Current step in the sequence, initialized to -1 indicating no active step."}, {"name": "status", "type": "BYTE", "description": "Status of the sequence execution."}], "in/out": [], "return_value": null}
{"title": "Calculate Work Week from Date", "description": "WORK_WEEK calculates the week from the date of input IDA￾TE. The week starts with 1 for the frst week of the year. The frst Thursday\nof the year is always in the frst week. If a year starts with a Thursday or\nend on a Thursday this year has 53 calendar weeks. If the frst day of the\nyear a Tuesday, Wednesday or Thursday so the week begins one early as\nDecember of last year. If the frst day of the year is Friday, Saturday or\nSunday, the last week of the year extends into January. The calculation is\ndone in accordance with ISO8601.\nAs the work week (Work Week ) International is not always used consis￾tent, before the application of the function is to clarify, whether the work\nweek according to ISO8601 is desired in the desired application function.", "type": "FUNCTION", "name": "WORK_WEEK", "input": [{"name": "idate", "type": "DATE", "description": "The input date from which the work week number is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The work week number for the given date according to ISO8601 standards."}}
{"title": "Sequence Control Block", "description": "SEQUENCE_64 generates a time sequence of up to 64 states. In the res￾ting state the output STATE is set to -1, thereby demonstrating to that the\nmodule is not active. A rising edge at START starts the sequence and the\noutput switches to 0. After the waiting time PROG[0] the module switch\nnext to STATE = 1, waits the time PROG[1], switches to STATE = 2, etc. ..\nuntil the output STATE reached the value of SMAX. After the waiting time\nPROG[SMAX], the device returns to the idle state (STATE = -1). A change\nto a new state STATE trigger of the output TRIG with a TRUE for one PLC\ncycle. With TRIG easily downstream modules can be controlled. With the\ninput RST, the device can also be reset in the initial state at any time du￾ring the process of a sequence.\nsignal diagram of SEQUENCE_64:", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_64", "input": [{"name": "START", "type": "BOOL", "description": "A boolean signal to start the sequence."}, {"name": "SMAX", "type": "INT", "description": "The maximum state index for the sequence."}, {"name": "PROG", "type": "ARRAY[0..63] OF TIME", "description": "An array containing timing intervals for each state in the sequence."}, {"name": "RST", "type": "BOOL", "description": "A boolean signal to reset the sequence state."}], "output": [{"name": "STATE", "type": "INT", "description": "The current state of the sequence, initialized to -1."}, {"name": "TRIG", "type": "BOOL", "description": "A trigger signal that indicates when a state transition has occurred."}], "in/out": [], "return_value": {}}
{"title": "Calculate Beginning of Year Date", "description": "YEAR_BEGIN calculate the date of the frst January for the year Y.", "type": "FUNCTION", "name": "YEAR_BEGIN", "input": [{"name": "y", "type": "INT", "description": "The year for which to calculate the beginning date."}], "output": [{"name": "YEAR_BEGIN", "type": "DATE", "description": "The date representing the beginning of the specified year."}], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated beginning date of the year based on the provided input year."}}
{"title": "Sequencer Function Block", "description": "SEQUENCE_8 can be found at SEQUENCE_4. SE￾QUENCE_8 function is identical with SEQUENCE_4. He has 8 instead of 4\nchannels. SEQUENCE_8 is used in the OSCAT library module Legionella.", "type": "FUNCTION_BLOCK", "name": "SEQUENCE_8", "input": [{"name": "in0", "type": "BOOL", "description": "Input signal for step 0 activation."}, {"name": "in1", "type": "BOOL", "description": "Input signal for step 1 activation."}, {"name": "in2", "type": "BOOL", "description": "Input signal for step 2 activation."}, {"name": "in3", "type": "BOOL", "description": "Input signal for step 3 activation."}, {"name": "in4", "type": "BOOL", "description": "Input signal for step 4 activation."}, {"name": "in5", "type": "BOOL", "description": "Input signal for step 5 activation."}, {"name": "in6", "type": "BOOL", "description": "Input signal for step 6 activation."}, {"name": "in7", "type": "BOOL", "description": "Input signal for step 7 activation."}, {"name": "start", "type": "BOOL", "description": "Start signal to initialize the sequence."}, {"name": "rst", "type": "BOOL", "description": "Reset signal to reset the sequence state."}, {"name": "wait0", "type": "TIME", "description": "Wait time before executing step 0."}, {"name": "delay0", "type": "TIME", "description": "Delay time after completing step 0."}, {"name": "wait1", "type": "TIME", "description": "Wait time before executing step 1."}, {"name": "delay1", "type": "TIME", "description": "Delay time after completing step 1."}, {"name": "wait2", "type": "TIME", "description": "Wait time before executing step 2."}, {"name": "delay2", "type": "TIME", "description": "Delay time after completing step 2."}, {"name": "wait3", "type": "TIME", "description": "Wait time before executing step 3."}, {"name": "delay3", "type": "TIME", "description": "Delay time after completing step 3."}, {"name": "wait4", "type": "TIME", "description": "Wait time before executing step 4."}, {"name": "delay4", "type": "TIME", "description": "Delay time after completing step 4."}, {"name": "wait5", "type": "TIME", "description": "Wait time before executing step 5."}, {"name": "delay5", "type": "TIME", "description": "Delay time after completing step 5."}, {"name": "wait6", "type": "TIME", "description": "Wait time before executing step 6."}, {"name": "delay6", "type": "TIME", "description": "Delay time after completing step 6."}, {"name": "wait7", "type": "TIME", "description": "Wait time before executing step 7."}, {"name": "delay7", "type": "TIME", "description": "Delay time after completing step 7."}, {"name": "stop_on_error", "type": "BOOL", "description": "Flag to indicate if the sequence should stop on error."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output for step 0."}, {"name": "Q1", "type": "BOOL", "description": "Output for step 1."}, {"name": "Q2", "type": "BOOL", "description": "Output for step 2."}, {"name": "Q3", "type": "BOOL", "description": "Output for step 3."}, {"name": "Q4", "type": "BOOL", "description": "Output for step 4."}, {"name": "Q5", "type": "BOOL", "description": "Output for step 5."}, {"name": "Q6", "type": "BOOL", "description": "Output for step 6."}, {"name": "Q7", "type": "BOOL", "description": "Output for step 7."}, {"name": "QX", "type": "BOOL", "description": "Any output active indicator."}, {"name": "run", "type": "BOOL", "description": "Indicator if the sequencer is currently running."}, {"name": "step", "type": "INT", "description": "Current step of the sequence."}, {"name": "status", "type": "BYTE", "description": "Current status of the sequencer."}], "in/out": [], "return_value": {}}
{"title": "Calculate Year-End Date from Year Integer", "description": "YEAR_END calculates '31 December in the year Y.", "type": "FUNCTION", "name": "YEAR_END", "input": [{"name": "y", "type": "INT", "description": "The input variable representing the year as an integer."}], "output": [], "in/out": [], "return_value": {"type": "DATE", "description": "The calculated year-end date corresponding to the input year."}}
{"title": "Bitwise Shift Left Function", "description": "SHL1 shifts the input DWORD for N bits to the left and flls the right N bits\nwith 1. In contrast to the IEC standard function SHL, which flles when pu￾shing with zeros, at SHL1 is flled with ones.", "type": "FUNCTION", "name": "SHL1", "input": [{"name": "IN", "type": "DWORD", "description": "The input value that will be shifted."}, {"name": "N", "type": "INT", "description": "The number of positions to shift the input value to the left."}], "output": [{"name": "SHL1", "type": "DWORD", "description": "The result of the left shift operation applied to the input value."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The final computed value after applying bitwise operations.", "fields": []}}
{"title": "Year of Date Calculation", "description": "YEAR_OF_DATE calculates the corresponding year from the\ndate of input IDATE.", "type": "FUNCTION", "name": "YEAR_OF_DATE", "input": [{"name": "IDATE", "type": "DATE", "description": "The input date from which the year is to be extracted."}], "output": [{"name": "year", "type": "INT", "description": "The calculated year derived from the input date."}], "in/out": [], "return_value": {"type": "INT", "description": "The function returns the year as an integer.", "fields": []}}
{"title": "Shift Right Operation", "description": "SHR1 pushes the input to N bits to the right and flls the left N bits with\n1's. In contrast to the IEC standard function SHL, which flles when pushing\nwith zeros, at SHR1 is flled with ones.", "type": "FUNCTION", "name": "SHR1", "input": [{"name": "IN", "type": "DWORD", "description": "The input DWORD value to be shifted."}, {"name": "N", "type": "INT", "description": "The number of bits to shift the input value to the right."}], "output": [], "in/out": [], "return_value": {"type": "DWORD", "description": "The result of the logical right shift operation on the input value.", "fields": []}}
{"title": "Array Absolute Value Calculation", "description": "_ARRAY_ABS calculates the elements of an arbitrary array Of\nREAL in an absolute value. When called, a pointer to the array and its size\nin bytes is transferred to the function. Under CoDeSys the call reads: _AR￾RAY_ABS(ADR(Array), SIZEOF(array)), where array is the name of the array\nto be manipulated. ADR() is a standard function which identifes the poin￾ter to the array and SIZEOF() is a standard function, which determines the\nsize of the array. The function only returns TRUE. The array specifed by\nthe pointer is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.\nCall: _ARRAY_ABS(ADR(bigarray), SIZEOF(bigarray))", "type": "FUNCTION", "name": "_ARRAY_ABS", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to the array of real numbers whose absolute values need to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the absolute values were successfully calculated."}}
{"title": "4-bit Shift Register with Set, Reset, and Clock Functionality", "description": "SHR_4E is a 4-bit shift register with asynchronous set and reset input. A ri￾sing edge at CLK, Q2 is moved to Q3, then moves the Q1 to Q2, Q0 to Q1\nand D0 to Q0. With a TRUE on the Set input, all outputs (Q0.. Q3) are set\nto TRUE and with RST are all set to FALSE.", "type": "FUNCTION_BLOCK", "name": "SHR_4E", "input": [{"name": "SET", "type": "BOOL", "description": "Input signal to set the shift register."}, {"name": "D0", "type": "BOOL", "description": "Data input for the shift register."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal to trigger the shifting operation."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the shift register outputs."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output representing the least significant bit of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Output representing the second least significant bit of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Output representing the second most significant bit of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Output representing the most significant bit of the shift register."}], "in/out": [], "return_value": null}
{"title": "Array Addition Function", "description": "_ARRAY_ADD(ADR(Array), SIZEOF(Array), X), where array is the name of\nthe array to be manipulated. ADR() is a standard function which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. The function only returns TRUE. The array spe￾cifed by the pointer is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.\nCall: _ARRAY_ADD(ADR(bigarray), SIZEOF(bigarray), X)", "type": "FUNCTION", "name": "_ARRAY_ADD", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that will be modified."}, {"name": "size", "type": "UINT", "description": "The size of the array to determine how many elements will be processed."}, {"name": "X", "type": "REAL", "description": "The real number value to be added to each element of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating the success of the operation.", "fields": []}}
{"title": "SHR_4UDE Function Block", "description": "SHR_4UDE is a 4-bit shift register with Up / Down sliding directions. A ri￾sing edge at CLK, Q2 is moved to Q3, then moves the Q1 to Q2, Q0 to Q1\nand D0 to Q0. The shift direction can be reversed with a TRUE at the input\nDN, then the D3 is pushed to Q3 - to Q2 - to Q1 - to Q0. With a TRUE on\nthe Set input, all outputs (Q0.. Q3) are set to TRUE and with RST all the in￾puts are set to FALSE.", "type": "FUNCTION_BLOCK", "name": "SHR_4UDE", "input": [{"name": "SET", "type": "BOOL", "description": "Control signal to set the output state."}, {"name": "D0", "type": "BOOL", "description": "Input data bit to be shifted into the register at Q0."}, {"name": "D3", "type": "BOOL", "description": "Input data bit to be shifted into the register at Q3."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal for controlling the shifting operation."}, {"name": "DN", "type": "BOOL", "description": "Control signal for direct loading of data into the register."}, {"name": "RST", "type": "BOOL", "description": "Control signal to reset the output state."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output of the least significant bit of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Output of the second bit of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Output of the third bit of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Output of the most significant bit of the shift register."}], "in/out": [], "return_value": null}
{"title": "Array Initialization Function", "description": "_ARRAY_INIT initializes an arbitrary array of REAL with an in￾itial value. When called, a pointer to the array and its size in bytes is\ntransferred to the function. Under CoDeSys the call reads:\n_ARRAY_INIT(ADR(Array), SIZEOF(Array), INIT), where array is the name of\nthe array to be manipulated. ADR() is a standard function which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. The function only returns TRUE. The array spe￾cifed by the pointer is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_ARRAY_INIT", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array that needs to be initialized."}, {"name": "size", "type": "UINT", "description": "The size of the array to be initialized."}, {"name": "init", "type": "REAL", "description": "The initial value to set for each element of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array initialization was successful."}}
{"title": "8-bit Shift Register Function Block", "description": "SHR_8PLE is an 8 bit shift register with parallel Load and asynchronous re￾set. The shift direction can be reversed with the input of UP. When UP = 1,\nbit 7 is frst pushed on DOUT and when UP = 0, bit 0 is frst pushed to\nDOUT. For Up -Shift Bit 0 is loaded with DIN and Down - Shift Bit 7 is loa￾ded with DIN. At the input DLOAD one byte of data occures, which with\nparallel Load ( LOAD = 1 and rising edge on CLK ) Is loaded into internal\nregisters. In the case of parallel Load is frst a shift done and then loaded\nthe register. An RST can always delete the register asynchronously. A de￾tailed description of a shift register, see the module SHR_4E.", "type": "FUNCTION_BLOCK", "name": "SHR_8PLE", "input": [{"name": "Din", "type": "BOOL", "description": "Input data bit to be shifted into the register."}, {"name": "Dload", "type": "BYTE", "description": "Byte value to load into the register when load signal is active."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal which triggers the shifting operation."}, {"name": "UP", "type": "BOOL", "description": "Direction of shift; TRUE for shift up, FALSE for shift down."}, {"name": "load", "type": "BOOL", "description": "Signal to load Dload value into the register."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the register."}], "output": [{"name": "DOut", "type": "BOOL", "description": "Output data bit, represents the bit shifted out of the register."}], "in/out": [], "return_value": null}
{"title": "Calculate Array Median", "description": "_ARRAY_MEDIAN calculates the median value of an arbitrary\narray of REAL. When called a pointer to the array and its size in bytes is\npassed to the function. Under CoDeSys the call reads:\n_ARRAY_MEDIAN(ADR(Array), SIZEOF(Array)), where array is the name of\nthe array to be manipulated. ADR() is a standard function, which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. In order to determine the median value the ar￾ray referenced by the pointer is sorted in the memory and remains after\nfunction end sorted. The function _ARRAY_MEDIAN thus changes the con￾tents of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.\nIf an array is processed, which should not be changed, so it has to be co￾pied to a temporary array before handing over the Pointer and calling the\nfunction.", "type": "FUNCTION", "name": "_ARRAY_MEDIAN", "input": [{"name": "pt", "type": "POINTER TO ARRAY[0..32000] OF REAL", "description": "A pointer to an array of real numbers whose median is to be calculated."}, {"name": "size", "type": "UINT", "description": "The number of elements in the array pointed to by pt."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The median value of the array.", "fields": []}}
{"title": "8-Stage Shift Register with Control Inputs", "description": "SHR_8UDE is an 8 bit shift register with Up /Down sliding direction. A rising\nedge at CLK, the data Q0 are be pushed to Q7 one step. Q0 is then loaded\nwith D0. The shift direction can be reversed with a TRUE at the input DN.\nThen D7 is pushed to Q6, Q5, Q4, Q3, Q2, Q1, Q0 and Q7 is loaded with\nD7. With a TRUE on the Set input, all outputs (Q0.. Q3) set to TRUE and\nRST all outputs are set to FALSE. Further explanation of shift registers, see\nSHR_4E and especially at the module SHR_4UDE, which has the same\nfunction for 4 bits as SHR_8UDE for 8 bits.", "type": "FUNCTION_BLOCK", "name": "SHR_8UDE", "input": [{"name": "SET", "type": "BOOL", "description": "Input to set the state of the shift register."}, {"name": "D0", "type": "BOOL", "description": "Input data for the first stage of the shift register."}, {"name": "D7", "type": "BOOL", "description": "Input data for the last stage of the shift register."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal that triggers the shifting of the register."}, {"name": "DN", "type": "BOOL", "description": "Control input to determine the direction of data shifting."}, {"name": "RST", "type": "BOOL", "description": "Input to reset all registers to a known state."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Current output state of the first stage of the shift register."}, {"name": "Q1", "type": "BOOL", "description": "Current output state of the second stage of the shift register."}, {"name": "Q2", "type": "BOOL", "description": "Current output state of the third stage of the shift register."}, {"name": "Q3", "type": "BOOL", "description": "Current output state of the fourth stage of the shift register."}, {"name": "Q4", "type": "BOOL", "description": "Current output state of the fifth stage of the shift register."}, {"name": "Q5", "type": "BOOL", "description": "Current output state of the sixth stage of the shift register."}, {"name": "Q6", "type": "BOOL", "description": "Current output state of the seventh stage of the shift register."}, {"name": "Q7", "type": "BOOL", "description": "Current output state of the eighth stage of the shift register."}], "in/out": [], "return_value": null}
{"title": "Array Multiplication Function", "description": "_ARRAY_MUL multiply each element of an arbitrary array of\nREAL with the value X. When called a Pointer to the array and its size in\nbytes is passed to the function. Under CoDeSys the call reads:\n_ARRAY_MUL(ADR(Array), SIZEOF(Array), X), where array is the name of\nthe array to be manipulated. ADR() is a standard function which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. The function only returns TRUE. The array spe￾cifed by the pointer is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.\nCall: _ARRAY_MUL(ADR(bigarray), SIZEOF(bigarray), X)", "type": "FUNCTION", "name": "_ARRAY_MUL", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that will be modified."}, {"name": "size", "type": "UINT", "description": "The size of the array indicating how many elements are present."}, {"name": "X", "type": "REAL", "description": "The real number by which each element of the array will be multiplied."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE to indicate successful completion of the multiplication operation."}}
{"title": "Sample Time Trigger Function Block", "description": "SH_1 is a Sample and Hold module with adjustable sampling time. It stores\nall the PT, the input signal IN at the output OUT. After each update of OUT,\nTRIG remains TRUE for one cycle. \nThe following", "type": "FUNCTION_BLOCK", "name": "SH_1", "input": [{"name": "in", "type": "REAL", "description": "The input value to be output when the trigger condition is met."}, {"name": "PT", "type": "TIME", "description": "The time period that must elapse before the output is updated."}], "output": [{"name": "out", "type": "REAL", "description": "The output value that reflects the input when the trigger condition is met."}, {"name": "Trig", "type": "BOOL", "description": "A boolean flag that indicates whether the output has been updated."}], "in/out": [], "return_value": null}
{"title": "Array Shuffle Function", "description": "_ARRAY_SHUFFLE(ADR(Array), SIZEOF(Array)), where array is the name of\nthe array to be manipulated. ADR() is a standard function, which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. The array referenced by the Pointer is manipu￾lated directly in memory and is available directly after exit the function.\nThe function _ARRAY_SHUFFLE thus changes the contents of the array. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.\nIf an array is processed, which should not be changed, so it has to be co￾pied to a temporary array before handing over the Pointer and calling the\nfunction.", "type": "FUNCTION", "name": "_ARRAY_SHUFFLE", "input": [{"name": "pt", "type": "POINTER TO ARRAY [0..32000] OF REAL", "description": "A pointer to the array of real numbers that needs to be shuffled."}, {"name": "size", "type": "UINT", "description": "The size of the array, determining how many elements will be shuffled."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the array was shuffled successfully."}}
{"title": "Sample High-Low Average Calculation", "description": "SH_2 is a Sample and Hold module with adjustable sampling time. It stores\nall the PT, the input signal IN at the output OUT. After each update of OUT,\nTRIG remains TRUE for one cycle. In addition to the function of a Sample\nand Hold module SH_2 already ofers integrated functionality with respect\nto the statistics. With the input of N can be specifed on how many Sam￾ples (16 maximum), a average, minimum and maximum value can be for￾med. As a further feature, from N Samples smallest and largest values can\nbe ignored for statistics, which can be very useful to ignore extremes. The\ninput value DISC = 0 means use all Samples , a 1 means ignore the lowest\nvalue, 2 means ignore the lowest and highest value etc. For example, if N\n= 5 and DISC = 2, then 5 Samples are collected, the lowest and highest\nvalue are discarded and on the remaining 3 Samples the average, mini￾mum and maximum value is formed. \nThe following example illustrates how SH_2 works:", "type": "FUNCTION_BLOCK", "name": "SH_2", "input": [{"name": "in", "type": "REAL", "description": "The input value to be sampled for calculations."}, {"name": "PT", "type": "TIME", "description": "The time period for triggering the sample calculations."}, {"name": "N", "type": "INT", "description": "The number of samples to consider for the average and high/low calculations. Default value is 16."}, {"name": "disc", "type": "INT", "description": "The disc value used in determining the sampling range."}], "output": [{"name": "out", "type": "REAL", "description": "The most recent input value that has been sampled."}, {"name": "trig", "type": "BOOL", "description": "Indicates whether the sampling trigger has occurred."}, {"name": "avg", "type": "REAL", "description": "The average value computed from the sampled inputs."}, {"name": "high", "type": "REAL", "description": "The highest value among the sampled inputs."}, {"name": "low", "type": "REAL", "description": "The lowest value among the sampled inputs."}], "in/out": [], "return_value": null}
{"title": "Array Sorting Function", "description": "_ARRAY_SORT(ADR(Array), SI￾ZEOF(Array)), where array is the name of the array to be manipulated.\nADR() is a standard function which identifes the pointer to the array and\nSIZEOF() is a standard function, which determines the size of the array.\nThe function only returns TRUE. The array specifed by the pointer is mani￾pulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_ARRAY_SORT", "input": [{"name": "PT", "type": "POINTER TO ARRAY[1..32000] OF REAL", "description": "A pointer to the array of real numbers to be sorted."}, {"name": "SIZE", "type": "UINT", "description": "The size of the array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the sorting was successful or not."}}
{"title": "Signal Processing Block", "description": "SIGNAL_4 generates an output signal Q that is equivalent the one of 4 Bit￾pattern (S1.. S4). This is Bitpattern is passed in TS long steps. The inputs\nIN1..IN4 inputs are prioritized. A TRUE at IN1 overrides all other inputs, IN2\noverwrite IN3 and IN4 has the lowest priority. A detailed description of the\nfunction of SIGNAL_4 is under SIGNAL. The 4 diferent Bitpattern are in se￾tup variables are in S1.. S4 and can be adjusted by the user at any time.\nThe module has the following default by Bitpattern, but can be changed by\nthe user if required:\nS1 = 2#1111_1111\nS2 = 2#1111_0000\nS3 = 2#1010_1010\nS4 = 2#1010_0000", "type": "FUNCTION_BLOCK", "name": "SIGNAL_4", "input": [{"name": "IN1", "type": "BOOL", "description": "Boolean input representing the first signal."}, {"name": "IN2", "type": "BOOL", "description": "Boolean input representing the second signal."}, {"name": "IN3", "type": "BOOL", "description": "Boolean input representing the third signal."}, {"name": "IN4", "type": "BOOL", "description": "Boolean input representing the fourth signal."}, {"name": "TS", "type": "TIME", "description": "Timestamp indicating the time at which the signals are processed."}, {"name": "S1", "type": "BYTE", "description": "Byte pattern for the first signal, initialized to 16#FF."}, {"name": "S2", "type": "BYTE", "description": "Byte pattern for the second signal, initialized to 16#F0."}, {"name": "S3", "type": "BYTE", "description": "Byte pattern for the third signal, initialized to 16#AA."}, {"name": "S4", "type": "BYTE", "description": "Byte pattern for the fourth signal, initialized to 16#A0."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output boolean indicating whether an alarm condition is present."}], "in/out": [], "return_value": null}
{"title": "Buffer Clear Function", "description": "_BUFFER_CLEAR initialize any array of Byte with 0. When cal￾led, a pointer to the array and its size in bytes is passed to the function.\nUnder CoDeSys is the call: _BUFFER_CLEAR(ADR(Array), SIZEOF(Array)),\nwhere array is the name of the array to be manipulated. ADR() is a stan￾dard function which identifes the pointer to the array and SIZEOF() is a\nstandard function, which determines the size of the array. The function\nonly returns TRUE. The array specifed by the pointer is manipulated di￾rectly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_BUFFER_CLEAR", "input": [{"name": "PT", "type": "POINTER TO BYTE", "description": "A pointer indicating the start of the buffer to be cleared."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer in bytes that needs to be cleared."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE if the buffer was successfully cleared.", "fields": []}}
{"title": "16-Element Stack Function Block", "description": "STACK_16 is a stack (STACK) with 16 memory locations for DWORD data.\nThe two outputs EMPTY and FULL indicate when the memory is full or em￾pty. The RST input clears the entire contents of the memory. The FIFO is\nset with DIN, by setting a TRUE to the input WD, and true to the input E. A\nread command is executed by TRUE to RD and TRUE to E. Reading and\nwriting can be performed simultaneously in one cycle. The module reads\nor writes in each cycle as long as the corresponding command (RD, WD) is\nset to TRUE.", "type": "FUNCTION_BLOCK", "name": "STACK_16", "input": [{"name": "Din", "type": "DWORD", "description": "The data input to be written to the stack."}, {"name": "E", "type": "BOOL", "description": "Enable input, which must be TRUE for read or write operations to occur. Defaults to TRUE."}, {"name": "RD", "type": "BOOL", "description": "Read signal, which when TRUE and stack is not empty, triggers the reading of the top element from the stack."}, {"name": "WD", "type": "BOOL", "description": "Write signal, which when TRUE and stack is not full, triggers the writing of the input data to the stack."}, {"name": "RST", "type": "BOOL", "description": "Reset signal, when TRUE resets the stack to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output that provides the most recently read value from the stack."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates if the stack is empty. TRUE if the stack is empty."}, {"name": "FULL", "type": "BOOL", "description": "Indicates if the stack is full. TRUE if the stack is full."}], "in/out": [], "return_value": null}
{"title": "Buffer Initialization Function", "description": "_BUFFER_INIT initializes any array of Byte with value INIT.\nWhen called, a pointer to the array and its size in bytes is passed to the\nfunction. Under CoDeSys the call reads: _BUFFER_INIT(ADR(Array), SI￾ZEOF(Array), INIT), where array is the name of the array to be manipula￾ted. ADR() is a standard function which identifes the pointer to the array\nand SIZEOF() is a standard function, which determines the size of the ar￾ray. The function only returns TRUE. The array specifed by the pointer is\nmanipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_BUFFER_INIT", "input": [{"name": "PT", "type": "POINTER TO BYTE", "description": "Pointer to the buffer that needs to be initialized."}, {"name": "SIZE", "type": "UINT", "description": "The size in bytes of the buffer to be initialized."}, {"name": "INIT", "type": "BYTE", "description": "The byte value with which to initialize the buffer."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Returns TRUE upon successful initialization of the buffer."}}
{"title": "32-Element Stack Function Block", "description": "STACK_32 is a stack (STACK) with 32 memory locations for DWORD data.\nThe two outputs EMPTY and FULL indicate when the memory is full or em￾pty. The RST input clears the entire contents of the memory. The FIFO is\nset with DIN, by setting a TRUE to the input WD, and true to the input E. A\nread command is executed by TRUE to RD and TRUE to E. Reading and\nwriting can be performed simultaneously in one cycle. The module reads\nor writes in each cycle as long as the corresponding command (RD, WD) is\nset to TRUE.\n 15. Pulse Generators", "type": "FUNCTION_BLOCK", "name": "STACK_32", "input": [{"name": "Din", "type": "DWORD", "description": "The data value to be written to the stack."}, {"name": "E", "type": "BOOL", "description": "Enable signal that allows the operation of the stack. If FALSE, the stack does not process read/write requests."}, {"name": "RD", "type": "BOOL", "description": "Read request signal. When TRUE, an element will be read from the stack if it is not empty."}, {"name": "WD", "type": "BOOL", "description": "Write request signal. When TRUE, the value of Din will be written to the stack if it is not full."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal. When TRUE, it resets the stack to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data value that has been read from the stack when RD is TRUE."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates whether the stack is empty. TRUE if it is empty, FALSE otherwise."}, {"name": "FULL", "type": "BOOL", "description": "Indicates whether the stack is full. TRUE if it is full, FALSE otherwise."}], "in/out": [], "return_value": null}
{"title": "Buffer Insert Function", "description": "_BUFFER_INSERT copies a string in any array of Byte and mo￾ves the rest of the array to the length of the string. The string is stored\nfrom any position POS in the bufer. The frst element in the array has the\nposition number 0. When called, a pointer to the array and its size in bytes\nis passed to the function. Under CoDeSys the call reads:\n_BUFFER_INSERT(ADR(Array), SIZEOF(Array)), where array is the name of\nthe array to be manipulated. ADR() is a standard function which identifes\nthe pointer to the array and SIZEOF() is a standard function, which deter￾mines the size of the array. The function returns the string copied from the\nbufer as STRING. The array specifed by the pointer is manipulated direct￾ly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_BUFFER_INSERT", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The string to be inserted into the buffer."}, {"name": "POS", "type": "INT", "description": "The position in the buffer where the string will be inserted."}, {"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the buffer array where the string will be inserted."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The next position in the buffer after the inserted string."}}
{"title": "Scale Input Values by a Factor", "description": "SCALE_X4 calculates from the input values IN and the setup values IN_MIN\nand IN_MAX internal values, then add all the internal values, multiplies the\nsum by K and add the ofset O. An input value IN = FALSE means IN_MIN is\nincluded, IN = TRUE means IN_MAX is considered. The sum is multiplied\nby K and ofset O is added. K is not connected then the frst multiplier\nSCALE_X4 can be used, for example, to calculate total air quantities in\nventilation systems, or wherever controlled faps are used and the resul￾ting total needs to be calculated. By the input ofset, SCALE_X2 can easily\nbe cascaded with other SCALE modules. Further explanation and examp￾les, see SCAE_X2.", "type": "FUNCTION", "name": "SCALE_X4", "input": [{"name": "IN1", "type": "BOOL", "description": "First Boolean input to select between IN1_MIN and IN1_MAX."}, {"name": "IN2", "type": "BOOL", "description": "Second Boolean input to select between IN2_MIN and IN2_MAX."}, {"name": "IN3", "type": "BOOL", "description": "Third Boolean input to select between IN3_MIN and IN3_MAX."}, {"name": "IN4", "type": "BOOL", "description": "Fourth Boolean input to select between IN4_MIN and IN4_MAX."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the sum of inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the scaled sum."}, {"name": "IN1_MIN", "type": "REAL", "description": "Minimum value for IN1 when the corresponding input is true."}, {"name": "IN1_MAX", "type": "REAL", "description": "Maximum value for IN1 when the corresponding input is false."}, {"name": "IN2_MIN", "type": "REAL", "description": "Minimum value for IN2 when the corresponding input is true."}, {"name": "IN2_MAX", "type": "REAL", "description": "Maximum value for IN2 when the corresponding input is false."}, {"name": "IN3_MIN", "type": "REAL", "description": "Minimum value for IN3 when the corresponding input is true."}, {"name": "IN3_MAX", "type": "REAL", "description": "Maximum value for IN3 when the corresponding input is false."}, {"name": "IN4_MIN", "type": "REAL", "description": "Minimum value for IN4 when the corresponding input is true."}, {"name": "IN4_MAX", "type": "REAL", "description": "Maximum value for IN4 when the corresponding input is false."}], "output": [{"name": "SCALE_X4", "type": "REAL", "description": "The result of the scaled sum of the selected input values."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final computed value after scaling the sum and adding the offset."}}
{"title": "Buffer Uppercase Conversion", "description": "_BUFFER_UPPERCASE interprets each byte in the bufer as\nASCII characters and converts it to uppercase . When called, a pointer to\nthe array and its size in bytes is passed to the function. Under CoDeSys\nthe call reads: _BUFFER_INIT(ADR(Array), SIZEOF(Array), INIT), where array\nis the name of the array to be manipulated. ADR is a standard function,\nwhich identifes the Pointer the array and SIZEOF is a standard function,\nwhich determines the size of the array. The function only returns TRUE. By\nthe Pointer given array is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_BUFFER_UPPERCASE", "input": [{"name": "PT", "type": "POINTER TO ARRAY [0..32000] OF BYTE", "description": "A pointer to an array of bytes that will be converted to uppercase."}, {"name": "SIZE", "type": "INT", "description": "The number of bytes in the array to be converted."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the uppercase conversion was successful.", "fields": []}}
{"title": "TON Timer Function Block", "description": "TOF_1 extended an input pulse at IN by the time PT. TOF_1 has the same\nfunctionality as TOF from the standard LIB, but with an additional asyn￾chronous reset input.", "type": "FUNCTION_BLOCK", "name": "TOF_1", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal to start the timer."}, {"name": "PT", "type": "TIME", "description": "Preset time duration for the timer."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the output."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the state of the timer."}], "in/out": [], "return_value": null}
{"title": "Ramp Control Block", "description": "_RMP_B Is an 8-bit ramp generator. The ramp is generated in an externally\ndeclared variable. The ramp is rising when DIR = TRUE and falling if DIR =\nFALSE. Reaching a fnal value of the ramp, the generator remains at this\nvalue. With the input E the ramp can be stopped at any time, when E =\nTRUE the ramp runs. The input TR shows the time which is needed to cy￾cle through 0-255 or the other way around.", "type": "FUNCTION_BLOCK", "name": "_RMP_B", "input": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of the ramp. 'true' means ramping up."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp control. Defaults to TRUE."}, {"name": "TR", "type": "TIME", "description": "Timing reference to control the ramping duration."}], "output": [{"name": "RMP", "type": "BYTE", "description": "Output value representing the current state of the ramp."}], "in/out": [], "return_value": null}
{"title": "STAIR2 Function Block", "description": "STAIR2 follows the input signal X with a step functi￾on. The height of the steps is given by D. If D = 0, then the output directly\nfollows the input signal. The signal follows the steps but with a hysteresis\nof D so that a noisy input signal can not trigger jumps between step va￾lues. STAIR2 is also suitable as an input flter. \nThe following example illustrates the operation of STAIR2:", "type": "FUNCTION_BLOCK", "name": "STAIR2", "input": [{"name": "X", "type": "REAL", "description": "The input real value that needs to be rounded."}, {"name": "D", "type": "REAL", "description": "The step size for the rounding operation. Must be a positive real number to perform the stair-step calculation."}], "output": [{"name": "Y", "type": "REAL", "description": "The output real value after applying the stair-step rounding logic based on inputs X and D."}], "in/out": [], "return_value": null}
{"title": "RMP Next Function Block", "description": "_RMP_NEXT follows at the output OUT to the input signal IN with the in TR\nand TF defned rising or falling fanks. Unlike RMP_SOFT the fank of\nRMP_NEXT runs until it underrun or overrun the endpoint and is therefore\nsuitable for control tasks. Changing the value of IN so a rising ramp with\nTR or a falling fank with TF starts at the output OUT until the value of OUT\nhas overrun or underrun the IN. The output then remains at this value. The\noutputs of UP and DN shows just whether a rising or a falling edge are\ncreated. The output DIR indicates the direction of change at IN, if IN is not\nchanged, the output remains at the last state. The lock time TL determi￾nes the delay time between the direction reversal.\nThe following graph shows the waveform at OUT when changing the input\nsignal at IN:", "type": "FUNCTION_BLOCK", "name": "_RMP_NEXT", "input": [{"name": "E", "type": "BOOL", "description": "Enable/disable input, with initial value set to TRUE."}, {"name": "IN", "type": "BYTE", "description": "Current input value for the ramp control."}, {"name": "TR", "type": "TIME", "description": "Time duration for ramping state when moving upwards."}, {"name": "TF", "type": "TIME", "description": "Time duration for ramping state when moving downwards."}, {"name": "TL", "type": "TIME", "description": "Lock time duration for the ramp."}], "output": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of ramping; upwards if TRUE."}, {"name": "UP", "type": "BOOL", "description": "Output indicating if the ramp is moving upwards."}, {"name": "DN", "type": "BOOL", "description": "Output indicating if the ramp is moving downwards."}], "in/out": [{"name": "OUT", "type": "BYTE", "description": "Current output value that can be modified by the function block."}], "return_value": null}
{"title": "TP_1 Timer Function Block", "description": "TP_1 is an edge-triggered pulse generator which generates a rising edge\nat IN an output pulse at Q with the duration of PT. During the output pulse\nan another rising edge to IN is created, the output pulse will be extended\nso that after the last rising edge of output for the duration of PT remains\nTRUE. The module can be reset at any time with a TRUE at the RST input.\nTiming of TP_1:", "type": "FUNCTION_BLOCK", "name": "TP_1", "input": [{"name": "IN", "type": "BOOL", "description": "Boolean input that starts the timing operation when set to TRUE."}, {"name": "PT", "type": "TIME", "description": "Duration for which the output Q remains TRUE after IN is activated."}, {"name": "RST", "type": "BOOL", "description": "Boolean input that resets the output Q to FALSE when set to TRUE."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output that indicates the status of the timer; TRUE when timing is active, otherwise FALSE."}], "in/out": [], "return_value": null}
{"title": "Rate of Motion Profile (RMP)", "description": "_RMP_W Is an 16-bit ramp generator. The ramp is generated in an external￾ly declared variable. The ramp is rising when DIR = TRUE and falling if DIR\n= FALSE. Reaching a fnal value of the ramp, the generator remains at this\nvalue. With the input E the ramp can be stopped at any time, when E =\nTRUE the ramp runs. The input TR shows the time which is needed to cy￾cle through 0-65535 or the other way around.", "type": "FUNCTION_BLOCK", "name": "_RMP_W", "input": [{"name": "DIR", "type": "BOOL", "description": "Indicates the direction of the ramp. True for one direction and false for the opposite."}, {"name": "E", "type": "BOOL", "description": "Enable signal for the ramp calculation. Default value is TRUE."}, {"name": "TR", "type": "TIME", "description": "Time interval used for calculating the ramp step."}], "output": [{"name": "RMP", "type": "WORD", "description": "The calculated ramp value constrained between 0 and 65535."}], "in/out": [], "return_value": null}
{"title": "Scale Input Values with Constants", "description": "SCALE_X8 calculates from the input values IN and the setup values IN_MIN\nand IN_MAX internal values, then add all the internal values, multiplies the\nsum by K and add the ofset O. An input value IN = FALSE means IN_MIN is\nincluded, IN = TRUE means IN_MAX is considered. The sum is multiplied\nby K and ofset O is added. K is not connected then the frst multiplier\nSCALE_X8 can be used, for example, to calculate total air quantities in\nventilation systems, or wherever controlled faps are used and the resul￾ting total needs to be calculated. By the input ofset, SCALE_X2 can easily\nbe cascaded with other SCALE modules. Further explanation and examp￾les, see SCAE_X2.", "type": "FUNCTION", "name": "SCALE_X8", "input": [{"name": "in1", "type": "BOOL", "description": "The first boolean input that determines whether the first minimum or maximum value is considered."}, {"name": "in2", "type": "BOOL", "description": "The second boolean input that determines whether the second minimum or maximum value is considered."}, {"name": "in3", "type": "BOOL", "description": "The third boolean input that determines whether the third minimum or maximum value is considered."}, {"name": "in4", "type": "BOOL", "description": "The fourth boolean input that determines whether the fourth minimum or maximum value is considered."}, {"name": "in5", "type": "BOOL", "description": "The fifth boolean input that determines whether the fifth minimum or maximum value is considered."}, {"name": "in6", "type": "BOOL", "description": "The sixth boolean input that determines whether the sixth minimum or maximum value is considered."}, {"name": "in7", "type": "BOOL", "description": "The seventh boolean input that determines whether the seventh minimum or maximum value is considered."}, {"name": "in8", "type": "BOOL", "description": "The eighth boolean input that determines whether the eighth minimum or maximum value is considered."}, {"name": "K", "type": "REAL", "description": "The scaling factor to be applied to the sum of the selected minimum and maximum values."}, {"name": "O", "type": "REAL", "description": "The offset to be added to the scaled sum."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input, default is 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input, default is 1000.0."}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input, default is 1000.0."}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input, default is 1000.0."}, {"name": "in5_min", "type": "REAL", "description": "Minimum value for the fifth input."}, {"name": "in5_max", "type": "REAL", "description": "Maximum value for the fifth input, default is 1000.0."}, {"name": "in6_min", "type": "REAL", "description": "Minimum value for the sixth input."}, {"name": "in6_max", "type": "REAL", "description": "Maximum value for the sixth input, default is 1000.0."}, {"name": "in7_min", "type": "REAL", "description": "Minimum value for the seventh input."}, {"name": "in7_max", "type": "REAL", "description": "Maximum value for the seventh input, default is 1000.0."}, {"name": "in8_min", "type": "REAL", "description": "Minimum value for the eighth input."}, {"name": "in8_max", "type": "REAL", "description": "Maximum value for the eighth input, default is 1000.0."}], "output": [{"name": "SCALE_X8", "type": "REAL", "description": "The calculated scaled and offset sum of the selected input values."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the scaling operation based on the input parameters."}}
{"title": "String to Buffer Conversion", "description": "_STRING_TO_BUFFER copies a string in any array of Byte .\nThe string is stored from any position POS in the bufer. The frst element\nin the array has the position number 0. When called, a pointer to the array\nand its size in bytes is passed to the function. Under CoDeSys the call\nreads: _STRING_TO_BUFFER(STR, POS, ADR(Array), SIZEOF(Array)), where\narray is the name of the array to be manipulated. ADR() is a standard\nfunction which identifes the pointer to the array and SIZEOF() is a stan￾dard function, which determines the size of the array. The function returns\nthe string copied from the bufer as STRING. The array specifed by the\npointer is manipulated directly in memory. \nThis type of processing arrays is very efcient because no additional me￾mory is required and no surrender values must be copied.", "type": "FUNCTION", "name": "_STRING_TO_BUFFER", "input": [{"name": "STR", "type": "STRING[STRING_LENGTH]", "description": "The input string to be converted to a byte buffer."}, {"name": "POS", "type": "INT", "description": "The starting position in the byte buffer to begin writing the bytes."}, {"name": "PT", "type": "POINTER TO ARRAY[0..32767] OF BYTE", "description": "A pointer to the byte array where the converted bytes are stored."}, {"name": "SIZE", "type": "UINT", "description": "The size of the buffer, which defines the maximum number of bytes that can be written."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The position in the byte buffer after the last byte written from the input string."}}
{"title": "Alarm Monitoring Block", "description": "ALARM_2 examine whether X exceeds up the limits HI_1 or HI_2 and relies\non the outputs Q1_HI or Q2_HI TRUE. If the limits LO_2 or LO_1 are below,\nit set Q1_LO or Q2_LO to TRUE. The outputs will remain TRUE as the corre￾sponding limit over-or under-rature. To prevent a futter of the outputs al￾ternatively a Hysteresis HYS may be set. HYS is set to a value > 0, then\nthe corresponding output is set only when the limit is exceeded or below\nby more than HYS/2. Accordingly, the input X is the limit by more than\nHYS/2 on or before exceeding the corresponding outputs are deleted. \nALARM_2 for example, with HI_1 and LO_1 can control the level of a liquid\ncontainer and with HI_2 and LO_2 trigger an alarm when a critical level is\nexceeded or below.", "type": "FUNCTION_BLOCK", "name": "ALARM_2", "input": [{"name": "X", "type": "REAL", "description": "The input value that is being monitored."}, {"name": "LO_1", "type": "REAL", "description": "The lower threshold for the first alarm."}, {"name": "HI_1", "type": "REAL", "description": "The upper threshold for the first alarm."}, {"name": "LO_2", "type": "REAL", "description": "The lower threshold for the second alarm."}, {"name": "HI_2", "type": "REAL", "description": "The upper threshold for the second alarm."}, {"name": "HYS", "type": "REAL", "description": "The hysteresis value applied to determine alarm state changes."}], "output": [{"name": "Q1_LO", "type": "BOOL", "description": "Output indicating if the first low alarm is triggered."}, {"name": "Q1_HI", "type": "BOOL", "description": "Output indicating if the first high alarm is triggered."}, {"name": "Q2_LO", "type": "BOOL", "description": "Output indicating if the second low alarm is triggered."}, {"name": "Q2_HI", "type": "BOOL", "description": "Output indicating if the second high alarm is triggered."}], "in/out": [], "return_value": null}
{"title": "AOUT1 Function Specification", "description": "AOUT1 generates from the REAL input value IN a digital output value for\nD/A converter or other modules of digital data. Using Setup variables, the\ndigital output value can be adapted to diferent needs. The IN input value\nis converted using the information in LOW and HIGH and with the length\nspecifed in BIT_0 and BIT_N, and made available at the output. BIT_0 spe￾cifes the position of the lowest signifcant data bits (Bit0) in the output\ndata and BIT_N specifes the position of the most signifcant data bits in\nthe output data. The length of the data area is automatically calculated by\nBIT_N - BIT_0 + 1. When the position of a sign bit is specifed with SIGN\nthe sign of the input value is copied to the specifed position of SIGN in the\noutput data.", "type": "FUNCTION", "name": "AOUT1", "input": [{"name": "in", "type": "REAL", "description": "The input real value that will be processed to compute the output."}, {"name": "Bit_0", "type": "INT", "description": "The starting bit position for the output value. This is a constant input."}, {"name": "Bit_N", "type": "INT", "description": "The ending bit position for the output value, defaulting to 31."}, {"name": "sign", "type": "INT", "description": "The sign bit indicator, defaulting to 255."}, {"name": "low", "type": "REAL", "description": "The minimum value that input is limited to."}, {"name": "high", "type": "REAL", "description": "The maximum value available, defaulting to 10.0."}], "output": [{"name": "AOUT1", "type": "DWORD", "description": "The calculated DWORD output value based on the processed input."}], "in/out": [], "return_value": {"type": "DWORD", "description": "Returns the calculated DWORD output value."}}
{"title": "Calculate the Arctangent of Two Variables", "description": "ATAN2 calculates the angle of coordinates (Y, X) in RAD. The result is bet￾ween - and +", "type": "FUNCTION", "name": "ATAN2", "input": [{"name": "Y", "type": "REAL", "description": "The Y-coordinate used to calculate the arctangent."}, {"name": "X", "type": "REAL", "description": "The X-coordinate used to calculate the arctangent."}], "output": [{"name": "ATAN2", "type": "REAL", "description": "The resulting angle in radians based on the input coordinates Y and X."}], "in/out": [], "return_value": {"type": "REAL", "description": "The angle in radians computed from the given Y and X coordinates."}}
{"title": "Bit Load Function", "description": "BIT_LOAD_B2 can set or delete multiple bits in a byte at the same time.\nThe position is indicated with 0 for Bit0 and 7 for Bit7. N specifes how\nmany bits from the specifed location can be changed. If N = 0, no bits are\nchanged. If the P and N is specifed that the bits to be written goes over\nthe highest bit (bit 7), so it starts again at bit 0.\nBIT_LOAD_B2(2#1111_0000, TRUE, 1, 2) = 2#1111_0110\nBIT_LOAD_B2(2#1111_1111, FALSE, 7, 2) = 2#0111_1110", "type": "FUNCTION", "name": "BIT_LOAD_B2", "input": [{"name": "I", "type": "BYTE", "description": "The BYTE value to manipulate."}, {"name": "D", "type": "BOOL", "description": "Condition to determine which operation to perform."}, {"name": "P", "type": "INT", "description": "The number of bit positions to shift in the operations."}, {"name": "N", "type": "INT", "description": "The number of bits to be loaded or shifted."}], "output": [{"name": "BIT_LOAD_B2", "type": "BYTE", "description": "The resulting BYTE value after performing the bitwise operations."}], "in/out": [], "return_value": {"type": "BYTE", "description": "Computed BYTE value after bit manipulation based on inputs.", "fields": []}}
{"title": "Bitwise Load with Rotation", "description": "BIT_LOAD_DW2 can set or delete multiple bits in a byte at the same time.\nThe position is indicated with 0 for Bit0 and 31 for Bit 31. N specifes how\nmany bits from the specifed location can be changed. If N = 0, no bits are\nchanged. If P and N is specifed that the bits to be written goes over the\nhighest bit (bit 31), so it starts again at bit 0.", "type": "FUNCTION", "name": "BIT_LOAD_DW2", "input": [{"name": "I", "type": "DWORD", "description": "The input DWORD value to be manipulated."}, {"name": "D", "type": "BOOL", "description": "A boolean flag to determine the operation mode: TRUE for rotation left, FALSE for mask application."}, {"name": "P", "type": "INT", "description": "The number of bit positions to rotate or shift."}, {"name": "N", "type": "INT", "description": "The number of bits to be shifted left or right from the maximum DWORD value."}], "output": [{"name": "BIT_LOAD_DW2", "type": "DWORD", "description": "The resulting DWORD value after the bitwise load operation."}], "in/out": [], "return_value": {"type": "DWORD", "description": "The value obtained from the bit manipulation operations, as specified by the input parameters."}}
{"title": "Bit Load Function", "description": "BIT_LOAD_W2 can set or delete multiple bits in a WORD at the same time.\nThe position is indicated with 0 for Bit 0 and 15 for Bit 15. N specifes how\nmany bits from the specifed location can be changed. If N = 0, no bits are\nchanged. If P and N is specifed that the bits to be written goes over the\nhighest bit (bit 15), so it starts again at bit 0.", "type": "FUNCTION", "name": "BIT_LOAD_W2", "input": [{"name": "I", "type": "WORD", "description": "The input word to be manipulated."}, {"name": "D", "type": "BOOL", "description": "Control signal that determines the bit loading operation; TRUE for right operations, FALSE for left operations."}, {"name": "P", "type": "INT", "description": "The number of positions to shift or rotate the word."}, {"name": "N", "type": "INT", "description": "Specifies the number of positions for loading bits."}], "output": [{"name": "BIT_LOAD_W2", "type": "WORD", "description": "The result of the bit manipulation operation on the input word."}], "in/out": [], "return_value": {"type": "WORD", "description": "The manipulated word after applying the specified bit operations."}}
{"title": "Complex Arc Cosine Function", "description": "CACOS calculates the arc cosine of a complex number\nThe range of values of the result is between [0, π] for the real part and [-\n∞, +∞] for the imaginary part.", "type": "FUNCTION", "name": "CACOS", "input": [{"name": "X", "type": "COMPLEX", "description": "The input complex number for which the arc cosine is to be calculated."}], "output": [{"name": "CACOS", "type": "COMPLEX", "description": "The arc cosine of the input complex number, represented as a complex number."}], "in/out": [], "return_value": {"type": "COMPLEX", "description": "The computed arc cosine value of the input complex number as a complex number.", "fields": [{"name": "re", "type": "REAL", "description": "The real part of the calculated arc cosine."}, {"name": "im", "type": "REAL", "description": "The imaginary part of the calculated arc cosine."}]}}
{"title": "Capitalize String", "description": "CAPITALIZE converts all frst letter on STR in capital letters . During conver￾sion, the Global Setup EXTENDED_ASCII constant is considered. If EXTEN￾DED_ASCII = TRUE, all characters of the extended ASCII character set to\nbe considered in accordance with ISO 8859-1.\nCapitalize('peter pan') = 'Peter Pan'", "type": "FUNCTION", "name": "CAPITALIZE", "input": [{"name": "str", "type": "STRING(STRING_LENGTH)", "description": "The input string that needs to be capitalized."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The capitalized version of the input string."}}
{"title": "Ceil2 Function", "description": "CEIL2 greater or equal to\nX.", "type": "FUNCTION", "name": "CEIL2", "input": [{"name": "X", "type": "REAL", "description": "The real number input for which the ceiling needs to be computed."}], "output": [{"name": "CEIL2", "type": "DINT", "description": "The computed ceiling value of the input real number, represented as an integer."}], "in/out": [], "return_value": {"type": "DINT", "description": "Returns the ceiling of the input real number as an integer."}}
{"title": "Control Set 1 Configuration", "description": "CONTROL_SET1 calculate setting parameters for P, PI and PID controller\naccording to the Ziegler-Nichols method. Here it indicates the critical gain\nKT, and the period of the critical vibration TT. The parameters are determi￾ned by the controller operated as a P-controller and the gain is ramped up\nwhile committed to a continuous oscillation with a constant amplitude.\nThe corresponding values of KT and TT are then determined. Disadvantage\nof this method is not any real control loop can be moved to the stability li￾mit, and so the process very long time for slow control loops such as room\narrangements.\nController\nType\nPI PID KP TN TV\nP Controller 0 0 P_K * KT\nPI Control 1 0 PI_K * KT PI_TN * TT\nPID Control￾ler \n0 1 PID_K * KT PID_TN * TT PID_TV * TT\nThe default values of the tuning rules are defned in Setup variables and\ncan be changed by the user. The following table shows the default values\nController PI PID KP TN TV\nType\nP Controller 0 0 P_K = 0.5\nPI Control 1 0 PI_K = 0.45 PI_TN = 0.83\nPID Control￾ler \n0 1 PID_K = 0.6 PID_TN = 0.5 PID_TV = 0.125", "type": "FUNCTION_BLOCK", "name": "CONTROL_SET1", "input": [{"name": "Kt", "type": "REAL", "description": "The gain factor that affects the control outputs."}, {"name": "Tt", "type": "REAL", "description": "The time constant used for calculating integral and derivative parameters."}, {"name": "PI", "type": "BOOL", "description": "Boolean flag to indicate if a PI controller is used."}, {"name": "PID", "type": "BOOL", "description": "Boolean flag to indicate if a PID controller is used."}, {"name": "P_K", "type": "REAL", "description": "Proportional gain for the basic control (default = 0.5)."}, {"name": "PI_K", "type": "REAL", "description": "Proportional gain for the PI controller (default = 0.45)."}, {"name": "PI_TN", "type": "REAL", "description": "Time constant for the integral part of the PI controller (default = 0.83)."}, {"name": "PID_K", "type": "REAL", "description": "Proportional gain for the PID controller (default = 0.6)."}, {"name": "PID_TN", "type": "REAL", "description": "Time constant for the integral part of the PID controller (default = 0.5)."}, {"name": "PID_TV", "type": "REAL", "description": "Time constant for the derivative part of the PID controller (default = 0.125)."}], "output": [{"name": "KP", "type": "REAL", "description": "Calculated proportional gain based on the selected controller."}, {"name": "TN", "type": "REAL", "description": "Calculated time constant for the integral component."}, {"name": "TV", "type": "REAL", "description": "Calculated time constant for the derivative component."}, {"name": "KI", "type": "REAL", "description": "Calculated integral gain based on KP and TN."}, {"name": "KD", "type": "REAL", "description": "Calculated derivative gain based on KP and TV."}], "in/out": [], "return_value": null}
{"title": "Control Set Parameters for PID and PI Controllers", "description": "CONTROL_SET2 calculated setting parameters for P, PI and PID controller\naccording to the Ziegler-Nichols method. Here, the delay time TU and\ncompensatory time TG is given. The parameters are determined by the\nstep response of the controlled system is measured. TU is the time after\nwhich the output of the system 5% of its maximum value reached added.\nTG is the time at the turn of the tangent of the controlled system. KS actu￾al value is the controlled / manipulated variable change.\nThe following chart shows the determination of TU and TG with the infec￾tion tangent method:\nController\nType\nPI PID KP TN TV\nP Controller 0 0 P_K * TG / TU / KS\nPI Control 1 0 PI_K * TG / TU / KS PI_TN * TU\nPID Control￾ler \n0 1 PID_K * TG / TU / KS PID_TN * TU PID_TV * TU\nThe default values of the tuning rules are defned in Confg variables and\ncan be changed by the user. The following table shows the Default Values:\nController\nType\nPI PID KP TN TV\nP Controller 0 0 P_K = 1.0\nPI Control 1 0 PI_K = 0.9 PI_TN = 3.33\nPID Control￾ler \n0 1 PID_K = 1.2 PID_TN = 2 PID_TV = 0.5", "type": "FUNCTION_BLOCK", "name": "CONTROL_SET2", "input": [{"name": "KS", "type": "REAL", "description": "Gain factor for the system."}, {"name": "TU", "type": "REAL", "description": "Time constant for the system."}, {"name": "TG", "type": "REAL", "description": "Transport delay time."}, {"name": "PI", "type": "BOOL", "description": "Flag to indicate if PI control is to be used."}, {"name": "PID", "type": "BOOL", "description": "Flag to indicate if PID control is to be used."}, {"name": "P_K", "type": "REAL", "description": "Proportional gain for the PI controller, default is 1.0."}, {"name": "PI_K", "type": "REAL", "description": "Proportional gain for the PID controller, default is 0.9."}, {"name": "PI_TN", "type": "REAL", "description": "Integral time for the PI controller, default is 3.33."}, {"name": "PID_K", "type": "REAL", "description": "Proportional gain for the PI controller, default is 1.2."}, {"name": "PID_TN", "type": "REAL", "description": "Integral time for the PID controller, default is 2.0."}, {"name": "PID_TV", "type": "REAL", "description": "Derivative time for the PID controller, default is 0.5."}], "output": [{"name": "KP", "type": "REAL", "description": "Calculated proportional gain."}, {"name": "TN", "type": "REAL", "description": "Calculated integral time."}, {"name": "TV", "type": "REAL", "description": "Calculated derivative time."}, {"name": "KI", "type": "REAL", "description": "Calculated integral gain."}, {"name": "KD", "type": "REAL", "description": "Calculated derivative gain."}], "in/out": [], "return_value": null}
{"title": "Count Substring Occurrences", "description": "AGDF calculates the inverse Gundermann function.\nThe calculation is done using the formula:", "type": "FUNCTION", "name": "COUNT_SUBSTRING", "input": [{"name": "SEARCH", "type": "STRING", "description": "The substring to search for within the main string."}, {"name": "STR", "type": "STRING", "description": "The main string in which substring occurrences will be counted."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The total number of occurrences of the substring within the main string."}}
{"title": "Complex Sine Function", "description": "CSIN calculates the sine of a complex number", "type": "FUNCTION", "name": "CSIN", "input": [{"name": "X", "type": "complex", "description": "A complex number input for which the sine is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "complex", "description": "The sine of the complex input X, returned as a complex number.", "fields": [{"name": "re", "type": "real", "description": "The real part of the sine result."}, {"name": "im", "type": "real", "description": "The imaginary part of the sine result."}]}}
{"title": "CYCLE_4 Function Block", "description": "CYCLE_4 generates theStates 0..3 if E = TRUE . The duration of each State\ncan be determined by the time constraints T0..T3. The input SL starts\nwhen TRUE from a predetermined STATE SX. The input E has the internal\nDefault = TRUE, so that it can also be left open. After a rising edge on E\nthe module always starts with STATE = 0, and if E = FALSE, the output\nSTATE remains at 0. With the input of S0 the cyclic mode is turned on, if S0\n= FALSE the module stops at State = 3, if S0 = TRUE, the device begins to\nState 3 again with State 0.", "type": "FUNCTION_BLOCK", "name": "CYCLE_4", "input": [{"name": "E", "type": "BOOL", "description": "Enable flag that allows the state machine to operate."}, {"name": "T0", "type": "TIME", "description": "Duration for waiting in state 0."}, {"name": "T1", "type": "TIME", "description": "Duration for waiting in state 1."}, {"name": "T2", "type": "TIME", "description": "Duration for waiting in state 2."}, {"name": "T3", "type": "TIME", "description": "Duration for waiting in state 3."}, {"name": "S0", "type": "BOOL", "description": "Control signal to reset the state machine to state 0."}, {"name": "SX", "type": "INT", "description": "Input for directly controlling the state when greater than 0."}, {"name": "SL", "type": "BOOL", "description": "Status flag to indicate that the state should be forced based on SX."}], "output": [{"name": "STATE", "type": "INT", "description": "Current state of the state machine."}], "in/out": [], "return_value": null}
{"title": "DCF77 Time Receiver Function Block", "description": "DCF77 receiver)\nSET: BOOL (Asynchronous SET input)\nSDT: DT (initial value for RTC)\nDSI: BOOL (DST in)\nOutput TP: BOOL ( pulse for setting downstream clock)\nDS: BOOL (TRUE if daylight saving time is)\nWDAY : INT (weekday) \nERROR: BOOL (TRUE, if REC supplies no signal)\nRTC: DT (Synchronized Universal Time UTC)\nRTC1: DT (Synchronized local time)\nMSEC: INT (milliseconds from RTC and RTC1)\nSYNC: BOOL (TRUE, when RTC is in sync with DCF)\nSetup SYNC_TIMEOUT: TIME ( Default = T#2m) \nTime_ofset: INT (time ofset for RTC1, Default = 1 hour) \nDST_EN: BOOL (daylight saving time for RTC1, Default = TRUE) \nThe function DCF77 decodes the serial signal of DCF77 receiver and con￾trols 2 internal clock RTC and RTC1, or via output TP external (down￾stream) watches. An output DS is TRUE if daylight saving time is. The out￾put WDAY is the weekday (1 = Monday). The output ERROR is TRUE if no\nvalid signal is received. The internal clocks continue to run anyway, also if\nthey already synchronized. A Another output SYNC indicates that in inter￾nal clocks are synchronized with DCF77 and gets FALSE if they were syn￾chronized by not less than the setup variable SYNC_TIMEOUT specifed\ntime. The internal clocks runs always with the accuracy of the SPS Timers\nfurther. By double-clicking the icon in the CFC editor other setup variables\nare defned. Here SYNC_TIMEOUT sets, after which time the output signal\nSYNC gets FALSE, if the internal clock RTC and RTC1 were not synchronized\nby DCF77. The variable time_ofset determines the time diference bet￾ween local time (RTC1) from the UTC. Default is 1 hour for CET (Central Eu￾ropean Time). The variable TIME_OFFSET is of type INTEGER thus also time\nzones with negative ofset (west of Greenwich) are possible. \nBy DST_EN is determined whether RTC1 should automatically switch to\nsummer time or not. The output MSEC extends the by RTC to RTC1 provi￾ded time to milliseconds. The SDT is used to put the internal clock RTC and\nRTC1 to a defned initial value, so that immediately after the start a valid\ntime is available. During the frst cycle date and time is copied from SDT\nto RTC and runs from the frst cycle. If necessary, the internal CLOCK can\nbe set always new with the asynchronous set input SET. However, it is\noverwritten again by a valid DCF77 signal after a cycle, unless the SET in￾put remains TRUE. If a valid DCF77 signal was decoded, RTC and RTC1 is\nsynchronized to the corresponding precise DCF77 time. At the input of SDT\nfor example, the time from the information contained in the PLC Hardware\nClock can be used. It must be ensured, that the DCF77 is called only if a\nvalid time is already present in SDT, the DCF77 reads this value only once\nin the frst cycle, or at any time when the SET input is set to TRUE.", "type": "FUNCTION_BLOCK", "name": "DCF77", "input": [{"name": "REC", "type": "BOOL", "description": "Reception signal indicating whether a DCF77 signal is currently being received."}, {"name": "SET", "type": "BOOL", "description": "Trigger signal to set the RTC with the received time information."}, {"name": "SDT", "type": "DT", "description": "Initial date and time to set the RTC on first power up."}, {"name": "DSI", "type": "BOOL", "description": "Daylight Saving Time indication to control DST adjustments."}, {"name": "SYNC_TIMEOUT", "type": "TIME", "description": "Timeout duration to determine the validity of the synchronization signal.", "fields": []}, {"name": "TIME_OFFSET", "type": "INT", "description": "Offset for time zone adjustments relative to UTC.", "fields": []}, {"name": "DST_EN", "type": "BOOL", "description": "Enable signal for daylight saving time adjustments.", "fields": []}], "output": [{"name": "TP", "type": "BOOL", "description": "Trigger output that indicates whether the time processing is active."}, {"name": "DS", "type": "BOOL", "description": "Output signal indicating whether daylight saving time is currently active."}, {"name": "WDAY", "type": "INT", "description": "Output representing the day of the week as an integer."}, {"name": "ERROR", "type": "BOOL", "description": "Error flag indicating if an error occurred during the decoding process."}, {"name": "RTC", "type": "DT", "description": "Real-time clock output that reflects the current date and time based on the DCF77 signal."}, {"name": "RTC1", "type": "DT", "description": "Secondary RTC output, adjusted based on time zone and daylight saving time settings."}, {"name": "MSEC", "type": "INT", "description": "Milliseconds elapsed since the last synchronization."}, {"name": "SYNC", "type": "BOOL", "description": "Signal indicating successful synchronization with the DCF77 signal."}], "in/out": [], "return_value": {}}
{"title": "Dead Zone Function Block", "description": "DEAD_ZONE2 is a linear transfer function with dead zone and hysteresis.\nThe output equals the input signal when the absolute value of the input is\ngreater than L.\nDEAD_ZONE2 = X if ABS (X) > L\nDEAD_ZONE2 = + / - L if ABS (X) <= L", "type": "FUNCTION_BLOCK", "name": "DEAD_ZONE2", "input": [{"name": "X", "type": "REAL", "description": "The input value that is processed by the dead zone logic."}, {"name": "L", "type": "REAL", "description": "The dead zone threshold value. If the absolute value of 'X' is less than or equal to 'L', 'Y' will be set to either 'L' or '-L'."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after applying the dead zone logic based on the input 'X' and threshold 'L'."}], "in/out": [], "return_value": {}}
{"title": "Decrement Function", "description": "DEC1 counts the variable X from N-1 to 0 and then starts again at N-1, so\nthat exactly N diferent starting values are generated at N-1 through 0.", "type": "FUNCTION", "name": "DEC1", "input": [{"name": "X", "type": "INT", "description": "An integer input value that will be decremented."}, {"name": "N", "type": "INT", "description": "An integer input value used for calculation when X is zero."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The decremented integer value based on the conditions provided. Returns N - 1 if X is 0, otherwise returns X - 1."}}
{"title": "Boolean Logic Function Block", "description": "DEC_2 is a 2-bit decoder module. If A=0, the input D is passed to output\nQ0. If A=1, so D is set to Q1. In other words, Q0=1 if D=1 and A=0\nLogical connection: Q0 = D & /A; Q1 = D & A", "type": "FUNCTION_BLOCK", "name": "DEC_2", "input": [{"name": "D", "type": "BOOL", "description": "Boolean input that influences both outputs."}, {"name": "A", "type": "BOOL", "description": "Boolean input that determines the value of Q1 along with D."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Boolean output representing the result of D AND NOT A."}, {"name": "Q1", "type": "BOOL", "description": "Boolean output representing the result of D AND A."}], "in/out": [], "return_value": null}
{"title": "4-Bit Digital Decoder", "description": "DEC_4 is a 4-bit decoder module. If A0=0 and A1=0, the input D is passed\nto output Q0. If A0=1 and A1=1, the input D is passed to output Q3. In\nother words, Q0=1, if D=1 and A0=0 and A1=0.\nLogical connection: Q0 = D & / A0 & / A1\nQ1 = D & A0 & /A1\nQ2 = D & /A0 & A1\nQ3 = D & A0 & A1", "type": "FUNCTION_BLOCK", "name": "DEC_4", "input": [{"name": "D", "type": "BOOL", "description": "Data input that controls the activation of the outputs."}, {"name": "A0", "type": "BOOL", "description": "Address input bit 0."}, {"name": "A1", "type": "BOOL", "description": "Address input bit 1."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal 0, active when D is TRUE, A0 is FALSE, and A1 is FALSE."}, {"name": "Q1", "type": "BOOL", "description": "Output signal 1, active when D is TRUE, A0 is TRUE, and A1 is FALSE."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2, active when D is TRUE, A0 is FALSE, and A1 is TRUE."}, {"name": "Q3", "type": "BOOL", "description": "Output signal 3, active when D is TRUE, A0 is TRUE, and A1 is TRUE."}], "in/out": [], "return_value": null}
{"title": "8-channel Digital Output Controller", "description": "DEC_8 is an 8-bit decoder module If A0 = 0 and A1 = 0 and A2 = 0, the D\ninput is pased to output Q0, if A0 = 1 and A1 = 1 and A2 = 1 the D is\nconnected to Q3. In other words, Q0 = 1 if D = 1 and A0 = 0 and A1 = 0\nA2 = 0.\nThe following diagram illustrates the logic of the module:\nLogical connection:\nQ0 = D & /A0 & /A1 & /A2 Q1 = D & A0 & /A1 & /A2\nQ2 = D & /A0 & A1 & /A2 Q3 = D & A0 & A1 & /A\nQ4 = D & /A0 & /A1 & A2 Q5 = D & A0 & /A1 & A2\nQ6 = D & /A0 & A1 & A2 Q7 = D & A0 & A1 & A2", "type": "FUNCTION_BLOCK", "name": "DEC_8", "input": [{"name": "D", "type": "BOOL", "description": "The input data signal that will be assigned to one of the output channels based on the address."}, {"name": "A0", "type": "BOOL", "description": "The least significant bit of the address that specifies which channel to control."}, {"name": "A1", "type": "BOOL", "description": "The middle bit of the address that specifies which channel to control."}, {"name": "A2", "type": "BOOL", "description": "The most significant bit of the address that specifies which channel to control."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output channel 0, which receives the value of D if the address is 0."}, {"name": "Q1", "type": "BOOL", "description": "Output channel 1, which receives the value of D if the address is 1."}, {"name": "Q2", "type": "BOOL", "description": "Output channel 2, which receives the value of D if the address is 2."}, {"name": "Q3", "type": "BOOL", "description": "Output channel 3, which receives the value of D if the address is 3."}, {"name": "Q4", "type": "BOOL", "description": "Output channel 4, which receives the value of D if the address is 4."}, {"name": "Q5", "type": "BOOL", "description": "Output channel 5, which receives the value of D if the address is 5."}, {"name": "Q6", "type": "BOOL", "description": "Output channel 6, which receives the value of D if the address is 6."}, {"name": "Q7", "type": "BOOL", "description": "Output channel 7, which receives the value of D if the address is 7."}], "in/out": [], "return_value": {}}
{"title": "Delay Block", "description": "DELAY_4 delays an input signal by a maximum of 4 cycles. The outputs\nOut 1..4 passes the last 4 values. Out1 is delayed by one cycle, Qut2 by 2\ncycles and Out3 by 3 cycles and Out4 by 4 cycles.", "type": "FUNCTION_BLOCK", "name": "DELAY_4", "input": [{"name": "in", "type": "REAL", "description": "The input signal to be delayed."}], "output": [{"name": "out1", "type": "REAL", "description": "The first delayed output of the input signal."}, {"name": "out2", "type": "REAL", "description": "The second delayed output of the input signal."}, {"name": "out3", "type": "REAL", "description": "The third delayed output of the input signal."}, {"name": "out4", "type": "REAL", "description": "The fourth delayed output of the input signal."}], "in/out": [], "return_value": {}}
{"title": "Driver Function Block", "description": "DRIVER_1 a driver module whose output Q can be set by the input IN is\nwhen TOGGLE_MODE = FALSE. The output is then held to TRUE until it is\neither set to FALSE by an asynchronous reset (RST) or until expiry of the\nmaximum switching time (TIMEOUT). Further impulses at the input IN the￾reby extend the TRUE period by the output whereas each rising edge at\nthe IN the Timeout begins again. If TOGGLE_MODE = TRUE, the output Q\nswitches with each rising edge on the IN state between TRUE and FALSE.\nAlso in TOGGLE_MODE the TIMEOUT limits the maximum TRUE phase at\nthe output Q. TIMEOUT is set to T#0s ( Default ) Then no Timeout active.\nThe asynchronous SET and RST inputs sets the output Q to TRUE or FALSE.\nThe module DRIVER_4 provides the same functionality with 4 switching\noutputs.", "type": "FUNCTION_BLOCK", "name": "DRIVER_1", "input": [{"name": "Toggle_Mode", "type": "BOOL", "description": "A boolean input that determines whether the output Q should toggle its state."}, {"name": "Timeout", "type": "TIME", "description": "The duration after which the output will reset, if applicable."}, {"name": "SET", "type": "BOOL", "description": "A boolean input to set the output Q to TRUE."}, {"name": "IN", "type": "BOOL", "description": "A boolean input to indicate the control state; it may trigger toggling of the output Q."}, {"name": "RST", "type": "BOOL", "description": "A boolean input to reset the output Q to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "The output signal that indicates the state of the driver."}], "in/out": [], "return_value": null}
{"title": "Driver Control Function Block", "description": "DRIVER_4, as opposed to DRIVER_1 has 4 switching outputs, but otherwise\nhas the same functionality.", "type": "FUNCTION_BLOCK", "name": "DRIVER_4", "input": [{"name": "Toggle_Mode", "type": "BOOL", "description": "A boolean value indicating the mode of operation to toggle."}, {"name": "Timeout", "type": "TIME", "description": "A time duration which sets the timeout for the drivers."}, {"name": "SET", "type": "BOOL", "description": "A boolean signal to set the driver functionality."}, {"name": "IN0", "type": "BOOL", "description": "Input signal for the first driver instance."}, {"name": "IN1", "type": "BOOL", "description": "Input signal for the second driver instance."}, {"name": "IN2", "type": "BOOL", "description": "Input signal for the third driver instance."}, {"name": "IN3", "type": "BOOL", "description": "Input signal for the fourth driver instance."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to clear the driver states."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output state of the first driver instance."}, {"name": "Q1", "type": "BOOL", "description": "Output state of the second driver instance."}, {"name": "Q2", "type": "BOOL", "description": "Output state of the third driver instance."}, {"name": "Q3", "type": "BOOL", "description": "Output state of the fourth driver instance."}], "in/out": [], "return_value": null}
{"title": "4-channel Driver Function Block", "description": "DRIVER_4C is a driver circuit whose output states are switched with a ri￾sing edge of IN. The output states are predefned in the Setup array SX\nand may be changed at any time by the user. The array SX [1..6] defnes\nthe output states for each switching state SN individually bitwise. Bit 0 of\nan element switch Q0, Bit1 turns Q1, Bit2 Q2 and Bit3 Q3, the upper 4 bits\nare respectively ignored. The array is initialized with Bit0 = TRUE for SN =\n1, bit 1 for SN = 2. Bit2 for SN = 3 and Bit3 for SN = 4. Thus, the output\ngo through the sequence (0000,0001,0010,0100,1000,0000) for (Q3, Q2,\nQ1, Q0) . If the element SX[SN] is of array 0 so the SN will automatically\njump back to 0, so that an empty element terminates the sequence. At the\nend of the timeout the module automatically jumps back into the conditi￾on SN = 0. The timeout is only active if the variable TIMEOUT > t#0s is.", "type": "FUNCTION_BLOCK", "name": "DRIVER_4C", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal indicating a trigger event."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to reset the counter."}, {"name": "Timeout", "type": "TIME", "description": "Timeout duration for automatic reset of the output when active."}, {"name": "SX", "type": "ARRAY[1..7] OF BYTE", "description": "An array of byte values used to generate output signals, initialized with specific values."}], "output": [{"name": "SN", "type": "INT", "description": "Current count of the input edges."}, {"name": "Q0", "type": "BOOL", "description": "Output signal corresponding to the first channel."}, {"name": "Q1", "type": "BOOL", "description": "Output signal corresponding to the second channel."}, {"name": "Q2", "type": "BOOL", "description": "Output signal corresponding to the third channel."}, {"name": "Q3", "type": "BOOL", "description": "Output signal corresponding to the fourth channel."}], "in/out": [], "return_value": {"type": null, "description": null}}
{"title": "Determine Daylight Saving Time", "description": "DST function checks whether daylight saving time is right now or not.\nIt can be used to an existing non-DST enabled clock to switch to summer\nand winter in exact seconds.\nThe function of DST switches on the last Sunday of March at 01:00 UTC\n(02:00 CET) to summer time (03:00 GMT) and on the last Sunday of Octo￾ber at 01:00 UTC (03:00 BST) to 02:00 CET back. The output of DST is\nTRUE if daylight saving time is.\nThe summer time is calculated based on UTC (Universal Time). A calculati￾on of location-time for daylight saving time is generally not possible be￾cause in the last Sunday of October, the hour of 2:00 a.m. to 3:00 a.m.\nPST or PDT there exists twice. The summer time will be changed in all\ncountries of the EU since 1992, at the same second to world time. In Cen￾tral Europe at 02:00, at 01:00 in England and Greece at 04:00. By using\nthe world time calculation of daylight saving time for all European time zo￾nes is calculated correctly.", "type": "FUNCTION", "name": "DST", "input": [{"name": "UTC", "type": "DT", "description": "The date and time in UTC format that needs to be evaluated for Daylight Saving Time."}], "output": [{"name": "DST", "type": "BOOL", "description": "Returns TRUE if the given UTC date and time is within the Daylight Saving Time period, otherwise FALSE."}], "in/out": [], "return_value": {"type": "BOOL", "description": "Indicates whether the input date is within Daylight Saving Time.", "fields": []}}
{"title": "Convert DATE and TOD to Structured Date Time (SDT)", "description": "DT2_TO_SDT converts a date and time of day to day in a structured date\ntype SDT.", "type": "FUNCTION", "name": "DT2_TO_SDT", "input": [{"name": "DI", "type": "DATE", "description": "Input variable of type DATE representing the date to convert."}, {"name": "TI", "type": "TOD", "description": "Input variable of type TOD representing the time of day to convert."}], "output": [{"name": "SDT", "type": "SDT", "description": "Output structure containing the converted date and time components.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year extracted from the DATE."}, {"name": "MONTH", "type": "INT", "description": "The month extracted from the DATE."}, {"name": "DAY", "type": "INT", "description": "The day of the month extracted from the DATE."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday corresponding to the DATE (0 = Sunday, 1 = Monday, etc.)."}, {"name": "MS", "type": "INT", "description": "The milliseconds component extracted from the TOD."}, {"name": "SECOND", "type": "INT", "description": "The seconds component extracted from the TOD."}, {"name": "MINUTE", "type": "INT", "description": "The minutes component extracted from the TOD."}, {"name": "HOUR", "type": "INT", "description": "The hours component extracted from the TOD."}]}], "in/out": [], "return_value": {"type": "SDT", "description": "Returns the structured date time containing all the extracted date and time information.", "fields": [{"name": "YEAR", "type": "INT", "description": "The year of the structured date time."}, {"name": "MONTH", "type": "INT", "description": "The month of the structured date time."}, {"name": "DAY", "type": "INT", "description": "The day of the structured date time."}, {"name": "WEEKDAY", "type": "INT", "description": "The weekday of the structured date time."}, {"name": "MS", "type": "INT", "description": "The milliseconds of the structured date time."}, {"name": "SECOND", "type": "INT", "description": "The seconds of the structured date time."}, {"name": "MINUTE", "type": "INT", "description": "The minutes of the structured date time."}, {"name": "HOUR", "type": "INT", "description": "The hours of the structured date time."}]}}
{"title": "ESR Monitor Block", "description": "ESR_MON_B8 monitors up to 8 binary signals to change, and provides\nthem with a timestamp and a name. The collected messages are bufered\nand passed to a protocol module on ESR_OUT. The output ESR_FLAG is set\nto TRUE when messages are present. \nThe ESR data at the output consist of the following items:\n.TYPE 11 rising edge , 10 falling edge\n.ADRESS Byte address of ISR data recording\n.LINE Line number (input) of the ESR data recording\n.DS Date stamp of type DATE_TIME\n.DT Timestamp of type TIME (PLC- Timer ) \n.Data Data block blank of 8 bytes\nAn application example for the module is in the description of ESR_COL￾LECT.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_B8", "input": [{"name": "s0", "type": "BOOL", "description": "Boolean input 0 for state monitoring."}, {"name": "s1", "type": "BOOL", "description": "Boolean input 1 for state monitoring."}, {"name": "s2", "type": "BOOL", "description": "Boolean input 2 for state monitoring."}, {"name": "s3", "type": "BOOL", "description": "Boolean input 3 for state monitoring."}, {"name": "s4", "type": "BOOL", "description": "Boolean input 4 for state monitoring."}, {"name": "s5", "type": "BOOL", "description": "Boolean input 5 for state monitoring."}, {"name": "s6", "type": "BOOL", "description": "Boolean input 6 for state monitoring."}, {"name": "s7", "type": "BOOL", "description": "Boolean input 7 for state monitoring."}, {"name": "DT_in", "type": "DT", "description": "Data time input to be associated with the monitored states."}, {"name": "a0", "type": "STRING[10]", "description": "String address for input 0."}, {"name": "a1", "type": "STRING[10]", "description": "String address for input 1."}, {"name": "a2", "type": "STRING[10]", "description": "String address for input 2."}, {"name": "a3", "type": "STRING[10]", "description": "String address for input 3."}, {"name": "a4", "type": "STRING[10]", "description": "String address for input 4."}, {"name": "a5", "type": "STRING[10]", "description": "String address for input 5."}, {"name": "a6", "type": "STRING[10]", "description": "String address for input 6."}, {"name": "a7", "type": "STRING[10]", "description": "String address for input 7."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Flag indicating if any input state has changed."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Array of output data structures that hold information about the changes in the inputs."}], "return_value": null}
{"title": "Event Status Report (ESR) Monitoring", "description": "ESR_MON_R4 monitors up to 4 analog signals for changes and provides\nthem with a time s stamp and the address of the input signal. The collec￾ted messages are bufered and passed to a protocol module on ESR_OUT.\nThe output ESR_FLAG is set to TRUE when messages are present. A\nchange of an input is recorded only when the input has changed more\nthan the in threshold S predetermined value. \n.TYPE 20 Floating point\n.ADRESS Byte address of ISR data recording\n.LINE Line number (input) of the ESR data recording\n.DS Date stamp of type DATE_TIME\n.DT Timestamp of type TIME (PLC- Timer ) \n.Data Data Block 4 byte real value\nAn application example for the module is in the description of ESR_COL￾LECT.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_R4", "input": [{"name": "R0", "type": "REAL", "description": "First real input value."}, {"name": "R1", "type": "REAL", "description": "Second real input value."}, {"name": "R2", "type": "REAL", "description": "Third real input value."}, {"name": "R3", "type": "REAL", "description": "Fourth real input value."}, {"name": "DT_in", "type": "DT", "description": "Input data type for the event report."}, {"name": "a0", "type": "STRING(10)", "description": "Address associated with R0."}, {"name": "a1", "type": "STRING(10)", "description": "Address associated with R1."}, {"name": "a2", "type": "STRING(10)", "description": "Address associated with R2."}, {"name": "a3", "type": "STRING(10)", "description": "Address associated with R3."}, {"name": "s0", "type": "REAL", "description": "State value 0."}, {"name": "s1", "type": "REAL", "description": "State value 1."}, {"name": "s2", "type": "REAL", "description": "State value 2."}, {"name": "s3", "type": "REAL", "description": "State value 3."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Indicates whether any input has changed and a new event status report has been generated."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Array that contains the event status report data."}], "return_value": null}
{"title": "ESR Monitoring Function Block", "description": "ESR_MON_X8 collects status messages of up to 8 ESR compatible modu￾les, provides them with a Timestamp , date stamp , input number and a\nmodule address. The collected messages are bufered and passed to a\nprotocol module. If messages for transmission are present, this is indica￾ted by the signal ESR_FLAG. At input DT_IN the current time, which is used\nfor the timestamp of the messages should be provided. The MODE input\ndetermines which status messages should be passed. \n● Mode = 1, only error messages are processed.\n● Mode = 2, status and error messages are processed.\n● Mode = 3, error, status and debug messages are processed.\nWhen the MODE input is not wired, automatically all messages are proces￾sed.\nThe ESR data at the output consist of the following items: \n.TYP 1 = error, 2 = State, 3 = Debug \n . ADRESS Byte address of ESR data recording \n.LINE Line number (input) of the ESR data recording \n.DS Date stamp of type DATE_TIME \n.DT Timestamp of type TIME (PLC Timer ) \n.Data Data Byte 0 contains the status message\nAn application example for the module is in the description of ESR_COL￾LECT.", "type": "FUNCTION_BLOCK", "name": "ESR_MON_X8", "input": [{"name": "s0", "type": "BYTE", "description": "First status input byte."}, {"name": "s1", "type": "BYTE", "description": "Second status input byte."}, {"name": "s2", "type": "BYTE", "description": "Third status input byte."}, {"name": "s3", "type": "BYTE", "description": "Fourth status input byte."}, {"name": "s4", "type": "BYTE", "description": "Fifth status input byte."}, {"name": "s5", "type": "BYTE", "description": "Sixth status input byte."}, {"name": "s6", "type": "BYTE", "description": "Seventh status input byte."}, {"name": "s7", "type": "BYTE", "description": "Eighth status input byte."}, {"name": "DT_in", "type": "DT", "description": "DateTime input parameter."}, {"name": "Mode", "type": "BYTE", "description": "Mode of operation, default is 3."}, {"name": "a0", "type": "STRING[10]", "description": "Additional string input for status s0."}, {"name": "a1", "type": "STRING[10]", "description": "Additional string input for status s1."}, {"name": "a2", "type": "STRING[10]", "description": "Additional string input for status s2."}, {"name": "a3", "type": "STRING[10]", "description": "Additional string input for status s3."}, {"name": "a4", "type": "STRING[10]", "description": "Additional string input for status s4."}, {"name": "a5", "type": "STRING[10]", "description": "Additional string input for status s5."}, {"name": "a6", "type": "STRING[10]", "description": "Additional string input for status s6."}, {"name": "a7", "type": "STRING[10]", "description": "Additional string input for status s7."}], "output": [{"name": "ESR_Flag", "type": "BOOL", "description": "Flag indicating if any status input has changed and an output was updated."}], "in/out": [{"name": "ESR_Out", "type": "ARRAY[0..3] OF esr_data", "description": "Output array that stores the converted status based on inputs."}], "return_value": null}
{"title": "Exponential Function Base 10 Calculation", "description": "EXP10(0) = 1\nEXP10(3.14) = 1380.384265", "type": "FUNCTION", "name": "EXP10", "input": [{"name": "X", "type": "REAL", "description": "A real number input for which the base 10 exponential is to be calculated."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The output is the result of the base 10 exponential function for the input X."}}
{"title": "FF_D2E Function Block", "description": "FF_D2E is a 2-bit edge-triggered D-Flip-Flop with asynchronous reset input.\nThe D-Flip-Flop stores the values at the input D at a rising edge at the CLK\ninput.", "type": "FUNCTION_BLOCK", "name": "FF_D2E", "input": [{"name": "D0", "type": "BOOL", "description": "Boolean input signal to determine the state of output Q0."}, {"name": "D1", "type": "BOOL", "description": "Boolean input signal to determine the state of output Q1."}, {"name": "CLK", "type": "BOOL", "description": "Clock input signal that triggers the state change on the flip-flop."}, {"name": "RST", "type": "BOOL", "description": "Reset input signal that sets the output values to false when activated."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal representing the state determined by input D0."}, {"name": "Q1", "type": "BOOL", "description": "Output signal representing the state determined by input D1."}], "in/out": [], "return_value": null}
{"title": "FF_D4E Function Block", "description": "FF_D4E is a 4-bit edge-triggered D-Flip-Flop with asynchronous reset input.\nThe D-Flip-Flop stores the values at the input D at a rising edge on CLK.\nDetailed information can be found in the block FF_D4E.", "type": "FUNCTION_BLOCK", "name": "FF_D4E", "input": [{"name": "D0", "type": "BOOL", "description": "Input boolean signal that sets output Q0."}, {"name": "D1", "type": "BOOL", "description": "Input boolean signal that sets output Q1."}, {"name": "D2", "type": "BOOL", "description": "Input boolean signal that sets output Q2."}, {"name": "D3", "type": "BOOL", "description": "Input boolean signal that sets output Q3."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal that triggers the setting of outputs."}, {"name": "RST", "type": "BOOL", "description": "Reset signal that clears all outputs."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output boolean signal representing the state set by D0."}, {"name": "Q1", "type": "BOOL", "description": "Output boolean signal representing the state set by D1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean signal representing the state set by D2."}, {"name": "Q3", "type": "BOOL", "description": "Output boolean signal representing the state set by D3."}], "in/out": [], "return_value": null}
{"title": "FIFO 16-Element Queue", "description": "FIFO_16 is a First-In First-Out Memory with 16 memory locations for\nDWORD data. The two outputs EMPTY and FULL indicate when the memo￾ry is full or empty. The RST input clears the entire contents of the memory.\nThe FIFO is described by DIN, by put a TRUE to the input WD, and a true￾pulse on the input E. A read command is executed by TRUE to RD and\nTRUE to E. Reading and writing can be performed simultaneously in one\ncycle. The module reads or writes in each cycle as long as the correspon￾ding command (RD, WD) is set to TRUE.", "type": "FUNCTION_BLOCK", "name": "FIFO_16", "input": [{"name": "Din", "type": "DWORD", "description": "The data input that will be stored in the FIFO queue."}, {"name": "E", "type": "BOOL", "description": "Enable input for the FIFO operations. When TRUE, the operation proceeds."}, {"name": "RD", "type": "BOOL", "description": "Read command input. When TRUE, it indicates a read operation should occur."}, {"name": "WD", "type": "BOOL", "description": "Write command input. When TRUE, it indicates a write operation should occur."}, {"name": "RST", "type": "BOOL", "description": "Reset input. When TRUE, it resets the FIFO queue to its initial state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output from the FIFO queue when a read operation is performed."}, {"name": "EMPTY", "type": "BOOL", "description": "Indicates whether the FIFO queue is empty. TRUE if empty, FALSE otherwise."}, {"name": "FULL", "type": "BOOL", "description": "Indicates whether the FIFO queue is full. TRUE if full, FALSE otherwise."}], "in/out": [], "return_value": null}
{"title": "FIFO Buffer Implementation", "description": "FIFO_32 is a First-In First-Out Memory with 32 memory locations for\nDWORD data. The two outputs EMPTY and FULL indicate when the memo￾ry is full or empty. The RST input clears the entire contents of the memory.\nThe FIFO is described by DIN, by put a TRUE to the input WD, and a true￾pulse on the input E. A read command is executed by TRUE to RD and\nTRUE to E. Reading and writing can be performed simultaneously in one\ncycle. The module reads or writes in each cycle as long as the correspon￾ding command (RD, WD) is set to TRUE.", "type": "FUNCTION_BLOCK", "name": "FIFO_32", "input": [{"name": "Din", "type": "DWORD", "description": "The data input to be written to the FIFO."}, {"name": "E", "type": "BOOL", "description": "Enable signal, when TRUE allows reading and writing operations."}, {"name": "RD", "type": "BOOL", "description": "Read signal, when TRUE initiates a read operation from the FIFO."}, {"name": "WD", "type": "BOOL", "description": "Write signal, when TRUE initiates a write operation to the FIFO."}, {"name": "RST", "type": "BOOL", "description": "Reset signal, when TRUE resets the FIFO state."}], "output": [{"name": "Dout", "type": "DWORD", "description": "The data output read from the FIFO."}, {"name": "EMPTY", "type": "BOOL", "description": "Status indicator, TRUE if the FIFO is empty."}, {"name": "FULL", "type": "BOOL", "description": "Status indicator, TRUE if the FIFO is full."}], "in/out": [], "return_value": null}
{"title": "Floor Function Conversion", "description": "FLOOR2 returns the largest integer value less or equal than X\nback.", "type": "FUNCTION", "name": "FLOOR2", "input": [{"name": "X", "type": "REAL", "description": "A real number which will be converted to a DINT by flooring."}], "output": [], "in/out": [], "return_value": {"type": "DINT", "description": "The floored integer value derived from the input real number.", "fields": []}}
{"title": "Integral Function Block", "description": "FT_INT2 is an integrator module which calculates internal with double-pre￾cision and ensures a resolution of 14 decimal places. This makes it suita￾ble to use FT_INT2 unlike FT_INT, for power meters and similar applicati￾ons.\nFor example, an input signal of 0.0001 results in a sampling time of 1 milli￾second and an output value of 100000 a value of 0.0001 * 0.001 seconds\n= 0.000001. To be added to the baseline of 100000, which results inevita￾bly refect the value of 100000 because the resolution of the data type\nReal can only collect up to 8. FT_INT2 solves this problem by calculating\ninternal with double-precision (14 decimal places) and adds even the\nsmallest input values so that no information is lost.", "type": "FUNCTION_BLOCK", "name": "FT_INT2", "input": [{"name": "IN", "type": "REAL", "description": "The real input value to be integrated."}, {"name": "K", "type": "REAL", "description": "A scaling factor for the integration process. Default is 1.0."}, {"name": "RUN", "type": "BOOL", "description": "Boolean flag indicating whether the integration should be performed. Default is TRUE."}, {"name": "RST", "type": "BOOL", "description": "Boolean flag to reset the integration process when TRUE."}, {"name": "OUT_MIN", "type": "REAL", "description": "The minimum limit for the output value. Default is -1E+38."}, {"name": "OUT_MAX", "type": "REAL", "description": "The maximum limit for the output value. Default is 1E+38."}], "output": [{"name": "OUT", "type": "REAL", "description": "The result of the integration process."}, {"name": "LIM", "type": "BOOL", "description": "Boolean flag indicating whether the output value is within the specified limits."}], "in/out": [], "return_value": null}
{"title": "PT1 Differentiator Function Block", "description": "FT_PDT1 is a PD controller with a T1 link in the D-term. The device opera￾tes as follows:\nY = KP * (IN + PT1(DERIV(IN))\nFT_PDT1 can be used in conjunction with the modules CTRL_IN and\nCTRL_OUT and other regulatory technical modules to build complex con￾trol circuits.\nInternal structure of the block:", "type": "FUNCTION_BLOCK", "name": "FT_PDT1", "input": [{"name": "IN", "type": "REAL", "description": "The input signal to be processed."}, {"name": "KP", "type": "REAL", "description": "The proportional gain factor, default value is 1.0."}, {"name": "TV", "type": "REAL", "description": "The time constant for the differentiator, default value is 1.0."}, {"name": "T1", "type": "REAL", "description": "The time constant for the PT1 filter, default value is 1.0."}], "output": [{"name": "Y", "type": "REAL", "description": "The output of the function block, which is the combined result of the processed input."}], "in/out": [], "return_value": {}}
{"title": "Trim String Function", "description": "TRIM1 replaces multiple spaces with one space. Spaces at\nthe beginning and the end of STR will be deleted completely.", "type": "FUNCTION", "name": "TRIM1", "input": [{"name": "str", "type": "STRING[STRING_LENGTH]", "description": "The input string that needs to be trimmed of spaces."}], "output": [], "in/out": [], "return_value": {"type": "string", "description": "The trimmed string with no leading, trailing, or consecutive spaces."}}
{"title": "Analog Input Processing", "description": "AIN1 sets the digital output value of an A/D converter into a corresponding\nREAL value to the measured value. The device can be adjusted by setup\nvariables to a variety of digital converters.\n A SIGN_BIT determines at which bit the D/A converter transmit the sign.\nWhen this variable is not defned or set to a value greater than 31 no sign\nis evaluated. The content of the SIGN_BIT appears at the output of SIGN.\nWhen a ERROR_BIT is specifed, the contents of Error Bits is displayed at\nthe output ERROR. Some A/D converter supply instead of a Error Bit a f￾xed output value which is out of the specifed range and is thus an error si￾gnaling. The setup variable ERROR_CODE specifes the corresponding Er￾ror Code and with the ERROR_CODE_EN the evaluation of error_code is de￾fned. If ERROR = TRUE, at the output OUT the value of ERROR_OUTPUT is\nissued. Using the OVERFLOW_BITS an over-range of the D/A converter is\nsignaled and issued at the output OVERFLOW. Using the Setup variables\nOVERFLOW_CODE_EN and OVERFLOW_CODE it can query a certain code at\nthe input IN and in the presence of this code, the Overfow Bits are set.\nUsing CODE_MIN CODE_MAX in addition to OVERFLOW_BIT specifes an al￾lowable range for the input data. Over-or under-steps this area will also set\nthe OVERFLOW output. In an overfow the output value OVERFLOW_OUT￾PUT is at the output OUT. The setup variables BIT_0 BIT_N determine how\nthe measured value by the D/A converter is provided. With Bit_0 set is\ndefned at which bit the data word begins and with BIT_N at which the bit\ndata word ends. In the example above, the data word is transferred from\nbit 3 - bit 14 (Bit 3 = bit 0 of data word and bit 14 = bit 12 of data word).\nThe received data word is converted according to the setup variables\nCODE_MIN, CODE_MAX and OUT_MIN, OUT_MAX and, if a sign is present\nand if SIGN = TRUE, the output value OUT is inverted.", "type": "FUNCTION_BLOCK", "name": "AIN1", "input": [{"name": "in", "type": "DWORD", "description": "The input value that needs to be processed."}, {"name": "sign_bit", "type": "INT", "description": "The position of the sign bit in the input value, defaulting to 255."}, {"name": "error_bit", "type": "INT", "description": "The position of the error bit in the input value, defaulting to 255."}, {"name": "error_code_en", "type": "BOOL", "description": "A boolean flag enabling error code checking."}, {"name": "error_code", "type": "DWORD", "description": "The error code to compare against the input value."}, {"name": "overflow_bit", "type": "INT", "description": "The position of the overflow bit in the input value, defaulting to 255."}, {"name": "overflow_code_en", "type": "BOOL", "description": "A boolean flag enabling overflow code checking."}, {"name": "overflow_code", "type": "DWORD", "description": "The overflow code to compare against the input value."}, {"name": "Bit_0", "type": "INT", "description": "The starting bit position for the processing."}, {"name": "Bit_N", "type": "INT", "description": "The maximum bit position for processing, defaulting to 31."}, {"name": "out_min", "type": "REAL", "description": "The minimum output value after conversion."}, {"name": "out_max", "type": "REAL", "description": "The maximum output value after conversion, defaulting to 10.0."}, {"name": "code_min", "type": "DWORD", "description": "The minimum allowable code value for valid input."}, {"name": "code_max", "type": "DWORD", "description": "The maximum allowable code value for valid input, defaulting to 16#FFFFFFFF."}, {"name": "error_output", "type": "REAL", "description": "Output value when an error condition is detected."}, {"name": "overflow_output", "type": "REAL", "description": "Output value when an overflow condition is detected, defaulting to 10.0."}], "output": [{"name": "out", "type": "REAL", "description": "The processed output value after conversion."}, {"name": "sign", "type": "BOOL", "description": "Indicator of the sign of the output value."}, {"name": "error", "type": "BOOL", "description": "Flag indicating whether an error condition was detected."}, {"name": "overflow", "type": "BOOL", "description": "Flag indicating whether an overflow condition was detected."}], "in/out": [], "return_value": null}
{"title": "First-order Transfer Function with Time Constant", "description": "FT_PT1 is an LZI- Transmission link with a proportional transfer behavior 1 \nOrder, even as a low pass flter 1 order referred to. The multiplier K sets \nthe gain (multiplier) is fxed and T is the time constant. \nA change at the input is attenuated at the output visible. The output signal \nincreases within T to 63% of the input value and after 3 * T to 95% of \ninput values. Thus, after an abrupt change of the input signal of 0 to 10 at \nthe time of the initial input change 0, increasing to 1 at T * 6.3 and after 3 \n* T 9.5 and then approaches asymptotically the value 10. The frst time \nthe output OUT to the IN input value is initialized to a defned starting \nperformance guarantee. If the input T of T#0s is equal to the output OUT \n= K * IN.\nStructure diagram:\nStep response for T = 1, K = 1", "type": "FUNCTION_BLOCK", "name": "FT_PT1", "input": [{"name": "in", "type": "REAL", "description": "The input signal for the transfer function."}, {"name": "T", "type": "TIME", "description": "The time constant for the transfer function."}, {"name": "K", "type": "REAL", "description": "The gain factor applied to the input signal. Default value is 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output signal of the transfer function."}], "in/out": [], "return_value": null}
{"title": "FT_PT2 Function Block", "description": "FT_PT2 is an LZI transfer module having a second transfer characteristic\nproportional order, even as a low pass flter 2 order known. The multiplier\nK sets the gain (multiplier), T and D the time constant and the damping. If\nthe input T of T#0s is equal to the output OUT = K * IN.\nThe corresponding functional relationship in the time windows is given by\nthe following diferential equation:\nT² * OUT''(T) + 2 * D* T * OUT'(T) + OUT(T) = K * in(T).\nStructure diagram:\nStep response for T = 1, K = 2, D = 0,2 / 1 / 5", "type": "FUNCTION_BLOCK", "name": "FT_PT2", "input": [{"name": "in", "type": "REAL", "description": "The input signal value to be processed by the function block."}, {"name": "T", "type": "TIME", "description": "The time duration for the integration process."}, {"name": "D", "type": "REAL", "description": "The damping factor used in the integration calculation."}, {"name": "K", "type": "REAL", "description": "The gain constant for scaling the input, with a default value of 1.0."}], "output": [{"name": "out", "type": "REAL", "description": "The output result after processing the input through the function block."}], "in/out": [], "return_value": null}
{"title": "FT_TN16 Function Block", "description": "FT_TN16 delays an input signal by an adjustable time T and scanned it in\ntime T 16 times. After each update of the output signal OUT, TRIG is TRUE\nfor one cycle.", "type": "FUNCTION_BLOCK", "name": "FT_TN16", "input": [{"name": "in", "type": "REAL", "description": "The real input value to be processed."}, {"name": "T", "type": "TIME", "description": "The time duration that influences the input processing frequency."}], "output": [{"name": "out", "type": "REAL", "description": "The output value from the circular array of input values."}, {"name": "trig", "type": "BOOL", "description": "A boolean flag that indicates whether a new value has been output."}], "in/out": [], "return_value": null}
{"title": "Time-based Value Storage and Retrieval", "description": "FT_TN64 delays an input signal by an adjustable time T and scans it in\ntime T 64 times. After each update of the output signal OUT, TRIG is TRUE\nfor one cycle.\nT\n16\nIN\nOUT\n15 14 0 1 2\nT\n64\nIN\nOUT\n63 62 0 1 2", "type": "FUNCTION_BLOCK", "name": "FT_TN64", "input": [{"name": "in", "type": "REAL", "description": "The real input value to be stored."}, {"name": "T", "type": "TIME", "description": "The duration that determines how frequently the input values are stored."}], "output": [{"name": "out", "type": "REAL", "description": "The most recent stored input value."}, {"name": "trig", "type": "BOOL", "description": "Boolean trigger indicating that a new value has been stored."}], "in/out": [], "return_value": null}
{"title": "FT_TN8 Function Block", "description": "FT_TN8 delays an input signal by an adjustable time T and scanned it in\ntime T by 8 times. After each update of the output signal OUT, TRIG is\nTRUE for one cycle.", "type": "FUNCTION_BLOCK", "name": "FT_TN8", "input": [{"name": "in", "type": "REAL", "description": "The real input value that will be processed by the function block."}, {"name": "T", "type": "TIME", "description": "The time interval that determines how frequently the input is sampled."}], "output": [{"name": "out", "type": "REAL", "description": "The real output value which corresponds to the last sampled input."}, {"name": "trig", "type": "BOOL", "description": "A boolean output that indicates if the input was processed and the output was updated."}], "in/out": [], "return_value": null}
{"title": "Linear Interpolation Function", "description": "F_LIN2 returns the Y value of a linear equation.\nThe straight line here is defned by the specifcation of two coordinate\npoints (X1, Y1, X2, Y2).", "type": "FUNCTION", "name": "F_LIN2", "input": [{"name": "X", "type": "REAL", "description": "The independent variable for which the interpolation is calculated."}, {"name": "X1", "type": "REAL", "description": "The X coordinate of the first point."}, {"name": "Y1", "type": "REAL", "description": "The Y coordinate of the first point."}, {"name": "X2", "type": "REAL", "description": "The X coordinate of the second point."}, {"name": "Y2", "type": "REAL", "description": "The Y coordinate of the second point."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The interpolated Y value corresponding to the input X value.", "fields": []}}
{"title": "Pulse Width Modulation Generator", "description": "GEN_PW2 generates an output signal with a defnable time TH? for HIGH\nand TL for LOW. Using the input TS is switched between two sets of para￾meters (TL1, TH1 and TL2, TH2). On startup or after a ENQ = TRUE, the\nmodule begins with the LOW phase at the output.", "type": "FUNCTION_BLOCK", "name": "GEN_PW2", "input": [{"name": "ENQ", "type": "BOOL", "description": "Enable signal to start the timing operation."}, {"name": "TH1", "type": "TIME", "description": "Time duration for the high state in the first timing configuration."}, {"name": "TL1", "type": "TIME", "description": "Time duration for the low state in the first timing configuration."}, {"name": "TH2", "type": "TIME", "description": "Time duration for the high state in the second timing configuration."}, {"name": "TL2", "type": "TIME", "description": "Time duration for the low state in the second timing configuration."}, {"name": "TS", "type": "BOOL", "description": "Selects between the first or second timing configuration."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal indicating the state of the PWM (TRUE for high, FALSE for low)."}, {"name": "TH", "type": "TIME", "description": "Elapsed time in the high state since the last transition."}, {"name": "TL", "type": "TIME", "description": "Elapsed time in the low state since the last transition."}], "in/out": [], "return_value": {}}
{"title": "HYST_1 Function Block", "description": "HYST_1 is a hysteresis module that works with upper and lower limit. The\noutput Q is only true if the input signal at IN has exceeded the value HIGH.\nIt is then held true until the input signal falls below LOW and Q gets FALSE.\nA further output WIN indicates whether the input signal is between LOW\nand HIGH.\nThe following example shows a triangular wave generator with down￾stream hysteresis hysteresis module HYST_1.\nThe green line shows the input signal, red is the output hysteresis and\nblue the WIN.", "type": "FUNCTION_BLOCK", "name": "HYST_1", "input": [{"name": "In", "type": "REAL", "description": "The input value to be evaluated against the threshold limits."}, {"name": "high", "type": "REAL", "description": "The upper threshold for the hysteresis comparison."}, {"name": "low", "type": "REAL", "description": "The lower threshold for the hysteresis comparison."}], "output": [{"name": "Q", "type": "BOOL", "description": "Boolean output indicating if the input is above the high threshold."}, {"name": "win", "type": "BOOL", "description": "Boolean output indicating whether the input is within the hysteresis window."}], "in/out": [], "return_value": {}}
{"title": "Hysteresis Control Logic", "description": "HYST_2 hysteresis is a module for the logic thresholds by a mean and a\nhysteresis is defned. The lower threshold value is VAL - HYS / 2 and the\nupper threshold for VAL + HYS / 2\nA detailed description of the hysteresis and an application example, see\nHYST_1.", "type": "FUNCTION_BLOCK", "name": "HYST_2", "input": [{"name": "IN", "type": "REAL", "description": "The input value to be evaluated against the hysteresis conditions."}, {"name": "VAL", "type": "REAL", "description": "The reference value from which hysteresis is calculated."}, {"name": "HYS", "type": "REAL", "description": "The amount of hysteresis used to determine the output states."}], "output": [{"name": "Q", "type": "BOOL", "description": "The boolean output indicating if the input is above the upper hysteresis threshold."}, {"name": "WIN", "type": "BOOL", "description": "The boolean output indicating if the input is within the hysteresis window."}], "in/out": [], "return_value": {}}
{"title": "Hysteresis Function Block", "description": "HYST_3 is a three-point controller. The three-point controller consists of\ntwo hysteresis. Q1 is a hysteresis with val1 as the threshold and HYST as\nhysteresis. Q1 is TRUE when IN is less than VAL1 - HYST / 2 and FALSE\nwhen IN is greater than VAL1 + HYST / 2 . Q2 is analogous to val2. The\nthree-point controller is used at all when motorized valves are controlled,\nwhich then be controlled with Q1r fo on and Q2 for of. If the value of IN\nbetween val1 and val2 both outputs are FALSE and the engine still stops.\nFollowing", "type": "FUNCTION_BLOCK", "name": "HYST_3", "input": [{"name": "in", "type": "REAL", "description": "The input value which is compared against the threshold values."}, {"name": "hyst", "type": "REAL", "description": "The hysteresis value that defines the margin for threshold comparison."}, {"name": "val1", "type": "REAL", "description": "The first threshold value used in determining the output Q1."}, {"name": "val2", "type": "REAL", "description": "The second threshold value used in determining the output Q2."}], "output": [{"name": "Q1", "type": "BOOL", "description": "Output boolean value indicating the state of the first control based on comparisons with val1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean value indicating the state of the second control based on comparisons with val2."}], "in/out": [], "return_value": {}}
{"title": "Increment Function", "description": "INC1 count the variable X from 0.. N-1 and then starts again from 0, so\nthat exactly N diferent values are produced starting from 0.", "type": "FUNCTION", "name": "INC1", "input": [{"name": "X", "type": "INT", "description": "The integer value to be incremented."}, {"name": "N", "type": "INT", "description": "The limit value that determines the behavior of the increment."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The result of the increment operation, which will be either X + 1 or 0 if X is greater than or equal to N - 1."}}
{"title": "Increment Function with Bounds", "description": "INC2 addes valued D to the input X and ensures that the output INC does\nnot exceed the value U (upper limit) or under-run the value L (low limit). If\nthe result from the addition of X and D is larger than U so it begins again\nwith L. It is ensured that at negative D when reaching L counted again at\nU on. The feature is especially useful when addressing arrays and bufers.\nEven the positioning of absolute encoders it can be used. INC2 can be\nused to decrementieren with a negative D, while INC2 will ensure that the\nresult is not below zero.\nINC2 := X + D, where L <= INC2 <= U.", "type": "FUNCTION", "name": "INC2", "input": [{"name": "X", "type": "INT", "description": "The integer value to be incremented."}, {"name": "D", "type": "INT", "description": "The increment value to be added to X."}, {"name": "L", "type": "INT", "description": "The lower boundary limit for the incremented value."}, {"name": "U", "type": "INT", "description": "The upper boundary limit for the incremented value."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The incremented value of X after applying the increment D within the specified limits.", "fields": []}}
{"title": "Interlock Control Logic", "description": "INTERLOCK_4 stores the 4 input values I0..I3 in the bits (0..3) of the output \nOUT. With every change of the output the output TP is for one cycle TRUE \nso that additional modules can be triggered for processing. If the input E = \nFALSE, all outputs remain to 0 or FALSE. The input MODE adjust the dife￾rent operating modes of the module.\nMODE Meaning\n0 Inputs are directly passed to the output byte.\nz.B. I0, I2 = TRUE OUT = 2#0000_0101\n1 Only the input with the highest input number is issued, the others are\nignored.\nz.B. I0,I1,I2 = TRUE: OUT = 2#0000_0100\n2 Only the most recently activated input is passed.\n3 An enabled input disables all other inputs.", "type": "FUNCTION_BLOCK", "name": "INTERLOCK_4", "input": [{"name": "I0", "type": "BOOL", "description": "Input signal 0, a boolean value indicating one of the interlock conditions."}, {"name": "I1", "type": "BOOL", "description": "Input signal 1, a boolean value indicating one of the interlock conditions."}, {"name": "I2", "type": "BOOL", "description": "Input signal 2, a boolean value indicating one of the interlock conditions."}, {"name": "I3", "type": "BOOL", "description": "Input signal 3, a boolean value indicating one of the interlock conditions."}, {"name": "E", "type": "BOOL", "description": "Enable signal, a boolean value that activates the interlock processing when true."}, {"name": "MODE", "type": "INT", "description": "Mode selector, an integer value that determines the operation behavior of the interlock logic."}], "output": [{"name": "OUT", "type": "BYTE", "description": "Output byte that represents the processed input signals based on the selected mode."}, {"name": "TP", "type": "BOOL", "description": "Transition signal, a boolean value that indicates if there is a change in the output state compared to the previous cycle."}], "in/out": [], "return_value": null}
{"title": "JD2000 Function", "description": "JD2000 calculates the astronomical Julian day since January, 1st., 2000\n12:00 (the Standardäquinoktium).\nThe Julian date is the time in days since January 1st. 4713 BC, as a foat at\n12:00. The January 1st. 2000 00:00 corresponds to the Julian date", "type": "FUNCTION", "name": "JD2000", "input": [{"name": "DTI", "type": "TIME", "description": "The input time value to be converted to Julian Date format."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The computed Julian Date corresponding to the input TIME value.", "fields": []}}
{"title": "4-bit Latch Function Block", "description": "LTCH_4 is a transparent storage element ( Latch ). As long as L is TRUE, Q0\n- Q3 follows inputs D0 - D3 and with the falling edge of L the outputs Q0 -\nQ3 stores the current input signal D0 - D3. With the asynchronous reset in-\nL\nRST\nQ\nSET\nD\nput of the Latch can be deleted at any time regardless of L. Further expla￾nations and details can be found in the module LTCH.", "type": "FUNCTION_BLOCK", "name": "LTCH_4", "input": [{"name": "D0", "type": "BOOL", "description": "First data input for the latch."}, {"name": "D1", "type": "BOOL", "description": "Second data input for the latch."}, {"name": "D2", "type": "BOOL", "description": "Third data input for the latch."}, {"name": "D3", "type": "BOOL", "description": "Fourth data input for the latch."}, {"name": "L", "type": "BOOL", "description": "Control signal that determines if the latch is transparent."}, {"name": "RST", "type": "BOOL", "description": "Asynchronous reset signal that resets the output."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output corresponding to the first data input."}, {"name": "Q1", "type": "BOOL", "description": "Output corresponding to the second data input."}, {"name": "Q2", "type": "BOOL", "description": "Output corresponding to the third data input."}, {"name": "Q3", "type": "BOOL", "description": "Output corresponding to the fourth data input."}], "in/out": [], "return_value": {}}
{"title": "Manual Control Function Block", "description": "MANUAL_1 can override a digital signal in the manual mode. As long as \nMAN = FALSE the output Q follows the input IN directly. Once MAN = TRUE, \nthe output follows the state of the input M_I. With the inputs of SET and \nRST in manual mode, an asynchronous set and clear the output can be \nproduced. SET and RST are active only during manual operation. Is in ma￾nual mode at SET or RST a rising edge, the output follows not longer the \ninput M_I but remains on the state of the rising edge of SET (output = \nTRUE) or RST (output = FALSE). Once the input MAN is back on FALSE the \noutput Q follows the input IN again.", "type": "FUNCTION_BLOCK", "name": "MANUAL_1", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal that determines the output state when manual control is not active."}, {"name": "MAN", "type": "BOOL", "description": "Manual control signal to enable manual operation."}, {"name": "M_I", "type": "BOOL", "description": "Immediate input signal that defines the output state when manual control is inactive."}, {"name": "SET", "type": "BOOL", "description": "Set signal to transition the output state to TRUE."}, {"name": "RST", "type": "BOOL", "description": "Reset signal to transition the output state to FALSE."}], "output": [{"name": "Q", "type": "BOOL", "description": "Output signal representing the current state controlled by the function block."}, {"name": "STATUS", "type": "BYTE", "description": "Status code indicating the current state of the function block."}], "in/out": [], "return_value": null}
{"title": "Manual Control Function Block", "description": "MANUAL_2 , a digital signal and override switches between manual and \nautomatic operation. The module is designed so that a 3-position switch \nswitches between of and auto. In the automatic the signal mode is set to \nIN, in the case of enforced of, the OFF is set to TRUE and in the case of \nenforced on, tho ON set to TRUE. If the two inputs ON and OFF are FALSE \nswitch the input IN directly to the output Q. However, are both inputs ON \nand OFF simultaneously set to TRUE, the state of the input MAN is swit￾ched to the output. The input MAN can also be used to defne a priority for \nON or OFF which passes the value of the MAN is always on the output if \nboth inputs ON and OFF are simultaneously true. Is the input ENA set to \nFALSE, the output is always set to FALSE, the module is disabled. The follo￾wing table defnes the operating modes of the module. The STATUS output \nis ESR compatible and reports on the status of the module to correspon￾ding ESR components. \nIN ENA ON OFF MAN Q STATUS\n- L - - - L 104 Disabled\nX H L L - X 100 Auto Mode\n- H H L - H 101 force High\n- H L H - L 102 force Low\n- H H H X X 103 Manual Input\n- H H H L L 103 Force with Priority for OFF\n- H H H H H 103 Force with Priority for ON", "type": "FUNCTION_BLOCK", "name": "MANUAL_2", "input": [{"name": "IN", "type": "BOOL", "description": "Input signal to the function block indicating the manual input state."}, {"name": "ENA", "type": "BOOL", "description": "Enable signal to activate the function block."}, {"name": "ON", "type": "BOOL", "description": "Signal indicating a request to turn the output ON."}, {"name": "OFF", "type": "BOOL", "description": "Signal indicating a request to turn the output OFF."}, {"name": "MAN", "type": "BOOL", "description": "Manual control input signal when neither ON nor OFF is active."}], "output": [{"name": "Q", "type": "BOOL", "description": "Current output state of the function block."}, {"name": "STATUS", "type": "BYTE", "description": "Status code representing the current state of processing."}], "in/out": [], "return_value": null}
{"title": "Manual Control Function Block", "description": "MANUAL_4 can override 4 digital signal in manual mode. As long as MAN =\nFALSE the outputs Q follows direct the input I. As soon as the inputs MAN\n= TRUE, the outputs follow the states of the inputs M. The STP input follow\nis in manual mode, a rotating set of outputs are generated. STP is active\nonly during manual operation. When in manual operation of STP registered\na rising edge, then the outputs follow not the inputs MX but are switched\ncyclically with STP. At the frst rising edge of STP, only the output Q0 gets\nactive and the next edge of STP the module switch to the output Q1 and\nso on. Once the input MAN goes back to FALSE the outputs Q follows again\nthe input I. The ESR compliant status output passes the switching states.\nSTATUS Condition\n100 Automatic Mode MAN = FALSE, Q0 = I0, Q1 = I1, Q2 = I2, Q3 = I3\n101 Manual Mode MAN = TRUE, Q0 = M0, Q1 = M1, Q2 = M2, Q3 = M3\n110,111,112,1\n13\nStep Mode for Output Q0, Q1, Q2, Q3", "type": "FUNCTION_BLOCK", "name": "MANUAL_4", "input": [{"name": "I0", "type": "BOOL", "description": "Input boolean signal 0."}, {"name": "I1", "type": "BOOL", "description": "Input boolean signal 1."}, {"name": "I2", "type": "BOOL", "description": "Input boolean signal 2."}, {"name": "I3", "type": "BOOL", "description": "Input boolean signal 3."}, {"name": "MAN", "type": "BOOL", "description": "Manual control signal; when true, switches to manual mode."}, {"name": "STP", "type": "BOOL", "description": "Stop signal; when true, triggers state change."}, {"name": "M0", "type": "BOOL", "description": "Manual mode output 0."}, {"name": "M1", "type": "BOOL", "description": "Manual mode output 1."}, {"name": "M2", "type": "BOOL", "description": "Manual mode output 2."}, {"name": "M3", "type": "BOOL", "description": "Manual mode output 3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output boolean signal 0."}, {"name": "Q1", "type": "BOOL", "description": "Output boolean signal 1."}, {"name": "Q2", "type": "BOOL", "description": "Output boolean signal 2."}, {"name": "Q3", "type": "BOOL", "description": "Output boolean signal 3."}, {"name": "STATUS", "type": "BYTE", "description": "Status indicator reflecting current operation mode and state."}], "in/out": [], "return_value": {}}
{"title": "Maximum of Three Real Numbers", "description": "MAX3 delivers the maximum value of 3 inputs. Basically, the\nin standard IEC61131-3 contained function MAX should be equipped with a\nvariable number of inputs. However, since in some systems the MAX func￾tion is supported only two inputs, the function MAX3 is ofered.", "type": "FUNCTION", "name": "MAX3", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input."}, {"name": "in2", "type": "REAL", "description": "The second real number input."}, {"name": "in3", "type": "REAL", "description": "The third real number input."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The maximum value among the three input real numbers."}}
{"title": "MESSAGE_4R Function Block", "description": "MESSAGE_4R provides at the output MX up to 4 messages. There is only\none available of up to 4 entries at MX. The number of messages can be li￾mited to the input of MM. MM is set to 2 then only the messages M0.. M2\npassed to output after each other. MM is not set then all messages will be\nissued M0..M3. With each rising edge of CLK, the next message is written\nto MX, if CLK remains at TRUE so after the time T1 the next message is\npassed automatically, until CLK is FALSE again. If the enable-input ENQ is\nset to FALSE, at the output MX '' is passed and the module has no functi￾on. The output MN indicates what message is just passed at the output\nMX. The output TR is always for one cycle TRUE if the message at the out￾put MX has changed, it serves to control given modules to process the\nmessages.", "type": "FUNCTION_BLOCK", "name": "MESSAGE_4R", "input": [{"name": "M0", "type": "STRING(STRING_LENGTH)", "description": "First message string."}, {"name": "M1", "type": "STRING(STRING_LENGTH)", "description": "Second message string."}, {"name": "M2", "type": "STRING(STRING_LENGTH)", "description": "Third message string."}, {"name": "M3", "type": "STRING(STRING_LENGTH)", "description": "Fourth message string."}, {"name": "MM", "type": "INT", "description": "Increment value for the message counter. Default is 3."}, {"name": "ENQ", "type": "BOOL", "description": "Enable signal for the message selection process. Default is TRUE."}, {"name": "CLK", "type": "BOOL", "description": "Clock signal used for timing the message selection process. Default is TRUE."}, {"name": "T1", "type": "TIME", "description": "Time interval for the timer. Default is 3 seconds."}], "output": [{"name": "MX", "type": "STRING(STRING_LENGTH)", "description": "Selected message string based on the current counter value."}, {"name": "MN", "type": "INT", "description": "Current message counter value."}, {"name": "TR", "type": "BOOL", "description": "Trigger signal indicating that a new message has been selected."}], "in/out": [], "return_value": null}
{"title": "Message Generation Based on Alarm Status", "description": "MESSAGE_8 generates an output of 8 messages on M. If none of the inputs\nIN1..IN8 are TRUE,the output to M is an empty string, otherwise one of the\nstored in S1..S8 messages is passed. The module passes the message\nwith the highest priority. IN1 has the highest priority and IN8 the lowest.\nMESSAGE_8 can be used in conjunction with the module STORE_8 to save\nand view events.\nIn the following example, up to 8 fault events (E0..E7)\nare stored, and in each case the highest priority message is shown at the\noutput of M MESSAGE_8. With the CLEAR input last message can be dele￾ted by triggering and the next pending message is passed. WITH the RE￾SET input all pending error messages can be cleared.", "type": "FUNCTION_BLOCK", "name": "MESSAGE_8", "input": [{"name": "IN1", "type": "BOOL", "description": "Indicates the presence of alarm 1."}, {"name": "IN2", "type": "BOOL", "description": "Indicates the presence of alarm 2."}, {"name": "IN3", "type": "BOOL", "description": "Indicates the presence of alarm 3."}, {"name": "IN4", "type": "BOOL", "description": "Indicates the presence of alarm 4."}, {"name": "IN5", "type": "BOOL", "description": "Indicates the presence of alarm 5."}, {"name": "IN6", "type": "BOOL", "description": "Indicates the presence of alarm 6."}, {"name": "IN7", "type": "BOOL", "description": "Indicates the presence of alarm 7."}, {"name": "IN8", "type": "BOOL", "description": "Indicates the presence of alarm 8."}, {"name": "S1", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 1."}, {"name": "S2", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 2."}, {"name": "S3", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 3."}, {"name": "S4", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 4."}, {"name": "S5", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 5."}, {"name": "S6", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 6."}, {"name": "S7", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 7."}, {"name": "S8", "type": "STRING[STRING_LENGTH]", "description": "Message to display for alarm 8."}], "output": [{"name": "M", "type": "STRING[STRING_LENGTH]", "description": "The output message based on the current alarm status."}], "in/out": [], "return_value": {}}
{"title": "Mid Value Calculation", "description": "MID3 returns the average value of 3 inputs, but not the ma￾thematical average.", "type": "FUNCTION", "name": "MID3", "input": [{"name": "IN1", "type": "REAL", "description": "The first input real number."}, {"name": "IN2", "type": "REAL", "description": "The second input real number."}, {"name": "IN3", "type": "REAL", "description": "The third input real number."}], "output": [{"name": "MID3", "type": "REAL", "description": "The calculated mid value, which is the second largest of the three input numbers."}], "in/out": [], "return_value": {"type": "REAL", "description": "The return value represents the mid value of the three inputs."}}
{"title": "Minimum of Three Real Numbers", "description": "MIN3 returns the minimum value of 3 inputs. Basically, the\nfunction MIN in standard functionality IEC61131-3 should have a variable\nnumber of inputs. However, since in some systems the function MIN sup￾portes only two inputs, the function MIN3 is available.", "type": "FUNCTION", "name": "MIN3", "input": [{"name": "in1", "type": "REAL", "description": "The first real number input."}, {"name": "in2", "type": "REAL", "description": "The second real number input."}, {"name": "in3", "type": "REAL", "description": "The third real number input."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The minimum value among the three input real numbers."}}
{"title": "2-to-1 Multiplexer Function", "description": "MUX_2 is a 2-bit Multiplexer. The output corresponds to D0 when A0 = 0\nand it corresponds to D1, if A0 = 1 \nLogical connection: MUX_2 = D0 & /A0 + D1 & A0", "type": "FUNCTION", "name": "MUX_2", "input": [{"name": "D0", "type": "BOOL", "description": "The first data input to the multiplexer."}, {"name": "D1", "type": "BOOL", "description": "The second data input to the multiplexer."}, {"name": "A0", "type": "BOOL", "description": "The selection input that determines which data input to output."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The output of the multiplexer, which is either D0 or D1 based on the value of A0."}}
{"title": "4-to-1 Multiplexer Function", "description": "MUX_4 is a 4-bit Multiplexer. The output corresponds to D0 when A0 = 0\nand A1 = 0 It corresponds to D3, if A0 = 1 and A1 = 1.\nLogical connection: MUX_4 = D0 & /A0 & /A1 + D1 & A0 & /A1\n+ D2 & /A0 & A1 + D3 & A0 & A1", "type": "FUNCTION", "name": "MUX_4", "input": [{"name": "D0", "type": "BOOL", "description": "First data input for the multiplexer."}, {"name": "D1", "type": "BOOL", "description": "Second data input for the multiplexer."}, {"name": "D2", "type": "BOOL", "description": "Third data input for the multiplexer."}, {"name": "D3", "type": "BOOL", "description": "Fourth data input for the multiplexer."}, {"name": "A0", "type": "BOOL", "description": "First select line for selecting the input."}, {"name": "A1", "type": "BOOL", "description": "Second select line for selecting the input."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "The output of the multiplexer, representing the selected boolean input."}}
{"title": "Multiplexer Function", "description": "MUX_R2 selects one of two input values. The function returns the value of\nIN0, if A = 0 and the value of IN1, if A = 1", "type": "FUNCTION", "name": "MUX_R2", "input": [{"name": "IN0", "type": "REAL", "description": "First input value to be selected from."}, {"name": "IN1", "type": "REAL", "description": "Second input value to be selected from."}, {"name": "A", "type": "BOOL", "description": "Boolean selector that determines which input value to return."}], "output": [], "in/out": [], "return_value": {"type": "REAL", "description": "The selected input value based on the condition provided by 'A'."}}
{"title": "Multiplexer Function", "description": "MUX_R4 selects one of 4 input values.\nLogical connection: IN0 if A0 = 0 & A1 = 0,\nIN1 if A0 = 1 & A1 = 0;\nIN2 if A0 = 0 & A1 = 1;\nIN3 if A0 = 1 & A1 = 1;", "type": "FUNCTION", "name": "MUX_R4", "input": [{"name": "IN0", "type": "REAL", "description": "The first input value."}, {"name": "IN1", "type": "REAL", "description": "The second input value."}, {"name": "IN2", "type": "REAL", "description": "The third input value."}, {"name": "IN3", "type": "REAL", "description": "The fourth input value."}, {"name": "A0", "type": "BOOL", "description": "The first boolean selection input."}, {"name": "A1", "type": "BOOL", "description": "The second boolean selection input."}], "output": [{"name": "MUX_R4", "type": "REAL", "description": "The output value selected based on the input and selection parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The selected output value based on the multiplexer logic."}}
{"title": "Offset Calculation Function", "description": "OFFSET2 adds an ofset to an input signal depending on the bi￾nary value of O1.. O4. If more ofsets are selected simultaneously, then\nthe ofset with the highest numbers added up and the others ignored. If\nO1 and O3 are simultaneously TRUE, then Ofset_3 is added and not Of￾set_1. With the input D a default value instead of the input X can be swit￾ched to the adder. The ofset and Default value be defned through the se￾tup variables. \nFor further explanation and an example, see Ofset, which has very similar\nfunctionality. Ofset2 only adds only one (the one with the highest num￾ber) ofset, while Ofset simultaneously adding all the selected.", "type": "FUNCTION", "name": "OFFSET2", "input": [{"name": "X", "type": "REAL", "description": "The primary input value that may receive an offset."}, {"name": "O1", "type": "BOOL", "description": "Flag indicating whether to add Offset_1."}, {"name": "O2", "type": "BOOL", "description": "Flag indicating whether to add Offset_2."}, {"name": "O3", "type": "BOOL", "description": "Flag indicating whether to add Offset_3."}, {"name": "O4", "type": "BOOL", "description": "Flag indicating whether to add Offset_4."}, {"name": "D", "type": "BOOL", "description": "Flag that determines if the default value should be returned instead of the adjusted X."}, {"name": "Offset_1", "type": "REAL", "description": "Value to be added if O1 is true."}, {"name": "Offset_2", "type": "REAL", "description": "Value to be added if O2 is true."}, {"name": "Offset_3", "type": "REAL", "description": "Value to be added if O3 is true."}, {"name": "Offset_4", "type": "REAL", "description": "Value to be added if O4 is true."}, {"name": "default", "type": "REAL", "description": "The default value returned if D is true."}], "output": [{"name": "OFFSET2", "type": "REAL", "description": "The calculated offset value which is either the adjusted X or the default value."}], "in/out": [], "return_value": {"type": "REAL", "description": "Returns the final computed offset value.", "fields": []}}
{"title": "Parameter Set Function Block", "description": "PARSET selects from up to 4 sets of parameters each one and returns the \nvalues at the outputs P1 to P4. The values for the parameter sets are def￾ned with the setup variables. If the TC setup variable to a value > 0 is set, \nthe outputs do not change abruptly to a new value, but run in a ramp to \nthe new value so that the fnal value is reached after time TC. This allows \nthe smooth transition between diferent sets of parameters. The choice of \nparameters is controlled by inputs A0 and A1.\nA1,A0 P1 P2 P3 P4\n00 X01 X02 X03 X04\n01 X11 X12 X13 X14\n10 X21 X22 X23 X24\n11 X31 X32 X33 X34", "type": "FUNCTION_BLOCK", "name": "PARSET", "input": [{"name": "A0", "type": "BOOL", "description": "Boolean input to select the first set of parameters."}, {"name": "A1", "type": "BOOL", "description": "Boolean input to select the second set of parameters."}, {"name": "X01", "type": "REAL", "description": "The first parameter of set 0."}, {"name": "X02", "type": "REAL", "description": "The second parameter of set 0."}, {"name": "X03", "type": "REAL", "description": "The third parameter of set 0."}, {"name": "X04", "type": "REAL", "description": "The fourth parameter of set 0."}, {"name": "X11", "type": "REAL", "description": "The first parameter of set 1."}, {"name": "X12", "type": "REAL", "description": "The second parameter of set 1."}, {"name": "X13", "type": "REAL", "description": "The third parameter of set 1."}, {"name": "X14", "type": "REAL", "description": "The fourth parameter of set 1."}, {"name": "X21", "type": "REAL", "description": "The first parameter of set 2."}, {"name": "X22", "type": "REAL", "description": "The second parameter of set 2."}, {"name": "X23", "type": "REAL", "description": "The third parameter of set 2."}, {"name": "X24", "type": "REAL", "description": "The fourth parameter of set 2."}, {"name": "X31", "type": "REAL", "description": "The first parameter of set 3."}, {"name": "X32", "type": "REAL", "description": "The second parameter of set 3."}, {"name": "X33", "type": "REAL", "description": "The third parameter of set 3."}, {"name": "X34", "type": "REAL", "description": "The fourth parameter of set 3."}, {"name": "TC", "type": "TIME", "description": "Time duration for the ramping process."}], "output": [{"name": "P1", "type": "REAL", "description": "Output parameter corresponding to the first selected set value."}, {"name": "P2", "type": "REAL", "description": "Output parameter corresponding to the second selected set value."}, {"name": "P3", "type": "REAL", "description": "Output parameter corresponding to the third selected set value."}, {"name": "P4", "type": "REAL", "description": "Output parameter corresponding to the fourth selected set value."}], "in/out": [], "return_value": {}}
{"title": "Parsing Input Data and Generating Output Parameters", "description": "PARSET2 selects from up to 4 sets of parameters one and returns the values \nat the outputs P1 to P4. The values for the parameter sets are defned \nwith the setup variables. If the TC setup variable to a value > 0 is set, the \noutputs do not change abruptly to a new value, but run in a ramp to the \nnew value so that the fnal value is reached after time TC. This allows the \nsmooth transition between diferent sets of parameters. The choice of pa￾rameters is the controlled variable X and the thresholds L1 to L3 set.\nX P1 P2 P3 P4\nX < L1 X01 X02 X03 X04\nL1 < X < L2 X11 X12 X13 X14\nL2 < X < L3 X21 X22 X23 X24\nX >= L3 X31 X32 X33 X34", "type": "FUNCTION_BLOCK", "name": "PARSET2", "input": [{"name": "X", "type": "REAL", "description": "Input variable representing a real number."}, {"name": "X01", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X02", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X03", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X04", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X11", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X12", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X13", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X14", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X21", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X22", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X23", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X24", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X31", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X32", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X33", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "X34", "type": "REAL", "description": "Input variable representing a real number for the parameter set."}, {"name": "L1", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "L2", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "L3", "type": "REAL", "description": "Threshold value for condition checking."}, {"name": "TC", "type": "TIME", "description": "Time parameter used for initialization of parameter set."}], "output": [{"name": "P1", "type": "REAL", "description": "Output variable representing the first calculated parameter."}, {"name": "P2", "type": "REAL", "description": "Output variable representing the second calculated parameter."}, {"name": "P3", "type": "REAL", "description": "Output variable representing the third calculated parameter."}, {"name": "P4", "type": "REAL", "description": "Output variable representing the fourth calculated parameter."}], "in/out": [], "return_value": null}
{"title": "Date Period Check", "description": "PERIOD2 check if the DX date within a specifed period of 4 periods. The\nperiods are in an array [0..3,0..1] of DATE specifed. In contrast to the\nfunction PERIOD of PERIOD2 reviewes also the year. The periods are speci￾fed in ARRAY DP, where DP[N,0] is the beginning date of the period N,\nDP[N,1] N is the end date of period. \nThe function test using the formula: DX >= DP [N,0] AND DX <= DP [N,1].\nIn each case it is considered N = 0 to 3. If DX is one of the 4 periods, the\noutput is set to TRUE.\nThe individual periods need not be present sorted. PERIOD2 can be used\nto defne holiday or vacation time. PERIOD2 reviews not repeated periods,\nbut tests yearly repeated periods.", "type": "FUNCTION", "name": "PERIOD2", "input": [{"name": "DP", "type": "ARRAY[0..3, 0..1] OF DATE", "description": "An array containing pairs of dates that define specific periods."}, {"name": "DX", "type": "DATE", "description": "A single date to check against the periods defined in the DP array."}], "output": [], "in/out": [], "return_value": {"type": "BOOL", "description": "A boolean value indicating whether the date DX is within any of the defined date periods in DP.", "fields": []}}
{"title": "Absolute Value Function for REAL2", "description": "R2_ABS returns the absolute value of x in double precision.", "type": "FUNCTION", "name": "R2_ABS", "input": [{"name": "X", "type": "REAL2", "description": "Input parameter of type REAL2 containing the values to compute the absolute value from."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The output result of type REAL2 that holds the absolute values of the input's components.", "fields": [{"name": "RX", "type": "REAL", "description": "The absolute value of the RX component of the input REAL2."}, {"name": "R1", "type": "REAL", "description": "The absolute value of the R1 component of the input REAL2."}]}}
{"title": "Real2 Addition Function", "description": "R2_ADD adds to a double-precision value X is a single-precision value Y.\nThe result has again double precision.", "type": "FUNCTION", "name": "R2_ADD", "input": [{"name": "X", "type": "Real2", "description": "A derived type that contains two real numbers, RX and R1."}, {"name": "Y", "type": "REAL", "description": "A real number that will be added to the components of the Real2 input."}], "output": [{"name": "R2_ADD", "type": "REAL2", "description": "The output structure of type Real2 containing the results of the addition operations."}], "in/out": [], "return_value": {"type": "REAL2", "description": "The resulting Real2 structure after performing the addition.", "fields": [{"name": "RX", "type": "REAL", "description": "The result of adding Y, X.R1, and X.RX."}, {"name": "R1", "type": "REAL", "description": "The result of computing temp minus RX, plus Y, and X.R1."}]}}
{"title": "Addition of Two Real2 Values", "description": "R2_ADD2 adds to a double precision value X to another double-precision\nvalue Y. The result has again double precision.", "type": "FUNCTION", "name": "R2_ADD2", "input": [{"name": "X", "type": "REAL2", "description": "The first 'REAL2' structure that contains the first set of values to be added."}, {"name": "Y", "type": "REAL2", "description": "The second 'REAL2' structure that contains the second set of values to be added."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The 'REAL2' structure that contains the result of the addition of 'X' and 'Y'.", "fields": [{"name": "R1", "type": "REAL", "description": "The first real part of the 'REAL2' structure which is the sum of 'X.R1' and 'Y.R1'."}, {"name": "RX", "type": "REAL", "description": "The second real part of the 'REAL2' structure which is the sum of 'X.RX' and 'Y.RX'."}]}}
{"title": "R2_MUL Function", "description": "R2_MUL multiplies a double precision value X with a single-precision Y. The\nresult has again double precision.", "type": "FUNCTION", "name": "R2_MUL", "input": [{"name": "X", "type": "REAL2", "description": "Input structure containing two REAL components RX and R1 to be multiplied."}, {"name": "Y", "type": "REAL", "description": "A REAL value to multiply with the components of the structure X."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "The new REAL2 structure resulting from multiplying the components of X by Y.", "fields": [{"name": "RX", "type": "REAL", "description": "The result of multiplying the RX component of X by Y."}, {"name": "R1", "type": "REAL", "description": "The result of multiplying the R1 component of X by Y."}]}}
{"title": "Set R2 Parameters", "description": "R2_SET sets a double precision value to the input value x with single preci￾sion.\n 9. Arithmetic Functions", "type": "FUNCTION", "name": "R2_SET", "input": [{"name": "X", "type": "REAL", "description": "Input parameter representing a real number value to set RX."}], "output": [], "in/out": [], "return_value": {"type": "REAL2", "description": "Returns the modified R2 entity which includes RX set to the input value and R1 set to 0.0."}}
{"title": "Random Number Generation Function", "description": "RDM2 generates an integer random value in the range from LOW to HIGH,\nwhere LOW and HIGH are being included in the range of values. If the\nfunction is used only once per cycle, the input value LAST can remain at 0.\nThe function RDM2 used the PLC internal time base to generate the ran￾dom number. Since RDM2 uses LAST, an integer which represents the fnal\nresult between LOW and HIGH, it can lead to a situation, in which the re￾sult RDM2 always produces the same result, as long as PLC Timer does not\nchange in a cycle. This most often happens, if the result is identical to the\nstart value. Since then, the same start value will be reused within the\nsame cycle again, and the result is the same. This occurs more often, de￾pending on, if the specifc area of LOW and HIGH is smaller for the result.\nOne can avoid this efect easily by using as a starting value of loop coun￾ter which defnitely uses each time a new value, or better yet add a loop\ncounter with the fnal result used as initial value.", "type": "FUNCTION", "name": "RDM2", "input": [{"name": "last", "type": "INT", "description": "An integer input used to generate the random number."}, {"name": "low", "type": "INT", "description": "The lower bound of the range for the random number generation."}, {"name": "high", "type": "INT", "description": "The upper bound of the range for the random number generation."}], "output": [], "in/out": [], "return_value": {"type": "INT", "description": "The generated random integer within the specified range from 'low' to 'high'."}}
{"title": "Real-Time Clock Function Block (RTC_2)", "description": "RTC_2 is a clock component of the UTC and local time at the outputs of\nLDT and UDT provides. The time is automatically every time you SET =\nTRUE to the value of SDT and SMS. If SET = FALSE the time runs on and on\nand provides at the output UDT the current date and time for Universal\nTime (UTC), and at the output LDT the current local time. The output LDT\ncorresponds UDT + OFS + summer time when it is current. Summer time\nis, if DEN = TRUE, automatically switched back on the last Sunday of\nMarch at 01:00 UTC (02:00 CET) to summer time (03:00 GMT) and on the\nlast Sunday of October at 01:00 UTC (03:00 BST) on 02:00 CET. The output\nof DSO is TRUE if daylight saving time is. If DEN is FALSE, no summer time\nchange is made. The accuracy of the clock depends on the millisecond Ti￾mer of the PLC. The input SFO specifes the time ofset of LDT to UDT, for\nMEZ this value is 1 hour. SFO is specifed as INT in minutes so that a nega￾tive ofset is available. For CET (Central European Time, an ofset is set to\n60 minutes.) RTC_2 takes over the Power Up automatically applied to the\nSDT start time and date. The output of XMS passes the milliseconds and\nevery second counts from 0 - 999 \nThe following example when starting the system time is taken.", "type": "FUNCTION_BLOCK", "name": "RTC_2", "input": [{"name": "SET", "type": "BOOL", "description": "Boolean value to set the RTC."}, {"name": "SDT", "type": "DT", "description": "Start date and time for the RTC."}, {"name": "SMS", "type": "INT", "description": "Milliseconds to set for the RTC."}, {"name": "DEN", "type": "BOOL", "description": "Boolean value indicating if daylight savings time adjustment is needed."}, {"name": "OFS", "type": "INT", "description": "Offset in minutes to adjust the local time."}], "output": [{"name": "UDT", "type": "DT", "description": "Updated date and time from the RTC."}, {"name": "LOCAL_DT", "type": "DT", "description": "Calculated local date and time after applying offset."}, {"name": "DSO", "type": "BOOL", "description": "Boolean value indicating if daylight savings time is in effect."}, {"name": "XMS", "type": "INT", "description": "Milliseconds value derived from the RTC."}], "in/out": [], "return_value": {}}
{"title": "Scale Function for B2 Inputs", "description": "SCALE_B2 calculates from the input value IN and the setup values IN_MIN\nand IN_MAX an internal value, then add all the internal values, multiplies\nthe sum by K and add the ofset O. An input value IN1 = 0 means IN1_MIN\nis taken into account, IN1 = 255 means IN1_MAX is considered. K is not\nconnected then the frst multiplier\nOut = (in1 * (IN1_MAX – IN1_MIN) / 255 + IN1_MIN + in2 * \n(IN2_MAX – IN2_MIN) / 255 + IN2_MIN) * K + O\nSCALE_B2 can be used, for example, to calculate total air quantities in\nventilation systems. Also, wherever there are controlled mixers used and\nthe resulting total amount has to be calculated.", "type": "FUNCTION", "name": "SCALE_B2", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the combined inputs."}, {"name": "O", "type": "REAL", "description": "Offset added to the result after scaling."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input used in scaling."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input used in scaling. Defaults to 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input used in scaling."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input used in scaling. Defaults to 1000.0."}], "output": [{"name": "SCALE_B2", "type": "REAL", "description": "The scaled output value calculated from the input parameters."}], "in/out": [], "return_value": {"type": "REAL", "description": "The result of the scaling operation applied to the inputs.", "fields": []}}
{"title": "Scale Function Implementation", "description": "SCALE_B4 calculates from the input values IN and the setup values IN_MIN\nand IN_MAX internal values, then add all the internal values, multiplies the\nsum by K and add the ofset O. An input value IN = 0 means IN_MIN is in￾cluded, IN = 255 means IN_MAX is not considered. If K is not connected,\nthen the multiplier is 1\nOUT = (in1 * (IN1_MAX – IN1_MIN) / 255 + IN1_MIN\n+ in2 * (IN2_MAX – IN2_MIN) / 255 + IN2_MIN\n+ in3 * (IN3_MAX – IN3_MIN) / 255 + IN3_MIN\n+ in4 * (IN4_MAX – IN4_MIN) / 255 + IN4_MIN) * K + O\nSCALE_B4 can ie be used for calculation total air quantities in ventilation \nsystems, or wherever controlled mixers are used and the resulting total \nneeds to be calculated.. More detailed explanations you can fnd at \nSCALE_B2.", "type": "FUNCTION", "name": "SCALE_B4", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "in3", "type": "BYTE", "description": "Third input value to be scaled."}, {"name": "in4", "type": "BYTE", "description": "Fourth input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor to adjust the output."}, {"name": "O", "type": "REAL", "description": "Offset value added to the final result."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input. Defaults to 1000.0."}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input. Defaults to 1000.0."}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input. Defaults to 1000.0."}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input. Defaults to 1000.0."}], "output": [{"name": "SCALE_B4", "type": "REAL", "description": "The scaled output value based on the provided inputs, minimums, maximums, scaling factor, and offset."}], "in/out": [], "return_value": {"type": "REAL", "description": "The final scaled and offset output value.", "fields": []}}
{"title": "Scale B8 Function", "description": "SCALE_B8 calculates from the input values IN and the setup values IN_MIN\nand IN_MAX internal values, then add all the internal values, multiplies the\nsum by K and add the ofset O. An input value IN = 0 means IN_MIN is in￾cluded, IN = 255 means IN_MAX is not considered. K is not connected then\nthe frst multiplier\nOUT = (in1 * (IN1_MAX – IN1_MIN) / 255 + IN1_MIN\n+ in2 * (IN2_MAX – IN2_MIN) / 255 + IN2_MIN\n+ in3 * (IN3_MAX – IN3_MIN) / 255 + IN3_MIN\n+ in4 * (IN4_MAX – IN4_MIN) / 255 + IN4_MIN\n+ in5 * (IN5_MAX – IN5_MIN) / 255 + IN5_MIN\n+ in6 * (IN6_MAX – IN6_MIN) / 255 + IN6_MIN\n+ in7 * (IN7_MAX – IN7_MIN) / 255 + IN7_MIN\n+ in8 * (IN8_MAX – IN8_MIN) / 255 + IN8_MIN) * K + O\nSCALE_B8 can be used, for example,to calculate total air quantities in ven￾tilation systems, or wherever controlled mixers are used and the resulting\ntotal needs to be calculated . More detailed explanations you can fnd at\nSCALE_B2.", "type": "FUNCTION", "name": "SCALE_B8", "input": [{"name": "in1", "type": "BYTE", "description": "First input value to be scaled."}, {"name": "in2", "type": "BYTE", "description": "Second input value to be scaled."}, {"name": "in3", "type": "BYTE", "description": "Third input value to be scaled."}, {"name": "in4", "type": "BYTE", "description": "Fourth input value to be scaled."}, {"name": "in5", "type": "BYTE", "description": "Fifth input value to be scaled."}, {"name": "in6", "type": "BYTE", "description": "Sixth input value to be scaled."}, {"name": "in7", "type": "BYTE", "description": "Seventh input value to be scaled."}, {"name": "in8", "type": "BYTE", "description": "Eighth input value to be scaled."}, {"name": "K", "type": "REAL", "description": "Scaling factor applied to the normalized sum."}, {"name": "O", "type": "REAL", "description": "Offset added to the scaled result."}, {"name": "in1_min", "type": "REAL", "description": "Minimum value for the first input."}, {"name": "in1_max", "type": "REAL", "description": "Maximum value for the first input. Defaults to 1000.0.", "fields": []}, {"name": "in2_min", "type": "REAL", "description": "Minimum value for the second input."}, {"name": "in2_max", "type": "REAL", "description": "Maximum value for the second input. Defaults to 1000.0.", "fields": []}, {"name": "in3_min", "type": "REAL", "description": "Minimum value for the third input."}, {"name": "in3_max", "type": "REAL", "description": "Maximum value for the third input. Defaults to 1000.0.", "fields": []}, {"name": "in4_min", "type": "REAL", "description": "Minimum value for the fourth input."}, {"name": "in4_max", "type": "REAL", "description": "Maximum value for the fourth input. Defaults to 1000.0.", "fields": []}, {"name": "in5_min", "type": "REAL", "description": "Minimum value for the fifth input."}, {"name": "in5_max", "type": "REAL", "description": "Maximum value for the fifth input. Defaults to 1000.0.", "fields": []}, {"name": "in6_min", "type": "REAL", "description": "Minimum value for the sixth input."}, {"name": "in6_max", "type": "REAL", "description": "Maximum value for the sixth input. Defaults to 1000.0.", "fields": []}, {"name": "in7_min", "type": "REAL", "description": "Minimum value for the seventh input."}, {"name": "in7_max", "type": "REAL", "description": "Maximum value for the seventh input. Defaults to 1000.0.", "fields": []}, {"name": "in8_min", "type": "REAL", "description": "Minimum value for the eighth input."}, {"name": "in8_max", "type": "REAL", "description": "Maximum value for the eighth input. Defaults to 1000.0.", "fields": []}], "output": [{"name": "SCALE_B8", "type": "REAL", "description": "The scaled output value resulting from the scaling operation."}], "in/out": [], "return_value": {"type": "REAL", "description": "The resulting scaled value after applying the function's calculations."}}
{"title": "Scheduler Function Block", "description": "SCHEDULER_2 activates depending on the setup variables C? And O? The\noutputs Q?. SCHEDULER_2 can an output Q? All C? cycles enable, to\nlaunch the program items with diferent cycle times. An optional setup pa￾rameters O? is used to a time ofset of O? to defne cycles for the corre￾sponding output to a simultaneous turn of the outputs in the frst cycle to\nprevent.", "type": "FUNCTION_BLOCK", "name": "SCHEDULER_2", "input": [{"name": "E0", "type": "BOOL", "description": "Event input signal 0 that affects output Q0."}, {"name": "E1", "type": "BOOL", "description": "Event input signal 1 that affects output Q1."}, {"name": "E2", "type": "BOOL", "description": "Event input signal 2 that affects output Q2."}, {"name": "E3", "type": "BOOL", "description": "Event input signal 3 that affects output Q3."}, {"name": "C0", "type": "UINT", "description": "Cycle count threshold for input E0."}, {"name": "C1", "type": "UINT", "description": "Cycle count threshold for input E1."}, {"name": "C2", "type": "UINT", "description": "Cycle count threshold for input E2."}, {"name": "C3", "type": "UINT", "description": "Cycle count threshold for input E3."}, {"name": "O0", "type": "UINT", "description": "Offset value for input signal E0."}, {"name": "O1", "type": "UINT", "description": "Offset value for input signal E1."}, {"name": "O2", "type": "UINT", "description": "Offset value for input signal E2."}, {"name": "O3", "type": "UINT", "description": "Offset value for input signal E3."}], "output": [{"name": "Q0", "type": "BOOL", "description": "Output signal 0 indicating if the condition for E0 is met."}, {"name": "Q1", "type": "BOOL", "description": "Output signal 1 indicating if the condition for E1 is met."}, {"name": "Q2", "type": "BOOL", "description": "Output signal 2 indicating if the condition for E2 is met."}, {"name": "Q3", "type": "BOOL", "description": "Output signal 3 indicating if the condition for E3 is met."}], "in/out": [], "return_value": null}
{"title": "TUNE2 Function Block", "description": "TUNE2 sets an output signal Y using up and down buttons. By correspon￾ding setup variables, the step size for small and large steps are program￾med individually. An upper and lower limit for the output Y can be speci￾fed by LIMIT_L and LIMIT_H . with the SU and SD keys small steps can be\ngenerated up or down. The buttons FU and FD respectively produce large\nsteps at the output Y. If a key is held down longer than TR, then the output\nY continuously adjusted up or down. The speed which with the output here\nis adjusted, is for the two pairs of keys S1 and S2 set individually. S1 and\nS2 indicate the units per second. S1 is the speed of the button SU and SD,\nand S2 according to FU and FD. With the inputs of the RST and SET the\nOutput can be set at any time, on a value predetermined by RST_VAL\nSET_VAL.\n 25. BUFFER Management", "type": "FUNCTION_BLOCK", "name": "TUNE2", "input": [{"name": "SET", "type": "BOOL", "description": "Indicator to set the output to SET_val."}, {"name": "SU", "type": "BOOL", "description": "Signal to initiate a slow step up operation."}, {"name": "SD", "type": "BOOL", "description": "Signal to initiate a slow step down operation."}, {"name": "FU", "type": "BOOL", "description": "Signal to initiate a fast step up operation."}, {"name": "FD", "type": "BOOL", "description": "Signal to initiate a fast step down operation."}, {"name": "RST", "type": "BOOL", "description": "Indicator to reset the output to RST_val."}, {"name": "SS", "type": "REAL", "description": "The amount to be added or subtracted during each slow step operation."}, {"name": "FS", "type": "REAL", "description": "The amount to be added or subtracted during each fast step operation."}, {"name": "Limit_L", "type": "REAL", "description": "The lower limit for the output."}, {"name": "LIMIT_H", "type": "REAL", "description": "The upper limit for the output."}, {"name": "RST_val", "type": "REAL", "description": "The value to assign to Y when the reset is triggered."}, {"name": "SET_val", "type": "REAL", "description": "The value to assign to Y when the set operation is triggered."}, {"name": "TR", "type": "TIME", "description": "The time duration for the ramp operation."}, {"name": "S1", "type": "REAL", "description": "The speed factor used for slow movements."}, {"name": "S2", "type": "REAL", "description": "The speed factor used for fast movements."}], "output": [{"name": "Y", "type": "REAL", "description": "The output value after processing commands."}], "in/out": [], "return_value": {}}
